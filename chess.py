import pygame
from pygame.locals import *
import time

pygame.init()

print("*** Chess Engine ***")
print("First Turn: Black")


class GameConstants:
    def __init__(self):
        self.white = (255, 255, 255)
        self.black = (0, 0, 0)
        self.red = (255, 0, 0)
        self.blue = (0, 0, 255)
        self.green = (0, 255, 0)
        self.grey = (192, 192, 192)
        self.silver = (188, 198, 204)
        self.charcoalBlue = (54, 69, 79)

        self.fps = 60
        self.clock = pygame.time.Clock()
        self.windowWidth = 400
        self.windowHeight = 400
        self.gameTitle = "Chess Game"
        self.window = pygame.display.set_mode((self.windowWidth, self.windowHeight))
        pygame.display.set_caption(self.gameTitle)
        pygame.display.set_icon(pygame.image.load("C:/Users/karan-PC/PycharmProjects/chessEngine/chessAssets/chess.png"))

        self.boxSize = 50
        self.imageWidth = 50
        self.imageHeight = 50

        self.assets = {
            'pw': pygame.transform.scale(pygame.image.load("C:/Users/karan-PC/PycharmProjects/chessEngine/chessAssets/pawn-w.png"), (self.imageWidth, self.imageHeight)),
            'pb': pygame.transform.scale(pygame.image.load("C:/Users/karan-PC/PycharmProjects/chessEngine/chessAssets/pawn-b.png"), (self.imageWidth, self.imageHeight)),
            'rw': pygame.transform.scale(pygame.image.load("C:/Users/karan-PC/PycharmProjects/chessEngine/chessAssets/rook-w.png"), (self.imageWidth, self.imageHeight)),
            'rb': pygame.transform.scale(pygame.image.load("C:/Users/karan-PC/PycharmProjects/chessEngine/chessAssets/rook-b.png"), (self.imageWidth, self.imageHeight)),
            'kw': pygame.transform.scale(pygame.image.load("C:/Users/karan-PC/PycharmProjects/chessEngine/chessAssets/knight-w.png"), (self.imageWidth, self.imageHeight)),
            'kb': pygame.transform.scale(pygame.image.load("C:/Users/karan-PC/PycharmProjects/chessEngine/chessAssets/knight-b.png"), (self.imageWidth, self.imageHeight)),
            'bw': pygame.transform.scale(pygame.image.load("C:/Users/karan-PC/PycharmProjects/chessEngine/chessAssets/bishop-w.png"), (self.imageWidth, self.imageHeight)),
            'bb': pygame.transform.scale(pygame.image.load("C:/Users/karan-PC/PycharmProjects/chessEngine/chessAssets/bishop-b.png"), (self.imageWidth, self.imageHeight)),
            'Kw': pygame.transform.scale(pygame.image.load("C:/Users/karan-PC/PycharmProjects/chessEngine/chessAssets/king-w.png"), (self.imageWidth, self.imageHeight)),
            'Kb': pygame.transform.scale(pygame.image.load("C:/Users/karan-PC/PycharmProjects/chessEngine/chessAssets/king-b.png"), (self.imageWidth, self.imageHeight)),
            'Qw': pygame.transform.scale(pygame.image.load("C:/Users/karan-PC/PycharmProjects/chessEngine/chessAssets/queen-w.png"), (self.imageWidth, self.imageHeight)),
            'Qb': pygame.transform.scale(pygame.image.load("C:/Users/karan-PC/PycharmProjects/chessEngine/chessAssets/queen-b.png"), (self.imageWidth, self.imageHeight)),
        }


class Positions(GameConstants):
    def __init__(self):
        super().__init__()

        # Defining each box positions on board
        self.box1 = pygame.Rect(0 * self.boxSize, 0 * self.boxSize, self.boxSize, self.boxSize)
        self.box2 = pygame.Rect(1 * self.boxSize, 0 * self.boxSize, self.boxSize, self.boxSize)
        self.box3 = pygame.Rect(2 * self.boxSize, 0 * self.boxSize, self.boxSize, self.boxSize)
        self.box4 = pygame.Rect(3 * self.boxSize, 0 * self.boxSize, self.boxSize, self.boxSize)
        self.box5 = pygame.Rect(4 * self.boxSize, 0 * self.boxSize, self.boxSize, self.boxSize)
        self.box6 = pygame.Rect(5 * self.boxSize, 0 * self.boxSize, self.boxSize, self.boxSize)
        self.box7 = pygame.Rect(6 * self.boxSize, 0 * self.boxSize, self.boxSize, self.boxSize)
        self.box8 = pygame.Rect(7 * self.boxSize, 0 * self.boxSize, self.boxSize, self.boxSize)

        self.box9 = pygame.Rect(0 * self.boxSize, 1 * self.boxSize, self.boxSize, self.boxSize)
        self.box10 = pygame.Rect(1 * self.boxSize, 1 * self.boxSize, self.boxSize, self.boxSize)
        self.box11 = pygame.Rect(2 * self.boxSize, 1 * self.boxSize, self.boxSize, self.boxSize)
        self.box12 = pygame.Rect(3 * self.boxSize, 1 * self.boxSize, self.boxSize, self.boxSize)
        self.box13 = pygame.Rect(4 * self.boxSize, 1 * self.boxSize, self.boxSize, self.boxSize)
        self.box14 = pygame.Rect(5 * self.boxSize, 1 * self.boxSize, self.boxSize, self.boxSize)
        self.box15 = pygame.Rect(6 * self.boxSize, 1 * self.boxSize, self.boxSize, self.boxSize)
        self.box16 = pygame.Rect(7 * self.boxSize, 1 * self.boxSize, self.boxSize, self.boxSize)

        self.box17 = pygame.Rect(0 * self.boxSize, 2 * self.boxSize, self.boxSize, self.boxSize)
        self.box18 = pygame.Rect(1 * self.boxSize, 2 * self.boxSize, self.boxSize, self.boxSize)
        self.box19 = pygame.Rect(2 * self.boxSize, 2 * self.boxSize, self.boxSize, self.boxSize)
        self.box20 = pygame.Rect(3 * self.boxSize, 2 * self.boxSize, self.boxSize, self.boxSize)
        self.box21 = pygame.Rect(4 * self.boxSize, 2 * self.boxSize, self.boxSize, self.boxSize)
        self.box22 = pygame.Rect(5 * self.boxSize, 2 * self.boxSize, self.boxSize, self.boxSize)
        self.box23 = pygame.Rect(6 * self.boxSize, 2 * self.boxSize, self.boxSize, self.boxSize)
        self.box24 = pygame.Rect(7 * self.boxSize, 2 * self.boxSize, self.boxSize, self.boxSize)

        self.box25 = pygame.Rect(0 * self.boxSize, 3 * self.boxSize, self.boxSize, self.boxSize)
        self.box26 = pygame.Rect(1 * self.boxSize, 3 * self.boxSize, self.boxSize, self.boxSize)
        self.box27 = pygame.Rect(2 * self.boxSize, 3 * self.boxSize, self.boxSize, self.boxSize)
        self.box28 = pygame.Rect(3 * self.boxSize, 3 * self.boxSize, self.boxSize, self.boxSize)
        self.box29 = pygame.Rect(4 * self.boxSize, 3 * self.boxSize, self.boxSize, self.boxSize)
        self.box30 = pygame.Rect(5 * self.boxSize, 3 * self.boxSize, self.boxSize, self.boxSize)
        self.box31 = pygame.Rect(6 * self.boxSize, 3 * self.boxSize, self.boxSize, self.boxSize)
        self.box32 = pygame.Rect(7 * self.boxSize, 3 * self.boxSize, self.boxSize, self.boxSize)

        self.box33 = pygame.Rect(0 * self.boxSize, 4 * self.boxSize, self.boxSize, self.boxSize)
        self.box34 = pygame.Rect(1 * self.boxSize, 4 * self.boxSize, self.boxSize, self.boxSize)
        self.box35 = pygame.Rect(2 * self.boxSize, 4 * self.boxSize, self.boxSize, self.boxSize)
        self.box36 = pygame.Rect(3 * self.boxSize, 4 * self.boxSize, self.boxSize, self.boxSize)
        self.box37 = pygame.Rect(4 * self.boxSize, 4 * self.boxSize, self.boxSize, self.boxSize)
        self.box38 = pygame.Rect(5 * self.boxSize, 4 * self.boxSize, self.boxSize, self.boxSize)
        self.box39 = pygame.Rect(6 * self.boxSize, 4 * self.boxSize, self.boxSize, self.boxSize)
        self.box40 = pygame.Rect(7 * self.boxSize, 4 * self.boxSize, self.boxSize, self.boxSize)

        self.box41 = pygame.Rect(0 * self.boxSize, 5 * self.boxSize, self.boxSize, self.boxSize)
        self.box42 = pygame.Rect(1 * self.boxSize, 5 * self.boxSize, self.boxSize, self.boxSize)
        self.box43 = pygame.Rect(2 * self.boxSize, 5 * self.boxSize, self.boxSize, self.boxSize)
        self.box44 = pygame.Rect(3 * self.boxSize, 5 * self.boxSize, self.boxSize, self.boxSize)
        self.box45 = pygame.Rect(4 * self.boxSize, 5 * self.boxSize, self.boxSize, self.boxSize)
        self.box46 = pygame.Rect(5 * self.boxSize, 5 * self.boxSize, self.boxSize, self.boxSize)
        self.box47 = pygame.Rect(6 * self.boxSize, 5 * self.boxSize, self.boxSize, self.boxSize)
        self.box48 = pygame.Rect(7 * self.boxSize, 5 * self.boxSize, self.boxSize, self.boxSize)

        self.box49 = pygame.Rect(0 * self.boxSize, 6 * self.boxSize, self.boxSize, self.boxSize)
        self.box50 = pygame.Rect(1 * self.boxSize, 6 * self.boxSize, self.boxSize, self.boxSize)
        self.box51 = pygame.Rect(2 * self.boxSize, 6 * self.boxSize, self.boxSize, self.boxSize)
        self.box52 = pygame.Rect(3 * self.boxSize, 6 * self.boxSize, self.boxSize, self.boxSize)
        self.box53 = pygame.Rect(4 * self.boxSize, 6 * self.boxSize, self.boxSize, self.boxSize)
        self.box54 = pygame.Rect(5 * self.boxSize, 6 * self.boxSize, self.boxSize, self.boxSize)
        self.box55 = pygame.Rect(6 * self.boxSize, 6 * self.boxSize, self.boxSize, self.boxSize)
        self.box56 = pygame.Rect(7 * self.boxSize, 6 * self.boxSize, self.boxSize, self.boxSize)

        self.box57 = pygame.Rect(0 * self.boxSize, 7 * self.boxSize, self.boxSize, self.boxSize)
        self.box58 = pygame.Rect(1 * self.boxSize, 7 * self.boxSize, self.boxSize, self.boxSize)
        self.box59 = pygame.Rect(2 * self.boxSize, 7 * self.boxSize, self.boxSize, self.boxSize)
        self.box60 = pygame.Rect(3 * self.boxSize, 7 * self.boxSize, self.boxSize, self.boxSize)
        self.box61 = pygame.Rect(4 * self.boxSize, 7 * self.boxSize, self.boxSize, self.boxSize)
        self.box62 = pygame.Rect(5 * self.boxSize, 7 * self.boxSize, self.boxSize, self.boxSize)
        self.box63 = pygame.Rect(6 * self.boxSize, 7 * self.boxSize, self.boxSize, self.boxSize)
        self.box64 = pygame.Rect(7 * self.boxSize, 7 * self.boxSize, self.boxSize, self.boxSize)

        # dead pieces
        self.whiteCutPiece_1 = pygame.Rect(8 * self.boxSize, 0 * self.boxSize, self.boxSize, self.boxSize)
        self.whiteCutPiece_2 = pygame.Rect(8 * self.boxSize, 1 * self.boxSize, self.boxSize, self.boxSize)
        self.whiteCutPiece_3 = pygame.Rect(8 * self.boxSize, 2 * self.boxSize, self.boxSize, self.boxSize)
        self.whiteCutPiece_4 = pygame.Rect(8 * self.boxSize, 3 * self.boxSize, self.boxSize, self.boxSize)
        self.whiteCutPiece_5 = pygame.Rect(8 * self.boxSize, 4 * self.boxSize, self.boxSize, self.boxSize)
        self.whiteCutPiece_6 = pygame.Rect(8 * self.boxSize, 5 * self.boxSize, self.boxSize, self.boxSize)
        self.whiteCutPiece_7 = pygame.Rect(8 * self.boxSize, 6 * self.boxSize, self.boxSize, self.boxSize)
        self.whiteCutPiece_8 = pygame.Rect(8 * self.boxSize, 7 * self.boxSize, self.boxSize, self.boxSize)
        self.whiteCutPiece_9 = pygame.Rect(9 * self.boxSize, 0 * self.boxSize, self.boxSize, self.boxSize)
        self.whiteCutPiece_10 = pygame.Rect(9 * self.boxSize, 1 * self.boxSize, self.boxSize, self.boxSize)
        self.whiteCutPiece_11 = pygame.Rect(9 * self.boxSize, 2 * self.boxSize, self.boxSize, self.boxSize)
        self.whiteCutPiece_12 = pygame.Rect(9 * self.boxSize, 3 * self.boxSize, self.boxSize, self.boxSize)
        self.whiteCutPiece_13 = pygame.Rect(9 * self.boxSize, 4 * self.boxSize, self.boxSize, self.boxSize)
        self.whiteCutPiece_14 = pygame.Rect(9 * self.boxSize, 5 * self.boxSize, self.boxSize, self.boxSize)
        self.whiteCutPiece_15 = pygame.Rect(9 * self.boxSize, 6 * self.boxSize, self.boxSize, self.boxSize)
        self.whiteCutPiece_16 = pygame.Rect(9 * self.boxSize, 7 * self.boxSize, self.boxSize, self.boxSize)

        self.blackCutPiece_1 = pygame.Rect(0 * self.boxSize, 8 * self.boxSize, self.boxSize, self.boxSize)
        self.blackCutPiece_2 = pygame.Rect(1 * self.boxSize, 8 * self.boxSize, self.boxSize, self.boxSize)
        self.blackCutPiece_3 = pygame.Rect(2 * self.boxSize, 8 * self.boxSize, self.boxSize, self.boxSize)
        self.blackCutPiece_4 = pygame.Rect(3 * self.boxSize, 8 * self.boxSize, self.boxSize, self.boxSize)
        self.blackCutPiece_5 = pygame.Rect(4 * self.boxSize, 8 * self.boxSize, self.boxSize, self.boxSize)
        self.blackCutPiece_6 = pygame.Rect(5 * self.boxSize, 8 * self.boxSize, self.boxSize, self.boxSize)
        self.blackCutPiece_7 = pygame.Rect(6 * self.boxSize, 8 * self.boxSize, self.boxSize, self.boxSize)
        self.blackCutPiece_8 = pygame.Rect(7 * self.boxSize, 8 * self.boxSize, self.boxSize, self.boxSize)
        self.blackCutPiece_9 = pygame.Rect(0 * self.boxSize, 9 * self.boxSize, self.boxSize, self.boxSize)
        self.blackCutPiece_10 = pygame.Rect(1 * self.boxSize, 9 * self.boxSize, self.boxSize, self.boxSize)
        self.blackCutPiece_11 = pygame.Rect(2 * self.boxSize, 9 * self.boxSize, self.boxSize, self.boxSize)
        self.blackCutPiece_12 = pygame.Rect(3 * self.boxSize, 9 * self.boxSize, self.boxSize, self.boxSize)
        self.blackCutPiece_13 = pygame.Rect(4 * self.boxSize, 9 * self.boxSize, self.boxSize, self.boxSize)
        self.blackCutPiece_14 = pygame.Rect(5 * self.boxSize, 9 * self.boxSize, self.boxSize, self.boxSize)
        self.blackCutPiece_15 = pygame.Rect(6 * self.boxSize, 9 * self.boxSize, self.boxSize, self.boxSize)
        self.blackCutPiece_16 = pygame.Rect(7 * self.boxSize, 9 * self.boxSize, self.boxSize, self.boxSize)

        # making the board boxes
        self.boxLst = [self.box1, self.box2, self.box3, self.box4, self.box5, self.box6, self.box7, self.box8,
                       self.box9, self.box10, self.box11, self.box12, self.box13, self.box14, self.box15, self.box16,
                       self.box17, self.box18, self.box19, self.box20, self.box21, self.box22, self.box23, self.box24,
                       self.box25, self.box26, self.box27, self.box28, self.box29, self.box30, self.box31, self.box32,
                       self.box33, self.box34, self.box35, self.box36, self.box37, self.box38, self.box39, self.box40,
                       self.box41, self.box42, self.box43, self.box44, self.box45, self.box46, self.box47, self.box48,
                       self.box49, self.box50, self.box51, self.box52, self.box53, self.box54, self.box55, self.box56,
                       self.box57, self.box58, self.box59, self.box60, self.box61, self.box62, self.box63, self.box64]

        # adding colors to the board boxes
        self.whiteBoxLst = [self.box1, self.box3, self.box5, self.box7,
                            self.box10, self.box12, self.box14, self.box16,
                            self.box17, self.box19, self.box21, self.box23,
                            self.box26, self.box28, self.box30, self.box32,
                            self.box33, self.box35, self.box37, self.box39,
                            self.box42, self.box44, self.box46, self.box48,
                            self.box49, self.box51, self.box53, self.box55,
                            self.box58, self.box60, self.box62, self.box64]
        self.greyBoxLst = [self.box2, self.box4, self.box6, self.box8,
                           self.box9, self.box11, self.box13, self.box15,
                           self.box18, self.box20, self.box22, self.box24,
                           self.box25, self.box27, self.box29, self.box31,
                           self.box34, self.box36, self.box38, self.box40,
                           self.box41, self.box43, self.box45, self.box47,
                           self.box50, self.box52, self.box54, self.box56,
                           self.box57, self.box59, self.box61, self.box63]

        # defining piece position
        # black piece position
        self.rb1 = pygame.Rect(0 * self.boxSize, 0 * self.boxSize, self.imageWidth, self.imageHeight)
        self.pb1 = pygame.Rect(0 * self.boxSize, 1 * self.boxSize, self.imageWidth, self.imageHeight)
        self.kb1 = pygame.Rect(1 * self.boxSize, 0 * self.boxSize, self.imageWidth, self.imageHeight)
        self.pb2 = pygame.Rect(1 * self.boxSize, 1 * self.boxSize, self.imageWidth, self.imageHeight)
        self.bb1 = pygame.Rect(2 * self.boxSize, 0 * self.boxSize, self.imageWidth, self.imageHeight)
        self.pb3 = pygame.Rect(2 * self.boxSize, 1 * self.boxSize, self.imageWidth, self.imageHeight)
        self.Qb = pygame.Rect(3 * self.boxSize, 0 * self.boxSize, self.imageWidth, self.imageHeight)
        self.pb4 = pygame.Rect(3 * self.boxSize, 1 * self.boxSize, self.imageWidth, self.imageHeight)
        self.Kb = pygame.Rect(4 * self.boxSize, 0 * self.boxSize, self.imageWidth, self.imageHeight)
        self.pb5 = pygame.Rect(4 * self.boxSize, 1 * self.boxSize, self.imageWidth, self.imageHeight)
        self.bb2 = pygame.Rect(5 * self.boxSize, 0 * self.boxSize, self.imageWidth, self.imageHeight)
        self.pb6 = pygame.Rect(5 * self.boxSize, 1 * self.boxSize, self.imageWidth, self.imageHeight)
        self.kb2 = pygame.Rect(6 * self.boxSize, 0 * self.boxSize, self.imageWidth, self.imageHeight)
        self.pb7 = pygame.Rect(6 * self.boxSize, 1 * self.boxSize, self.imageWidth, self.imageHeight)
        self.rb2 = pygame.Rect(7 * self.boxSize, 0 * self.boxSize, self.imageWidth, self.imageHeight)
        self.pb8 = pygame.Rect(7 * self.boxSize, 1 * self.boxSize, self.imageWidth, self.imageHeight)
        # white piece position
        self.pw1 = pygame.Rect(0 * self.boxSize, 6 * self.boxSize, self.imageWidth, self.imageHeight)
        self.rw1 = pygame.Rect(0 * self.boxSize, 7 * self.boxSize, self.imageWidth, self.imageHeight)
        self.pw2 = pygame.Rect(1 * self.boxSize, 6 * self.boxSize, self.imageWidth, self.imageHeight)
        self.kw1 = pygame.Rect(1 * self.boxSize, 7 * self.boxSize, self.imageWidth, self.imageHeight)
        self.pw3 = pygame.Rect(2 * self.boxSize, 6 * self.boxSize, self.imageWidth, self.imageHeight)
        self.bw1 = pygame.Rect(2 * self.boxSize, 7 * self.boxSize, self.imageWidth, self.imageHeight)
        self.pw4 = pygame.Rect(3 * self.boxSize, 6 * self.boxSize, self.imageWidth, self.imageHeight)
        self.Qw = pygame.Rect(3 * self.boxSize, 7 * self.boxSize, self.imageWidth, self.imageHeight)
        self.pw5 = pygame.Rect(4 * self.boxSize, 6 * self.boxSize, self.imageWidth, self.imageHeight)
        self.Kw = pygame.Rect(4 * self.boxSize, 7 * self.boxSize, self.imageWidth, self.imageHeight)
        self.pw6 = pygame.Rect(5 * self.boxSize, 6 * self.boxSize, self.imageWidth, self.imageHeight)
        self.bw2 = pygame.Rect(5 * self.boxSize, 7 * self.boxSize, self.imageWidth, self.imageHeight)
        self.pw7 = pygame.Rect(6 * self.boxSize, 6 * self.boxSize, self.imageWidth, self.imageHeight)
        self.kw2 = pygame.Rect(6 * self.boxSize, 7 * self.boxSize, self.imageWidth, self.imageHeight)
        self.pw8 = pygame.Rect(7 * self.boxSize, 6 * self.boxSize, self.imageWidth, self.imageHeight)
        self.rw2 = pygame.Rect(7 * self.boxSize, 7 * self.boxSize, self.imageWidth, self.imageHeight)

        # new pieces
        self.newQueenBlack_1 = pygame.Rect(9 * self.boxSize, 9 * self.boxSize, self.boxSize, self.boxSize)
        self.newQueenBlack_2 = pygame.Rect(9 * self.boxSize, 9 * self.boxSize, self.boxSize, self.boxSize)
        self.newQueenBlack_3 = pygame.Rect(9 * self.boxSize, 9 * self.boxSize, self.boxSize, self.boxSize)
        self.newQueenBlack_4 = pygame.Rect(9 * self.boxSize, 9 * self.boxSize, self.boxSize, self.boxSize)
        self.newQueenBlack_5 = pygame.Rect(9 * self.boxSize, 9 * self.boxSize, self.boxSize, self.boxSize)
        self.newQueenBlack_6 = pygame.Rect(9 * self.boxSize, 9 * self.boxSize, self.boxSize, self.boxSize)
        self.newQueenBlack_7 = pygame.Rect(9 * self.boxSize, 9 * self.boxSize, self.boxSize, self.boxSize)
        self.newQueenBlack_8 = pygame.Rect(9 * self.boxSize, 9 * self.boxSize, self.boxSize, self.boxSize)

        self.newQueenWhite_1 = pygame.Rect(9 * self.boxSize, 9 * self.boxSize, self.boxSize, self.boxSize)
        self.newQueenWhite_2 = pygame.Rect(9 * self.boxSize, 9 * self.boxSize, self.boxSize, self.boxSize)
        self.newQueenWhite_3 = pygame.Rect(9 * self.boxSize, 9 * self.boxSize, self.boxSize, self.boxSize)
        self.newQueenWhite_4 = pygame.Rect(9 * self.boxSize, 9 * self.boxSize, self.boxSize, self.boxSize)
        self.newQueenWhite_5 = pygame.Rect(9 * self.boxSize, 9 * self.boxSize, self.boxSize, self.boxSize)
        self.newQueenWhite_6 = pygame.Rect(9 * self.boxSize, 9 * self.boxSize, self.boxSize, self.boxSize)
        self.newQueenWhite_7 = pygame.Rect(9 * self.boxSize, 9 * self.boxSize, self.boxSize, self.boxSize)
        self.newQueenWhite_8 = pygame.Rect(9 * self.boxSize, 9 * self.boxSize, self.boxSize, self.boxSize)

        # dead piece position list
        self.deadPiecePosLst = [self.whiteCutPiece_1, self.whiteCutPiece_2, self.whiteCutPiece_3, self.whiteCutPiece_4, self.whiteCutPiece_5, self.whiteCutPiece_6, self.whiteCutPiece_7,
                                self.whiteCutPiece_8, self.whiteCutPiece_9, self.whiteCutPiece_10, self.whiteCutPiece_11, self.whiteCutPiece_12, self.whiteCutPiece_13, self.whiteCutPiece_14,
                                self.whiteCutPiece_15, self.whiteCutPiece_16, self.blackCutPiece_1, self.blackCutPiece_2, self.blackCutPiece_3, self.blackCutPiece_4, self.blackCutPiece_5,
                                self.blackCutPiece_6, self.blackCutPiece_7, self.blackCutPiece_8, self.blackCutPiece_9, self.blackCutPiece_10, self.blackCutPiece_11, self.blackCutPiece_12,
                                self.blackCutPiece_13, self.blackCutPiece_14, self.blackCutPiece_15, self.blackCutPiece_16]


class MainGame(Positions):
    def __init__(self):
        super().__init__()
        self.run = True
        # game over variables
        self.KingBlack_isDead = 0
        self.KingWhite_isDead = 0

        # initial mouse(x,y) position
        self.mouse_x = -1
        self.mouse_y = -1

        # setting first turn for black
        self.turn = "black"

        # black pieces variables
        self.pawnBlack1Clicked = 0
        self.pawnBlack1Clicked_plus8 = 0
        self.pawnBlack1Clicked_twoStep = 0
        self.pawnBlack1Clicked_cut = 0

        self.pawnBlack2Clicked = 0
        self.pawnBlack2Clicked_plus8 = 0
        self.pawnBlack2Clicked_twoStep = 0
        self.pawnBlack2Clicked_cut = 0

        self.pawnBlack3Clicked = 0
        self.pawnBlack3Clicked_plus8 = 0
        self.pawnBlack3Clicked_twoStep = 0
        self.pawnBlack3Clicked_cut = 0

        self.pawnBlack4Clicked = 0
        self.pawnBlack4Clicked_plus8 = 0
        self.pawnBlack4Clicked_twoStep = 0
        self.pawnBlack4Clicked_cut = 0

        self.pawnBlack5Clicked = 0
        self.pawnBlack5Clicked_plus8 = 0
        self.pawnBlack5Clicked_twoStep = 0
        self.pawnBlack5Clicked_cut = 0

        self.pawnBlack6Clicked = 0
        self.pawnBlack6Clicked_plus8 = 0
        self.pawnBlack6Clicked_twoStep = 0
        self.pawnBlack6Clicked_cut = 0

        self.pawnBlack7Clicked = 0
        self.pawnBlack7Clicked_plus8 = 0
        self.pawnBlack7Clicked_twoStep = 0
        self.pawnBlack7Clicked_cut = 0

        self.pawnBlack8Clicked = 0
        self.pawnBlack8Clicked_plus8 = 0
        self.pawnBlack8Clicked_twoStep = 0
        self.pawnBlack8Clicked_cut = 0

        self.KingBlackClicked = 0
        self.KingBlackClicked_cut = 0

        self.knightBlack1Clicked = 0
        self.knightBlack1Clicked_cut = 0

        self.knightBlack2Clicked = 0
        self.knightBlack2Clicked_cut = 0

        self.rookBlack1Clicked = 0
        self.rookBlack1Clicked_plus8 = 0
        self.rookBlack1Clicked_plus16 = 0
        self.rookBlack1Clicked_plus24 = 0
        self.rookBlack1Clicked_plus32 = 0
        self.rookBlack1Clicked_plus40 = 0
        self.rookBlack1Clicked_plus48 = 0
        self.rookBlack1Clicked_plus1 = 0
        self.rookBlack1Clicked_plus2 = 0
        self.rookBlack1Clicked_plus3 = 0
        self.rookBlack1Clicked_plus4 = 0
        self.rookBlack1Clicked_plus5 = 0
        self.rookBlack1Clicked_plus6 = 0
        self.rookBlack1Clicked_minus8 = 0
        self.rookBlack1Clicked_minus16 = 0
        self.rookBlack1Clicked_minus24 = 0
        self.rookBlack1Clicked_minus32 = 0
        self.rookBlack1Clicked_minus40 = 0
        self.rookBlack1Clicked_minus48 = 0
        self.rookBlack1Clicked_minus1 = 0
        self.rookBlack1Clicked_minus2 = 0
        self.rookBlack1Clicked_minus3 = 0
        self.rookBlack1Clicked_minus4 = 0
        self.rookBlack1Clicked_minus5 = 0
        self.rookBlack1Clicked_minus6 = 0
        self.rookBlack1Clicked_cut = 0

        self.rookBlack2Clicked = 0
        self.rookBlack2Clicked_plus8 = 0
        self.rookBlack2Clicked_plus16 = 0
        self.rookBlack2Clicked_plus24 = 0
        self.rookBlack2Clicked_plus32 = 0
        self.rookBlack2Clicked_plus40 = 0
        self.rookBlack2Clicked_plus48 = 0
        self.rookBlack2Clicked_plus1 = 0
        self.rookBlack2Clicked_plus2 = 0
        self.rookBlack2Clicked_plus3 = 0
        self.rookBlack2Clicked_plus4 = 0
        self.rookBlack2Clicked_plus5 = 0
        self.rookBlack2Clicked_plus6 = 0
        self.rookBlack2Clicked_minus8 = 0
        self.rookBlack2Clicked_minus16 = 0
        self.rookBlack2Clicked_minus24 = 0
        self.rookBlack2Clicked_minus32 = 0
        self.rookBlack2Clicked_minus40 = 0
        self.rookBlack2Clicked_minus48 = 0
        self.rookBlack2Clicked_minus1 = 0
        self.rookBlack2Clicked_minus2 = 0
        self.rookBlack2Clicked_minus3 = 0
        self.rookBlack2Clicked_minus4 = 0
        self.rookBlack2Clicked_minus5 = 0
        self.rookBlack2Clicked_minus6 = 0
        self.rookBlack2Clicked_cut = 0

        self.bishopBlack1Clicked = 0
        self.bishopBlack1Clicked_plus8_plus1 = 0
        self.bishopBlack1Clicked_plus16_plus2 = 0
        self.bishopBlack1Clicked_plus24_plus3 = 0
        self.bishopBlack1Clicked_plus32_plus4 = 0
        self.bishopBlack1Clicked_plus40_plus5 = 0
        self.bishopBlack1Clicked_plus48_plus6 = 0
        self.bishopBlack1Clicked_plus8_minus1 = 0
        self.bishopBlack1Clicked_plus16_minus2 = 0
        self.bishopBlack1Clicked_plus24_minus3 = 0
        self.bishopBlack1Clicked_plus32_minus4 = 0
        self.bishopBlack1Clicked_plus40_minus5 = 0
        self.bishopBlack1Clicked_plus48_minus6 = 0
        self.bishopBlack1Clicked_minus8_plus1 = 0
        self.bishopBlack1Clicked_minus16_plus2 = 0
        self.bishopBlack1Clicked_minus24_plus3 = 0
        self.bishopBlack1Clicked_minus32_plus4 = 0
        self.bishopBlack1Clicked_minus40_plus5 = 0
        self.bishopBlack1Clicked_minus48_plus6 = 0
        self.bishopBlack1Clicked_minus8_minus1 = 0
        self.bishopBlack1Clicked_minus16_minus2 = 0
        self.bishopBlack1Clicked_minus24_minus3 = 0
        self.bishopBlack1Clicked_minus32_minus4 = 0
        self.bishopBlack1Clicked_minus40_minus5 = 0
        self.bishopBlack1Clicked_minus48_minus6 = 0
        self.bishopBlack1Clicked_cut = 0

        self.bishopBlack2Clicked = 0
        self.bishopBlack2Clicked_plus8_plus1 = 0
        self.bishopBlack2Clicked_plus16_plus2 = 0
        self.bishopBlack2Clicked_plus24_plus3 = 0
        self.bishopBlack2Clicked_plus32_plus4 = 0
        self.bishopBlack2Clicked_plus40_plus5 = 0
        self.bishopBlack2Clicked_plus48_plus6 = 0
        self.bishopBlack2Clicked_plus8_minus1 = 0
        self.bishopBlack2Clicked_plus16_minus2 = 0
        self.bishopBlack2Clicked_plus24_minus3 = 0
        self.bishopBlack2Clicked_plus32_minus4 = 0
        self.bishopBlack2Clicked_plus40_minus5 = 0
        self.bishopBlack2Clicked_plus48_minus6 = 0
        self.bishopBlack2Clicked_minus8_plus1 = 0
        self.bishopBlack2Clicked_minus16_plus2 = 0
        self.bishopBlack2Clicked_minus24_plus3 = 0
        self.bishopBlack2Clicked_minus32_plus4 = 0
        self.bishopBlack2Clicked_minus40_plus5 = 0
        self.bishopBlack2Clicked_minus48_plus6 = 0
        self.bishopBlack2Clicked_minus8_minus1 = 0
        self.bishopBlack2Clicked_minus16_minus2 = 0
        self.bishopBlack2Clicked_minus24_minus3 = 0
        self.bishopBlack2Clicked_minus32_minus4 = 0
        self.bishopBlack2Clicked_minus40_minus5 = 0
        self.bishopBlack2Clicked_minus48_minus6 = 0
        self.bishopBlack2Clicked_cut = 0

        self.QueenBlackClicked = 0
        self.QueenBlackClicked_plus8 = 0
        self.QueenBlackClicked_plus16 = 0
        self.QueenBlackClicked_plus24 = 0
        self.QueenBlackClicked_plus32 = 0
        self.QueenBlackClicked_plus40 = 0
        self.QueenBlackClicked_plus48 = 0
        self.QueenBlackClicked_plus1 = 0
        self.QueenBlackClicked_plus2 = 0
        self.QueenBlackClicked_plus3 = 0
        self.QueenBlackClicked_plus4 = 0
        self.QueenBlackClicked_plus5 = 0
        self.QueenBlackClicked_plus6 = 0
        self.QueenBlackClicked_minus8 = 0
        self.QueenBlackClicked_minus16 = 0
        self.QueenBlackClicked_minus24 = 0
        self.QueenBlackClicked_minus32 = 0
        self.QueenBlackClicked_minus40 = 0
        self.QueenBlackClicked_minus48 = 0
        self.QueenBlackClicked_minus1 = 0
        self.QueenBlackClicked_minus2 = 0
        self.QueenBlackClicked_minus3 = 0
        self.QueenBlackClicked_minus4 = 0
        self.QueenBlackClicked_minus5 = 0
        self.QueenBlackClicked_minus6 = 0
        self.QueenBlackClicked_plus8_plus1 = 0
        self.QueenBlackClicked_plus16_plus2 = 0
        self.QueenBlackClicked_plus24_plus3 = 0
        self.QueenBlackClicked_plus32_plus4 = 0
        self.QueenBlackClicked_plus40_plus5 = 0
        self.QueenBlackClicked_plus48_plus6 = 0
        self.QueenBlackClicked_plus8_minus1 = 0
        self.QueenBlackClicked_plus16_minus2 = 0
        self.QueenBlackClicked_plus24_minus3 = 0
        self.QueenBlackClicked_plus32_minus4 = 0
        self.QueenBlackClicked_plus40_minus5 = 0
        self.QueenBlackClicked_plus48_minus6 = 0
        self.QueenBlackClicked_minus8_plus1 = 0
        self.QueenBlackClicked_minus16_plus2 = 0
        self.QueenBlackClicked_minus24_plus3 = 0
        self.QueenBlackClicked_minus32_plus4 = 0
        self.QueenBlackClicked_minus40_plus5 = 0
        self.QueenBlackClicked_minus48_plus6 = 0
        self.QueenBlackClicked_minus8_minus1 = 0
        self.QueenBlackClicked_minus16_minus2 = 0
        self.QueenBlackClicked_minus24_minus3 = 0
        self.QueenBlackClicked_minus32_minus4 = 0
        self.QueenBlackClicked_minus40_minus5 = 0
        self.QueenBlackClicked_minus48_minus6 = 0
        self.QueenBlackClicked_cut = 0

        # white pieces variables
        self.pawnWhite1Clicked = 0
        self.pawnWhite1Clicked_plus8 = 0
        self.pawnWhite1Clicked_twoStep = 0
        self.pawnWhite1Clicked_cut = 0

        self.pawnWhite2Clicked = 0
        self.pawnWhite2Clicked_plus8 = 0
        self.pawnWhite2Clicked_twoStep = 0
        self.pawnWhite2Clicked_cut = 0

        self.pawnWhite3Clicked = 0
        self.pawnWhite3Clicked_plus8 = 0
        self.pawnWhite3Clicked_twoStep = 0
        self.pawnWhite3Clicked_cut = 0

        self.pawnWhite4Clicked = 0
        self.pawnWhite4Clicked_plus8 = 0
        self.pawnWhite4Clicked_twoStep = 0
        self.pawnWhite4Clicked_cut = 0

        self.pawnWhite5Clicked = 0
        self.pawnWhite5Clicked_plus8 = 0
        self.pawnWhite5Clicked_twoStep = 0
        self.pawnWhite5Clicked_cut = 0

        self.pawnWhite6Clicked = 0
        self.pawnWhite6Clicked_plus8 = 0
        self.pawnWhite6Clicked_twoStep = 0
        self.pawnWhite6Clicked_cut = 0

        self.pawnWhite7Clicked = 0
        self.pawnWhite7Clicked_plus8 = 0
        self.pawnWhite7Clicked_twoStep = 0
        self.pawnWhite7Clicked_cut = 0

        self.pawnWhite8Clicked = 0
        self.pawnWhite8Clicked_plus8 = 0
        self.pawnWhite8Clicked_twoStep = 0
        self.pawnWhite8Clicked_cut = 0

        self.KingWhiteClicked = 0
        self.KingWhiteClicked_cut = 0

        self.knightWhite1Clicked = 0
        self.knightWhite1Clicked_cut = 0

        self.knightWhite2Clicked = 0
        self.knightWhite2Clicked_cut = 0

        self.rookWhite1Clicked = 0
        self.rookWhite1Clicked_plus8 = 0
        self.rookWhite1Clicked_plus16 = 0
        self.rookWhite1Clicked_plus24 = 0
        self.rookWhite1Clicked_plus32 = 0
        self.rookWhite1Clicked_plus40 = 0
        self.rookWhite1Clicked_plus48 = 0
        self.rookWhite1Clicked_plus1 = 0
        self.rookWhite1Clicked_plus2 = 0
        self.rookWhite1Clicked_plus3 = 0
        self.rookWhite1Clicked_plus4 = 0
        self.rookWhite1Clicked_plus5 = 0
        self.rookWhite1Clicked_plus6 = 0
        self.rookWhite1Clicked_minus8 = 0
        self.rookWhite1Clicked_minus16 = 0
        self.rookWhite1Clicked_minus24 = 0
        self.rookWhite1Clicked_minus32 = 0
        self.rookWhite1Clicked_minus40 = 0
        self.rookWhite1Clicked_minus48 = 0
        self.rookWhite1Clicked_minus1 = 0
        self.rookWhite1Clicked_minus2 = 0
        self.rookWhite1Clicked_minus3 = 0
        self.rookWhite1Clicked_minus4 = 0
        self.rookWhite1Clicked_minus5 = 0
        self.rookWhite1Clicked_minus6 = 0
        self.rookWhite1Clicked_cut = 0

        self.rookWhite2Clicked = 0
        self.rookWhite2Clicked_plus8 = 0
        self.rookWhite2Clicked_plus16 = 0
        self.rookWhite2Clicked_plus24 = 0
        self.rookWhite2Clicked_plus32 = 0
        self.rookWhite2Clicked_plus40 = 0
        self.rookWhite2Clicked_plus48 = 0
        self.rookWhite2Clicked_plus1 = 0
        self.rookWhite2Clicked_plus2 = 0
        self.rookWhite2Clicked_plus3 = 0
        self.rookWhite2Clicked_plus4 = 0
        self.rookWhite2Clicked_plus5 = 0
        self.rookWhite2Clicked_plus6 = 0
        self.rookWhite2Clicked_minus8 = 0
        self.rookWhite2Clicked_minus16 = 0
        self.rookWhite2Clicked_minus24 = 0
        self.rookWhite2Clicked_minus32 = 0
        self.rookWhite2Clicked_minus40 = 0
        self.rookWhite2Clicked_minus48 = 0
        self.rookWhite2Clicked_minus1 = 0
        self.rookWhite2Clicked_minus2 = 0
        self.rookWhite2Clicked_minus3 = 0
        self.rookWhite2Clicked_minus4 = 0
        self.rookWhite2Clicked_minus5 = 0
        self.rookWhite2Clicked_minus6 = 0
        self.rookWhite2Clicked_cut = 0

        self.bishopWhite1Clicked = 0
        self.bishopWhite1Clicked_plus8_plus1 = 0
        self.bishopWhite1Clicked_plus16_plus2 = 0
        self.bishopWhite1Clicked_plus24_plus3 = 0
        self.bishopWhite1Clicked_plus32_plus4 = 0
        self.bishopWhite1Clicked_plus40_plus5 = 0
        self.bishopWhite1Clicked_plus48_plus6 = 0
        self.bishopWhite1Clicked_plus8_minus1 = 0
        self.bishopWhite1Clicked_plus16_minus2 = 0
        self.bishopWhite1Clicked_plus24_minus3 = 0
        self.bishopWhite1Clicked_plus32_minus4 = 0
        self.bishopWhite1Clicked_plus40_minus5 = 0
        self.bishopWhite1Clicked_plus48_minus6 = 0
        self.bishopWhite1Clicked_minus8_plus1 = 0
        self.bishopWhite1Clicked_minus16_plus2 = 0
        self.bishopWhite1Clicked_minus24_plus3 = 0
        self.bishopWhite1Clicked_minus32_plus4 = 0
        self.bishopWhite1Clicked_minus40_plus5 = 0
        self.bishopWhite1Clicked_minus48_plus6 = 0
        self.bishopWhite1Clicked_minus8_minus1 = 0
        self.bishopWhite1Clicked_minus16_minus2 = 0
        self.bishopWhite1Clicked_minus24_minus3 = 0
        self.bishopWhite1Clicked_minus32_minus4 = 0
        self.bishopWhite1Clicked_minus40_minus5 = 0
        self.bishopWhite1Clicked_minus48_minus6 = 0
        self.bishopWhite1Clicked_cut = 0

        self.bishopWhite2Clicked = 0
        self.bishopWhite2Clicked_plus8_plus1 = 0
        self.bishopWhite2Clicked_plus16_plus2 = 0
        self.bishopWhite2Clicked_plus24_plus3 = 0
        self.bishopWhite2Clicked_plus32_plus4 = 0
        self.bishopWhite2Clicked_plus40_plus5 = 0
        self.bishopWhite2Clicked_plus48_plus6 = 0
        self.bishopWhite2Clicked_plus8_minus1 = 0
        self.bishopWhite2Clicked_plus16_minus2 = 0
        self.bishopWhite2Clicked_plus24_minus3 = 0
        self.bishopWhite2Clicked_plus32_minus4 = 0
        self.bishopWhite2Clicked_plus40_minus5 = 0
        self.bishopWhite2Clicked_plus48_minus6 = 0
        self.bishopWhite2Clicked_minus8_plus1 = 0
        self.bishopWhite2Clicked_minus16_plus2 = 0
        self.bishopWhite2Clicked_minus24_plus3 = 0
        self.bishopWhite2Clicked_minus32_plus4 = 0
        self.bishopWhite2Clicked_minus40_plus5 = 0
        self.bishopWhite2Clicked_minus48_plus6 = 0
        self.bishopWhite2Clicked_minus8_minus1 = 0
        self.bishopWhite2Clicked_minus16_minus2 = 0
        self.bishopWhite2Clicked_minus24_minus3 = 0
        self.bishopWhite2Clicked_minus32_minus4 = 0
        self.bishopWhite2Clicked_minus40_minus5 = 0
        self.bishopWhite2Clicked_minus48_minus6 = 0
        self.bishopWhite2Clicked_cut = 0

        self.QueenWhiteClicked = 0
        self.QueenWhiteClicked_plus8 = 0
        self.QueenWhiteClicked_plus16 = 0
        self.QueenWhiteClicked_plus24 = 0
        self.QueenWhiteClicked_plus32 = 0
        self.QueenWhiteClicked_plus40 = 0
        self.QueenWhiteClicked_plus48 = 0
        self.QueenWhiteClicked_plus1 = 0
        self.QueenWhiteClicked_plus2 = 0
        self.QueenWhiteClicked_plus3 = 0
        self.QueenWhiteClicked_plus4 = 0
        self.QueenWhiteClicked_plus5 = 0
        self.QueenWhiteClicked_plus6 = 0
        self.QueenWhiteClicked_minus8 = 0
        self.QueenWhiteClicked_minus16 = 0
        self.QueenWhiteClicked_minus24 = 0
        self.QueenWhiteClicked_minus32 = 0
        self.QueenWhiteClicked_minus40 = 0
        self.QueenWhiteClicked_minus48 = 0
        self.QueenWhiteClicked_minus1 = 0
        self.QueenWhiteClicked_minus2 = 0
        self.QueenWhiteClicked_minus3 = 0
        self.QueenWhiteClicked_minus4 = 0
        self.QueenWhiteClicked_minus5 = 0
        self.QueenWhiteClicked_minus6 = 0
        self.QueenWhiteClicked_plus8_plus1 = 0
        self.QueenWhiteClicked_plus16_plus2 = 0
        self.QueenWhiteClicked_plus24_plus3 = 0
        self.QueenWhiteClicked_plus32_plus4 = 0
        self.QueenWhiteClicked_plus40_plus5 = 0
        self.QueenWhiteClicked_plus48_plus6 = 0
        self.QueenWhiteClicked_plus8_minus1 = 0
        self.QueenWhiteClicked_plus16_minus2 = 0
        self.QueenWhiteClicked_plus24_minus3 = 0
        self.QueenWhiteClicked_plus32_minus4 = 0
        self.QueenWhiteClicked_plus40_minus5 = 0
        self.QueenWhiteClicked_plus48_minus6 = 0
        self.QueenWhiteClicked_minus8_plus1 = 0
        self.QueenWhiteClicked_minus16_plus2 = 0
        self.QueenWhiteClicked_minus24_plus3 = 0
        self.QueenWhiteClicked_minus32_plus4 = 0
        self.QueenWhiteClicked_minus40_plus5 = 0
        self.QueenWhiteClicked_minus48_plus6 = 0
        self.QueenWhiteClicked_minus8_minus1 = 0
        self.QueenWhiteClicked_minus16_minus2 = 0
        self.QueenWhiteClicked_minus24_minus3 = 0
        self.QueenWhiteClicked_minus32_minus4 = 0
        self.QueenWhiteClicked_minus40_minus5 = 0
        self.QueenWhiteClicked_minus48_minus6 = 0
        self.QueenWhiteClicked_cut = 0

    def msg(self, text):
        font1 = pygame.font.SysFont('serif', 40, True, False)
        message1 = font1.render(f'{text}', True, self.silver, self.charcoalBlue)
        messageRect = message1.get_rect()
        messageRect.center = (self.windowWidth // 2, self.windowHeight // 2)
        self.window.blit(message1, messageRect)

    def bugFix(self):
        for event in pygame.event.get():
            if event.type == pygame.MOUSEBUTTONDOWN:
                self.mouse_x, self.mouse_y = pygame.mouse.get_pos()

        def make_zero():
            self.pawnBlack1Clicked = 0
            self.pawnBlack2Clicked = 0
            self.pawnBlack3Clicked = 0
            self.pawnBlack4Clicked = 0
            self.pawnBlack5Clicked = 0
            self.pawnBlack6Clicked = 0
            self.pawnBlack7Clicked = 0
            self.pawnBlack8Clicked = 0
            self.rookBlack1Clicked = 0
            self.rookBlack2Clicked = 0
            self.knightBlack1Clicked = 0
            self.knightBlack2Clicked = 0
            self.bishopBlack1Clicked = 0
            self.bishopBlack2Clicked = 0
            self.KingBlackClicked = 0
            self.QueenBlackClicked = 0

            self.pawnWhite1Clicked = 0
            self.pawnWhite2Clicked = 0
            self.pawnWhite3Clicked = 0
            self.pawnWhite4Clicked = 0
            self.pawnWhite5Clicked = 0
            self.pawnWhite6Clicked = 0
            self.pawnWhite7Clicked = 0
            self.pawnWhite8Clicked = 0
            self.rookWhite1Clicked = 0
            self.rookWhite2Clicked = 0
            self.knightWhite1Clicked = 0
            self.knightWhite2Clicked = 0
            self.bishopWhite1Clicked = 0
            self.bishopWhite2Clicked = 0
            self.KingWhiteClicked = 0
            self.QueenWhiteClicked = 0

        for pos in self.deadPiecePosLst:
            if pos.collidepoint(self.mouse_x, self.mouse_y):
                make_zero()

    def drawChessBoard(self):
        for whiteBoxPos in self.whiteBoxLst:
            pygame.draw.rect(self.window, self.white, whiteBoxPos)
        for greyBoxPos in self.greyBoxLst:
            pygame.draw.rect(self.window, self.grey, greyBoxPos)

    def drawPlayer(self):
        self.window.blit(self.assets['rb'], self.rb1)
        self.window.blit(self.assets['rb'], self.rb2)
        self.window.blit(self.assets['kb'], self.kb1)
        self.window.blit(self.assets['kb'], self.kb2)
        self.window.blit(self.assets['bb'], self.bb1)
        self.window.blit(self.assets['bb'], self.bb2)
        self.window.blit(self.assets['Kb'], self.Kb)
        self.window.blit(self.assets['Qb'], self.Qb)

        self.window.blit(self.assets['pb'], self.pb1)
        self.window.blit(self.assets['pb'], self.pb2)
        self.window.blit(self.assets['pb'], self.pb3)
        self.window.blit(self.assets['pb'], self.pb4)
        self.window.blit(self.assets['pb'], self.pb5)
        self.window.blit(self.assets['pb'], self.pb6)
        self.window.blit(self.assets['pb'], self.pb7)
        self.window.blit(self.assets['pb'], self.pb8)

        self.window.blit(self.assets['pw'], self.pw1)
        self.window.blit(self.assets['pw'], self.pw2)
        self.window.blit(self.assets['pw'], self.pw3)
        self.window.blit(self.assets['pw'], self.pw4)
        self.window.blit(self.assets['pw'], self.pw5)
        self.window.blit(self.assets['pw'], self.pw6)
        self.window.blit(self.assets['pw'], self.pw7)
        self.window.blit(self.assets['pw'], self.pw8)

        self.window.blit(self.assets['rw'], self.rw1)
        self.window.blit(self.assets['rw'], self.rw2)
        self.window.blit(self.assets['kw'], self.kw1)
        self.window.blit(self.assets['kw'], self.kw2)
        self.window.blit(self.assets['bw'], self.bw1)
        self.window.blit(self.assets['bw'], self.bw2)
        self.window.blit(self.assets['Kw'], self.Kw)
        self.window.blit(self.assets['Qw'], self.Qw)
    # black pieces
    def pawnBMovements(self):
        for event in pygame.event.get():
            if event.type == pygame.MOUSEBUTTONDOWN:
                self.mouse_x, self.mouse_y = pygame.mouse.get_pos()

        if self.turn == "white":
            self.pawnBlack1Clicked_plus8 = 0
            self.pawnBlack2Clicked_plus8 = 0
            self.pawnBlack3Clicked_plus8 = 0
            self.pawnBlack4Clicked_plus8 = 0
            self.pawnBlack5Clicked_plus8 = 0
            self.pawnBlack6Clicked_plus8 = 0
            self.pawnBlack7Clicked_plus8 = 0
            self.pawnBlack8Clicked_plus8 = 0
        if self.turn == "black":
            if self.pb1.collidepoint(self.mouse_x, self.mouse_y):
                if self.pb1.y < self.box57.y:
                    if not self.boxLst[self.boxLst.index(self.pb1) + 8].colliderect(self.pw1) and not \
                            self.boxLst[self.boxLst.index(self.pb1) + 8].colliderect(self.pw2) and not \
                            self.boxLst[self.boxLst.index(self.pb1) + 8].colliderect(self.pw3) and not \
                            self.boxLst[self.boxLst.index(self.pb1) + 8].colliderect(self.pw4) and not \
                            self.boxLst[self.boxLst.index(self.pb1) + 8].colliderect(self.pw5) and not \
                            self.boxLst[self.boxLst.index(self.pb1) + 8].colliderect(self.pw6) and not \
                            self.boxLst[self.boxLst.index(self.pb1) + 8].colliderect(self.pw7) and not \
                            self.boxLst[self.boxLst.index(self.pb1) + 8].colliderect(self.pw8) and not \
                            self.boxLst[self.boxLst.index(self.pb1) + 8].colliderect(self.Kw) and not \
                            self.boxLst[self.boxLst.index(self.pb1) + 8].colliderect(self.Qw) and not \
                            self.boxLst[self.boxLst.index(self.pb1) + 8].colliderect(self.rw1) and not \
                            self.boxLst[self.boxLst.index(self.pb1) + 8].colliderect(self.rw2) and not \
                            self.boxLst[self.boxLst.index(self.pb1) + 8].colliderect(self.kw1) and not \
                            self.boxLst[self.boxLst.index(self.pb1) + 8].colliderect(self.kw2) and not \
                            self.boxLst[self.boxLst.index(self.pb1) + 8].colliderect(self.bw1) and not \
                            self.boxLst[self.boxLst.index(self.pb1) + 8].colliderect(self.bw2) and not \
                            self.boxLst[self.boxLst.index(self.pb1) + 8].colliderect(self.pb2) and not \
                            self.boxLst[self.boxLst.index(self.pb1) + 8].colliderect(self.pb3) and not \
                            self.boxLst[self.boxLst.index(self.pb1) + 8].colliderect(self.pb4) and not \
                            self.boxLst[self.boxLst.index(self.pb1) + 8].colliderect(self.pb5) and not \
                            self.boxLst[self.boxLst.index(self.pb1) + 8].colliderect(self.pb6) and not \
                            self.boxLst[self.boxLst.index(self.pb1) + 8].colliderect(self.pb7) and not \
                            self.boxLst[self.boxLst.index(self.pb1) + 8].colliderect(self.pb8) and not \
                            self.boxLst[self.boxLst.index(self.pb1) + 8].colliderect(self.Kb) and not \
                            self.boxLst[self.boxLst.index(self.pb1) + 8].colliderect(self.Qb) and not \
                            self.boxLst[self.boxLst.index(self.pb1) + 8].colliderect(self.rb1) and not \
                            self.boxLst[self.boxLst.index(self.pb1) + 8].colliderect(self.rb2) and not \
                            self.boxLst[self.boxLst.index(self.pb1) + 8].colliderect(self.kb1) and not \
                            self.boxLst[self.boxLst.index(self.pb1) + 8].colliderect(self.kb2) and not \
                            self.boxLst[self.boxLst.index(self.pb1) + 8].colliderect(self.bb1) and not \
                            self.boxLst[self.boxLst.index(self.pb1) + 8].colliderect(self.bb2):
                        pygame.draw.rect(self.window, self.blue, self.boxLst[self.boxLst.index(self.pb1) + 8], border_radius=100)
                        self.pawnBlack1Clicked = 1
                        self.pawnBlack1Clicked_plus8 = 1
                        self.pawnBlack2Clicked = 0
                        self.pawnBlack3Clicked = 0
                        self.pawnBlack4Clicked = 0
                        self.pawnBlack5Clicked = 0
                        self.pawnBlack6Clicked = 0
                        self.pawnBlack7Clicked = 0
                        self.pawnBlack8Clicked = 0
                        self.KingBlackClicked = 0
                        self.knightBlack1Clicked = 0
                        self.knightBlack2Clicked = 0
                        self.rookBlack1Clicked = 0
                        self.rookBlack2Clicked = 0
                        self.bishopBlack1Clicked = 0
                        self.bishopBlack2Clicked = 0
                        self.QueenBlackClicked = 0
                    if self.pb1.y < self.box17.y:
                        if self.pawnBlack1Clicked_plus8 == 1:
                            if not self.boxLst[self.boxLst.index(self.pb1) + 16].colliderect(self.pw1) and not \
                                    self.boxLst[self.boxLst.index(self.pb1) + 16].colliderect(self.pw2) and not \
                                    self.boxLst[self.boxLst.index(self.pb1) + 16].colliderect(self.pw3) and not \
                                    self.boxLst[self.boxLst.index(self.pb1) + 16].colliderect(self.pw4) and not \
                                    self.boxLst[self.boxLst.index(self.pb1) + 16].colliderect(self.pw5) and not \
                                    self.boxLst[self.boxLst.index(self.pb1) + 16].colliderect(self.pw6) and not \
                                    self.boxLst[self.boxLst.index(self.pb1) + 16].colliderect(self.pw7) and not \
                                    self.boxLst[self.boxLst.index(self.pb1) + 16].colliderect(self.pw8) and not \
                                    self.boxLst[self.boxLst.index(self.pb1) + 16].colliderect(self.Kw) and not \
                                    self.boxLst[self.boxLst.index(self.pb1) + 16].colliderect(self.Qw) and not \
                                    self.boxLst[self.boxLst.index(self.pb1) + 16].colliderect(self.rw1) and not \
                                    self.boxLst[self.boxLst.index(self.pb1) + 16].colliderect(self.rw2) and not \
                                    self.boxLst[self.boxLst.index(self.pb1) + 16].colliderect(self.kw1) and not \
                                    self.boxLst[self.boxLst.index(self.pb1) + 16].colliderect(self.kw2) and not \
                                    self.boxLst[self.boxLst.index(self.pb1) + 16].colliderect(self.bw1) and not \
                                    self.boxLst[self.boxLst.index(self.pb1) + 16].colliderect(self.bw2) and not \
                                    self.boxLst[self.boxLst.index(self.pb1) + 16].colliderect(self.pb2) and not \
                                    self.boxLst[self.boxLst.index(self.pb1) + 16].colliderect(self.pb3) and not \
                                    self.boxLst[self.boxLst.index(self.pb1) + 16].colliderect(self.pb4) and not \
                                    self.boxLst[self.boxLst.index(self.pb1) + 16].colliderect(self.pb5) and not \
                                    self.boxLst[self.boxLst.index(self.pb1) + 16].colliderect(self.pb6) and not \
                                    self.boxLst[self.boxLst.index(self.pb1) + 16].colliderect(self.pb7) and not \
                                    self.boxLst[self.boxLst.index(self.pb1) + 16].colliderect(self.pb8) and not \
                                    self.boxLst[self.boxLst.index(self.pb1) + 16].colliderect(self.Kb) and not \
                                    self.boxLst[self.boxLst.index(self.pb1) + 16].colliderect(self.Qb) and not \
                                    self.boxLst[self.boxLst.index(self.pb1) + 16].colliderect(self.rb1) and not \
                                    self.boxLst[self.boxLst.index(self.pb1) + 16].colliderect(self.rb2) and not \
                                    self.boxLst[self.boxLst.index(self.pb1) + 16].colliderect(self.kb1) and not \
                                    self.boxLst[self.boxLst.index(self.pb1) + 16].colliderect(self.kb2) and not \
                                    self.boxLst[self.boxLst.index(self.pb1) + 16].colliderect(self.bb1) and not \
                                    self.boxLst[self.boxLst.index(self.pb1) + 16].colliderect(self.bb2):
                                pygame.draw.rect(self.window, self.blue, self.boxLst[self.boxLst.index(self.pb1) + 16], border_radius=100)
                                self.pawnBlack1Clicked = 1
                                self.pawnBlack2Clicked = 0
                                self.pawnBlack3Clicked = 0
                                self.pawnBlack4Clicked = 0
                                self.pawnBlack5Clicked = 0
                                self.pawnBlack6Clicked = 0
                                self.pawnBlack7Clicked = 0
                                self.pawnBlack8Clicked = 0
                                self.KingBlackClicked = 0
                                self.knightBlack1Clicked = 0
                                self.knightBlack2Clicked = 0
                                self.rookBlack1Clicked = 0
                                self.rookBlack2Clicked = 0
                                self.bishopBlack1Clicked = 0
                                self.bishopBlack2Clicked = 0
                                self.QueenBlackClicked = 0
                                self.pawnBlack1Clicked_twoStep = 1
                            elif self.boxLst[self.boxLst.index(self.pb1) + 16].colliderect(self.pw1) or \
                                    self.boxLst[self.boxLst.index(self.pb1) + 16].colliderect(self.pw2) or \
                                    self.boxLst[self.boxLst.index(self.pb1) + 16].colliderect(self.pw3) or \
                                    self.boxLst[self.boxLst.index(self.pb1) + 16].colliderect(self.pw4) or \
                                    self.boxLst[self.boxLst.index(self.pb1) + 16].colliderect(self.pw5) or \
                                    self.boxLst[self.boxLst.index(self.pb1) + 16].colliderect(self.pw6) or \
                                    self.boxLst[self.boxLst.index(self.pb1) + 16].colliderect(self.pw7) or \
                                    self.boxLst[self.boxLst.index(self.pb1) + 16].colliderect(self.pw8) or \
                                    self.boxLst[self.boxLst.index(self.pb1) + 16].colliderect(self.Kw) or \
                                    self.boxLst[self.boxLst.index(self.pb1) + 16].colliderect(self.Qw) or \
                                    self.boxLst[self.boxLst.index(self.pb1) + 16].colliderect(self.rw1) or \
                                    self.boxLst[self.boxLst.index(self.pb1) + 16].colliderect(self.rw2) or \
                                    self.boxLst[self.boxLst.index(self.pb1) + 16].colliderect(self.kw1) or \
                                    self.boxLst[self.boxLst.index(self.pb1) + 16].colliderect(self.kw2) or \
                                    self.boxLst[self.boxLst.index(self.pb1) + 16].colliderect(self.bw1) or \
                                    self.boxLst[self.boxLst.index(self.pb1) + 16].colliderect(self.bw2) or \
                                    self.boxLst[self.boxLst.index(self.pb1) + 16].colliderect(self.pb2) or \
                                    self.boxLst[self.boxLst.index(self.pb1) + 16].colliderect(self.pb3) or \
                                    self.boxLst[self.boxLst.index(self.pb1) + 16].colliderect(self.pb4) or \
                                    self.boxLst[self.boxLst.index(self.pb1) + 16].colliderect(self.pb5) or \
                                    self.boxLst[self.boxLst.index(self.pb1) + 16].colliderect(self.pb6) or \
                                    self.boxLst[self.boxLst.index(self.pb1) + 16].colliderect(self.pb7) or \
                                    self.boxLst[self.boxLst.index(self.pb1) + 16].colliderect(self.pb8) or \
                                    self.boxLst[self.boxLst.index(self.pb1) + 16].colliderect(self.Kb) or \
                                    self.boxLst[self.boxLst.index(self.pb1) + 16].colliderect(self.Qb) or \
                                    self.boxLst[self.boxLst.index(self.pb1) + 16].colliderect(self.rb1) or \
                                    self.boxLst[self.boxLst.index(self.pb1) + 16].colliderect(self.rb2) or \
                                    self.boxLst[self.boxLst.index(self.pb1) + 16].colliderect(self.kb1) or \
                                    self.boxLst[self.boxLst.index(self.pb1) + 16].colliderect(self.kb2) or \
                                    self.boxLst[self.boxLst.index(self.pb1) + 16].colliderect(self.bb1) or \
                                    self.boxLst[self.boxLst.index(self.pb1) + 16].colliderect(self.bb2):
                                self.pawnBlack1Clicked_twoStep = 0
                if self.pb1.y < self.box57.y:
                    if self.boxLst[self.boxLst.index(self.pb1) + 8].colliderect(self.pw1) or \
                            self.boxLst[self.boxLst.index(self.pb1) + 8].colliderect(self.pw2) or \
                            self.boxLst[self.boxLst.index(self.pb1) + 8].colliderect(self.pw3) or \
                            self.boxLst[self.boxLst.index(self.pb1) + 8].colliderect(self.pw4) or \
                            self.boxLst[self.boxLst.index(self.pb1) + 8].colliderect(self.pw5) or \
                            self.boxLst[self.boxLst.index(self.pb1) + 8].colliderect(self.pw6) or \
                            self.boxLst[self.boxLst.index(self.pb1) + 8].colliderect(self.pw7) or \
                            self.boxLst[self.boxLst.index(self.pb1) + 8].colliderect(self.pw8) or \
                            self.boxLst[self.boxLst.index(self.pb1) + 8].colliderect(self.Kw) or \
                            self.boxLst[self.boxLst.index(self.pb1) + 8].colliderect(self.Qw) or \
                            self.boxLst[self.boxLst.index(self.pb1) + 8].colliderect(self.rw1) or \
                            self.boxLst[self.boxLst.index(self.pb1) + 8].colliderect(self.rw2) or \
                            self.boxLst[self.boxLst.index(self.pb1) + 8].colliderect(self.kw1) or \
                            self.boxLst[self.boxLst.index(self.pb1) + 8].colliderect(self.kw2) or \
                            self.boxLst[self.boxLst.index(self.pb1) + 8].colliderect(self.bw1) or \
                            self.boxLst[self.boxLst.index(self.pb1) + 8].colliderect(self.bw2) or \
                            self.boxLst[self.boxLst.index(self.pb1) + 8].colliderect(self.pb2) or \
                            self.boxLst[self.boxLst.index(self.pb1) + 8].colliderect(self.pb3) or \
                            self.boxLst[self.boxLst.index(self.pb1) + 8].colliderect(self.pb4) or \
                            self.boxLst[self.boxLst.index(self.pb1) + 8].colliderect(self.pb5) or \
                            self.boxLst[self.boxLst.index(self.pb1) + 8].colliderect(self.pb6) or \
                            self.boxLst[self.boxLst.index(self.pb1) + 8].colliderect(self.pb7) or \
                            self.boxLst[self.boxLst.index(self.pb1) + 8].colliderect(self.pb8) or \
                            self.boxLst[self.boxLst.index(self.pb1) + 8].colliderect(self.Kb) or \
                            self.boxLst[self.boxLst.index(self.pb1) + 8].colliderect(self.Qb) or \
                            self.boxLst[self.boxLst.index(self.pb1) + 8].colliderect(self.rb1) or \
                            self.boxLst[self.boxLst.index(self.pb1) + 8].colliderect(self.rb2) or \
                            self.boxLst[self.boxLst.index(self.pb1) + 8].colliderect(self.kb1) or \
                            self.boxLst[self.boxLst.index(self.pb1) + 8].colliderect(self.kb2) or \
                            self.boxLst[self.boxLst.index(self.pb1) + 8].colliderect(self.bb1) or \
                            self.boxLst[self.boxLst.index(self.pb1) + 8].colliderect(self.bb2):
                        self.pawnBlack1Clicked = 0
                if 0 * self.boxSize <= self.pb1.x <= 6 * self.boxSize and self.pb1.y < self.box57.y:
                    if self.boxLst[self.boxLst.index(self.pb1) + 8 + 1].colliderect(self.pw1) or \
                            self.boxLst[self.boxLst.index(self.pb1) + 8 + 1].colliderect(self.pw2) or \
                            self.boxLst[self.boxLst.index(self.pb1) + 8 + 1].colliderect(self.pw3) or \
                            self.boxLst[self.boxLst.index(self.pb1) + 8 + 1].colliderect(self.pw4) or \
                            self.boxLst[self.boxLst.index(self.pb1) + 8 + 1].colliderect(self.pw5) or \
                            self.boxLst[self.boxLst.index(self.pb1) + 8 + 1].colliderect(self.pw6) or \
                            self.boxLst[self.boxLst.index(self.pb1) + 8 + 1].colliderect(self.pw7) or \
                            self.boxLst[self.boxLst.index(self.pb1) + 8 + 1].colliderect(self.pw8) or \
                            self.boxLst[self.boxLst.index(self.pb1) + 8 + 1].colliderect(self.Kw) or \
                            self.boxLst[self.boxLst.index(self.pb1) + 8 + 1].colliderect(self.Qw) or \
                            self.boxLst[self.boxLst.index(self.pb1) + 8 + 1].colliderect(self.rw1) or \
                            self.boxLst[self.boxLst.index(self.pb1) + 8 + 1].colliderect(self.rw2) or \
                            self.boxLst[self.boxLst.index(self.pb1) + 8 + 1].colliderect(self.kw1) or \
                            self.boxLst[self.boxLst.index(self.pb1) + 8 + 1].colliderect(self.kw2) or \
                            self.boxLst[self.boxLst.index(self.pb1) + 8 + 1].colliderect(self.bw1) or \
                            self.boxLst[self.boxLst.index(self.pb1) + 8 + 1].colliderect(self.bw2):
                        pygame.draw.rect(self.window, self.red, self.boxLst[self.boxLst.index(self.pb1) + 8 + 1], border_radius=100)
                        self.pawnBlack1Clicked = 1
                        self.pawnBlack2Clicked = 0
                        self.pawnBlack3Clicked = 0
                        self.pawnBlack4Clicked = 0
                        self.pawnBlack5Clicked = 0
                        self.pawnBlack6Clicked = 0
                        self.pawnBlack7Clicked = 0
                        self.pawnBlack8Clicked = 0
                        self.KingBlackClicked = 0
                        self.knightBlack1Clicked = 0
                        self.knightBlack2Clicked = 0
                        self.rookBlack1Clicked = 0
                        self.rookBlack2Clicked = 0
                        self.bishopBlack1Clicked = 0
                        self.bishopBlack2Clicked = 0
                        self.QueenBlackClicked = 0
                        self.pawnBlack1Clicked_cut = 1
                if 1 * self.boxSize <= self.pb1.x <= 7 * self.boxSize and self.pb1.y < self.box57.y:
                    if self.boxLst[self.boxLst.index(self.pb1) + 8 - 1].colliderect(self.pw1) or \
                            self.boxLst[self.boxLst.index(self.pb1) + 8 - 1].colliderect(self.pw2) or \
                            self.boxLst[self.boxLst.index(self.pb1) + 8 - 1].colliderect(self.pw3) or \
                            self.boxLst[self.boxLst.index(self.pb1) + 8 - 1].colliderect(self.pw4) or \
                            self.boxLst[self.boxLst.index(self.pb1) + 8 - 1].colliderect(self.pw5) or \
                            self.boxLst[self.boxLst.index(self.pb1) + 8 - 1].colliderect(self.pw6) or \
                            self.boxLst[self.boxLst.index(self.pb1) + 8 - 1].colliderect(self.pw7) or \
                            self.boxLst[self.boxLst.index(self.pb1) + 8 - 1].colliderect(self.pw8) or \
                            self.boxLst[self.boxLst.index(self.pb1) + 8 - 1].colliderect(self.Kw) or \
                            self.boxLst[self.boxLst.index(self.pb1) + 8 - 1].colliderect(self.Qw) or \
                            self.boxLst[self.boxLst.index(self.pb1) + 8 - 1].colliderect(self.rw1) or \
                            self.boxLst[self.boxLst.index(self.pb1) + 8 - 1].colliderect(self.rw2) or \
                            self.boxLst[self.boxLst.index(self.pb1) + 8 - 1].colliderect(self.kw1) or \
                            self.boxLst[self.boxLst.index(self.pb1) + 8 - 1].colliderect(self.kw2) or \
                            self.boxLst[self.boxLst.index(self.pb1) + 8 - 1].colliderect(self.bw1) or \
                            self.boxLst[self.boxLst.index(self.pb1) + 8 - 1].colliderect(self.bw2):
                        pygame.draw.rect(self.window, self.red, self.boxLst[self.boxLst.index(self.pb1) + 8 - 1], border_radius=100)
                        self.pawnBlack1Clicked = 1
                        self.pawnBlack2Clicked = 0
                        self.pawnBlack3Clicked = 0
                        self.pawnBlack4Clicked = 0
                        self.pawnBlack5Clicked = 0
                        self.pawnBlack6Clicked = 0
                        self.pawnBlack7Clicked = 0
                        self.pawnBlack8Clicked = 0
                        self.KingBlackClicked = 0
                        self.knightBlack1Clicked = 0
                        self.knightBlack2Clicked = 0
                        self.rookBlack1Clicked = 0
                        self.rookBlack2Clicked = 0
                        self.bishopBlack1Clicked = 0
                        self.bishopBlack2Clicked = 0
                        self.QueenBlackClicked = 0
                        self.pawnBlack1Clicked_cut = 1

            elif self.pb2.collidepoint(self.mouse_x, self.mouse_y):
                if self.pb2.y < self.box57.y:
                    if not self.boxLst[self.boxLst.index(self.pb2) + 8].colliderect(self.pw1) and not \
                            self.boxLst[self.boxLst.index(self.pb2) + 8].colliderect(self.pw2) and not \
                            self.boxLst[self.boxLst.index(self.pb2) + 8].colliderect(self.pw3) and not \
                            self.boxLst[self.boxLst.index(self.pb2) + 8].colliderect(self.pw4) and not \
                            self.boxLst[self.boxLst.index(self.pb2) + 8].colliderect(self.pw5) and not \
                            self.boxLst[self.boxLst.index(self.pb2) + 8].colliderect(self.pw6) and not \
                            self.boxLst[self.boxLst.index(self.pb2) + 8].colliderect(self.pw7) and not \
                            self.boxLst[self.boxLst.index(self.pb2) + 8].colliderect(self.pw8) and not \
                            self.boxLst[self.boxLst.index(self.pb2) + 8].colliderect(self.Kw) and not \
                            self.boxLst[self.boxLst.index(self.pb2) + 8].colliderect(self.Qw) and not \
                            self.boxLst[self.boxLst.index(self.pb2) + 8].colliderect(self.rw1) and not \
                            self.boxLst[self.boxLst.index(self.pb2) + 8].colliderect(self.rw2) and not \
                            self.boxLst[self.boxLst.index(self.pb2) + 8].colliderect(self.kw1) and not \
                            self.boxLst[self.boxLst.index(self.pb2) + 8].colliderect(self.kw2) and not \
                            self.boxLst[self.boxLst.index(self.pb2) + 8].colliderect(self.bw1) and not \
                            self.boxLst[self.boxLst.index(self.pb2) + 8].colliderect(self.bw2) and not \
                            self.boxLst[self.boxLst.index(self.pb2) + 8].colliderect(self.pb1) and not \
                            self.boxLst[self.boxLst.index(self.pb2) + 8].colliderect(self.pb3) and not \
                            self.boxLst[self.boxLst.index(self.pb2) + 8].colliderect(self.pb4) and not \
                            self.boxLst[self.boxLst.index(self.pb2) + 8].colliderect(self.pb5) and not \
                            self.boxLst[self.boxLst.index(self.pb2) + 8].colliderect(self.pb6) and not \
                            self.boxLst[self.boxLst.index(self.pb2) + 8].colliderect(self.pb7) and not \
                            self.boxLst[self.boxLst.index(self.pb2) + 8].colliderect(self.pb8) and not \
                            self.boxLst[self.boxLst.index(self.pb2) + 8].colliderect(self.Kb) and not \
                            self.boxLst[self.boxLst.index(self.pb2) + 8].colliderect(self.Qb) and not \
                            self.boxLst[self.boxLst.index(self.pb2) + 8].colliderect(self.rb1) and not \
                            self.boxLst[self.boxLst.index(self.pb2) + 8].colliderect(self.rb2) and not \
                            self.boxLst[self.boxLst.index(self.pb2) + 8].colliderect(self.kb1) and not \
                            self.boxLst[self.boxLst.index(self.pb2) + 8].colliderect(self.kb2) and not \
                            self.boxLst[self.boxLst.index(self.pb2) + 8].colliderect(self.bb1) and not \
                            self.boxLst[self.boxLst.index(self.pb2) + 8].colliderect(self.bb2):
                        pygame.draw.rect(self.window, self.blue, self.boxLst[self.boxLst.index(self.pb2) + 8], border_radius=100)
                        self.pawnBlack2Clicked = 1
                        self.pawnBlack2Clicked_plus8 = 1
                        self.pawnBlack1Clicked = 0
                        self.pawnBlack3Clicked = 0
                        self.pawnBlack4Clicked = 0
                        self.pawnBlack5Clicked = 0
                        self.pawnBlack6Clicked = 0
                        self.pawnBlack7Clicked = 0
                        self.pawnBlack8Clicked = 0
                        self.KingBlackClicked = 0
                        self.knightBlack1Clicked = 0
                        self.knightBlack2Clicked = 0
                        self.rookBlack1Clicked = 0
                        self.rookBlack2Clicked = 0
                        self.bishopBlack1Clicked = 0
                        self.bishopBlack2Clicked = 0
                        self.QueenBlackClicked = 0
                    if self.pb2.y < self.box17.y:
                        if self.pawnBlack2Clicked_plus8 == 1:
                            if not self.boxLst[self.boxLst.index(self.pb2) + 16].colliderect(self.pw1) and not \
                                    self.boxLst[self.boxLst.index(self.pb2) + 16].colliderect(self.pw2) and not \
                                    self.boxLst[self.boxLst.index(self.pb2) + 16].colliderect(self.pw3) and not \
                                    self.boxLst[self.boxLst.index(self.pb2) + 16].colliderect(self.pw4) and not \
                                    self.boxLst[self.boxLst.index(self.pb2) + 16].colliderect(self.pw5) and not \
                                    self.boxLst[self.boxLst.index(self.pb2) + 16].colliderect(self.pw6) and not \
                                    self.boxLst[self.boxLst.index(self.pb2) + 16].colliderect(self.pw7) and not \
                                    self.boxLst[self.boxLst.index(self.pb2) + 16].colliderect(self.pw8) and not \
                                    self.boxLst[self.boxLst.index(self.pb2) + 16].colliderect(self.Kw) and not \
                                    self.boxLst[self.boxLst.index(self.pb2) + 16].colliderect(self.Qw) and not \
                                    self.boxLst[self.boxLst.index(self.pb2) + 16].colliderect(self.rw1) and not \
                                    self.boxLst[self.boxLst.index(self.pb2) + 16].colliderect(self.rw2) and not \
                                    self.boxLst[self.boxLst.index(self.pb2) + 16].colliderect(self.kw1) and not \
                                    self.boxLst[self.boxLst.index(self.pb2) + 16].colliderect(self.kw2) and not \
                                    self.boxLst[self.boxLst.index(self.pb2) + 16].colliderect(self.bw1) and not \
                                    self.boxLst[self.boxLst.index(self.pb2) + 16].colliderect(self.bw2) and not \
                                    self.boxLst[self.boxLst.index(self.pb2) + 16].colliderect(self.pb1) and not \
                                    self.boxLst[self.boxLst.index(self.pb2) + 16].colliderect(self.pb3) and not \
                                    self.boxLst[self.boxLst.index(self.pb2) + 16].colliderect(self.pb4) and not \
                                    self.boxLst[self.boxLst.index(self.pb2) + 16].colliderect(self.pb5) and not \
                                    self.boxLst[self.boxLst.index(self.pb2) + 16].colliderect(self.pb6) and not \
                                    self.boxLst[self.boxLst.index(self.pb2) + 16].colliderect(self.pb7) and not \
                                    self.boxLst[self.boxLst.index(self.pb2) + 16].colliderect(self.pb8) and not \
                                    self.boxLst[self.boxLst.index(self.pb2) + 16].colliderect(self.Kb) and not \
                                    self.boxLst[self.boxLst.index(self.pb2) + 16].colliderect(self.Qb) and not \
                                    self.boxLst[self.boxLst.index(self.pb2) + 16].colliderect(self.rb1) and not \
                                    self.boxLst[self.boxLst.index(self.pb2) + 16].colliderect(self.rb2) and not \
                                    self.boxLst[self.boxLst.index(self.pb2) + 16].colliderect(self.kb1) and not \
                                    self.boxLst[self.boxLst.index(self.pb2) + 16].colliderect(self.kb2) and not \
                                    self.boxLst[self.boxLst.index(self.pb2) + 16].colliderect(self.bb1) and not \
                                    self.boxLst[self.boxLst.index(self.pb2) + 16].colliderect(self.bb2):
                                pygame.draw.rect(self.window, self.blue, self.boxLst[self.boxLst.index(self.pb2) + 16], border_radius=100)
                                self.pawnBlack2Clicked = 1
                                self.pawnBlack1Clicked = 0
                                self.pawnBlack3Clicked = 0
                                self.pawnBlack4Clicked = 0
                                self.pawnBlack5Clicked = 0
                                self.pawnBlack6Clicked = 0
                                self.pawnBlack7Clicked = 0
                                self.pawnBlack8Clicked = 0
                                self.KingBlackClicked = 0
                                self.knightBlack1Clicked = 0
                                self.knightBlack2Clicked = 0
                                self.rookBlack1Clicked = 0
                                self.rookBlack2Clicked = 0
                                self.bishopBlack1Clicked = 0
                                self.bishopBlack2Clicked = 0
                                self.QueenBlackClicked = 0
                                self.pawnBlack2Clicked_twoStep = 1
                            elif self.boxLst[self.boxLst.index(self.pb2) + 16].colliderect(self.pw1) or \
                                    self.boxLst[self.boxLst.index(self.pb2) + 16].colliderect(self.pw2) or \
                                    self.boxLst[self.boxLst.index(self.pb2) + 16].colliderect(self.pw3) or \
                                    self.boxLst[self.boxLst.index(self.pb2) + 16].colliderect(self.pw4) or \
                                    self.boxLst[self.boxLst.index(self.pb2) + 16].colliderect(self.pw5) or \
                                    self.boxLst[self.boxLst.index(self.pb2) + 16].colliderect(self.pw6) or \
                                    self.boxLst[self.boxLst.index(self.pb2) + 16].colliderect(self.pw7) or \
                                    self.boxLst[self.boxLst.index(self.pb2) + 16].colliderect(self.pw8) or \
                                    self.boxLst[self.boxLst.index(self.pb2) + 16].colliderect(self.Kw) or \
                                    self.boxLst[self.boxLst.index(self.pb2) + 16].colliderect(self.Qw) or \
                                    self.boxLst[self.boxLst.index(self.pb2) + 16].colliderect(self.rw1) or \
                                    self.boxLst[self.boxLst.index(self.pb2) + 16].colliderect(self.rw2) or \
                                    self.boxLst[self.boxLst.index(self.pb2) + 16].colliderect(self.kw1) or \
                                    self.boxLst[self.boxLst.index(self.pb2) + 16].colliderect(self.kw2) or \
                                    self.boxLst[self.boxLst.index(self.pb2) + 16].colliderect(self.bw1) or \
                                    self.boxLst[self.boxLst.index(self.pb2) + 16].colliderect(self.bw2) or \
                                    self.boxLst[self.boxLst.index(self.pb2) + 16].colliderect(self.pb1) or \
                                    self.boxLst[self.boxLst.index(self.pb2) + 16].colliderect(self.pb3) or \
                                    self.boxLst[self.boxLst.index(self.pb2) + 16].colliderect(self.pb4) or \
                                    self.boxLst[self.boxLst.index(self.pb2) + 16].colliderect(self.pb5) or \
                                    self.boxLst[self.boxLst.index(self.pb2) + 16].colliderect(self.pb6) or \
                                    self.boxLst[self.boxLst.index(self.pb2) + 16].colliderect(self.pb7) or \
                                    self.boxLst[self.boxLst.index(self.pb2) + 16].colliderect(self.pb8) or \
                                    self.boxLst[self.boxLst.index(self.pb2) + 16].colliderect(self.Kb) or \
                                    self.boxLst[self.boxLst.index(self.pb2) + 16].colliderect(self.Qb) or \
                                    self.boxLst[self.boxLst.index(self.pb2) + 16].colliderect(self.rb1) or \
                                    self.boxLst[self.boxLst.index(self.pb2) + 16].colliderect(self.rb2) or \
                                    self.boxLst[self.boxLst.index(self.pb2) + 16].colliderect(self.kb1) or \
                                    self.boxLst[self.boxLst.index(self.pb2) + 16].colliderect(self.kb2) or \
                                    self.boxLst[self.boxLst.index(self.pb2) + 16].colliderect(self.bb1) or \
                                    self.boxLst[self.boxLst.index(self.pb2) + 16].colliderect(self.bb2):
                                self.pawnBlack2Clicked_twoStep = 0
                if self.pb2.y < self.box57.y:
                    if self.boxLst[self.boxLst.index(self.pb2) + 8].colliderect(self.pw1) or \
                            self.boxLst[self.boxLst.index(self.pb2) + 8].colliderect(self.pw2) or \
                            self.boxLst[self.boxLst.index(self.pb2) + 8].colliderect(self.pw3) or \
                            self.boxLst[self.boxLst.index(self.pb2) + 8].colliderect(self.pw4) or \
                            self.boxLst[self.boxLst.index(self.pb2) + 8].colliderect(self.pw5) or \
                            self.boxLst[self.boxLst.index(self.pb2) + 8].colliderect(self.pw6) or \
                            self.boxLst[self.boxLst.index(self.pb2) + 8].colliderect(self.pw7) or \
                            self.boxLst[self.boxLst.index(self.pb2) + 8].colliderect(self.pw8) or \
                            self.boxLst[self.boxLst.index(self.pb2) + 8].colliderect(self.Kw) or \
                            self.boxLst[self.boxLst.index(self.pb2) + 8].colliderect(self.Qw) or \
                            self.boxLst[self.boxLst.index(self.pb2) + 8].colliderect(self.rw1) or \
                            self.boxLst[self.boxLst.index(self.pb2) + 8].colliderect(self.rw2) or \
                            self.boxLst[self.boxLst.index(self.pb2) + 8].colliderect(self.kw1) or \
                            self.boxLst[self.boxLst.index(self.pb2) + 8].colliderect(self.kw2) or \
                            self.boxLst[self.boxLst.index(self.pb2) + 8].colliderect(self.bw1) or \
                            self.boxLst[self.boxLst.index(self.pb2) + 8].colliderect(self.bw2) or \
                            self.boxLst[self.boxLst.index(self.pb2) + 8].colliderect(self.pb1) or \
                            self.boxLst[self.boxLst.index(self.pb2) + 8].colliderect(self.pb3) or \
                            self.boxLst[self.boxLst.index(self.pb2) + 8].colliderect(self.pb4) or \
                            self.boxLst[self.boxLst.index(self.pb2) + 8].colliderect(self.pb5) or \
                            self.boxLst[self.boxLst.index(self.pb2) + 8].colliderect(self.pb6) or \
                            self.boxLst[self.boxLst.index(self.pb2) + 8].colliderect(self.pb7) or \
                            self.boxLst[self.boxLst.index(self.pb2) + 8].colliderect(self.pb8) or \
                            self.boxLst[self.boxLst.index(self.pb2) + 8].colliderect(self.Kb) or \
                            self.boxLst[self.boxLst.index(self.pb2) + 8].colliderect(self.Qb) or \
                            self.boxLst[self.boxLst.index(self.pb2) + 8].colliderect(self.rb1) or \
                            self.boxLst[self.boxLst.index(self.pb2) + 8].colliderect(self.rb2) or \
                            self.boxLst[self.boxLst.index(self.pb2) + 8].colliderect(self.kb1) or \
                            self.boxLst[self.boxLst.index(self.pb2) + 8].colliderect(self.kb2) or \
                            self.boxLst[self.boxLst.index(self.pb2) + 8].colliderect(self.bb1) or \
                            self.boxLst[self.boxLst.index(self.pb2) + 8].colliderect(self.bb2):
                        self.pawnBlack2Clicked = 0
                if 0 * self.boxSize <= self.pb2.x <= 6 * self.boxSize and self.pb2.y < self.box57.y:
                    if self.boxLst[self.boxLst.index(self.pb2) + 8 + 1].colliderect(self.pw1) or \
                            self.boxLst[self.boxLst.index(self.pb2) + 8 + 1].colliderect(self.pw2) or \
                            self.boxLst[self.boxLst.index(self.pb2) + 8 + 1].colliderect(self.pw3) or \
                            self.boxLst[self.boxLst.index(self.pb2) + 8 + 1].colliderect(self.pw4) or \
                            self.boxLst[self.boxLst.index(self.pb2) + 8 + 1].colliderect(self.pw5) or \
                            self.boxLst[self.boxLst.index(self.pb2) + 8 + 1].colliderect(self.pw6) or \
                            self.boxLst[self.boxLst.index(self.pb2) + 8 + 1].colliderect(self.pw7) or \
                            self.boxLst[self.boxLst.index(self.pb2) + 8 + 1].colliderect(self.pw8) or \
                            self.boxLst[self.boxLst.index(self.pb2) + 8 + 1].colliderect(self.Kw) or \
                            self.boxLst[self.boxLst.index(self.pb2) + 8 + 1].colliderect(self.Qw) or \
                            self.boxLst[self.boxLst.index(self.pb2) + 8 + 1].colliderect(self.rw1) or \
                            self.boxLst[self.boxLst.index(self.pb2) + 8 + 1].colliderect(self.rw2) or \
                            self.boxLst[self.boxLst.index(self.pb2) + 8 + 1].colliderect(self.kw1) or \
                            self.boxLst[self.boxLst.index(self.pb2) + 8 + 1].colliderect(self.kw2) or \
                            self.boxLst[self.boxLst.index(self.pb2) + 8 + 1].colliderect(self.bw1) or \
                            self.boxLst[self.boxLst.index(self.pb2) + 8 + 1].colliderect(self.bw2):
                        pygame.draw.rect(self.window, self.red, self.boxLst[self.boxLst.index(self.pb2) + 8 + 1], border_radius=100)
                        self.pawnBlack2Clicked = 1
                        self.pawnBlack1Clicked = 0
                        self.pawnBlack3Clicked = 0
                        self.pawnBlack4Clicked = 0
                        self.pawnBlack5Clicked = 0
                        self.pawnBlack6Clicked = 0
                        self.pawnBlack7Clicked = 0
                        self.pawnBlack8Clicked = 0
                        self.KingBlackClicked = 0
                        self.knightBlack1Clicked = 0
                        self.knightBlack2Clicked = 0
                        self.rookBlack1Clicked = 0
                        self.rookBlack2Clicked = 0
                        self.bishopBlack1Clicked = 0
                        self.bishopBlack2Clicked = 0
                        self.QueenBlackClicked = 0
                        self.pawnBlack2Clicked_cut = 1
                if 1 * self.boxSize <= self.pb2.x <= 7 * self.boxSize and self.pb2.y < self.box57.y:
                    if self.boxLst[self.boxLst.index(self.pb2) + 8 - 1].colliderect(self.pw1) or \
                            self.boxLst[self.boxLst.index(self.pb2) + 8 - 1].colliderect(self.pw2) or \
                            self.boxLst[self.boxLst.index(self.pb2) + 8 - 1].colliderect(self.pw3) or \
                            self.boxLst[self.boxLst.index(self.pb2) + 8 - 1].colliderect(self.pw4) or \
                            self.boxLst[self.boxLst.index(self.pb2) + 8 - 1].colliderect(self.pw5) or \
                            self.boxLst[self.boxLst.index(self.pb2) + 8 - 1].colliderect(self.pw6) or \
                            self.boxLst[self.boxLst.index(self.pb2) + 8 - 1].colliderect(self.pw7) or \
                            self.boxLst[self.boxLst.index(self.pb2) + 8 - 1].colliderect(self.pw8) or \
                            self.boxLst[self.boxLst.index(self.pb2) + 8 - 1].colliderect(self.Kw) or \
                            self.boxLst[self.boxLst.index(self.pb2) + 8 - 1].colliderect(self.Qw) or \
                            self.boxLst[self.boxLst.index(self.pb2) + 8 - 1].colliderect(self.rw1) or \
                            self.boxLst[self.boxLst.index(self.pb2) + 8 - 1].colliderect(self.rw2) or \
                            self.boxLst[self.boxLst.index(self.pb2) + 8 - 1].colliderect(self.kw1) or \
                            self.boxLst[self.boxLst.index(self.pb2) + 8 - 1].colliderect(self.kw2) or \
                            self.boxLst[self.boxLst.index(self.pb2) + 8 - 1].colliderect(self.bw1) or \
                            self.boxLst[self.boxLst.index(self.pb2) + 8 - 1].colliderect(self.bw2):
                        pygame.draw.rect(self.window, self.red, self.boxLst[self.boxLst.index(self.pb2) + 8 - 1], border_radius=100)
                        self.pawnBlack2Clicked = 1
                        self.pawnBlack1Clicked = 0
                        self.pawnBlack3Clicked = 0
                        self.pawnBlack4Clicked = 0
                        self.pawnBlack5Clicked = 0
                        self.pawnBlack6Clicked = 0
                        self.pawnBlack7Clicked = 0
                        self.pawnBlack8Clicked = 0
                        self.KingBlackClicked = 0
                        self.knightBlack1Clicked = 0
                        self.knightBlack2Clicked = 0
                        self.rookBlack1Clicked = 0
                        self.rookBlack2Clicked = 0
                        self.bishopBlack1Clicked = 0
                        self.bishopBlack2Clicked = 0
                        self.QueenBlackClicked = 0
                        self.pawnBlack2Clicked_cut = 1

            elif self.pb3.collidepoint(self.mouse_x, self.mouse_y):
                if self.pb3.y < self.box57.y:
                    if not self.boxLst[self.boxLst.index(self.pb3) + 8].colliderect(self.pw1) and not \
                            self.boxLst[self.boxLst.index(self.pb3) + 8].colliderect(self.pw2) and not \
                            self.boxLst[self.boxLst.index(self.pb3) + 8].colliderect(self.pw3) and not \
                            self.boxLst[self.boxLst.index(self.pb3) + 8].colliderect(self.pw4) and not \
                            self.boxLst[self.boxLst.index(self.pb3) + 8].colliderect(self.pw5) and not \
                            self.boxLst[self.boxLst.index(self.pb3) + 8].colliderect(self.pw6) and not \
                            self.boxLst[self.boxLst.index(self.pb3) + 8].colliderect(self.pw7) and not \
                            self.boxLst[self.boxLst.index(self.pb3) + 8].colliderect(self.pw8) and not \
                            self.boxLst[self.boxLst.index(self.pb3) + 8].colliderect(self.Kw) and not \
                            self.boxLst[self.boxLst.index(self.pb3) + 8].colliderect(self.Qw) and not \
                            self.boxLst[self.boxLst.index(self.pb3) + 8].colliderect(self.rw1) and not \
                            self.boxLst[self.boxLst.index(self.pb3) + 8].colliderect(self.rw2) and not \
                            self.boxLst[self.boxLst.index(self.pb3) + 8].colliderect(self.kw1) and not \
                            self.boxLst[self.boxLst.index(self.pb3) + 8].colliderect(self.kw2) and not \
                            self.boxLst[self.boxLst.index(self.pb3) + 8].colliderect(self.bw1) and not \
                            self.boxLst[self.boxLst.index(self.pb3) + 8].colliderect(self.bw2) and not \
                            self.boxLst[self.boxLst.index(self.pb3) + 8].colliderect(self.pb2) and not \
                            self.boxLst[self.boxLst.index(self.pb3) + 8].colliderect(self.pb1) and not \
                            self.boxLst[self.boxLst.index(self.pb3) + 8].colliderect(self.pb4) and not \
                            self.boxLst[self.boxLst.index(self.pb3) + 8].colliderect(self.pb5) and not \
                            self.boxLst[self.boxLst.index(self.pb3) + 8].colliderect(self.pb6) and not \
                            self.boxLst[self.boxLst.index(self.pb3) + 8].colliderect(self.pb7) and not \
                            self.boxLst[self.boxLst.index(self.pb3) + 8].colliderect(self.pb8) and not \
                            self.boxLst[self.boxLst.index(self.pb3) + 8].colliderect(self.Kb) and not \
                            self.boxLst[self.boxLst.index(self.pb3) + 8].colliderect(self.Qb) and not \
                            self.boxLst[self.boxLst.index(self.pb3) + 8].colliderect(self.rb1) and not \
                            self.boxLst[self.boxLst.index(self.pb3) + 8].colliderect(self.rb2) and not \
                            self.boxLst[self.boxLst.index(self.pb3) + 8].colliderect(self.kb1) and not \
                            self.boxLst[self.boxLst.index(self.pb3) + 8].colliderect(self.kb2) and not \
                            self.boxLst[self.boxLst.index(self.pb3) + 8].colliderect(self.bb1) and not \
                            self.boxLst[self.boxLst.index(self.pb3) + 8].colliderect(self.bb2):
                        pygame.draw.rect(self.window, self.blue, self.boxLst[self.boxLst.index(self.pb3) + 8], border_radius=100)
                        self.pawnBlack3Clicked = 1
                        self.pawnBlack3Clicked_plus8 = 1
                        self.pawnBlack2Clicked = 0
                        self.pawnBlack1Clicked = 0
                        self.pawnBlack4Clicked = 0
                        self.pawnBlack5Clicked = 0
                        self.pawnBlack6Clicked = 0
                        self.pawnBlack7Clicked = 0
                        self.pawnBlack8Clicked = 0
                        self.KingBlackClicked = 0
                        self.knightBlack1Clicked = 0
                        self.knightBlack2Clicked = 0
                        self.rookBlack1Clicked = 0
                        self.rookBlack2Clicked = 0
                        self.bishopBlack1Clicked = 0
                        self.bishopBlack2Clicked = 0
                        self.QueenBlackClicked = 0
                    if self.pb3.y < self.box17.y:
                        if self.pawnBlack3Clicked_plus8 == 1:
                            if not self.boxLst[self.boxLst.index(self.pb3) + 16].colliderect(self.pw1) and not \
                                    self.boxLst[self.boxLst.index(self.pb3) + 16].colliderect(self.pw2) and not \
                                    self.boxLst[self.boxLst.index(self.pb3) + 16].colliderect(self.pw3) and not \
                                    self.boxLst[self.boxLst.index(self.pb3) + 16].colliderect(self.pw4) and not \
                                    self.boxLst[self.boxLst.index(self.pb3) + 16].colliderect(self.pw5) and not \
                                    self.boxLst[self.boxLst.index(self.pb3) + 16].colliderect(self.pw6) and not \
                                    self.boxLst[self.boxLst.index(self.pb3) + 16].colliderect(self.pw7) and not \
                                    self.boxLst[self.boxLst.index(self.pb3) + 16].colliderect(self.pw8) and not \
                                    self.boxLst[self.boxLst.index(self.pb3) + 16].colliderect(self.Kw) and not \
                                    self.boxLst[self.boxLst.index(self.pb3) + 16].colliderect(self.Qw) and not \
                                    self.boxLst[self.boxLst.index(self.pb3) + 16].colliderect(self.rw1) and not \
                                    self.boxLst[self.boxLst.index(self.pb3) + 16].colliderect(self.rw2) and not \
                                    self.boxLst[self.boxLst.index(self.pb3) + 16].colliderect(self.kw1) and not \
                                    self.boxLst[self.boxLst.index(self.pb3) + 16].colliderect(self.kw2) and not \
                                    self.boxLst[self.boxLst.index(self.pb3) + 16].colliderect(self.bw1) and not \
                                    self.boxLst[self.boxLst.index(self.pb3) + 16].colliderect(self.bw2) and not \
                                    self.boxLst[self.boxLst.index(self.pb3) + 16].colliderect(self.pb2) and not \
                                    self.boxLst[self.boxLst.index(self.pb3) + 16].colliderect(self.pb1) and not \
                                    self.boxLst[self.boxLst.index(self.pb3) + 16].colliderect(self.pb4) and not \
                                    self.boxLst[self.boxLst.index(self.pb3) + 16].colliderect(self.pb5) and not \
                                    self.boxLst[self.boxLst.index(self.pb3) + 16].colliderect(self.pb6) and not \
                                    self.boxLst[self.boxLst.index(self.pb3) + 16].colliderect(self.pb7) and not \
                                    self.boxLst[self.boxLst.index(self.pb3) + 16].colliderect(self.pb8) and not \
                                    self.boxLst[self.boxLst.index(self.pb3) + 16].colliderect(self.Kb) and not \
                                    self.boxLst[self.boxLst.index(self.pb3) + 16].colliderect(self.Qb) and not \
                                    self.boxLst[self.boxLst.index(self.pb3) + 16].colliderect(self.rb1) and not \
                                    self.boxLst[self.boxLst.index(self.pb3) + 16].colliderect(self.rb2) and not \
                                    self.boxLst[self.boxLst.index(self.pb3) + 16].colliderect(self.kb1) and not \
                                    self.boxLst[self.boxLst.index(self.pb3) + 16].colliderect(self.kb2) and not \
                                    self.boxLst[self.boxLst.index(self.pb3) + 16].colliderect(self.bb1) and not \
                                    self.boxLst[self.boxLst.index(self.pb3) + 16].colliderect(self.bb2):
                                pygame.draw.rect(self.window, self.blue, self.boxLst[self.boxLst.index(self.pb3) + 16], border_radius=100)
                                self.pawnBlack3Clicked = 1
                                self.pawnBlack2Clicked = 0
                                self.pawnBlack1Clicked = 0
                                self.pawnBlack4Clicked = 0
                                self.pawnBlack5Clicked = 0
                                self.pawnBlack6Clicked = 0
                                self.pawnBlack7Clicked = 0
                                self.pawnBlack8Clicked = 0
                                self.KingBlackClicked = 0
                                self.knightBlack1Clicked = 0
                                self.knightBlack2Clicked = 0
                                self.rookBlack1Clicked = 0
                                self.rookBlack2Clicked = 0
                                self.bishopBlack1Clicked = 0
                                self.bishopBlack2Clicked = 0
                                self.QueenBlackClicked = 0
                                self.pawnBlack3Clicked_twoStep = 1
                            elif self.boxLst[self.boxLst.index(self.pb3) + 16].colliderect(self.pw1) or \
                                    self.boxLst[self.boxLst.index(self.pb3) + 16].colliderect(self.pw2) or \
                                    self.boxLst[self.boxLst.index(self.pb3) + 16].colliderect(self.pw3) or \
                                    self.boxLst[self.boxLst.index(self.pb3) + 16].colliderect(self.pw4) or \
                                    self.boxLst[self.boxLst.index(self.pb3) + 16].colliderect(self.pw5) or \
                                    self.boxLst[self.boxLst.index(self.pb3) + 16].colliderect(self.pw6) or \
                                    self.boxLst[self.boxLst.index(self.pb3) + 16].colliderect(self.pw7) or \
                                    self.boxLst[self.boxLst.index(self.pb3) + 16].colliderect(self.pw8) or \
                                    self.boxLst[self.boxLst.index(self.pb3) + 16].colliderect(self.Kw) or \
                                    self.boxLst[self.boxLst.index(self.pb3) + 16].colliderect(self.Qw) or \
                                    self.boxLst[self.boxLst.index(self.pb3) + 16].colliderect(self.rw1) or \
                                    self.boxLst[self.boxLst.index(self.pb3) + 16].colliderect(self.rw2) or \
                                    self.boxLst[self.boxLst.index(self.pb3) + 16].colliderect(self.kw1) or \
                                    self.boxLst[self.boxLst.index(self.pb3) + 16].colliderect(self.kw2) or \
                                    self.boxLst[self.boxLst.index(self.pb3) + 16].colliderect(self.bw1) or \
                                    self.boxLst[self.boxLst.index(self.pb3) + 16].colliderect(self.bw2) or \
                                    self.boxLst[self.boxLst.index(self.pb3) + 16].colliderect(self.pb2) or \
                                    self.boxLst[self.boxLst.index(self.pb3) + 16].colliderect(self.pb1) or \
                                    self.boxLst[self.boxLst.index(self.pb3) + 16].colliderect(self.pb4) or \
                                    self.boxLst[self.boxLst.index(self.pb3) + 16].colliderect(self.pb5) or \
                                    self.boxLst[self.boxLst.index(self.pb3) + 16].colliderect(self.pb6) or \
                                    self.boxLst[self.boxLst.index(self.pb3) + 16].colliderect(self.pb7) or \
                                    self.boxLst[self.boxLst.index(self.pb3) + 16].colliderect(self.pb8) or \
                                    self.boxLst[self.boxLst.index(self.pb3) + 16].colliderect(self.Kb) or \
                                    self.boxLst[self.boxLst.index(self.pb3) + 16].colliderect(self.Qb) or \
                                    self.boxLst[self.boxLst.index(self.pb3) + 16].colliderect(self.rb1) or \
                                    self.boxLst[self.boxLst.index(self.pb3) + 16].colliderect(self.rb2) or \
                                    self.boxLst[self.boxLst.index(self.pb3) + 16].colliderect(self.kb1) or \
                                    self.boxLst[self.boxLst.index(self.pb3) + 16].colliderect(self.kb2) or \
                                    self.boxLst[self.boxLst.index(self.pb3) + 16].colliderect(self.bb1) or \
                                    self.boxLst[self.boxLst.index(self.pb3) + 16].colliderect(self.bb2):
                                self.pawnBlack3Clicked_twoStep = 0
                if self.pb3.y < self.box57.y:
                    if self.boxLst[self.boxLst.index(self.pb3) + 8].colliderect(self.pw1) or \
                            self.boxLst[self.boxLst.index(self.pb3) + 8].colliderect(self.pw2) or \
                            self.boxLst[self.boxLst.index(self.pb3) + 8].colliderect(self.pw3) or \
                            self.boxLst[self.boxLst.index(self.pb3) + 8].colliderect(self.pw4) or \
                            self.boxLst[self.boxLst.index(self.pb3) + 8].colliderect(self.pw5) or \
                            self.boxLst[self.boxLst.index(self.pb3) + 8].colliderect(self.pw6) or \
                            self.boxLst[self.boxLst.index(self.pb3) + 8].colliderect(self.pw7) or \
                            self.boxLst[self.boxLst.index(self.pb3) + 8].colliderect(self.pw8) or \
                            self.boxLst[self.boxLst.index(self.pb3) + 8].colliderect(self.Kw) or \
                            self.boxLst[self.boxLst.index(self.pb3) + 8].colliderect(self.Qw) or \
                            self.boxLst[self.boxLst.index(self.pb3) + 8].colliderect(self.rw1) or \
                            self.boxLst[self.boxLst.index(self.pb3) + 8].colliderect(self.rw2) or \
                            self.boxLst[self.boxLst.index(self.pb3) + 8].colliderect(self.kw1) or \
                            self.boxLst[self.boxLst.index(self.pb3) + 8].colliderect(self.kw2) or \
                            self.boxLst[self.boxLst.index(self.pb3) + 8].colliderect(self.bw1) or \
                            self.boxLst[self.boxLst.index(self.pb3) + 8].colliderect(self.bw2) or \
                            self.boxLst[self.boxLst.index(self.pb3) + 8].colliderect(self.pb2) or \
                            self.boxLst[self.boxLst.index(self.pb3) + 8].colliderect(self.pb1) or \
                            self.boxLst[self.boxLst.index(self.pb3) + 8].colliderect(self.pb4) or \
                            self.boxLst[self.boxLst.index(self.pb3) + 8].colliderect(self.pb5) or \
                            self.boxLst[self.boxLst.index(self.pb3) + 8].colliderect(self.pb6) or \
                            self.boxLst[self.boxLst.index(self.pb3) + 8].colliderect(self.pb7) or \
                            self.boxLst[self.boxLst.index(self.pb3) + 8].colliderect(self.pb8) or \
                            self.boxLst[self.boxLst.index(self.pb3) + 8].colliderect(self.Kb) or \
                            self.boxLst[self.boxLst.index(self.pb3) + 8].colliderect(self.Qb) or \
                            self.boxLst[self.boxLst.index(self.pb3) + 8].colliderect(self.rb1) or \
                            self.boxLst[self.boxLst.index(self.pb3) + 8].colliderect(self.rb2) or \
                            self.boxLst[self.boxLst.index(self.pb3) + 8].colliderect(self.kb1) or \
                            self.boxLst[self.boxLst.index(self.pb3) + 8].colliderect(self.kb2) or \
                            self.boxLst[self.boxLst.index(self.pb3) + 8].colliderect(self.bb1) or \
                            self.boxLst[self.boxLst.index(self.pb3) + 8].colliderect(self.bb2):
                        self.pawnBlack3Clicked = 0
                if 0 * self.boxSize <= self.pb3.x <= 6 * self.boxSize and self.pb3.y < self.box57.y:
                    if self.boxLst[self.boxLst.index(self.pb3) + 8 + 1].colliderect(self.pw1) or \
                            self.boxLst[self.boxLst.index(self.pb3) + 8 + 1].colliderect(self.pw2) or \
                            self.boxLst[self.boxLst.index(self.pb3) + 8 + 1].colliderect(self.pw3) or \
                            self.boxLst[self.boxLst.index(self.pb3) + 8 + 1].colliderect(self.pw4) or \
                            self.boxLst[self.boxLst.index(self.pb3) + 8 + 1].colliderect(self.pw5) or \
                            self.boxLst[self.boxLst.index(self.pb3) + 8 + 1].colliderect(self.pw6) or \
                            self.boxLst[self.boxLst.index(self.pb3) + 8 + 1].colliderect(self.pw7) or \
                            self.boxLst[self.boxLst.index(self.pb3) + 8 + 1].colliderect(self.pw8) or \
                            self.boxLst[self.boxLst.index(self.pb3) + 8 + 1].colliderect(self.Kw) or \
                            self.boxLst[self.boxLst.index(self.pb3) + 8 + 1].colliderect(self.Qw) or \
                            self.boxLst[self.boxLst.index(self.pb3) + 8 + 1].colliderect(self.rw1) or \
                            self.boxLst[self.boxLst.index(self.pb3) + 8 + 1].colliderect(self.rw2) or \
                            self.boxLst[self.boxLst.index(self.pb3) + 8 + 1].colliderect(self.kw1) or \
                            self.boxLst[self.boxLst.index(self.pb3) + 8 + 1].colliderect(self.kw2) or \
                            self.boxLst[self.boxLst.index(self.pb3) + 8 + 1].colliderect(self.bw1) or \
                            self.boxLst[self.boxLst.index(self.pb3) + 8 + 1].colliderect(self.bw2):
                        pygame.draw.rect(self.window, self.red, self.boxLst[self.boxLst.index(self.pb3) + 8 + 1], border_radius=100)
                        self.pawnBlack3Clicked = 1
                        self.pawnBlack2Clicked = 0
                        self.pawnBlack1Clicked = 0
                        self.pawnBlack4Clicked = 0
                        self.pawnBlack5Clicked = 0
                        self.pawnBlack6Clicked = 0
                        self.pawnBlack7Clicked = 0
                        self.pawnBlack8Clicked = 0
                        self.KingBlackClicked = 0
                        self.knightBlack1Clicked = 0
                        self.knightBlack2Clicked = 0
                        self.rookBlack1Clicked = 0
                        self.rookBlack2Clicked = 0
                        self.bishopBlack1Clicked = 0
                        self.bishopBlack2Clicked = 0
                        self.QueenBlackClicked = 0
                        self.pawnBlack3Clicked_cut = 1
                if 1 * self.boxSize <= self.pb3.x <= 7 * self.boxSize and self.pb3.y < self.box57.y:
                    if self.boxLst[self.boxLst.index(self.pb3) + 8 - 1].colliderect(self.pw1) or \
                            self.boxLst[self.boxLst.index(self.pb3) + 8 - 1].colliderect(self.pw2) or \
                            self.boxLst[self.boxLst.index(self.pb3) + 8 - 1].colliderect(self.pw3) or \
                            self.boxLst[self.boxLst.index(self.pb3) + 8 - 1].colliderect(self.pw4) or \
                            self.boxLst[self.boxLst.index(self.pb3) + 8 - 1].colliderect(self.pw5) or \
                            self.boxLst[self.boxLst.index(self.pb3) + 8 - 1].colliderect(self.pw6) or \
                            self.boxLst[self.boxLst.index(self.pb3) + 8 - 1].colliderect(self.pw7) or \
                            self.boxLst[self.boxLst.index(self.pb3) + 8 - 1].colliderect(self.pw8) or \
                            self.boxLst[self.boxLst.index(self.pb3) + 8 - 1].colliderect(self.Kw) or \
                            self.boxLst[self.boxLst.index(self.pb3) + 8 - 1].colliderect(self.Qw) or \
                            self.boxLst[self.boxLst.index(self.pb3) + 8 - 1].colliderect(self.rw1) or \
                            self.boxLst[self.boxLst.index(self.pb3) + 8 - 1].colliderect(self.rw2) or \
                            self.boxLst[self.boxLst.index(self.pb3) + 8 - 1].colliderect(self.kw1) or \
                            self.boxLst[self.boxLst.index(self.pb3) + 8 - 1].colliderect(self.kw2) or \
                            self.boxLst[self.boxLst.index(self.pb3) + 8 - 1].colliderect(self.bw1) or \
                            self.boxLst[self.boxLst.index(self.pb3) + 8 - 1].colliderect(self.bw2):
                        pygame.draw.rect(self.window, self.red, self.boxLst[self.boxLst.index(self.pb3) + 8 - 1], border_radius=100)
                        self.pawnBlack3Clicked = 1
                        self.pawnBlack2Clicked = 0
                        self.pawnBlack1Clicked = 0
                        self.pawnBlack4Clicked = 0
                        self.pawnBlack5Clicked = 0
                        self.pawnBlack6Clicked = 0
                        self.pawnBlack7Clicked = 0
                        self.pawnBlack8Clicked = 0
                        self.KingBlackClicked = 0
                        self.knightBlack1Clicked = 0
                        self.knightBlack2Clicked = 0
                        self.rookBlack1Clicked = 0
                        self.rookBlack2Clicked = 0
                        self.bishopBlack1Clicked = 0
                        self.bishopBlack2Clicked = 0
                        self.QueenBlackClicked = 0
                        self.pawnBlack3Clicked_cut = 1

            elif self.pb4.collidepoint(self.mouse_x, self.mouse_y):
                if self.pb4.y < self.box57.y:
                    if not self.boxLst[self.boxLst.index(self.pb4) + 8].colliderect(self.pw1) and not \
                            self.boxLst[self.boxLst.index(self.pb4) + 8].colliderect(self.pw2) and not \
                            self.boxLst[self.boxLst.index(self.pb4) + 8].colliderect(self.pw3) and not \
                            self.boxLst[self.boxLst.index(self.pb4) + 8].colliderect(self.pw4) and not \
                            self.boxLst[self.boxLst.index(self.pb4) + 8].colliderect(self.pw5) and not \
                            self.boxLst[self.boxLst.index(self.pb4) + 8].colliderect(self.pw6) and not \
                            self.boxLst[self.boxLst.index(self.pb4) + 8].colliderect(self.pw7) and not \
                            self.boxLst[self.boxLst.index(self.pb4) + 8].colliderect(self.pw8) and not \
                            self.boxLst[self.boxLst.index(self.pb4) + 8].colliderect(self.Kw) and not \
                            self.boxLst[self.boxLst.index(self.pb4) + 8].colliderect(self.Qw) and not \
                            self.boxLst[self.boxLst.index(self.pb4) + 8].colliderect(self.rw1) and not \
                            self.boxLst[self.boxLst.index(self.pb4) + 8].colliderect(self.rw2) and not \
                            self.boxLst[self.boxLst.index(self.pb4) + 8].colliderect(self.kw1) and not \
                            self.boxLst[self.boxLst.index(self.pb4) + 8].colliderect(self.kw2) and not \
                            self.boxLst[self.boxLst.index(self.pb4) + 8].colliderect(self.bw1) and not \
                            self.boxLst[self.boxLst.index(self.pb4) + 8].colliderect(self.bw2) and not \
                            self.boxLst[self.boxLst.index(self.pb4) + 8].colliderect(self.pb2) and not \
                            self.boxLst[self.boxLst.index(self.pb4) + 8].colliderect(self.pb3) and not \
                            self.boxLst[self.boxLst.index(self.pb4) + 8].colliderect(self.pb1) and not \
                            self.boxLst[self.boxLst.index(self.pb4) + 8].colliderect(self.pb5) and not \
                            self.boxLst[self.boxLst.index(self.pb4) + 8].colliderect(self.pb6) and not \
                            self.boxLst[self.boxLst.index(self.pb4) + 8].colliderect(self.pb7) and not \
                            self.boxLst[self.boxLst.index(self.pb4) + 8].colliderect(self.pb8) and not \
                            self.boxLst[self.boxLst.index(self.pb4) + 8].colliderect(self.Kb) and not \
                            self.boxLst[self.boxLst.index(self.pb4) + 8].colliderect(self.Qb) and not \
                            self.boxLst[self.boxLst.index(self.pb4) + 8].colliderect(self.rb1) and not \
                            self.boxLst[self.boxLst.index(self.pb4) + 8].colliderect(self.rb2) and not \
                            self.boxLst[self.boxLst.index(self.pb4) + 8].colliderect(self.kb1) and not \
                            self.boxLst[self.boxLst.index(self.pb4) + 8].colliderect(self.kb2) and not \
                            self.boxLst[self.boxLst.index(self.pb4) + 8].colliderect(self.bb1) and not \
                            self.boxLst[self.boxLst.index(self.pb4) + 8].colliderect(self.bb2):
                        pygame.draw.rect(self.window, self.blue, self.boxLst[self.boxLst.index(self.pb4) + 8], border_radius=100)
                        self.pawnBlack4Clicked = 1
                        self.pawnBlack4Clicked_plus8 = 1
                        self.pawnBlack2Clicked = 0
                        self.pawnBlack3Clicked = 0
                        self.pawnBlack1Clicked = 0
                        self.pawnBlack5Clicked = 0
                        self.pawnBlack6Clicked = 0
                        self.pawnBlack7Clicked = 0
                        self.pawnBlack8Clicked = 0
                        self.KingBlackClicked = 0
                        self.knightBlack1Clicked = 0
                        self.knightBlack2Clicked = 0
                        self.rookBlack1Clicked = 0
                        self.rookBlack2Clicked = 0
                        self.bishopBlack1Clicked = 0
                        self.bishopBlack2Clicked = 0
                        self.QueenBlackClicked = 0
                    if self.pb4.y < self.box17.y:
                        if self.pawnBlack4Clicked_plus8 == 1:
                            if not self.boxLst[self.boxLst.index(self.pb4) + 16].colliderect(self.pw1) and not \
                                    self.boxLst[self.boxLst.index(self.pb4) + 16].colliderect(self.pw2) and not \
                                    self.boxLst[self.boxLst.index(self.pb4) + 16].colliderect(self.pw3) and not \
                                    self.boxLst[self.boxLst.index(self.pb4) + 16].colliderect(self.pw4) and not \
                                    self.boxLst[self.boxLst.index(self.pb4) + 16].colliderect(self.pw5) and not \
                                    self.boxLst[self.boxLst.index(self.pb4) + 16].colliderect(self.pw6) and not \
                                    self.boxLst[self.boxLst.index(self.pb4) + 16].colliderect(self.pw7) and not \
                                    self.boxLst[self.boxLst.index(self.pb4) + 16].colliderect(self.pw8) and not \
                                    self.boxLst[self.boxLst.index(self.pb4) + 16].colliderect(self.Kw) and not \
                                    self.boxLst[self.boxLst.index(self.pb4) + 16].colliderect(self.Qw) and not \
                                    self.boxLst[self.boxLst.index(self.pb4) + 16].colliderect(self.rw1) and not \
                                    self.boxLst[self.boxLst.index(self.pb4) + 16].colliderect(self.rw2) and not \
                                    self.boxLst[self.boxLst.index(self.pb4) + 16].colliderect(self.kw1) and not \
                                    self.boxLst[self.boxLst.index(self.pb4) + 16].colliderect(self.kw2) and not \
                                    self.boxLst[self.boxLst.index(self.pb4) + 16].colliderect(self.bw1) and not \
                                    self.boxLst[self.boxLst.index(self.pb4) + 16].colliderect(self.bw2) and not \
                                    self.boxLst[self.boxLst.index(self.pb4) + 16].colliderect(self.pb2) and not \
                                    self.boxLst[self.boxLst.index(self.pb4) + 16].colliderect(self.pb3) and not \
                                    self.boxLst[self.boxLst.index(self.pb4) + 16].colliderect(self.pb1) and not \
                                    self.boxLst[self.boxLst.index(self.pb4) + 16].colliderect(self.pb5) and not \
                                    self.boxLst[self.boxLst.index(self.pb4) + 16].colliderect(self.pb6) and not \
                                    self.boxLst[self.boxLst.index(self.pb4) + 16].colliderect(self.pb7) and not \
                                    self.boxLst[self.boxLst.index(self.pb4) + 16].colliderect(self.pb8) and not \
                                    self.boxLst[self.boxLst.index(self.pb4) + 16].colliderect(self.Kb) and not \
                                    self.boxLst[self.boxLst.index(self.pb4) + 16].colliderect(self.Qb) and not \
                                    self.boxLst[self.boxLst.index(self.pb4) + 16].colliderect(self.rb1) and not \
                                    self.boxLst[self.boxLst.index(self.pb4) + 16].colliderect(self.rb2) and not \
                                    self.boxLst[self.boxLst.index(self.pb4) + 16].colliderect(self.kb1) and not \
                                    self.boxLst[self.boxLst.index(self.pb4) + 16].colliderect(self.kb2) and not \
                                    self.boxLst[self.boxLst.index(self.pb4) + 16].colliderect(self.bb1) and not \
                                    self.boxLst[self.boxLst.index(self.pb4) + 16].colliderect(self.bb2):
                                pygame.draw.rect(self.window, self.blue, self.boxLst[self.boxLst.index(self.pb4) + 16], border_radius=100)
                                self.pawnBlack4Clicked = 1
                                self.pawnBlack2Clicked = 0
                                self.pawnBlack3Clicked = 0
                                self.pawnBlack1Clicked = 0
                                self.pawnBlack5Clicked = 0
                                self.pawnBlack6Clicked = 0
                                self.pawnBlack7Clicked = 0
                                self.pawnBlack8Clicked = 0
                                self.KingBlackClicked = 0
                                self.knightBlack1Clicked = 0
                                self.knightBlack2Clicked = 0
                                self.rookBlack1Clicked = 0
                                self.rookBlack2Clicked = 0
                                self.bishopBlack1Clicked = 0
                                self.bishopBlack2Clicked = 0
                                self.QueenBlackClicked = 0
                                self.pawnBlack4Clicked_twoStep = 1
                            elif self.boxLst[self.boxLst.index(self.pb4) + 16].colliderect(self.pw1) or \
                                    self.boxLst[self.boxLst.index(self.pb4) + 16].colliderect(self.pw2) or \
                                    self.boxLst[self.boxLst.index(self.pb4) + 16].colliderect(self.pw3) or \
                                    self.boxLst[self.boxLst.index(self.pb4) + 16].colliderect(self.pw4) or \
                                    self.boxLst[self.boxLst.index(self.pb4) + 16].colliderect(self.pw5) or \
                                    self.boxLst[self.boxLst.index(self.pb4) + 16].colliderect(self.pw6) or \
                                    self.boxLst[self.boxLst.index(self.pb4) + 16].colliderect(self.pw7) or \
                                    self.boxLst[self.boxLst.index(self.pb4) + 16].colliderect(self.pw8) or \
                                    self.boxLst[self.boxLst.index(self.pb4) + 16].colliderect(self.Kw) or \
                                    self.boxLst[self.boxLst.index(self.pb4) + 16].colliderect(self.Qw) or \
                                    self.boxLst[self.boxLst.index(self.pb4) + 16].colliderect(self.rw1) or \
                                    self.boxLst[self.boxLst.index(self.pb4) + 16].colliderect(self.rw2) or \
                                    self.boxLst[self.boxLst.index(self.pb4) + 16].colliderect(self.kw1) or \
                                    self.boxLst[self.boxLst.index(self.pb4) + 16].colliderect(self.kw2) or \
                                    self.boxLst[self.boxLst.index(self.pb4) + 16].colliderect(self.bw1) or \
                                    self.boxLst[self.boxLst.index(self.pb4) + 16].colliderect(self.bw2) or \
                                    self.boxLst[self.boxLst.index(self.pb4) + 16].colliderect(self.pb2) or \
                                    self.boxLst[self.boxLst.index(self.pb4) + 16].colliderect(self.pb3) or \
                                    self.boxLst[self.boxLst.index(self.pb4) + 16].colliderect(self.pb1) or \
                                    self.boxLst[self.boxLst.index(self.pb4) + 16].colliderect(self.pb5) or \
                                    self.boxLst[self.boxLst.index(self.pb4) + 16].colliderect(self.pb6) or \
                                    self.boxLst[self.boxLst.index(self.pb4) + 16].colliderect(self.pb7) or \
                                    self.boxLst[self.boxLst.index(self.pb4) + 16].colliderect(self.pb8) or \
                                    self.boxLst[self.boxLst.index(self.pb4) + 16].colliderect(self.Kb) or \
                                    self.boxLst[self.boxLst.index(self.pb4) + 16].colliderect(self.Qb) or \
                                    self.boxLst[self.boxLst.index(self.pb4) + 16].colliderect(self.rb1) or \
                                    self.boxLst[self.boxLst.index(self.pb4) + 16].colliderect(self.rb2) or \
                                    self.boxLst[self.boxLst.index(self.pb4) + 16].colliderect(self.kb1) or \
                                    self.boxLst[self.boxLst.index(self.pb4) + 16].colliderect(self.kb2) or \
                                    self.boxLst[self.boxLst.index(self.pb4) + 16].colliderect(self.bb1) or \
                                    self.boxLst[self.boxLst.index(self.pb4) + 16].colliderect(self.bb2):
                                self.pawnBlack4Clicked_twoStep = 0
                if self.pb4.y < self.box57.y:
                    if self.boxLst[self.boxLst.index(self.pb4) + 8].colliderect(self.pw1) or \
                            self.boxLst[self.boxLst.index(self.pb4) + 8].colliderect(self.pw2) or \
                            self.boxLst[self.boxLst.index(self.pb4) + 8].colliderect(self.pw3) or \
                            self.boxLst[self.boxLst.index(self.pb4) + 8].colliderect(self.pw4) or \
                            self.boxLst[self.boxLst.index(self.pb4) + 8].colliderect(self.pw5) or \
                            self.boxLst[self.boxLst.index(self.pb4) + 8].colliderect(self.pw6) or \
                            self.boxLst[self.boxLst.index(self.pb4) + 8].colliderect(self.pw7) or \
                            self.boxLst[self.boxLst.index(self.pb4) + 8].colliderect(self.pw8) or \
                            self.boxLst[self.boxLst.index(self.pb4) + 8].colliderect(self.Kw) or \
                            self.boxLst[self.boxLst.index(self.pb4) + 8].colliderect(self.Qw) or \
                            self.boxLst[self.boxLst.index(self.pb4) + 8].colliderect(self.rw1) or \
                            self.boxLst[self.boxLst.index(self.pb4) + 8].colliderect(self.rw2) or \
                            self.boxLst[self.boxLst.index(self.pb4) + 8].colliderect(self.kw1) or \
                            self.boxLst[self.boxLst.index(self.pb4) + 8].colliderect(self.kw2) or \
                            self.boxLst[self.boxLst.index(self.pb4) + 8].colliderect(self.bw1) or \
                            self.boxLst[self.boxLst.index(self.pb4) + 8].colliderect(self.bw2) or \
                            self.boxLst[self.boxLst.index(self.pb4) + 8].colliderect(self.pb2) or \
                            self.boxLst[self.boxLst.index(self.pb4) + 8].colliderect(self.pb3) or \
                            self.boxLst[self.boxLst.index(self.pb4) + 8].colliderect(self.pb1) or \
                            self.boxLst[self.boxLst.index(self.pb4) + 8].colliderect(self.pb5) or \
                            self.boxLst[self.boxLst.index(self.pb4) + 8].colliderect(self.pb6) or \
                            self.boxLst[self.boxLst.index(self.pb4) + 8].colliderect(self.pb7) or \
                            self.boxLst[self.boxLst.index(self.pb4) + 8].colliderect(self.pb8) or \
                            self.boxLst[self.boxLst.index(self.pb4) + 8].colliderect(self.Kb) or \
                            self.boxLst[self.boxLst.index(self.pb4) + 8].colliderect(self.Qb) or \
                            self.boxLst[self.boxLst.index(self.pb4) + 8].colliderect(self.rb1) or \
                            self.boxLst[self.boxLst.index(self.pb4) + 8].colliderect(self.rb2) or \
                            self.boxLst[self.boxLst.index(self.pb4) + 8].colliderect(self.kb1) or \
                            self.boxLst[self.boxLst.index(self.pb4) + 8].colliderect(self.kb2) or \
                            self.boxLst[self.boxLst.index(self.pb4) + 8].colliderect(self.bb1) or \
                            self.boxLst[self.boxLst.index(self.pb4) + 8].colliderect(self.bb2):
                        self.pawnBlack4Clicked = 0
                if 0 * self.boxSize <= self.pb4.x <= 6 * self.boxSize and self.pb4.y < self.box57.y:
                    if self.boxLst[self.boxLst.index(self.pb4) + 8 + 1].colliderect(self.pw1) or \
                            self.boxLst[self.boxLst.index(self.pb4) + 8 + 1].colliderect(self.pw2) or \
                            self.boxLst[self.boxLst.index(self.pb4) + 8 + 1].colliderect(self.pw3) or \
                            self.boxLst[self.boxLst.index(self.pb4) + 8 + 1].colliderect(self.pw4) or \
                            self.boxLst[self.boxLst.index(self.pb4) + 8 + 1].colliderect(self.pw5) or \
                            self.boxLst[self.boxLst.index(self.pb4) + 8 + 1].colliderect(self.pw6) or \
                            self.boxLst[self.boxLst.index(self.pb4) + 8 + 1].colliderect(self.pw7) or \
                            self.boxLst[self.boxLst.index(self.pb4) + 8 + 1].colliderect(self.pw8) or \
                            self.boxLst[self.boxLst.index(self.pb4) + 8 + 1].colliderect(self.Kw) or \
                            self.boxLst[self.boxLst.index(self.pb4) + 8 + 1].colliderect(self.Qw) or \
                            self.boxLst[self.boxLst.index(self.pb4) + 8 + 1].colliderect(self.rw1) or \
                            self.boxLst[self.boxLst.index(self.pb4) + 8 + 1].colliderect(self.rw2) or \
                            self.boxLst[self.boxLst.index(self.pb4) + 8 + 1].colliderect(self.kw1) or \
                            self.boxLst[self.boxLst.index(self.pb4) + 8 + 1].colliderect(self.kw2) or \
                            self.boxLst[self.boxLst.index(self.pb4) + 8 + 1].colliderect(self.bw1) or \
                            self.boxLst[self.boxLst.index(self.pb4) + 8 + 1].colliderect(self.bw2):
                        pygame.draw.rect(self.window, self.red, self.boxLst[self.boxLst.index(self.pb4) + 8 + 1], border_radius=100)
                        self.pawnBlack4Clicked = 1
                        self.pawnBlack2Clicked = 0
                        self.pawnBlack3Clicked = 0
                        self.pawnBlack1Clicked = 0
                        self.pawnBlack5Clicked = 0
                        self.pawnBlack6Clicked = 0
                        self.pawnBlack7Clicked = 0
                        self.pawnBlack8Clicked = 0
                        self.KingBlackClicked = 0
                        self.knightBlack1Clicked = 0
                        self.knightBlack2Clicked = 0
                        self.rookBlack1Clicked = 0
                        self.rookBlack2Clicked = 0
                        self.bishopBlack1Clicked = 0
                        self.bishopBlack2Clicked = 0
                        self.QueenBlackClicked = 0
                        self.pawnBlack4Clicked_cut = 1
                if 1 * self.boxSize <= self.pb4.x <= 7 * self.boxSize and self.pb4.y < self.box57.y:
                    if self.boxLst[self.boxLst.index(self.pb4) + 8 - 1].colliderect(self.pw1) or \
                            self.boxLst[self.boxLst.index(self.pb4) + 8 - 1].colliderect(self.pw2) or \
                            self.boxLst[self.boxLst.index(self.pb4) + 8 - 1].colliderect(self.pw3) or \
                            self.boxLst[self.boxLst.index(self.pb4) + 8 - 1].colliderect(self.pw4) or \
                            self.boxLst[self.boxLst.index(self.pb4) + 8 - 1].colliderect(self.pw5) or \
                            self.boxLst[self.boxLst.index(self.pb4) + 8 - 1].colliderect(self.pw6) or \
                            self.boxLst[self.boxLst.index(self.pb4) + 8 - 1].colliderect(self.pw7) or \
                            self.boxLst[self.boxLst.index(self.pb4) + 8 - 1].colliderect(self.pw8) or \
                            self.boxLst[self.boxLst.index(self.pb4) + 8 - 1].colliderect(self.Kw) or \
                            self.boxLst[self.boxLst.index(self.pb4) + 8 - 1].colliderect(self.Qw) or \
                            self.boxLst[self.boxLst.index(self.pb4) + 8 - 1].colliderect(self.rw1) or \
                            self.boxLst[self.boxLst.index(self.pb4) + 8 - 1].colliderect(self.rw2) or \
                            self.boxLst[self.boxLst.index(self.pb4) + 8 - 1].colliderect(self.kw1) or \
                            self.boxLst[self.boxLst.index(self.pb4) + 8 - 1].colliderect(self.kw2) or \
                            self.boxLst[self.boxLst.index(self.pb4) + 8 - 1].colliderect(self.bw1) or \
                            self.boxLst[self.boxLst.index(self.pb4) + 8 - 1].colliderect(self.bw2):
                        pygame.draw.rect(self.window, self.red, self.boxLst[self.boxLst.index(self.pb4) + 8 - 1], border_radius=100)
                        self.pawnBlack4Clicked = 1
                        self.pawnBlack2Clicked = 0
                        self.pawnBlack3Clicked = 0
                        self.pawnBlack1Clicked = 0
                        self.pawnBlack5Clicked = 0
                        self.pawnBlack6Clicked = 0
                        self.pawnBlack7Clicked = 0
                        self.pawnBlack8Clicked = 0
                        self.KingBlackClicked = 0
                        self.knightBlack1Clicked = 0
                        self.knightBlack2Clicked = 0
                        self.rookBlack1Clicked = 0
                        self.rookBlack2Clicked = 0
                        self.bishopBlack1Clicked = 0
                        self.bishopBlack2Clicked = 0
                        self.QueenBlackClicked = 0
                        self.pawnBlack4Clicked_cut = 1

            elif self.pb5.collidepoint(self.mouse_x, self.mouse_y):
                if self.pb5.y < self.box57.y:
                    if not self.boxLst[self.boxLst.index(self.pb5) + 8].colliderect(self.pw1) and not \
                            self.boxLst[self.boxLst.index(self.pb5) + 8].colliderect(self.pw2) and not \
                            self.boxLst[self.boxLst.index(self.pb5) + 8].colliderect(self.pw3) and not \
                            self.boxLst[self.boxLst.index(self.pb5) + 8].colliderect(self.pw4) and not \
                            self.boxLst[self.boxLst.index(self.pb5) + 8].colliderect(self.pw5) and not \
                            self.boxLst[self.boxLst.index(self.pb5) + 8].colliderect(self.pw6) and not \
                            self.boxLst[self.boxLst.index(self.pb5) + 8].colliderect(self.pw7) and not \
                            self.boxLst[self.boxLst.index(self.pb5) + 8].colliderect(self.pw8) and not \
                            self.boxLst[self.boxLst.index(self.pb5) + 8].colliderect(self.Kw) and not \
                            self.boxLst[self.boxLst.index(self.pb5) + 8].colliderect(self.Qw) and not \
                            self.boxLst[self.boxLst.index(self.pb5) + 8].colliderect(self.rw1) and not \
                            self.boxLst[self.boxLst.index(self.pb5) + 8].colliderect(self.rw2) and not \
                            self.boxLst[self.boxLst.index(self.pb5) + 8].colliderect(self.kw1) and not \
                            self.boxLst[self.boxLst.index(self.pb5) + 8].colliderect(self.kw2) and not \
                            self.boxLst[self.boxLst.index(self.pb5) + 8].colliderect(self.bw1) and not \
                            self.boxLst[self.boxLst.index(self.pb5) + 8].colliderect(self.bw2) and not \
                            self.boxLst[self.boxLst.index(self.pb5) + 8].colliderect(self.pb2) and not \
                            self.boxLst[self.boxLst.index(self.pb5) + 8].colliderect(self.pb3) and not \
                            self.boxLst[self.boxLst.index(self.pb5) + 8].colliderect(self.pb4) and not \
                            self.boxLst[self.boxLst.index(self.pb5) + 8].colliderect(self.pb1) and not \
                            self.boxLst[self.boxLst.index(self.pb5) + 8].colliderect(self.pb6) and not \
                            self.boxLst[self.boxLst.index(self.pb5) + 8].colliderect(self.pb7) and not \
                            self.boxLst[self.boxLst.index(self.pb5) + 8].colliderect(self.pb8) and not \
                            self.boxLst[self.boxLst.index(self.pb5) + 8].colliderect(self.Kb) and not \
                            self.boxLst[self.boxLst.index(self.pb5) + 8].colliderect(self.Qb) and not \
                            self.boxLst[self.boxLst.index(self.pb5) + 8].colliderect(self.rb1) and not \
                            self.boxLst[self.boxLst.index(self.pb5) + 8].colliderect(self.rb2) and not \
                            self.boxLst[self.boxLst.index(self.pb5) + 8].colliderect(self.kb1) and not \
                            self.boxLst[self.boxLst.index(self.pb5) + 8].colliderect(self.kb2) and not \
                            self.boxLst[self.boxLst.index(self.pb5) + 8].colliderect(self.bb1) and not \
                            self.boxLst[self.boxLst.index(self.pb5) + 8].colliderect(self.bb2):
                        pygame.draw.rect(self.window, self.blue, self.boxLst[self.boxLst.index(self.pb5) + 8], border_radius=100)
                        self.pawnBlack5Clicked = 1
                        self.pawnBlack5Clicked_plus8 = 1
                        self.pawnBlack2Clicked = 0
                        self.pawnBlack3Clicked = 0
                        self.pawnBlack4Clicked = 0
                        self.pawnBlack1Clicked = 0
                        self.pawnBlack6Clicked = 0
                        self.pawnBlack7Clicked = 0
                        self.pawnBlack8Clicked = 0
                        self.KingBlackClicked = 0
                        self.knightBlack1Clicked = 0
                        self.knightBlack2Clicked = 0
                        self.rookBlack1Clicked = 0
                        self.rookBlack2Clicked = 0
                        self.bishopBlack1Clicked = 0
                        self.bishopBlack2Clicked = 0
                        self.QueenBlackClicked = 0
                    if self.pb5.y < self.box17.y:
                        if self.pawnBlack5Clicked_plus8 == 1:
                            if not self.boxLst[self.boxLst.index(self.pb5) + 16].colliderect(self.pw1) and not \
                                    self.boxLst[self.boxLst.index(self.pb5) + 16].colliderect(self.pw2) and not \
                                    self.boxLst[self.boxLst.index(self.pb5) + 16].colliderect(self.pw3) and not \
                                    self.boxLst[self.boxLst.index(self.pb5) + 16].colliderect(self.pw4) and not \
                                    self.boxLst[self.boxLst.index(self.pb5) + 16].colliderect(self.pw5) and not \
                                    self.boxLst[self.boxLst.index(self.pb5) + 16].colliderect(self.pw6) and not \
                                    self.boxLst[self.boxLst.index(self.pb5) + 16].colliderect(self.pw7) and not \
                                    self.boxLst[self.boxLst.index(self.pb5) + 16].colliderect(self.pw8) and not \
                                    self.boxLst[self.boxLst.index(self.pb5) + 16].colliderect(self.Kw) and not \
                                    self.boxLst[self.boxLst.index(self.pb5) + 16].colliderect(self.Qw) and not \
                                    self.boxLst[self.boxLst.index(self.pb5) + 16].colliderect(self.rw1) and not \
                                    self.boxLst[self.boxLst.index(self.pb5) + 16].colliderect(self.rw2) and not \
                                    self.boxLst[self.boxLst.index(self.pb5) + 16].colliderect(self.kw1) and not \
                                    self.boxLst[self.boxLst.index(self.pb5) + 16].colliderect(self.kw2) and not \
                                    self.boxLst[self.boxLst.index(self.pb5) + 16].colliderect(self.bw1) and not \
                                    self.boxLst[self.boxLst.index(self.pb5) + 16].colliderect(self.bw2) and not \
                                    self.boxLst[self.boxLst.index(self.pb5) + 16].colliderect(self.pb2) and not \
                                    self.boxLst[self.boxLst.index(self.pb5) + 16].colliderect(self.pb3) and not \
                                    self.boxLst[self.boxLst.index(self.pb5) + 16].colliderect(self.pb4) and not \
                                    self.boxLst[self.boxLst.index(self.pb5) + 16].colliderect(self.pb1) and not \
                                    self.boxLst[self.boxLst.index(self.pb5) + 16].colliderect(self.pb6) and not \
                                    self.boxLst[self.boxLst.index(self.pb5) + 16].colliderect(self.pb7) and not \
                                    self.boxLst[self.boxLst.index(self.pb5) + 16].colliderect(self.pb8) and not \
                                    self.boxLst[self.boxLst.index(self.pb5) + 16].colliderect(self.Kb) and not \
                                    self.boxLst[self.boxLst.index(self.pb5) + 16].colliderect(self.Qb) and not \
                                    self.boxLst[self.boxLst.index(self.pb5) + 16].colliderect(self.rb1) and not \
                                    self.boxLst[self.boxLst.index(self.pb5) + 16].colliderect(self.rb2) and not \
                                    self.boxLst[self.boxLst.index(self.pb5) + 16].colliderect(self.kb1) and not \
                                    self.boxLst[self.boxLst.index(self.pb5) + 16].colliderect(self.kb2) and not \
                                    self.boxLst[self.boxLst.index(self.pb5) + 16].colliderect(self.bb1) and not \
                                    self.boxLst[self.boxLst.index(self.pb5) + 16].colliderect(self.bb2):
                                pygame.draw.rect(self.window, self.blue, self.boxLst[self.boxLst.index(self.pb5) + 16], border_radius=100)
                                self.pawnBlack5Clicked = 1
                                self.pawnBlack2Clicked = 0
                                self.pawnBlack3Clicked = 0
                                self.pawnBlack4Clicked = 0
                                self.pawnBlack1Clicked = 0
                                self.pawnBlack6Clicked = 0
                                self.pawnBlack7Clicked = 0
                                self.pawnBlack8Clicked = 0
                                self.KingBlackClicked = 0
                                self.knightBlack1Clicked = 0
                                self.knightBlack2Clicked = 0
                                self.rookBlack1Clicked = 0
                                self.rookBlack2Clicked = 0
                                self.bishopBlack1Clicked = 0
                                self.bishopBlack2Clicked = 0
                                self.QueenBlackClicked = 0
                                self.pawnBlack5Clicked_twoStep = 1
                            elif self.boxLst[self.boxLst.index(self.pb5) + 16].colliderect(self.pw1) or \
                                    self.boxLst[self.boxLst.index(self.pb5) + 16].colliderect(self.pw2) or \
                                    self.boxLst[self.boxLst.index(self.pb5) + 16].colliderect(self.pw3) or \
                                    self.boxLst[self.boxLst.index(self.pb5) + 16].colliderect(self.pw4) or \
                                    self.boxLst[self.boxLst.index(self.pb5) + 16].colliderect(self.pw5) or \
                                    self.boxLst[self.boxLst.index(self.pb5) + 16].colliderect(self.pw6) or \
                                    self.boxLst[self.boxLst.index(self.pb5) + 16].colliderect(self.pw7) or \
                                    self.boxLst[self.boxLst.index(self.pb5) + 16].colliderect(self.pw8) or \
                                    self.boxLst[self.boxLst.index(self.pb5) + 16].colliderect(self.Kw) or \
                                    self.boxLst[self.boxLst.index(self.pb5) + 16].colliderect(self.Qw) or \
                                    self.boxLst[self.boxLst.index(self.pb5) + 16].colliderect(self.rw1) or \
                                    self.boxLst[self.boxLst.index(self.pb5) + 16].colliderect(self.rw2) or \
                                    self.boxLst[self.boxLst.index(self.pb5) + 16].colliderect(self.kw1) or \
                                    self.boxLst[self.boxLst.index(self.pb5) + 16].colliderect(self.kw2) or \
                                    self.boxLst[self.boxLst.index(self.pb5) + 16].colliderect(self.bw1) or \
                                    self.boxLst[self.boxLst.index(self.pb5) + 16].colliderect(self.bw2) or \
                                    self.boxLst[self.boxLst.index(self.pb5) + 16].colliderect(self.pb2) or \
                                    self.boxLst[self.boxLst.index(self.pb5) + 16].colliderect(self.pb3) or \
                                    self.boxLst[self.boxLst.index(self.pb5) + 16].colliderect(self.pb4) or \
                                    self.boxLst[self.boxLst.index(self.pb5) + 16].colliderect(self.pb1) or \
                                    self.boxLst[self.boxLst.index(self.pb5) + 16].colliderect(self.pb6) or \
                                    self.boxLst[self.boxLst.index(self.pb5) + 16].colliderect(self.pb7) or \
                                    self.boxLst[self.boxLst.index(self.pb5) + 16].colliderect(self.pb8) or \
                                    self.boxLst[self.boxLst.index(self.pb5) + 16].colliderect(self.Kb) or \
                                    self.boxLst[self.boxLst.index(self.pb5) + 16].colliderect(self.Qb) or \
                                    self.boxLst[self.boxLst.index(self.pb5) + 16].colliderect(self.rb1) or \
                                    self.boxLst[self.boxLst.index(self.pb5) + 16].colliderect(self.rb2) or \
                                    self.boxLst[self.boxLst.index(self.pb5) + 16].colliderect(self.kb1) or \
                                    self.boxLst[self.boxLst.index(self.pb5) + 16].colliderect(self.kb2) or \
                                    self.boxLst[self.boxLst.index(self.pb5) + 16].colliderect(self.bb1) or \
                                    self.boxLst[self.boxLst.index(self.pb5) + 16].colliderect(self.bb2):
                                self.pawnBlack5Clicked_twoStep = 0
                if self.pb5.y < self.box57.y:
                    if self.boxLst[self.boxLst.index(self.pb5) + 8].colliderect(self.pw1) or \
                            self.boxLst[self.boxLst.index(self.pb5) + 8].colliderect(self.pw2) or \
                            self.boxLst[self.boxLst.index(self.pb5) + 8].colliderect(self.pw3) or \
                            self.boxLst[self.boxLst.index(self.pb5) + 8].colliderect(self.pw4) or \
                            self.boxLst[self.boxLst.index(self.pb5) + 8].colliderect(self.pw5) or \
                            self.boxLst[self.boxLst.index(self.pb5) + 8].colliderect(self.pw6) or \
                            self.boxLst[self.boxLst.index(self.pb5) + 8].colliderect(self.pw7) or \
                            self.boxLst[self.boxLst.index(self.pb5) + 8].colliderect(self.pw8) or \
                            self.boxLst[self.boxLst.index(self.pb5) + 8].colliderect(self.Kw) or \
                            self.boxLst[self.boxLst.index(self.pb5) + 8].colliderect(self.Qw) or \
                            self.boxLst[self.boxLst.index(self.pb5) + 8].colliderect(self.rw1) or \
                            self.boxLst[self.boxLst.index(self.pb5) + 8].colliderect(self.rw2) or \
                            self.boxLst[self.boxLst.index(self.pb5) + 8].colliderect(self.kw1) or \
                            self.boxLst[self.boxLst.index(self.pb5) + 8].colliderect(self.kw2) or \
                            self.boxLst[self.boxLst.index(self.pb5) + 8].colliderect(self.bw1) or \
                            self.boxLst[self.boxLst.index(self.pb5) + 8].colliderect(self.bw2) or \
                            self.boxLst[self.boxLst.index(self.pb5) + 8].colliderect(self.pb2) or \
                            self.boxLst[self.boxLst.index(self.pb5) + 8].colliderect(self.pb3) or \
                            self.boxLst[self.boxLst.index(self.pb5) + 8].colliderect(self.pb4) or \
                            self.boxLst[self.boxLst.index(self.pb5) + 8].colliderect(self.pb1) or \
                            self.boxLst[self.boxLst.index(self.pb5) + 8].colliderect(self.pb6) or \
                            self.boxLst[self.boxLst.index(self.pb5) + 8].colliderect(self.pb7) or \
                            self.boxLst[self.boxLst.index(self.pb5) + 8].colliderect(self.pb8) or \
                            self.boxLst[self.boxLst.index(self.pb5) + 8].colliderect(self.Kb) or \
                            self.boxLst[self.boxLst.index(self.pb5) + 8].colliderect(self.Qb) or \
                            self.boxLst[self.boxLst.index(self.pb5) + 8].colliderect(self.rb1) or \
                            self.boxLst[self.boxLst.index(self.pb5) + 8].colliderect(self.rb2) or \
                            self.boxLst[self.boxLst.index(self.pb5) + 8].colliderect(self.kb1) or \
                            self.boxLst[self.boxLst.index(self.pb5) + 8].colliderect(self.kb2) or \
                            self.boxLst[self.boxLst.index(self.pb5) + 8].colliderect(self.bb1) or \
                            self.boxLst[self.boxLst.index(self.pb5) + 8].colliderect(self.bb2):
                        self.pawnBlack5Clicked = 0
                if 0 * self.boxSize <= self.pb5.x <= 6 * self.boxSize and self.pb5.y < self.box57.y:
                    if self.boxLst[self.boxLst.index(self.pb5) + 8 + 1].colliderect(self.pw1) or \
                            self.boxLst[self.boxLst.index(self.pb5) + 8 + 1].colliderect(self.pw2) or \
                            self.boxLst[self.boxLst.index(self.pb5) + 8 + 1].colliderect(self.pw3) or \
                            self.boxLst[self.boxLst.index(self.pb5) + 8 + 1].colliderect(self.pw4) or \
                            self.boxLst[self.boxLst.index(self.pb5) + 8 + 1].colliderect(self.pw5) or \
                            self.boxLst[self.boxLst.index(self.pb5) + 8 + 1].colliderect(self.pw6) or \
                            self.boxLst[self.boxLst.index(self.pb5) + 8 + 1].colliderect(self.pw7) or \
                            self.boxLst[self.boxLst.index(self.pb5) + 8 + 1].colliderect(self.pw8) or \
                            self.boxLst[self.boxLst.index(self.pb5) + 8 + 1].colliderect(self.Kw) or \
                            self.boxLst[self.boxLst.index(self.pb5) + 8 + 1].colliderect(self.Qw) or \
                            self.boxLst[self.boxLst.index(self.pb5) + 8 + 1].colliderect(self.rw1) or \
                            self.boxLst[self.boxLst.index(self.pb5) + 8 + 1].colliderect(self.rw2) or \
                            self.boxLst[self.boxLst.index(self.pb5) + 8 + 1].colliderect(self.kw1) or \
                            self.boxLst[self.boxLst.index(self.pb5) + 8 + 1].colliderect(self.kw2) or \
                            self.boxLst[self.boxLst.index(self.pb5) + 8 + 1].colliderect(self.bw1) or \
                            self.boxLst[self.boxLst.index(self.pb5) + 8 + 1].colliderect(self.bw2):
                        pygame.draw.rect(self.window, self.red, self.boxLst[self.boxLst.index(self.pb5) + 8 + 1], border_radius=100)
                        self.pawnBlack5Clicked = 1
                        self.pawnBlack2Clicked = 0
                        self.pawnBlack3Clicked = 0
                        self.pawnBlack4Clicked = 0
                        self.pawnBlack1Clicked = 0
                        self.pawnBlack6Clicked = 0
                        self.pawnBlack7Clicked = 0
                        self.pawnBlack8Clicked = 0
                        self.KingBlackClicked = 0
                        self.knightBlack1Clicked = 0
                        self.knightBlack2Clicked = 0
                        self.rookBlack1Clicked = 0
                        self.rookBlack2Clicked = 0
                        self.bishopBlack1Clicked = 0
                        self.bishopBlack2Clicked = 0
                        self.QueenBlackClicked = 0
                        self.pawnBlack5Clicked_cut = 1
                if 1 * self.boxSize <= self.pb5.x <= 7 * self.boxSize and self.pb5.y < self.box57.y:
                    if self.boxLst[self.boxLst.index(self.pb5) + 8 - 1].colliderect(self.pw1) or \
                            self.boxLst[self.boxLst.index(self.pb5) + 8 - 1].colliderect(self.pw2) or \
                            self.boxLst[self.boxLst.index(self.pb5) + 8 - 1].colliderect(self.pw3) or \
                            self.boxLst[self.boxLst.index(self.pb5) + 8 - 1].colliderect(self.pw4) or \
                            self.boxLst[self.boxLst.index(self.pb5) + 8 - 1].colliderect(self.pw5) or \
                            self.boxLst[self.boxLst.index(self.pb5) + 8 - 1].colliderect(self.pw6) or \
                            self.boxLst[self.boxLst.index(self.pb5) + 8 - 1].colliderect(self.pw7) or \
                            self.boxLst[self.boxLst.index(self.pb5) + 8 - 1].colliderect(self.pw8) or \
                            self.boxLst[self.boxLst.index(self.pb5) + 8 - 1].colliderect(self.Kw) or \
                            self.boxLst[self.boxLst.index(self.pb5) + 8 - 1].colliderect(self.Qw) or \
                            self.boxLst[self.boxLst.index(self.pb5) + 8 - 1].colliderect(self.rw1) or \
                            self.boxLst[self.boxLst.index(self.pb5) + 8 - 1].colliderect(self.rw2) or \
                            self.boxLst[self.boxLst.index(self.pb5) + 8 - 1].colliderect(self.kw1) or \
                            self.boxLst[self.boxLst.index(self.pb5) + 8 - 1].colliderect(self.kw2) or \
                            self.boxLst[self.boxLst.index(self.pb5) + 8 - 1].colliderect(self.bw1) or \
                            self.boxLst[self.boxLst.index(self.pb5) + 8 - 1].colliderect(self.bw2):
                        pygame.draw.rect(self.window, self.red, self.boxLst[self.boxLst.index(self.pb5) + 8 - 1], border_radius=100)
                        self.pawnBlack5Clicked = 1
                        self.pawnBlack2Clicked = 0
                        self.pawnBlack3Clicked = 0
                        self.pawnBlack4Clicked = 0
                        self.pawnBlack1Clicked = 0
                        self.pawnBlack6Clicked = 0
                        self.pawnBlack7Clicked = 0
                        self.pawnBlack8Clicked = 0
                        self.KingBlackClicked = 0
                        self.knightBlack1Clicked = 0
                        self.knightBlack2Clicked = 0
                        self.rookBlack1Clicked = 0
                        self.rookBlack2Clicked = 0
                        self.bishopBlack1Clicked = 0
                        self.bishopBlack2Clicked = 0
                        self.QueenBlackClicked = 0
                        self.pawnBlack5Clicked_cut = 1

            elif self.pb6.collidepoint(self.mouse_x, self.mouse_y):
                if self.pb6.y < self.box57.y:
                    if not self.boxLst[self.boxLst.index(self.pb6) + 8].colliderect(self.pw1) and not \
                            self.boxLst[self.boxLst.index(self.pb6) + 8].colliderect(self.pw2) and not \
                            self.boxLst[self.boxLst.index(self.pb6) + 8].colliderect(self.pw3) and not \
                            self.boxLst[self.boxLst.index(self.pb6) + 8].colliderect(self.pw4) and not \
                            self.boxLst[self.boxLst.index(self.pb6) + 8].colliderect(self.pw5) and not \
                            self.boxLst[self.boxLst.index(self.pb6) + 8].colliderect(self.pw6) and not \
                            self.boxLst[self.boxLst.index(self.pb6) + 8].colliderect(self.pw7) and not \
                            self.boxLst[self.boxLst.index(self.pb6) + 8].colliderect(self.pw8) and not \
                            self.boxLst[self.boxLst.index(self.pb6) + 8].colliderect(self.Kw) and not \
                            self.boxLst[self.boxLst.index(self.pb6) + 8].colliderect(self.Qw) and not \
                            self.boxLst[self.boxLst.index(self.pb6) + 8].colliderect(self.rw1) and not \
                            self.boxLst[self.boxLst.index(self.pb6) + 8].colliderect(self.rw2) and not \
                            self.boxLst[self.boxLst.index(self.pb6) + 8].colliderect(self.kw1) and not \
                            self.boxLst[self.boxLst.index(self.pb6) + 8].colliderect(self.kw2) and not \
                            self.boxLst[self.boxLst.index(self.pb6) + 8].colliderect(self.bw1) and not \
                            self.boxLst[self.boxLst.index(self.pb6) + 8].colliderect(self.bw2) and not \
                            self.boxLst[self.boxLst.index(self.pb6) + 8].colliderect(self.pb2) and not \
                            self.boxLst[self.boxLst.index(self.pb6) + 8].colliderect(self.pb3) and not \
                            self.boxLst[self.boxLst.index(self.pb6) + 8].colliderect(self.pb4) and not \
                            self.boxLst[self.boxLst.index(self.pb6) + 8].colliderect(self.pb5) and not \
                            self.boxLst[self.boxLst.index(self.pb6) + 8].colliderect(self.pb1) and not \
                            self.boxLst[self.boxLst.index(self.pb6) + 8].colliderect(self.pb7) and not \
                            self.boxLst[self.boxLst.index(self.pb6) + 8].colliderect(self.pb8) and not \
                            self.boxLst[self.boxLst.index(self.pb6) + 8].colliderect(self.Kb) and not \
                            self.boxLst[self.boxLst.index(self.pb6) + 8].colliderect(self.Qb) and not \
                            self.boxLst[self.boxLst.index(self.pb6) + 8].colliderect(self.rb1) and not \
                            self.boxLst[self.boxLst.index(self.pb6) + 8].colliderect(self.rb2) and not \
                            self.boxLst[self.boxLst.index(self.pb6) + 8].colliderect(self.kb1) and not \
                            self.boxLst[self.boxLst.index(self.pb6) + 8].colliderect(self.kb2) and not \
                            self.boxLst[self.boxLst.index(self.pb6) + 8].colliderect(self.bb1) and not \
                            self.boxLst[self.boxLst.index(self.pb6) + 8].colliderect(self.bb2):
                        pygame.draw.rect(self.window, self.blue, self.boxLst[self.boxLst.index(self.pb6) + 8], border_radius=100)
                        self.pawnBlack6Clicked = 1
                        self.pawnBlack6Clicked_plus8 = 1
                        self.pawnBlack2Clicked = 0
                        self.pawnBlack3Clicked = 0
                        self.pawnBlack4Clicked = 0
                        self.pawnBlack5Clicked = 0
                        self.pawnBlack1Clicked = 0
                        self.pawnBlack7Clicked = 0
                        self.pawnBlack8Clicked = 0
                        self.KingBlackClicked = 0
                        self.knightBlack1Clicked = 0
                        self.knightBlack2Clicked = 0
                        self.rookBlack1Clicked = 0
                        self.rookBlack2Clicked = 0
                        self.bishopBlack1Clicked = 0
                        self.bishopBlack2Clicked = 0
                        self.QueenBlackClicked = 0
                    if self.pb6.y < self.box17.y:
                        if self.pawnBlack6Clicked_plus8 == 1:
                            if not self.boxLst[self.boxLst.index(self.pb6) + 16].colliderect(self.pw1) and not \
                                    self.boxLst[self.boxLst.index(self.pb6) + 16].colliderect(self.pw2) and not \
                                    self.boxLst[self.boxLst.index(self.pb6) + 16].colliderect(self.pw3) and not \
                                    self.boxLst[self.boxLst.index(self.pb6) + 16].colliderect(self.pw4) and not \
                                    self.boxLst[self.boxLst.index(self.pb6) + 16].colliderect(self.pw5) and not \
                                    self.boxLst[self.boxLst.index(self.pb6) + 16].colliderect(self.pw6) and not \
                                    self.boxLst[self.boxLst.index(self.pb6) + 16].colliderect(self.pw7) and not \
                                    self.boxLst[self.boxLst.index(self.pb6) + 16].colliderect(self.pw8) and not \
                                    self.boxLst[self.boxLst.index(self.pb6) + 16].colliderect(self.Kw) and not \
                                    self.boxLst[self.boxLst.index(self.pb6) + 16].colliderect(self.Qw) and not \
                                    self.boxLst[self.boxLst.index(self.pb6) + 16].colliderect(self.rw1) and not \
                                    self.boxLst[self.boxLst.index(self.pb6) + 16].colliderect(self.rw2) and not \
                                    self.boxLst[self.boxLst.index(self.pb6) + 16].colliderect(self.kw1) and not \
                                    self.boxLst[self.boxLst.index(self.pb6) + 16].colliderect(self.kw2) and not \
                                    self.boxLst[self.boxLst.index(self.pb6) + 16].colliderect(self.bw1) and not \
                                    self.boxLst[self.boxLst.index(self.pb6) + 16].colliderect(self.bw2) and not \
                                    self.boxLst[self.boxLst.index(self.pb6) + 16].colliderect(self.pb2) and not \
                                    self.boxLst[self.boxLst.index(self.pb6) + 16].colliderect(self.pb3) and not \
                                    self.boxLst[self.boxLst.index(self.pb6) + 16].colliderect(self.pb4) and not \
                                    self.boxLst[self.boxLst.index(self.pb6) + 16].colliderect(self.pb5) and not \
                                    self.boxLst[self.boxLst.index(self.pb6) + 16].colliderect(self.pb1) and not \
                                    self.boxLst[self.boxLst.index(self.pb6) + 16].colliderect(self.pb7) and not \
                                    self.boxLst[self.boxLst.index(self.pb6) + 16].colliderect(self.pb8) and not \
                                    self.boxLst[self.boxLst.index(self.pb6) + 16].colliderect(self.Kb) and not \
                                    self.boxLst[self.boxLst.index(self.pb6) + 16].colliderect(self.Qb) and not \
                                    self.boxLst[self.boxLst.index(self.pb6) + 16].colliderect(self.rb1) and not \
                                    self.boxLst[self.boxLst.index(self.pb6) + 16].colliderect(self.rb2) and not \
                                    self.boxLst[self.boxLst.index(self.pb6) + 16].colliderect(self.kb1) and not \
                                    self.boxLst[self.boxLst.index(self.pb6) + 16].colliderect(self.kb2) and not \
                                    self.boxLst[self.boxLst.index(self.pb6) + 16].colliderect(self.bb1) and not \
                                    self.boxLst[self.boxLst.index(self.pb6) + 16].colliderect(self.bb2):
                                pygame.draw.rect(self.window, self.blue, self.boxLst[self.boxLst.index(self.pb6) + 16], border_radius=100)
                                self.pawnBlack6Clicked = 1
                                self.pawnBlack2Clicked = 0
                                self.pawnBlack3Clicked = 0
                                self.pawnBlack4Clicked = 0
                                self.pawnBlack5Clicked = 0
                                self.pawnBlack1Clicked = 0
                                self.pawnBlack7Clicked = 0
                                self.pawnBlack8Clicked = 0
                                self.KingBlackClicked = 0
                                self.knightBlack1Clicked = 0
                                self.knightBlack2Clicked = 0
                                self.rookBlack1Clicked = 0
                                self.rookBlack2Clicked = 0
                                self.bishopBlack1Clicked = 0
                                self.bishopBlack2Clicked = 0
                                self.QueenBlackClicked = 0
                                self.pawnBlack6Clicked_twoStep = 1
                            elif self.boxLst[self.boxLst.index(self.pb6) + 16].colliderect(self.pw1) or \
                                    self.boxLst[self.boxLst.index(self.pb6) + 16].colliderect(self.pw2) or \
                                    self.boxLst[self.boxLst.index(self.pb6) + 16].colliderect(self.pw3) or \
                                    self.boxLst[self.boxLst.index(self.pb6) + 16].colliderect(self.pw4) or \
                                    self.boxLst[self.boxLst.index(self.pb6) + 16].colliderect(self.pw5) or \
                                    self.boxLst[self.boxLst.index(self.pb6) + 16].colliderect(self.pw6) or \
                                    self.boxLst[self.boxLst.index(self.pb6) + 16].colliderect(self.pw7) or \
                                    self.boxLst[self.boxLst.index(self.pb6) + 16].colliderect(self.pw8) or \
                                    self.boxLst[self.boxLst.index(self.pb6) + 16].colliderect(self.Kw) or \
                                    self.boxLst[self.boxLst.index(self.pb6) + 16].colliderect(self.Qw) or \
                                    self.boxLst[self.boxLst.index(self.pb6) + 16].colliderect(self.rw1) or \
                                    self.boxLst[self.boxLst.index(self.pb6) + 16].colliderect(self.rw2) or \
                                    self.boxLst[self.boxLst.index(self.pb6) + 16].colliderect(self.kw1) or \
                                    self.boxLst[self.boxLst.index(self.pb6) + 16].colliderect(self.kw2) or \
                                    self.boxLst[self.boxLst.index(self.pb6) + 16].colliderect(self.bw1) or \
                                    self.boxLst[self.boxLst.index(self.pb6) + 16].colliderect(self.bw2) or \
                                    self.boxLst[self.boxLst.index(self.pb6) + 16].colliderect(self.pb2) or \
                                    self.boxLst[self.boxLst.index(self.pb6) + 16].colliderect(self.pb3) or \
                                    self.boxLst[self.boxLst.index(self.pb6) + 16].colliderect(self.pb4) or \
                                    self.boxLst[self.boxLst.index(self.pb6) + 16].colliderect(self.pb5) or \
                                    self.boxLst[self.boxLst.index(self.pb6) + 16].colliderect(self.pb1) or \
                                    self.boxLst[self.boxLst.index(self.pb6) + 16].colliderect(self.pb7) or \
                                    self.boxLst[self.boxLst.index(self.pb6) + 16].colliderect(self.pb8) or \
                                    self.boxLst[self.boxLst.index(self.pb6) + 16].colliderect(self.Kb) or \
                                    self.boxLst[self.boxLst.index(self.pb6) + 16].colliderect(self.Qb) or \
                                    self.boxLst[self.boxLst.index(self.pb6) + 16].colliderect(self.rb1) or \
                                    self.boxLst[self.boxLst.index(self.pb6) + 16].colliderect(self.rb2) or \
                                    self.boxLst[self.boxLst.index(self.pb6) + 16].colliderect(self.kb1) or \
                                    self.boxLst[self.boxLst.index(self.pb6) + 16].colliderect(self.kb2) or \
                                    self.boxLst[self.boxLst.index(self.pb6) + 16].colliderect(self.bb1) or \
                                    self.boxLst[self.boxLst.index(self.pb6) + 16].colliderect(self.bb2):
                                self.pawnBlack6Clicked_twoStep = 0
                if self.pb6.y < self.box57.y:
                    if self.boxLst[self.boxLst.index(self.pb6) + 8].colliderect(self.pw1) or \
                            self.boxLst[self.boxLst.index(self.pb6) + 8].colliderect(self.pw2) or \
                            self.boxLst[self.boxLst.index(self.pb6) + 8].colliderect(self.pw3) or \
                            self.boxLst[self.boxLst.index(self.pb6) + 8].colliderect(self.pw4) or \
                            self.boxLst[self.boxLst.index(self.pb6) + 8].colliderect(self.pw5) or \
                            self.boxLst[self.boxLst.index(self.pb6) + 8].colliderect(self.pw6) or \
                            self.boxLst[self.boxLst.index(self.pb6) + 8].colliderect(self.pw7) or \
                            self.boxLst[self.boxLst.index(self.pb6) + 8].colliderect(self.pw8) or \
                            self.boxLst[self.boxLst.index(self.pb6) + 8].colliderect(self.Kw) or \
                            self.boxLst[self.boxLst.index(self.pb6) + 8].colliderect(self.Qw) or \
                            self.boxLst[self.boxLst.index(self.pb6) + 8].colliderect(self.rw1) or \
                            self.boxLst[self.boxLst.index(self.pb6) + 8].colliderect(self.rw2) or \
                            self.boxLst[self.boxLst.index(self.pb6) + 8].colliderect(self.kw1) or \
                            self.boxLst[self.boxLst.index(self.pb6) + 8].colliderect(self.kw2) or \
                            self.boxLst[self.boxLst.index(self.pb6) + 8].colliderect(self.bw1) or \
                            self.boxLst[self.boxLst.index(self.pb6) + 8].colliderect(self.bw2) or \
                            self.boxLst[self.boxLst.index(self.pb6) + 8].colliderect(self.pb2) or \
                            self.boxLst[self.boxLst.index(self.pb6) + 8].colliderect(self.pb3) or \
                            self.boxLst[self.boxLst.index(self.pb6) + 8].colliderect(self.pb4) or \
                            self.boxLst[self.boxLst.index(self.pb6) + 8].colliderect(self.pb5) or \
                            self.boxLst[self.boxLst.index(self.pb6) + 8].colliderect(self.pb1) or \
                            self.boxLst[self.boxLst.index(self.pb6) + 8].colliderect(self.pb7) or \
                            self.boxLst[self.boxLst.index(self.pb6) + 8].colliderect(self.pb8) or \
                            self.boxLst[self.boxLst.index(self.pb6) + 8].colliderect(self.Kb) or \
                            self.boxLst[self.boxLst.index(self.pb6) + 8].colliderect(self.Qb) or \
                            self.boxLst[self.boxLst.index(self.pb6) + 8].colliderect(self.rb1) or \
                            self.boxLst[self.boxLst.index(self.pb6) + 8].colliderect(self.rb2) or \
                            self.boxLst[self.boxLst.index(self.pb6) + 8].colliderect(self.kb1) or \
                            self.boxLst[self.boxLst.index(self.pb6) + 8].colliderect(self.kb2) or \
                            self.boxLst[self.boxLst.index(self.pb6) + 8].colliderect(self.bb1) or \
                            self.boxLst[self.boxLst.index(self.pb6) + 8].colliderect(self.bb2):
                        self.pawnBlack6Clicked = 0
                if 0 * self.boxSize <= self.pb6.x <= 6 * self.boxSize and self.pb6.y < self.box57.y:
                    if self.boxLst[self.boxLst.index(self.pb6) + 8 + 1].colliderect(self.pw1) or \
                            self.boxLst[self.boxLst.index(self.pb6) + 8 + 1].colliderect(self.pw2) or \
                            self.boxLst[self.boxLst.index(self.pb6) + 8 + 1].colliderect(self.pw3) or \
                            self.boxLst[self.boxLst.index(self.pb6) + 8 + 1].colliderect(self.pw4) or \
                            self.boxLst[self.boxLst.index(self.pb6) + 8 + 1].colliderect(self.pw5) or \
                            self.boxLst[self.boxLst.index(self.pb6) + 8 + 1].colliderect(self.pw6) or \
                            self.boxLst[self.boxLst.index(self.pb6) + 8 + 1].colliderect(self.pw7) or \
                            self.boxLst[self.boxLst.index(self.pb6) + 8 + 1].colliderect(self.pw8) or \
                            self.boxLst[self.boxLst.index(self.pb6) + 8 + 1].colliderect(self.Kw) or \
                            self.boxLst[self.boxLst.index(self.pb6) + 8 + 1].colliderect(self.Qw) or \
                            self.boxLst[self.boxLst.index(self.pb6) + 8 + 1].colliderect(self.rw1) or \
                            self.boxLst[self.boxLst.index(self.pb6) + 8 + 1].colliderect(self.rw2) or \
                            self.boxLst[self.boxLst.index(self.pb6) + 8 + 1].colliderect(self.kw1) or \
                            self.boxLst[self.boxLst.index(self.pb6) + 8 + 1].colliderect(self.kw2) or \
                            self.boxLst[self.boxLst.index(self.pb6) + 8 + 1].colliderect(self.bw1) or \
                            self.boxLst[self.boxLst.index(self.pb6) + 8 + 1].colliderect(self.bw2):
                        pygame.draw.rect(self.window, self.red, self.boxLst[self.boxLst.index(self.pb6) + 8 + 1], border_radius=100)
                        self.pawnBlack6Clicked = 1
                        self.pawnBlack2Clicked = 0
                        self.pawnBlack3Clicked = 0
                        self.pawnBlack4Clicked = 0
                        self.pawnBlack5Clicked = 0
                        self.pawnBlack1Clicked = 0
                        self.pawnBlack7Clicked = 0
                        self.pawnBlack8Clicked = 0
                        self.KingBlackClicked = 0
                        self.knightBlack1Clicked = 0
                        self.knightBlack2Clicked = 0
                        self.rookBlack1Clicked = 0
                        self.rookBlack2Clicked = 0
                        self.bishopBlack1Clicked = 0
                        self.bishopBlack2Clicked = 0
                        self.QueenBlackClicked = 0
                        self.pawnBlack6Clicked_cut = 1
                if 1 * self.boxSize <= self.pb6.x <= 7 * self.boxSize and self.pb6.y < self.box57.y:
                    if self.boxLst[self.boxLst.index(self.pb6) + 8 - 1].colliderect(self.pw1) or \
                            self.boxLst[self.boxLst.index(self.pb6) + 8 - 1].colliderect(self.pw2) or \
                            self.boxLst[self.boxLst.index(self.pb6) + 8 - 1].colliderect(self.pw3) or \
                            self.boxLst[self.boxLst.index(self.pb6) + 8 - 1].colliderect(self.pw4) or \
                            self.boxLst[self.boxLst.index(self.pb6) + 8 - 1].colliderect(self.pw5) or \
                            self.boxLst[self.boxLst.index(self.pb6) + 8 - 1].colliderect(self.pw6) or \
                            self.boxLst[self.boxLst.index(self.pb6) + 8 - 1].colliderect(self.pw7) or \
                            self.boxLst[self.boxLst.index(self.pb6) + 8 - 1].colliderect(self.pw8) or \
                            self.boxLst[self.boxLst.index(self.pb6) + 8 - 1].colliderect(self.Kw) or \
                            self.boxLst[self.boxLst.index(self.pb6) + 8 - 1].colliderect(self.Qw) or \
                            self.boxLst[self.boxLst.index(self.pb6) + 8 - 1].colliderect(self.rw1) or \
                            self.boxLst[self.boxLst.index(self.pb6) + 8 - 1].colliderect(self.rw2) or \
                            self.boxLst[self.boxLst.index(self.pb6) + 8 - 1].colliderect(self.kw1) or \
                            self.boxLst[self.boxLst.index(self.pb6) + 8 - 1].colliderect(self.kw2) or \
                            self.boxLst[self.boxLst.index(self.pb6) + 8 - 1].colliderect(self.bw1) or \
                            self.boxLst[self.boxLst.index(self.pb6) + 8 - 1].colliderect(self.bw2):
                        pygame.draw.rect(self.window, self.red, self.boxLst[self.boxLst.index(self.pb6) + 8 - 1], border_radius=100)
                        self.pawnBlack6Clicked = 1
                        self.pawnBlack2Clicked = 0
                        self.pawnBlack3Clicked = 0
                        self.pawnBlack4Clicked = 0
                        self.pawnBlack5Clicked = 0
                        self.pawnBlack1Clicked = 0
                        self.pawnBlack7Clicked = 0
                        self.pawnBlack8Clicked = 0
                        self.KingBlackClicked = 0
                        self.knightBlack1Clicked = 0
                        self.knightBlack2Clicked = 0
                        self.rookBlack1Clicked = 0
                        self.rookBlack2Clicked = 0
                        self.bishopBlack1Clicked = 0
                        self.bishopBlack2Clicked = 0
                        self.QueenBlackClicked = 0
                        self.pawnBlack6Clicked_cut = 1

            elif self.pb7.collidepoint(self.mouse_x, self.mouse_y):
                if self.pb7.y < self.box57.y:
                    if not self.boxLst[self.boxLst.index(self.pb7) + 8].colliderect(self.pw1) and not \
                            self.boxLst[self.boxLst.index(self.pb7) + 8].colliderect(self.pw2) and not \
                            self.boxLst[self.boxLst.index(self.pb7) + 8].colliderect(self.pw3) and not \
                            self.boxLst[self.boxLst.index(self.pb7) + 8].colliderect(self.pw4) and not \
                            self.boxLst[self.boxLst.index(self.pb7) + 8].colliderect(self.pw5) and not \
                            self.boxLst[self.boxLst.index(self.pb7) + 8].colliderect(self.pw6) and not \
                            self.boxLst[self.boxLst.index(self.pb7) + 8].colliderect(self.pw7) and not \
                            self.boxLst[self.boxLst.index(self.pb7) + 8].colliderect(self.pw8) and not \
                            self.boxLst[self.boxLst.index(self.pb7) + 8].colliderect(self.Kw) and not \
                            self.boxLst[self.boxLst.index(self.pb7) + 8].colliderect(self.Qw) and not \
                            self.boxLst[self.boxLst.index(self.pb7) + 8].colliderect(self.rw1) and not \
                            self.boxLst[self.boxLst.index(self.pb7) + 8].colliderect(self.rw2) and not \
                            self.boxLst[self.boxLst.index(self.pb7) + 8].colliderect(self.kw1) and not \
                            self.boxLst[self.boxLst.index(self.pb7) + 8].colliderect(self.kw2) and not \
                            self.boxLst[self.boxLst.index(self.pb7) + 8].colliderect(self.bw1) and not \
                            self.boxLst[self.boxLst.index(self.pb7) + 8].colliderect(self.bw2) and not \
                            self.boxLst[self.boxLst.index(self.pb7) + 8].colliderect(self.pb2) and not \
                            self.boxLst[self.boxLst.index(self.pb7) + 8].colliderect(self.pb3) and not \
                            self.boxLst[self.boxLst.index(self.pb7) + 8].colliderect(self.pb4) and not \
                            self.boxLst[self.boxLst.index(self.pb7) + 8].colliderect(self.pb5) and not \
                            self.boxLst[self.boxLst.index(self.pb7) + 8].colliderect(self.pb6) and not \
                            self.boxLst[self.boxLst.index(self.pb7) + 8].colliderect(self.pb1) and not \
                            self.boxLst[self.boxLst.index(self.pb7) + 8].colliderect(self.pb8) and not \
                            self.boxLst[self.boxLst.index(self.pb7) + 8].colliderect(self.Kb) and not \
                            self.boxLst[self.boxLst.index(self.pb7) + 8].colliderect(self.Qb) and not \
                            self.boxLst[self.boxLst.index(self.pb7) + 8].colliderect(self.rb1) and not \
                            self.boxLst[self.boxLst.index(self.pb7) + 8].colliderect(self.rb2) and not \
                            self.boxLst[self.boxLst.index(self.pb7) + 8].colliderect(self.kb1) and not \
                            self.boxLst[self.boxLst.index(self.pb7) + 8].colliderect(self.kb2) and not \
                            self.boxLst[self.boxLst.index(self.pb7) + 8].colliderect(self.bb1) and not \
                            self.boxLst[self.boxLst.index(self.pb7) + 8].colliderect(self.bb2):
                        pygame.draw.rect(self.window, self.blue, self.boxLst[self.boxLst.index(self.pb7) + 8], border_radius=100)
                        self.pawnBlack7Clicked = 1
                        self.pawnBlack7Clicked_plus8 = 1
                        self.pawnBlack2Clicked = 0
                        self.pawnBlack3Clicked = 0
                        self.pawnBlack4Clicked = 0
                        self.pawnBlack5Clicked = 0
                        self.pawnBlack6Clicked = 0
                        self.pawnBlack1Clicked = 0
                        self.pawnBlack8Clicked = 0
                        self.KingBlackClicked = 0
                        self.knightBlack1Clicked = 0
                        self.knightBlack2Clicked = 0
                        self.rookBlack1Clicked = 0
                        self.rookBlack2Clicked = 0
                        self.bishopBlack1Clicked = 0
                        self.bishopBlack2Clicked = 0
                        self.QueenBlackClicked = 0
                    if self.pb7.y < self.box17.y:
                        if self.pawnBlack7Clicked_plus8 == 1:
                            if not self.boxLst[self.boxLst.index(self.pb7) + 16].colliderect(self.pw1) and not \
                                    self.boxLst[self.boxLst.index(self.pb7) + 16].colliderect(self.pw2) and not \
                                    self.boxLst[self.boxLst.index(self.pb7) + 16].colliderect(self.pw3) and not \
                                    self.boxLst[self.boxLst.index(self.pb7) + 16].colliderect(self.pw4) and not \
                                    self.boxLst[self.boxLst.index(self.pb7) + 16].colliderect(self.pw5) and not \
                                    self.boxLst[self.boxLst.index(self.pb7) + 16].colliderect(self.pw6) and not \
                                    self.boxLst[self.boxLst.index(self.pb7) + 16].colliderect(self.pw7) and not \
                                    self.boxLst[self.boxLst.index(self.pb7) + 16].colliderect(self.pw8) and not \
                                    self.boxLst[self.boxLst.index(self.pb7) + 16].colliderect(self.Kw) and not \
                                    self.boxLst[self.boxLst.index(self.pb7) + 16].colliderect(self.Qw) and not \
                                    self.boxLst[self.boxLst.index(self.pb7) + 16].colliderect(self.rw1) and not \
                                    self.boxLst[self.boxLst.index(self.pb7) + 16].colliderect(self.rw2) and not \
                                    self.boxLst[self.boxLst.index(self.pb7) + 16].colliderect(self.kw1) and not \
                                    self.boxLst[self.boxLst.index(self.pb7) + 16].colliderect(self.kw2) and not \
                                    self.boxLst[self.boxLst.index(self.pb7) + 16].colliderect(self.bw1) and not \
                                    self.boxLst[self.boxLst.index(self.pb7) + 16].colliderect(self.bw2) and not \
                                    self.boxLst[self.boxLst.index(self.pb7) + 16].colliderect(self.pb2) and not \
                                    self.boxLst[self.boxLst.index(self.pb7) + 16].colliderect(self.pb3) and not \
                                    self.boxLst[self.boxLst.index(self.pb7) + 16].colliderect(self.pb4) and not \
                                    self.boxLst[self.boxLst.index(self.pb7) + 16].colliderect(self.pb5) and not \
                                    self.boxLst[self.boxLst.index(self.pb7) + 16].colliderect(self.pb6) and not \
                                    self.boxLst[self.boxLst.index(self.pb7) + 16].colliderect(self.pb1) and not \
                                    self.boxLst[self.boxLst.index(self.pb7) + 16].colliderect(self.pb8) and not \
                                    self.boxLst[self.boxLst.index(self.pb7) + 16].colliderect(self.Kb) and not \
                                    self.boxLst[self.boxLst.index(self.pb7) + 16].colliderect(self.Qb) and not \
                                    self.boxLst[self.boxLst.index(self.pb7) + 16].colliderect(self.rb1) and not \
                                    self.boxLst[self.boxLst.index(self.pb7) + 16].colliderect(self.rb2) and not \
                                    self.boxLst[self.boxLst.index(self.pb7) + 16].colliderect(self.kb1) and not \
                                    self.boxLst[self.boxLst.index(self.pb7) + 16].colliderect(self.kb2) and not \
                                    self.boxLst[self.boxLst.index(self.pb7) + 16].colliderect(self.bb1) and not \
                                    self.boxLst[self.boxLst.index(self.pb7) + 16].colliderect(self.bb2):
                                pygame.draw.rect(self.window, self.blue, self.boxLst[self.boxLst.index(self.pb7) + 16], border_radius=100)
                                self.pawnBlack7Clicked = 1
                                self.pawnBlack2Clicked = 0
                                self.pawnBlack3Clicked = 0
                                self.pawnBlack4Clicked = 0
                                self.pawnBlack5Clicked = 0
                                self.pawnBlack6Clicked = 0
                                self.pawnBlack1Clicked = 0
                                self.pawnBlack8Clicked = 0
                                self.KingBlackClicked = 0
                                self.knightBlack1Clicked = 0
                                self.knightBlack2Clicked = 0
                                self.rookBlack1Clicked = 0
                                self.rookBlack2Clicked = 0
                                self.bishopBlack1Clicked = 0
                                self.bishopBlack2Clicked = 0
                                self.QueenBlackClicked = 0
                                self.pawnBlack7Clicked_twoStep = 1
                            elif self.boxLst[self.boxLst.index(self.pb7) + 16].colliderect(self.pw1) or \
                                    self.boxLst[self.boxLst.index(self.pb7) + 16].colliderect(self.pw2) or \
                                    self.boxLst[self.boxLst.index(self.pb7) + 16].colliderect(self.pw3) or \
                                    self.boxLst[self.boxLst.index(self.pb7) + 16].colliderect(self.pw4) or \
                                    self.boxLst[self.boxLst.index(self.pb7) + 16].colliderect(self.pw5) or \
                                    self.boxLst[self.boxLst.index(self.pb7) + 16].colliderect(self.pw6) or \
                                    self.boxLst[self.boxLst.index(self.pb7) + 16].colliderect(self.pw7) or \
                                    self.boxLst[self.boxLst.index(self.pb7) + 16].colliderect(self.pw8) or \
                                    self.boxLst[self.boxLst.index(self.pb7) + 16].colliderect(self.Kw) or \
                                    self.boxLst[self.boxLst.index(self.pb7) + 16].colliderect(self.Qw) or \
                                    self.boxLst[self.boxLst.index(self.pb7) + 16].colliderect(self.rw1) or \
                                    self.boxLst[self.boxLst.index(self.pb7) + 16].colliderect(self.rw2) or \
                                    self.boxLst[self.boxLst.index(self.pb7) + 16].colliderect(self.kw1) or \
                                    self.boxLst[self.boxLst.index(self.pb7) + 16].colliderect(self.kw2) or \
                                    self.boxLst[self.boxLst.index(self.pb7) + 16].colliderect(self.bw1) or \
                                    self.boxLst[self.boxLst.index(self.pb7) + 16].colliderect(self.bw2) or \
                                    self.boxLst[self.boxLst.index(self.pb7) + 16].colliderect(self.pb2) or \
                                    self.boxLst[self.boxLst.index(self.pb7) + 16].colliderect(self.pb3) or \
                                    self.boxLst[self.boxLst.index(self.pb7) + 16].colliderect(self.pb4) or \
                                    self.boxLst[self.boxLst.index(self.pb7) + 16].colliderect(self.pb5) or \
                                    self.boxLst[self.boxLst.index(self.pb7) + 16].colliderect(self.pb6) or \
                                    self.boxLst[self.boxLst.index(self.pb7) + 16].colliderect(self.pb1) or \
                                    self.boxLst[self.boxLst.index(self.pb7) + 16].colliderect(self.pb8) or \
                                    self.boxLst[self.boxLst.index(self.pb7) + 16].colliderect(self.Kb) or \
                                    self.boxLst[self.boxLst.index(self.pb7) + 16].colliderect(self.Qb) or \
                                    self.boxLst[self.boxLst.index(self.pb7) + 16].colliderect(self.rb1) or \
                                    self.boxLst[self.boxLst.index(self.pb7) + 16].colliderect(self.rb2) or \
                                    self.boxLst[self.boxLst.index(self.pb7) + 16].colliderect(self.kb1) or \
                                    self.boxLst[self.boxLst.index(self.pb7) + 16].colliderect(self.kb2) or \
                                    self.boxLst[self.boxLst.index(self.pb7) + 16].colliderect(self.bb1) or \
                                    self.boxLst[self.boxLst.index(self.pb7) + 16].colliderect(self.bb2):
                                self.pawnBlack7Clicked_twoStep = 0
                if self.pb7.y < self.box57.y:
                    if self.boxLst[self.boxLst.index(self.pb7) + 8].colliderect(self.pw1) or \
                            self.boxLst[self.boxLst.index(self.pb7) + 8].colliderect(self.pw2) or \
                            self.boxLst[self.boxLst.index(self.pb7) + 8].colliderect(self.pw3) or \
                            self.boxLst[self.boxLst.index(self.pb7) + 8].colliderect(self.pw4) or \
                            self.boxLst[self.boxLst.index(self.pb7) + 8].colliderect(self.pw5) or \
                            self.boxLst[self.boxLst.index(self.pb7) + 8].colliderect(self.pw6) or \
                            self.boxLst[self.boxLst.index(self.pb7) + 8].colliderect(self.pw7) or \
                            self.boxLst[self.boxLst.index(self.pb7) + 8].colliderect(self.pw8) or \
                            self.boxLst[self.boxLst.index(self.pb7) + 8].colliderect(self.Kw) or \
                            self.boxLst[self.boxLst.index(self.pb7) + 8].colliderect(self.Qw) or \
                            self.boxLst[self.boxLst.index(self.pb7) + 8].colliderect(self.rw1) or \
                            self.boxLst[self.boxLst.index(self.pb7) + 8].colliderect(self.rw2) or \
                            self.boxLst[self.boxLst.index(self.pb7) + 8].colliderect(self.kw1) or \
                            self.boxLst[self.boxLst.index(self.pb7) + 8].colliderect(self.kw2) or \
                            self.boxLst[self.boxLst.index(self.pb7) + 8].colliderect(self.bw1) or \
                            self.boxLst[self.boxLst.index(self.pb7) + 8].colliderect(self.bw2) or \
                            self.boxLst[self.boxLst.index(self.pb7) + 8].colliderect(self.pb2) or \
                            self.boxLst[self.boxLst.index(self.pb7) + 8].colliderect(self.pb3) or \
                            self.boxLst[self.boxLst.index(self.pb7) + 8].colliderect(self.pb4) or \
                            self.boxLst[self.boxLst.index(self.pb7) + 8].colliderect(self.pb5) or \
                            self.boxLst[self.boxLst.index(self.pb7) + 8].colliderect(self.pb6) or \
                            self.boxLst[self.boxLst.index(self.pb7) + 8].colliderect(self.pb1) or \
                            self.boxLst[self.boxLst.index(self.pb7) + 8].colliderect(self.pb8) or \
                            self.boxLst[self.boxLst.index(self.pb7) + 8].colliderect(self.Kb) or \
                            self.boxLst[self.boxLst.index(self.pb7) + 8].colliderect(self.Qb) or \
                            self.boxLst[self.boxLst.index(self.pb7) + 8].colliderect(self.rb1) or \
                            self.boxLst[self.boxLst.index(self.pb7) + 8].colliderect(self.rb2) or \
                            self.boxLst[self.boxLst.index(self.pb7) + 8].colliderect(self.kb1) or \
                            self.boxLst[self.boxLst.index(self.pb7) + 8].colliderect(self.kb2) or \
                            self.boxLst[self.boxLst.index(self.pb7) + 8].colliderect(self.bb1) or \
                            self.boxLst[self.boxLst.index(self.pb7) + 8].colliderect(self.bb2):
                        self.pawnBlack7Clicked = 0
                if 0 * self.boxSize <= self.pb7.x <= 6 * self.boxSize and self.pb7.y < self.box57.y:
                    if self.boxLst[self.boxLst.index(self.pb7) + 8 + 1].colliderect(self.pw1) or \
                            self.boxLst[self.boxLst.index(self.pb7) + 8 + 1].colliderect(self.pw2) or \
                            self.boxLst[self.boxLst.index(self.pb7) + 8 + 1].colliderect(self.pw3) or \
                            self.boxLst[self.boxLst.index(self.pb7) + 8 + 1].colliderect(self.pw4) or \
                            self.boxLst[self.boxLst.index(self.pb7) + 8 + 1].colliderect(self.pw5) or \
                            self.boxLst[self.boxLst.index(self.pb7) + 8 + 1].colliderect(self.pw6) or \
                            self.boxLst[self.boxLst.index(self.pb7) + 8 + 1].colliderect(self.pw7) or \
                            self.boxLst[self.boxLst.index(self.pb7) + 8 + 1].colliderect(self.pw8) or \
                            self.boxLst[self.boxLst.index(self.pb7) + 8 + 1].colliderect(self.Kw) or \
                            self.boxLst[self.boxLst.index(self.pb7) + 8 + 1].colliderect(self.Qw) or \
                            self.boxLst[self.boxLst.index(self.pb7) + 8 + 1].colliderect(self.rw1) or \
                            self.boxLst[self.boxLst.index(self.pb7) + 8 + 1].colliderect(self.rw2) or \
                            self.boxLst[self.boxLst.index(self.pb7) + 8 + 1].colliderect(self.kw1) or \
                            self.boxLst[self.boxLst.index(self.pb7) + 8 + 1].colliderect(self.kw2) or \
                            self.boxLst[self.boxLst.index(self.pb7) + 8 + 1].colliderect(self.bw1) or \
                            self.boxLst[self.boxLst.index(self.pb7) + 8 + 1].colliderect(self.bw2):
                        pygame.draw.rect(self.window, self.red, self.boxLst[self.boxLst.index(self.pb7) + 8 + 1], border_radius=100)
                        self.pawnBlack7Clicked = 1
                        self.pawnBlack2Clicked = 0
                        self.pawnBlack3Clicked = 0
                        self.pawnBlack4Clicked = 0
                        self.pawnBlack5Clicked = 0
                        self.pawnBlack6Clicked = 0
                        self.pawnBlack1Clicked = 0
                        self.pawnBlack8Clicked = 0
                        self.KingBlackClicked = 0
                        self.knightBlack1Clicked = 0
                        self.knightBlack2Clicked = 0
                        self.rookBlack1Clicked = 0
                        self.rookBlack2Clicked = 0
                        self.bishopBlack1Clicked = 0
                        self.bishopBlack2Clicked = 0
                        self.QueenBlackClicked = 0
                        self.pawnBlack7Clicked_cut = 1
                if 1 * self.boxSize <= self.pb7.x <= 7 * self.boxSize and self.pb7.y < self.box57.y:
                    if self.boxLst[self.boxLst.index(self.pb7) + 8 - 1].colliderect(self.pw1) or \
                            self.boxLst[self.boxLst.index(self.pb7) + 8 - 1].colliderect(self.pw2) or \
                            self.boxLst[self.boxLst.index(self.pb7) + 8 - 1].colliderect(self.pw3) or \
                            self.boxLst[self.boxLst.index(self.pb7) + 8 - 1].colliderect(self.pw4) or \
                            self.boxLst[self.boxLst.index(self.pb7) + 8 - 1].colliderect(self.pw5) or \
                            self.boxLst[self.boxLst.index(self.pb7) + 8 - 1].colliderect(self.pw6) or \
                            self.boxLst[self.boxLst.index(self.pb7) + 8 - 1].colliderect(self.pw7) or \
                            self.boxLst[self.boxLst.index(self.pb7) + 8 - 1].colliderect(self.pw8) or \
                            self.boxLst[self.boxLst.index(self.pb7) + 8 - 1].colliderect(self.Kw) or \
                            self.boxLst[self.boxLst.index(self.pb7) + 8 - 1].colliderect(self.Qw) or \
                            self.boxLst[self.boxLst.index(self.pb7) + 8 - 1].colliderect(self.rw1) or \
                            self.boxLst[self.boxLst.index(self.pb7) + 8 - 1].colliderect(self.rw2) or \
                            self.boxLst[self.boxLst.index(self.pb7) + 8 - 1].colliderect(self.kw1) or \
                            self.boxLst[self.boxLst.index(self.pb7) + 8 - 1].colliderect(self.kw2) or \
                            self.boxLst[self.boxLst.index(self.pb7) + 8 - 1].colliderect(self.bw1) or \
                            self.boxLst[self.boxLst.index(self.pb7) + 8 - 1].colliderect(self.bw2):
                        pygame.draw.rect(self.window, self.red, self.boxLst[self.boxLst.index(self.pb7) + 8 - 1], border_radius=100)
                        self.pawnBlack7Clicked = 1
                        self.pawnBlack2Clicked = 0
                        self.pawnBlack3Clicked = 0
                        self.pawnBlack4Clicked = 0
                        self.pawnBlack5Clicked = 0
                        self.pawnBlack6Clicked = 0
                        self.pawnBlack1Clicked = 0
                        self.pawnBlack8Clicked = 0
                        self.KingBlackClicked = 0
                        self.knightBlack1Clicked = 0
                        self.knightBlack2Clicked = 0
                        self.rookBlack1Clicked = 0
                        self.rookBlack2Clicked = 0
                        self.bishopBlack1Clicked = 0
                        self.bishopBlack2Clicked = 0
                        self.QueenBlackClicked = 0
                        self.pawnBlack7Clicked_cut = 1

            elif self.pb8.collidepoint(self.mouse_x, self.mouse_y):
                if self.pb8.y < self.box57.y:
                    if not self.boxLst[self.boxLst.index(self.pb8) + 8].colliderect(self.pw1) and not \
                            self.boxLst[self.boxLst.index(self.pb8) + 8].colliderect(self.pw2) and not \
                            self.boxLst[self.boxLst.index(self.pb8) + 8].colliderect(self.pw3) and not \
                            self.boxLst[self.boxLst.index(self.pb8) + 8].colliderect(self.pw4) and not \
                            self.boxLst[self.boxLst.index(self.pb8) + 8].colliderect(self.pw5) and not \
                            self.boxLst[self.boxLst.index(self.pb8) + 8].colliderect(self.pw6) and not \
                            self.boxLst[self.boxLst.index(self.pb8) + 8].colliderect(self.pw7) and not \
                            self.boxLst[self.boxLst.index(self.pb8) + 8].colliderect(self.pw8) and not \
                            self.boxLst[self.boxLst.index(self.pb8) + 8].colliderect(self.Kw) and not \
                            self.boxLst[self.boxLst.index(self.pb8) + 8].colliderect(self.Qw) and not \
                            self.boxLst[self.boxLst.index(self.pb8) + 8].colliderect(self.rw1) and not \
                            self.boxLst[self.boxLst.index(self.pb8) + 8].colliderect(self.rw2) and not \
                            self.boxLst[self.boxLst.index(self.pb8) + 8].colliderect(self.kw1) and not \
                            self.boxLst[self.boxLst.index(self.pb8) + 8].colliderect(self.kw2) and not \
                            self.boxLst[self.boxLst.index(self.pb8) + 8].colliderect(self.bw1) and not \
                            self.boxLst[self.boxLst.index(self.pb8) + 8].colliderect(self.bw2) and not \
                            self.boxLst[self.boxLst.index(self.pb8) + 8].colliderect(self.pb2) and not \
                            self.boxLst[self.boxLst.index(self.pb8) + 8].colliderect(self.pb3) and not \
                            self.boxLst[self.boxLst.index(self.pb8) + 8].colliderect(self.pb4) and not \
                            self.boxLst[self.boxLst.index(self.pb8) + 8].colliderect(self.pb5) and not \
                            self.boxLst[self.boxLst.index(self.pb8) + 8].colliderect(self.pb6) and not \
                            self.boxLst[self.boxLst.index(self.pb8) + 8].colliderect(self.pb7) and not \
                            self.boxLst[self.boxLst.index(self.pb8) + 8].colliderect(self.pb1) and not \
                            self.boxLst[self.boxLst.index(self.pb8) + 8].colliderect(self.Kb) and not \
                            self.boxLst[self.boxLst.index(self.pb8) + 8].colliderect(self.Qb) and not \
                            self.boxLst[self.boxLst.index(self.pb8) + 8].colliderect(self.rb1) and not \
                            self.boxLst[self.boxLst.index(self.pb8) + 8].colliderect(self.rb2) and not \
                            self.boxLst[self.boxLst.index(self.pb8) + 8].colliderect(self.kb1) and not \
                            self.boxLst[self.boxLst.index(self.pb8) + 8].colliderect(self.kb2) and not \
                            self.boxLst[self.boxLst.index(self.pb8) + 8].colliderect(self.bb1) and not \
                            self.boxLst[self.boxLst.index(self.pb8) + 8].colliderect(self.bb2):
                        pygame.draw.rect(self.window, self.blue, self.boxLst[self.boxLst.index(self.pb8) + 8], border_radius=100)
                        self.pawnBlack8Clicked = 1
                        self.pawnBlack8Clicked_plus8 = 1
                        self.pawnBlack2Clicked = 0
                        self.pawnBlack3Clicked = 0
                        self.pawnBlack4Clicked = 0
                        self.pawnBlack5Clicked = 0
                        self.pawnBlack6Clicked = 0
                        self.pawnBlack7Clicked = 0
                        self.pawnBlack1Clicked = 0
                        self.KingBlackClicked = 0
                        self.knightBlack1Clicked = 0
                        self.knightBlack2Clicked = 0
                        self.rookBlack1Clicked = 0
                        self.rookBlack2Clicked = 0
                        self.bishopBlack1Clicked = 0
                        self.bishopBlack2Clicked = 0
                        self.QueenBlackClicked = 0
                    if self.pb8.y < self.box17.y:
                        if self.pawnBlack8Clicked_plus8 == 1:
                            if not self.boxLst[self.boxLst.index(self.pb8) + 16].colliderect(self.pw1) and not \
                                    self.boxLst[self.boxLst.index(self.pb8) + 16].colliderect(self.pw2) and not \
                                    self.boxLst[self.boxLst.index(self.pb8) + 16].colliderect(self.pw3) and not \
                                    self.boxLst[self.boxLst.index(self.pb8) + 16].colliderect(self.pw4) and not \
                                    self.boxLst[self.boxLst.index(self.pb8) + 16].colliderect(self.pw5) and not \
                                    self.boxLst[self.boxLst.index(self.pb8) + 16].colliderect(self.pw6) and not \
                                    self.boxLst[self.boxLst.index(self.pb8) + 16].colliderect(self.pw7) and not \
                                    self.boxLst[self.boxLst.index(self.pb8) + 16].colliderect(self.pw8) and not \
                                    self.boxLst[self.boxLst.index(self.pb8) + 16].colliderect(self.Kw) and not \
                                    self.boxLst[self.boxLst.index(self.pb8) + 16].colliderect(self.Qw) and not \
                                    self.boxLst[self.boxLst.index(self.pb8) + 16].colliderect(self.rw1) and not \
                                    self.boxLst[self.boxLst.index(self.pb8) + 16].colliderect(self.rw2) and not \
                                    self.boxLst[self.boxLst.index(self.pb8) + 16].colliderect(self.kw1) and not \
                                    self.boxLst[self.boxLst.index(self.pb8) + 16].colliderect(self.kw2) and not \
                                    self.boxLst[self.boxLst.index(self.pb8) + 16].colliderect(self.bw1) and not \
                                    self.boxLst[self.boxLst.index(self.pb8) + 16].colliderect(self.bw2) and not \
                                    self.boxLst[self.boxLst.index(self.pb8) + 16].colliderect(self.pb2) and not \
                                    self.boxLst[self.boxLst.index(self.pb8) + 16].colliderect(self.pb3) and not \
                                    self.boxLst[self.boxLst.index(self.pb8) + 16].colliderect(self.pb4) and not \
                                    self.boxLst[self.boxLst.index(self.pb8) + 16].colliderect(self.pb5) and not \
                                    self.boxLst[self.boxLst.index(self.pb8) + 16].colliderect(self.pb6) and not \
                                    self.boxLst[self.boxLst.index(self.pb8) + 16].colliderect(self.pb7) and not \
                                    self.boxLst[self.boxLst.index(self.pb8) + 16].colliderect(self.pb1) and not \
                                    self.boxLst[self.boxLst.index(self.pb8) + 16].colliderect(self.Kb) and not \
                                    self.boxLst[self.boxLst.index(self.pb8) + 16].colliderect(self.Qb) and not \
                                    self.boxLst[self.boxLst.index(self.pb8) + 16].colliderect(self.rb1) and not \
                                    self.boxLst[self.boxLst.index(self.pb8) + 16].colliderect(self.rb2) and not \
                                    self.boxLst[self.boxLst.index(self.pb8) + 16].colliderect(self.kb1) and not \
                                    self.boxLst[self.boxLst.index(self.pb8) + 16].colliderect(self.kb2) and not \
                                    self.boxLst[self.boxLst.index(self.pb8) + 16].colliderect(self.bb1) and not \
                                    self.boxLst[self.boxLst.index(self.pb8) + 16].colliderect(self.bb2):
                                pygame.draw.rect(self.window, self.blue, self.boxLst[self.boxLst.index(self.pb8) + 16], border_radius=100)
                                self.pawnBlack8Clicked = 1
                                self.pawnBlack2Clicked = 0
                                self.pawnBlack3Clicked = 0
                                self.pawnBlack4Clicked = 0
                                self.pawnBlack5Clicked = 0
                                self.pawnBlack6Clicked = 0
                                self.pawnBlack7Clicked = 0
                                self.pawnBlack1Clicked = 0
                                self.KingBlackClicked = 0
                                self.knightBlack1Clicked = 0
                                self.knightBlack2Clicked = 0
                                self.rookBlack1Clicked = 0
                                self.rookBlack2Clicked = 0
                                self.bishopBlack1Clicked = 0
                                self.bishopBlack2Clicked = 0
                                self.QueenBlackClicked = 0
                                self.pawnBlack8Clicked_twoStep = 1
                            elif self.boxLst[self.boxLst.index(self.pb8) + 16].colliderect(self.pw1) or \
                                    self.boxLst[self.boxLst.index(self.pb8) + 16].colliderect(self.pw2) or \
                                    self.boxLst[self.boxLst.index(self.pb8) + 16].colliderect(self.pw3) or \
                                    self.boxLst[self.boxLst.index(self.pb8) + 16].colliderect(self.pw4) or \
                                    self.boxLst[self.boxLst.index(self.pb8) + 16].colliderect(self.pw5) or \
                                    self.boxLst[self.boxLst.index(self.pb8) + 16].colliderect(self.pw6) or \
                                    self.boxLst[self.boxLst.index(self.pb8) + 16].colliderect(self.pw7) or \
                                    self.boxLst[self.boxLst.index(self.pb8) + 16].colliderect(self.pw8) or \
                                    self.boxLst[self.boxLst.index(self.pb8) + 16].colliderect(self.Kw) or \
                                    self.boxLst[self.boxLst.index(self.pb8) + 16].colliderect(self.Qw) or \
                                    self.boxLst[self.boxLst.index(self.pb8) + 16].colliderect(self.rw1) or \
                                    self.boxLst[self.boxLst.index(self.pb8) + 16].colliderect(self.rw2) or \
                                    self.boxLst[self.boxLst.index(self.pb8) + 16].colliderect(self.kw1) or \
                                    self.boxLst[self.boxLst.index(self.pb8) + 16].colliderect(self.kw2) or \
                                    self.boxLst[self.boxLst.index(self.pb8) + 16].colliderect(self.bw1) or \
                                    self.boxLst[self.boxLst.index(self.pb8) + 16].colliderect(self.bw2) or \
                                    self.boxLst[self.boxLst.index(self.pb8) + 16].colliderect(self.pb2) or \
                                    self.boxLst[self.boxLst.index(self.pb8) + 16].colliderect(self.pb3) or \
                                    self.boxLst[self.boxLst.index(self.pb8) + 16].colliderect(self.pb4) or \
                                    self.boxLst[self.boxLst.index(self.pb8) + 16].colliderect(self.pb5) or \
                                    self.boxLst[self.boxLst.index(self.pb8) + 16].colliderect(self.pb6) or \
                                    self.boxLst[self.boxLst.index(self.pb8) + 16].colliderect(self.pb7) or \
                                    self.boxLst[self.boxLst.index(self.pb8) + 16].colliderect(self.pb1) or \
                                    self.boxLst[self.boxLst.index(self.pb8) + 16].colliderect(self.Kb) or \
                                    self.boxLst[self.boxLst.index(self.pb8) + 16].colliderect(self.Qb) or \
                                    self.boxLst[self.boxLst.index(self.pb8) + 16].colliderect(self.rb1) or \
                                    self.boxLst[self.boxLst.index(self.pb8) + 16].colliderect(self.rb2) or \
                                    self.boxLst[self.boxLst.index(self.pb8) + 16].colliderect(self.kb1) or \
                                    self.boxLst[self.boxLst.index(self.pb8) + 16].colliderect(self.kb2) or \
                                    self.boxLst[self.boxLst.index(self.pb8) + 16].colliderect(self.bb1) or \
                                    self.boxLst[self.boxLst.index(self.pb8) + 16].colliderect(self.bb2):
                                self.pawnBlack8Clicked_twoStep = 0
                if self.pb8.y < self.box57.y:
                    if self.boxLst[self.boxLst.index(self.pb8) + 8].colliderect(self.pw1) or \
                            self.boxLst[self.boxLst.index(self.pb8) + 8].colliderect(self.pw2) or \
                            self.boxLst[self.boxLst.index(self.pb8) + 8].colliderect(self.pw3) or \
                            self.boxLst[self.boxLst.index(self.pb8) + 8].colliderect(self.pw4) or \
                            self.boxLst[self.boxLst.index(self.pb8) + 8].colliderect(self.pw5) or \
                            self.boxLst[self.boxLst.index(self.pb8) + 8].colliderect(self.pw6) or \
                            self.boxLst[self.boxLst.index(self.pb8) + 8].colliderect(self.pw7) or \
                            self.boxLst[self.boxLst.index(self.pb8) + 8].colliderect(self.pw8) or \
                            self.boxLst[self.boxLst.index(self.pb8) + 8].colliderect(self.Kw) or \
                            self.boxLst[self.boxLst.index(self.pb8) + 8].colliderect(self.Qw) or \
                            self.boxLst[self.boxLst.index(self.pb8) + 8].colliderect(self.rw1) or \
                            self.boxLst[self.boxLst.index(self.pb8) + 8].colliderect(self.rw2) or \
                            self.boxLst[self.boxLst.index(self.pb8) + 8].colliderect(self.kw1) or \
                            self.boxLst[self.boxLst.index(self.pb8) + 8].colliderect(self.kw2) or \
                            self.boxLst[self.boxLst.index(self.pb8) + 8].colliderect(self.bw1) or \
                            self.boxLst[self.boxLst.index(self.pb8) + 8].colliderect(self.bw2) or \
                            self.boxLst[self.boxLst.index(self.pb8) + 8].colliderect(self.pb2) or \
                            self.boxLst[self.boxLst.index(self.pb8) + 8].colliderect(self.pb3) or \
                            self.boxLst[self.boxLst.index(self.pb8) + 8].colliderect(self.pb4) or \
                            self.boxLst[self.boxLst.index(self.pb8) + 8].colliderect(self.pb5) or \
                            self.boxLst[self.boxLst.index(self.pb8) + 8].colliderect(self.pb6) or \
                            self.boxLst[self.boxLst.index(self.pb8) + 8].colliderect(self.pb7) or \
                            self.boxLst[self.boxLst.index(self.pb8) + 8].colliderect(self.pb1) or \
                            self.boxLst[self.boxLst.index(self.pb8) + 8].colliderect(self.Kb) or \
                            self.boxLst[self.boxLst.index(self.pb8) + 8].colliderect(self.Qb) or \
                            self.boxLst[self.boxLst.index(self.pb8) + 8].colliderect(self.rb1) or \
                            self.boxLst[self.boxLst.index(self.pb8) + 8].colliderect(self.rb2) or \
                            self.boxLst[self.boxLst.index(self.pb8) + 8].colliderect(self.kb1) or \
                            self.boxLst[self.boxLst.index(self.pb8) + 8].colliderect(self.kb2) or \
                            self.boxLst[self.boxLst.index(self.pb8) + 8].colliderect(self.bb1) or \
                            self.boxLst[self.boxLst.index(self.pb8) + 8].colliderect(self.bb2):
                        self.pawnBlack8Clicked = 0
                if 0 * self.boxSize <= self.pb8.x <= 6 * self.boxSize and self.pb8.y < self.box57.y:
                    if self.boxLst[self.boxLst.index(self.pb8) + 8 + 1].colliderect(self.pw1) or \
                            self.boxLst[self.boxLst.index(self.pb8) + 8 + 1].colliderect(self.pw2) or \
                            self.boxLst[self.boxLst.index(self.pb8) + 8 + 1].colliderect(self.pw3) or \
                            self.boxLst[self.boxLst.index(self.pb8) + 8 + 1].colliderect(self.pw4) or \
                            self.boxLst[self.boxLst.index(self.pb8) + 8 + 1].colliderect(self.pw5) or \
                            self.boxLst[self.boxLst.index(self.pb8) + 8 + 1].colliderect(self.pw6) or \
                            self.boxLst[self.boxLst.index(self.pb8) + 8 + 1].colliderect(self.pw7) or \
                            self.boxLst[self.boxLst.index(self.pb8) + 8 + 1].colliderect(self.pw8) or \
                            self.boxLst[self.boxLst.index(self.pb8) + 8 + 1].colliderect(self.Kw) or \
                            self.boxLst[self.boxLst.index(self.pb8) + 8 + 1].colliderect(self.Qw) or \
                            self.boxLst[self.boxLst.index(self.pb8) + 8 + 1].colliderect(self.rw1) or \
                            self.boxLst[self.boxLst.index(self.pb8) + 8 + 1].colliderect(self.rw2) or \
                            self.boxLst[self.boxLst.index(self.pb8) + 8 + 1].colliderect(self.kw1) or \
                            self.boxLst[self.boxLst.index(self.pb8) + 8 + 1].colliderect(self.kw2) or \
                            self.boxLst[self.boxLst.index(self.pb8) + 8 + 1].colliderect(self.bw1) or \
                            self.boxLst[self.boxLst.index(self.pb8) + 8 + 1].colliderect(self.bw2):
                        pygame.draw.rect(self.window, self.red, self.boxLst[self.boxLst.index(self.pb8) + 8 + 1], border_radius=100)
                        self.pawnBlack8Clicked = 1
                        self.pawnBlack2Clicked = 0
                        self.pawnBlack3Clicked = 0
                        self.pawnBlack4Clicked = 0
                        self.pawnBlack5Clicked = 0
                        self.pawnBlack6Clicked = 0
                        self.pawnBlack7Clicked = 0
                        self.pawnBlack1Clicked = 0
                        self.KingBlackClicked = 0
                        self.knightBlack1Clicked = 0
                        self.knightBlack2Clicked = 0
                        self.rookBlack1Clicked = 0
                        self.rookBlack2Clicked = 0
                        self.bishopBlack1Clicked = 0
                        self.bishopBlack2Clicked = 0
                        self.QueenBlackClicked = 0
                        self.pawnBlack8Clicked_cut = 1
                if 1 * self.boxSize <= self.pb8.x <= 7 * self.boxSize and self.pb8.y < self.box57.y:
                    if self.boxLst[self.boxLst.index(self.pb8) + 8 - 1].colliderect(self.pw1) or \
                            self.boxLst[self.boxLst.index(self.pb8) + 8 - 1].colliderect(self.pw2) or \
                            self.boxLst[self.boxLst.index(self.pb8) + 8 - 1].colliderect(self.pw3) or \
                            self.boxLst[self.boxLst.index(self.pb8) + 8 - 1].colliderect(self.pw4) or \
                            self.boxLst[self.boxLst.index(self.pb8) + 8 - 1].colliderect(self.pw5) or \
                            self.boxLst[self.boxLst.index(self.pb8) + 8 - 1].colliderect(self.pw6) or \
                            self.boxLst[self.boxLst.index(self.pb8) + 8 - 1].colliderect(self.pw7) or \
                            self.boxLst[self.boxLst.index(self.pb8) + 8 - 1].colliderect(self.pw8) or \
                            self.boxLst[self.boxLst.index(self.pb8) + 8 - 1].colliderect(self.Kw) or \
                            self.boxLst[self.boxLst.index(self.pb8) + 8 - 1].colliderect(self.Qw) or \
                            self.boxLst[self.boxLst.index(self.pb8) + 8 - 1].colliderect(self.rw1) or \
                            self.boxLst[self.boxLst.index(self.pb8) + 8 - 1].colliderect(self.rw2) or \
                            self.boxLst[self.boxLst.index(self.pb8) + 8 - 1].colliderect(self.kw1) or \
                            self.boxLst[self.boxLst.index(self.pb8) + 8 - 1].colliderect(self.kw2) or \
                            self.boxLst[self.boxLst.index(self.pb8) + 8 - 1].colliderect(self.bw1) or \
                            self.boxLst[self.boxLst.index(self.pb8) + 8 - 1].colliderect(self.bw2):
                        pygame.draw.rect(self.window, self.red, self.boxLst[self.boxLst.index(self.pb8) + 8 - 1], border_radius=100)
                        self.pawnBlack8Clicked = 1
                        self.pawnBlack2Clicked = 0
                        self.pawnBlack3Clicked = 0
                        self.pawnBlack4Clicked = 0
                        self.pawnBlack5Clicked = 0
                        self.pawnBlack6Clicked = 0
                        self.pawnBlack7Clicked = 0
                        self.pawnBlack1Clicked = 0
                        self.KingBlackClicked = 0
                        self.knightBlack1Clicked = 0
                        self.knightBlack2Clicked = 0
                        self.rookBlack1Clicked = 0
                        self.rookBlack2Clicked = 0
                        self.bishopBlack1Clicked = 0
                        self.bishopBlack2Clicked = 0
                        self.QueenBlackClicked = 0
                        self.pawnBlack8Clicked_cut = 1

        if self.pawnBlack1Clicked == 1:
            if self.boxLst[self.boxLst.index(self.pb1) + 8].collidepoint(self.mouse_x, self.mouse_y):
                self.pb1 = self.boxLst[self.boxLst.index(self.pb1) + 8]
                self.pawnBlack1Clicked = 0
                self.turn = "white"
            if self.pawnBlack1Clicked_cut == 1:
                if self.pb1.x < self.box8.x and self.pb1.y < self.box57.y:
                    if self.boxLst[self.boxLst.index(self.pb1) + 8 + 1].collidepoint(self.mouse_x, self.mouse_y):
                        if self.boxLst[self.boxLst.index(self.pb1) + 8 + 1].colliderect(self.pw1):
                            self.pw1 = self.whiteCutPiece_1
                        if self.boxLst[self.boxLst.index(self.pb1) + 8 + 1].colliderect(self.pw2):
                            self.pw2 = self.whiteCutPiece_2
                        if self.boxLst[self.boxLst.index(self.pb1) + 8 + 1].colliderect(self.pw3):
                            self.pw3 = self.whiteCutPiece_3
                        if self.boxLst[self.boxLst.index(self.pb1) + 8 + 1].colliderect(self.pw4):
                            self.pw4 = self.whiteCutPiece_4
                        if self.boxLst[self.boxLst.index(self.pb1) + 8 + 1].colliderect(self.pw5):
                            self.pw5 = self.whiteCutPiece_5
                        if self.boxLst[self.boxLst.index(self.pb1) + 8 + 1].colliderect(self.pw6):
                            self.pw6 = self.whiteCutPiece_6
                        if self.boxLst[self.boxLst.index(self.pb1) + 8 + 1].colliderect(self.pw7):
                            self.pw7 = self.whiteCutPiece_7
                        if self.boxLst[self.boxLst.index(self.pb1) + 8 + 1].colliderect(self.pw8):
                            self.pw8 = self.whiteCutPiece_8
                        if self.boxLst[self.boxLst.index(self.pb1) + 8 + 1].colliderect(self.rw1):
                            self.rw1 = self.whiteCutPiece_9
                        if self.boxLst[self.boxLst.index(self.pb1) + 8 + 1].colliderect(self.rw2):
                            self.rw2 = self.whiteCutPiece_10
                        if self.boxLst[self.boxLst.index(self.pb1) + 8 + 1].colliderect(self.kw1):
                            self.kw1 = self.whiteCutPiece_11
                        if self.boxLst[self.boxLst.index(self.pb1) + 8 + 1].colliderect(self.kw2):
                            self.kw2 = self.whiteCutPiece_12
                        if self.boxLst[self.boxLst.index(self.pb1) + 8 + 1].colliderect(self.bw1):
                            self.bw1 = self.whiteCutPiece_13
                        if self.boxLst[self.boxLst.index(self.pb1) + 8 + 1].colliderect(self.bw2):
                            self.bw2 = self.whiteCutPiece_14
                        if self.boxLst[self.boxLst.index(self.pb1) + 8 + 1].colliderect(self.Kw):
                            self.Kw = self.whiteCutPiece_15
                            self.KingWhite_isDead = 1
                        if self.boxLst[self.boxLst.index(self.pb1) + 8 + 1].colliderect(self.Qw):
                            self.Qw = self.whiteCutPiece_16
                        self.pb1 = self.boxLst[self.boxLst.index(self.pb1) + 8 + 1]
                        self.pawnBlack1Clicked = 0
                        self.pawnBlack1Clicked_cut = 0
                        self.turn = "white"
                if self.box1.x <= self.pb1.x and self.pb1.y < self.box57.y:
                    if self.boxLst[self.boxLst.index(self.pb1) + 8 - 1].collidepoint(self.mouse_x, self.mouse_y):
                        if self.boxLst[self.boxLst.index(self.pb1) + 8 - 1].colliderect(self.pw1):
                            self.pw1 = self.whiteCutPiece_1
                        if self.boxLst[self.boxLst.index(self.pb1) + 8 - 1].colliderect(self.pw2):
                            self.pw2 = self.whiteCutPiece_2
                        if self.boxLst[self.boxLst.index(self.pb1) + 8 - 1].colliderect(self.pw3):
                            self.pw3 = self.whiteCutPiece_3
                        if self.boxLst[self.boxLst.index(self.pb1) + 8 - 1].colliderect(self.pw4):
                            self.pw4 = self.whiteCutPiece_4
                        if self.boxLst[self.boxLst.index(self.pb1) + 8 - 1].colliderect(self.pw5):
                            self.pw5 = self.whiteCutPiece_5
                        if self.boxLst[self.boxLst.index(self.pb1) + 8 - 1].colliderect(self.pw6):
                            self.pw6 = self.whiteCutPiece_6
                        if self.boxLst[self.boxLst.index(self.pb1) + 8 - 1].colliderect(self.pw7):
                            self.pw7 = self.whiteCutPiece_7
                        if self.boxLst[self.boxLst.index(self.pb1) + 8 - 1].colliderect(self.pw8):
                            self.pw8 = self.whiteCutPiece_8
                        if self.boxLst[self.boxLst.index(self.pb1) + 8 - 1].colliderect(self.rw1):
                            self.rw1 = self.whiteCutPiece_9
                        if self.boxLst[self.boxLst.index(self.pb1) + 8 - 1].colliderect(self.rw2):
                            self.rw2 = self.whiteCutPiece_10
                        if self.boxLst[self.boxLst.index(self.pb1) + 8 - 1].colliderect(self.kw1):
                            self.kw1 = self.whiteCutPiece_11
                        if self.boxLst[self.boxLst.index(self.pb1) + 8 - 1].colliderect(self.kw2):
                            self.kw2 = self.whiteCutPiece_12
                        if self.boxLst[self.boxLst.index(self.pb1) + 8 - 1].colliderect(self.bw1):
                            self.bw1 = self.whiteCutPiece_13
                        if self.boxLst[self.boxLst.index(self.pb1) + 8 - 1].colliderect(self.bw2):
                            self.bw2 = self.whiteCutPiece_14
                        if self.boxLst[self.boxLst.index(self.pb1) + 8 - 1].colliderect(self.Kw):
                            self.Kw = self.whiteCutPiece_15
                            self.KingWhite_isDead = 1
                        if self.boxLst[self.boxLst.index(self.pb1) + 8 - 1].colliderect(self.Qw):
                            self.Qw = self.whiteCutPiece_16
                        self.pb1 = self.boxLst[self.boxLst.index(self.pb1) + 8 - 1]
                        self.pawnBlack1Clicked = 0
                        self.pawnBlack1Clicked_cut = 0
                        self.turn = "white"
            if self.pb1.y < self.box49.y:
                if self.pawnBlack1Clicked_twoStep == 1:
                    if self.boxLst[self.boxLst.index(self.pb1) + 16].collidepoint(self.mouse_x, self.mouse_y):
                        self.pb1 = self.boxLst[self.boxLst.index(self.pb1) + 16]
                        self.pawnBlack1Clicked = 0
                        self.pawnBlack1Clicked_twoStep = 0
                        self.turn = "white"

        elif self.pawnBlack2Clicked == 1:
            if self.boxLst[self.boxLst.index(self.pb2) + 8].collidepoint(self.mouse_x, self.mouse_y):
                self.pb2 = self.boxLst[self.boxLst.index(self.pb2) + 8]
                self.pawnBlack2Clicked = 0
                self.turn = "white"
            if self.pawnBlack2Clicked_cut == 1:
                if self.pb2.x < self.box8.x and self.pb2.y < self.box57.y:
                    if self.boxLst[self.boxLst.index(self.pb2) + 8 + 1].collidepoint(self.mouse_x, self.mouse_y):
                        if self.boxLst[self.boxLst.index(self.pb2) + 8 + 1].colliderect(self.pw1):
                            self.pw1 = self.whiteCutPiece_1
                        if self.boxLst[self.boxLst.index(self.pb2) + 8 + 1].colliderect(self.pw2):
                            self.pw2 = self.whiteCutPiece_2
                        if self.boxLst[self.boxLst.index(self.pb2) + 8 + 1].colliderect(self.pw3):
                            self.pw3 = self.whiteCutPiece_3
                        if self.boxLst[self.boxLst.index(self.pb2) + 8 + 1].colliderect(self.pw4):
                            self.pw4 = self.whiteCutPiece_4
                        if self.boxLst[self.boxLst.index(self.pb2) + 8 + 1].colliderect(self.pw5):
                            self.pw5 = self.whiteCutPiece_5
                        if self.boxLst[self.boxLst.index(self.pb2) + 8 + 1].colliderect(self.pw6):
                            self.pw6 = self.whiteCutPiece_6
                        if self.boxLst[self.boxLst.index(self.pb2) + 8 + 1].colliderect(self.pw7):
                            self.pw7 = self.whiteCutPiece_7
                        if self.boxLst[self.boxLst.index(self.pb2) + 8 + 1].colliderect(self.pw8):
                            self.pw8 = self.whiteCutPiece_8
                        if self.boxLst[self.boxLst.index(self.pb2) + 8 + 1].colliderect(self.rw1):
                            self.rw1 = self.whiteCutPiece_9
                        if self.boxLst[self.boxLst.index(self.pb2) + 8 + 1].colliderect(self.rw2):
                            self.rw2 = self.whiteCutPiece_10
                        if self.boxLst[self.boxLst.index(self.pb2) + 8 + 1].colliderect(self.kw1):
                            self.kw1 = self.whiteCutPiece_11
                        if self.boxLst[self.boxLst.index(self.pb2) + 8 + 1].colliderect(self.kw2):
                            self.kw2 = self.whiteCutPiece_12
                        if self.boxLst[self.boxLst.index(self.pb2) + 8 + 1].colliderect(self.bw1):
                            self.bw1 = self.whiteCutPiece_13
                        if self.boxLst[self.boxLst.index(self.pb2) + 8 + 1].colliderect(self.bw2):
                            self.bw2 = self.whiteCutPiece_14
                        if self.boxLst[self.boxLst.index(self.pb2) + 8 + 1].colliderect(self.Kw):
                            self.Kw = self.whiteCutPiece_15
                            self.KingWhite_isDead = 1
                        if self.boxLst[self.boxLst.index(self.pb2) + 8 + 1].colliderect(self.Qw):
                            self.Qw = self.whiteCutPiece_16
                        self.pb2 = self.boxLst[self.boxLst.index(self.pb2) + 8 + 1]
                        self.pawnBlack2Clicked = 0
                        self.pawnBlack2Clicked_cut = 0
                        self.turn = "white"
                if self.box1.x <= self.pb2.x and self.pb2.y < self.box57.y:
                    if self.boxLst[self.boxLst.index(self.pb2) + 8 - 1].collidepoint(self.mouse_x, self.mouse_y):
                        if self.boxLst[self.boxLst.index(self.pb2) + 8 - 1].colliderect(self.pw1):
                            self.pw1 = self.whiteCutPiece_1
                        if self.boxLst[self.boxLst.index(self.pb2) + 8 - 1].colliderect(self.pw2):
                            self.pw2 = self.whiteCutPiece_2
                        if self.boxLst[self.boxLst.index(self.pb2) + 8 - 1].colliderect(self.pw3):
                            self.pw3 = self.whiteCutPiece_3
                        if self.boxLst[self.boxLst.index(self.pb2) + 8 - 1].colliderect(self.pw4):
                            self.pw4 = self.whiteCutPiece_4
                        if self.boxLst[self.boxLst.index(self.pb2) + 8 - 1].colliderect(self.pw5):
                            self.pw5 = self.whiteCutPiece_5
                        if self.boxLst[self.boxLst.index(self.pb2) + 8 - 1].colliderect(self.pw6):
                            self.pw6 = self.whiteCutPiece_6
                        if self.boxLst[self.boxLst.index(self.pb2) + 8 - 1].colliderect(self.pw7):
                            self.pw7 = self.whiteCutPiece_7
                        if self.boxLst[self.boxLst.index(self.pb2) + 8 - 1].colliderect(self.pw8):
                            self.pw8 = self.whiteCutPiece_8
                        if self.boxLst[self.boxLst.index(self.pb2) + 8 - 1].colliderect(self.rw1):
                            self.rw1 = self.whiteCutPiece_9
                        if self.boxLst[self.boxLst.index(self.pb2) + 8 - 1].colliderect(self.rw2):
                            self.rw2 = self.whiteCutPiece_10
                        if self.boxLst[self.boxLst.index(self.pb2) + 8 - 1].colliderect(self.kw1):
                            self.kw1 = self.whiteCutPiece_11
                        if self.boxLst[self.boxLst.index(self.pb2) + 8 - 1].colliderect(self.kw2):
                            self.kw2 = self.whiteCutPiece_12
                        if self.boxLst[self.boxLst.index(self.pb2) + 8 - 1].colliderect(self.bw1):
                            self.bw1 = self.whiteCutPiece_13
                        if self.boxLst[self.boxLst.index(self.pb2) + 8 - 1].colliderect(self.bw2):
                            self.bw2 = self.whiteCutPiece_14
                        if self.boxLst[self.boxLst.index(self.pb2) + 8 - 1].colliderect(self.Kw):
                            self.Kw = self.whiteCutPiece_15
                            self.KingWhite_isDead = 1
                        if self.boxLst[self.boxLst.index(self.pb2) + 8 - 1].colliderect(self.Qw):
                            self.Qw = self.whiteCutPiece_16
                        self.pb2 = self.boxLst[self.boxLst.index(self.pb2) + 8 - 1]
                        self.pawnBlack2Clicked = 0
                        self.pawnBlack2Clicked_cut = 0
                        self.turn = "white"
            if self.pb2.y < self.box49.y:
                if self.pawnBlack2Clicked_twoStep == 1:
                    if self.boxLst[self.boxLst.index(self.pb2) + 16].collidepoint(self.mouse_x, self.mouse_y):
                        self.pb2 = self.boxLst[self.boxLst.index(self.pb2) + 16]
                        self.pawnBlack2Clicked = 0
                        self.pawnBlack2Clicked_twoStep = 0
                        self.turn = "white"

        elif self.pawnBlack3Clicked == 1:
            if self.boxLst[self.boxLst.index(self.pb3) + 8].collidepoint(self.mouse_x, self.mouse_y):
                self.pb3 = self.boxLst[self.boxLst.index(self.pb3) + 8]
                self.pawnBlack3Clicked = 0
                self.turn = "white"
            if self.pawnBlack3Clicked_cut == 1:
                if self.pb3.x < self.box8.x and self.pb3.y < self.box57.y:
                    if self.boxLst[self.boxLst.index(self.pb3) + 8 + 1].collidepoint(self.mouse_x, self.mouse_y):
                        if self.boxLst[self.boxLst.index(self.pb3) + 8 + 1].colliderect(self.pw1):
                            self.pw1 = self.whiteCutPiece_1
                        if self.boxLst[self.boxLst.index(self.pb3) + 8 + 1].colliderect(self.pw2):
                            self.pw2 = self.whiteCutPiece_2
                        if self.boxLst[self.boxLst.index(self.pb3) + 8 + 1].colliderect(self.pw3):
                            self.pw3 = self.whiteCutPiece_3
                        if self.boxLst[self.boxLst.index(self.pb3) + 8 + 1].colliderect(self.pw4):
                            self.pw4 = self.whiteCutPiece_4
                        if self.boxLst[self.boxLst.index(self.pb3) + 8 + 1].colliderect(self.pw5):
                            self.pw5 = self.whiteCutPiece_5
                        if self.boxLst[self.boxLst.index(self.pb3) + 8 + 1].colliderect(self.pw6):
                            self.pw6 = self.whiteCutPiece_6
                        if self.boxLst[self.boxLst.index(self.pb3) + 8 + 1].colliderect(self.pw7):
                            self.pw7 = self.whiteCutPiece_7
                        if self.boxLst[self.boxLst.index(self.pb3) + 8 + 1].colliderect(self.pw8):
                            self.pw8 = self.whiteCutPiece_8
                        if self.boxLst[self.boxLst.index(self.pb3) + 8 + 1].colliderect(self.rw1):
                            self.rw1 = self.whiteCutPiece_9
                        if self.boxLst[self.boxLst.index(self.pb3) + 8 + 1].colliderect(self.rw2):
                            self.rw2 = self.whiteCutPiece_10
                        if self.boxLst[self.boxLst.index(self.pb3) + 8 + 1].colliderect(self.kw1):
                            self.kw1 = self.whiteCutPiece_11
                        if self.boxLst[self.boxLst.index(self.pb3) + 8 + 1].colliderect(self.kw2):
                            self.kw2 = self.whiteCutPiece_12
                        if self.boxLst[self.boxLst.index(self.pb3) + 8 + 1].colliderect(self.bw1):
                            self.bw1 = self.whiteCutPiece_13
                        if self.boxLst[self.boxLst.index(self.pb3) + 8 + 1].colliderect(self.bw2):
                            self.bw2 = self.whiteCutPiece_14
                        if self.boxLst[self.boxLst.index(self.pb3) + 8 + 1].colliderect(self.Kw):
                            self.Kw = self.whiteCutPiece_15
                            self.KingWhite_isDead = 1
                        if self.boxLst[self.boxLst.index(self.pb3) + 8 + 1].colliderect(self.Qw):
                            self.Qw = self.whiteCutPiece_16
                        self.pb3 = self.boxLst[self.boxLst.index(self.pb3) + 8 + 1]
                        self.pawnBlack3Clicked = 0
                        self.pawnBlack3Clicked_cut = 0
                        self.turn = "white"
                if self.box1.x <= self.pb3.x and self.pb3.y < self.box57.y:
                    if self.boxLst[self.boxLst.index(self.pb3) + 8 - 1].collidepoint(self.mouse_x, self.mouse_y):
                        if self.boxLst[self.boxLst.index(self.pb3) + 8 - 1].colliderect(self.pw1):
                            self.pw1 = self.whiteCutPiece_1
                        if self.boxLst[self.boxLst.index(self.pb3) + 8 - 1].colliderect(self.pw2):
                            self.pw2 = self.whiteCutPiece_2
                        if self.boxLst[self.boxLst.index(self.pb3) + 8 - 1].colliderect(self.pw3):
                            self.pw3 = self.whiteCutPiece_3
                        if self.boxLst[self.boxLst.index(self.pb3) + 8 - 1].colliderect(self.pw4):
                            self.pw4 = self.whiteCutPiece_4
                        if self.boxLst[self.boxLst.index(self.pb3) + 8 - 1].colliderect(self.pw5):
                            self.pw5 = self.whiteCutPiece_5
                        if self.boxLst[self.boxLst.index(self.pb3) + 8 - 1].colliderect(self.pw6):
                            self.pw6 = self.whiteCutPiece_6
                        if self.boxLst[self.boxLst.index(self.pb3) + 8 - 1].colliderect(self.pw7):
                            self.pw7 = self.whiteCutPiece_7
                        if self.boxLst[self.boxLst.index(self.pb3) + 8 - 1].colliderect(self.pw8):
                            self.pw8 = self.whiteCutPiece_8
                        if self.boxLst[self.boxLst.index(self.pb3) + 8 - 1].colliderect(self.rw1):
                            self.rw1 = self.whiteCutPiece_9
                        if self.boxLst[self.boxLst.index(self.pb3) + 8 - 1].colliderect(self.rw2):
                            self.rw2 = self.whiteCutPiece_10
                        if self.boxLst[self.boxLst.index(self.pb3) + 8 - 1].colliderect(self.kw1):
                            self.kw1 = self.whiteCutPiece_11
                        if self.boxLst[self.boxLst.index(self.pb3) + 8 - 1].colliderect(self.kw2):
                            self.kw2 = self.whiteCutPiece_12
                        if self.boxLst[self.boxLst.index(self.pb3) + 8 - 1].colliderect(self.bw1):
                            self.bw1 = self.whiteCutPiece_13
                        if self.boxLst[self.boxLst.index(self.pb3) + 8 - 1].colliderect(self.bw2):
                            self.bw2 = self.whiteCutPiece_14
                        if self.boxLst[self.boxLst.index(self.pb3) + 8 - 1].colliderect(self.Kw):
                            self.Kw = self.whiteCutPiece_15
                            self.KingWhite_isDead = 1
                        if self.boxLst[self.boxLst.index(self.pb3) + 8 - 1].colliderect(self.Qw):
                            self.Qw = self.whiteCutPiece_16
                        self.pb3 = self.boxLst[self.boxLst.index(self.pb3) + 8 - 1]
                        self.pawnBlack3Clicked = 0
                        self.pawnBlack3Clicked_cut = 0
                        self.turn = "white"
            if self.pb3.y < self.box49.y:
                if self.pawnBlack3Clicked_twoStep == 1:
                    if self.boxLst[self.boxLst.index(self.pb3) + 16].collidepoint(self.mouse_x, self.mouse_y):
                        self.pb3 = self.boxLst[self.boxLst.index(self.pb3) + 16]
                        self.pawnBlack3Clicked = 0
                        self.pawnBlack3Clicked_twoStep = 0
                        self.turn = "white"

        elif self.pawnBlack4Clicked == 1:
            if self.boxLst[self.boxLst.index(self.pb4) + 8].collidepoint(self.mouse_x, self.mouse_y):
                self.pb4 = self.boxLst[self.boxLst.index(self.pb4) + 8]
                self.pawnBlack4Clicked = 0
                self.turn = "white"
            if self.pawnBlack4Clicked_cut == 1:
                if self.pb4.x < self.box8.x and self.pb4.y < self.box57.y:
                    if self.boxLst[self.boxLst.index(self.pb4) + 8 + 1].collidepoint(self.mouse_x, self.mouse_y):
                        if self.boxLst[self.boxLst.index(self.pb4) + 8 + 1].colliderect(self.pw1):
                            self.pw1 = self.whiteCutPiece_1
                        if self.boxLst[self.boxLst.index(self.pb4) + 8 + 1].colliderect(self.pw2):
                            self.pw2 = self.whiteCutPiece_2
                        if self.boxLst[self.boxLst.index(self.pb4) + 8 + 1].colliderect(self.pw3):
                            self.pw3 = self.whiteCutPiece_3
                        if self.boxLst[self.boxLst.index(self.pb4) + 8 + 1].colliderect(self.pw4):
                            self.pw4 = self.whiteCutPiece_4
                        if self.boxLst[self.boxLst.index(self.pb4) + 8 + 1].colliderect(self.pw5):
                            self.pw5 = self.whiteCutPiece_5
                        if self.boxLst[self.boxLst.index(self.pb4) + 8 + 1].colliderect(self.pw6):
                            self.pw6 = self.whiteCutPiece_6
                        if self.boxLst[self.boxLst.index(self.pb4) + 8 + 1].colliderect(self.pw7):
                            self.pw7 = self.whiteCutPiece_7
                        if self.boxLst[self.boxLst.index(self.pb4) + 8 + 1].colliderect(self.pw8):
                            self.pw8 = self.whiteCutPiece_8
                        if self.boxLst[self.boxLst.index(self.pb4) + 8 + 1].colliderect(self.rw1):
                            self.rw1 = self.whiteCutPiece_9
                        if self.boxLst[self.boxLst.index(self.pb4) + 8 + 1].colliderect(self.rw2):
                            self.rw2 = self.whiteCutPiece_10
                        if self.boxLst[self.boxLst.index(self.pb4) + 8 + 1].colliderect(self.kw1):
                            self.kw1 = self.whiteCutPiece_11
                        if self.boxLst[self.boxLst.index(self.pb4) + 8 + 1].colliderect(self.kw2):
                            self.kw2 = self.whiteCutPiece_12
                        if self.boxLst[self.boxLst.index(self.pb4) + 8 + 1].colliderect(self.bw1):
                            self.bw1 = self.whiteCutPiece_13
                        if self.boxLst[self.boxLst.index(self.pb4) + 8 + 1].colliderect(self.bw2):
                            self.bw2 = self.whiteCutPiece_14
                        if self.boxLst[self.boxLst.index(self.pb4) + 8 + 1].colliderect(self.Kw):
                            self.Kw = self.whiteCutPiece_15
                            self.KingWhite_isDead = 1
                        if self.boxLst[self.boxLst.index(self.pb4) + 8 + 1].colliderect(self.Qw):
                            self.Qw = self.whiteCutPiece_16
                        self.pb4 = self.boxLst[self.boxLst.index(self.pb4) + 8 + 1]
                        self.pawnBlack4Clicked = 0
                        self.pawnBlack4Clicked_cut = 0
                        self.turn = "white"
                if self.box1.x <= self.pb4.x and self.pb4.y < self.box57.y:
                    if self.boxLst[self.boxLst.index(self.pb4) + 8 - 1].collidepoint(self.mouse_x, self.mouse_y):
                        if self.boxLst[self.boxLst.index(self.pb4) + 8 - 1].colliderect(self.pw1):
                            self.pw1 = self.whiteCutPiece_1
                        if self.boxLst[self.boxLst.index(self.pb4) + 8 - 1].colliderect(self.pw2):
                            self.pw2 = self.whiteCutPiece_2
                        if self.boxLst[self.boxLst.index(self.pb4) + 8 - 1].colliderect(self.pw3):
                            self.pw3 = self.whiteCutPiece_3
                        if self.boxLst[self.boxLst.index(self.pb4) + 8 - 1].colliderect(self.pw4):
                            self.pw4 = self.whiteCutPiece_4
                        if self.boxLst[self.boxLst.index(self.pb4) + 8 - 1].colliderect(self.pw5):
                            self.pw5 = self.whiteCutPiece_5
                        if self.boxLst[self.boxLst.index(self.pb4) + 8 - 1].colliderect(self.pw6):
                            self.pw6 = self.whiteCutPiece_6
                        if self.boxLst[self.boxLst.index(self.pb4) + 8 - 1].colliderect(self.pw7):
                            self.pw7 = self.whiteCutPiece_7
                        if self.boxLst[self.boxLst.index(self.pb4) + 8 - 1].colliderect(self.pw8):
                            self.pw8 = self.whiteCutPiece_8
                        if self.boxLst[self.boxLst.index(self.pb4) + 8 - 1].colliderect(self.rw1):
                            self.rw1 = self.whiteCutPiece_9
                        if self.boxLst[self.boxLst.index(self.pb4) + 8 - 1].colliderect(self.rw2):
                            self.rw2 = self.whiteCutPiece_10
                        if self.boxLst[self.boxLst.index(self.pb4) + 8 - 1].colliderect(self.kw1):
                            self.kw1 = self.whiteCutPiece_11
                        if self.boxLst[self.boxLst.index(self.pb4) + 8 - 1].colliderect(self.kw2):
                            self.kw2 = self.whiteCutPiece_12
                        if self.boxLst[self.boxLst.index(self.pb4) + 8 - 1].colliderect(self.bw1):
                            self.bw1 = self.whiteCutPiece_13
                        if self.boxLst[self.boxLst.index(self.pb4) + 8 - 1].colliderect(self.bw2):
                            self.bw2 = self.whiteCutPiece_14
                        if self.boxLst[self.boxLst.index(self.pb4) + 8 - 1].colliderect(self.Kw):
                            self.Kw = self.whiteCutPiece_15
                            self.KingWhite_isDead = 1
                        if self.boxLst[self.boxLst.index(self.pb4) + 8 - 1].colliderect(self.Qw):
                            self.Qw = self.whiteCutPiece_16
                        self.pb4 = self.boxLst[self.boxLst.index(self.pb4) + 8 - 1]
                        self.pawnBlack4Clicked = 0
                        self.pawnBlack4Clicked_cut = 0
                        self.turn = "white"
            if self.pb4.y < self.box49.y:
                if self.pawnBlack4Clicked_twoStep == 1:
                    if self.boxLst[self.boxLst.index(self.pb4) + 16].collidepoint(self.mouse_x, self.mouse_y):
                        self.pb4 = self.boxLst[self.boxLst.index(self.pb4) + 16]
                        self.pawnBlack4Clicked = 0
                        self.pawnBlack4Clicked_twoStep = 0
                        self.turn = "white"

        elif self.pawnBlack5Clicked == 1:
            if self.boxLst[self.boxLst.index(self.pb5) + 8].collidepoint(self.mouse_x, self.mouse_y):
                self.pb5 = self.boxLst[self.boxLst.index(self.pb5) + 8]
                self.pawnBlack5Clicked = 0
                self.turn = "white"
            if self.pawnBlack5Clicked_cut == 1:
                if self.pb5.x < self.box8.x and self.pb5.y < self.box57.y:
                    if self.boxLst[self.boxLst.index(self.pb5) + 8 + 1].collidepoint(self.mouse_x, self.mouse_y):
                        if self.boxLst[self.boxLst.index(self.pb5) + 8 + 1].colliderect(self.pw1):
                            self.pw1 = self.whiteCutPiece_1
                        if self.boxLst[self.boxLst.index(self.pb5) + 8 + 1].colliderect(self.pw2):
                            self.pw2 = self.whiteCutPiece_2
                        if self.boxLst[self.boxLst.index(self.pb5) + 8 + 1].colliderect(self.pw3):
                            self.pw3 = self.whiteCutPiece_3
                        if self.boxLst[self.boxLst.index(self.pb5) + 8 + 1].colliderect(self.pw4):
                            self.pw4 = self.whiteCutPiece_4
                        if self.boxLst[self.boxLst.index(self.pb5) + 8 + 1].colliderect(self.pw5):
                            self.pw5 = self.whiteCutPiece_5
                        if self.boxLst[self.boxLst.index(self.pb5) + 8 + 1].colliderect(self.pw6):
                            self.pw6 = self.whiteCutPiece_6
                        if self.boxLst[self.boxLst.index(self.pb5) + 8 + 1].colliderect(self.pw7):
                            self.pw7 = self.whiteCutPiece_7
                        if self.boxLst[self.boxLst.index(self.pb5) + 8 + 1].colliderect(self.pw8):
                            self.pw8 = self.whiteCutPiece_8
                        if self.boxLst[self.boxLst.index(self.pb5) + 8 + 1].colliderect(self.rw1):
                            self.rw1 = self.whiteCutPiece_9
                        if self.boxLst[self.boxLst.index(self.pb5) + 8 + 1].colliderect(self.rw2):
                            self.rw2 = self.whiteCutPiece_10
                        if self.boxLst[self.boxLst.index(self.pb5) + 8 + 1].colliderect(self.kw1):
                            self.kw1 = self.whiteCutPiece_11
                        if self.boxLst[self.boxLst.index(self.pb5) + 8 + 1].colliderect(self.kw2):
                            self.kw2 = self.whiteCutPiece_12
                        if self.boxLst[self.boxLst.index(self.pb5) + 8 + 1].colliderect(self.bw1):
                            self.bw1 = self.whiteCutPiece_13
                        if self.boxLst[self.boxLst.index(self.pb5) + 8 + 1].colliderect(self.bw2):
                            self.bw2 = self.whiteCutPiece_14
                        if self.boxLst[self.boxLst.index(self.pb5) + 8 + 1].colliderect(self.Kw):
                            self.Kw = self.whiteCutPiece_15
                            self.KingWhite_isDead = 1
                        if self.boxLst[self.boxLst.index(self.pb5) + 8 + 1].colliderect(self.Qw):
                            self.Qw = self.whiteCutPiece_16
                        self.pb5 = self.boxLst[self.boxLst.index(self.pb5) + 8 + 1]
                        self.pawnBlack5Clicked = 0
                        self.pawnBlack5Clicked_cut = 0
                        self.turn = "white"
                if self.box1.x <= self.pb5.x and self.pb5.y < self.box57.y:
                    if self.boxLst[self.boxLst.index(self.pb5) + 8 - 1].collidepoint(self.mouse_x, self.mouse_y):
                        if self.boxLst[self.boxLst.index(self.pb5) + 8 - 1].colliderect(self.pw1):
                            self.pw1 = self.whiteCutPiece_1
                        if self.boxLst[self.boxLst.index(self.pb5) + 8 - 1].colliderect(self.pw2):
                            self.pw2 = self.whiteCutPiece_2
                        if self.boxLst[self.boxLst.index(self.pb5) + 8 - 1].colliderect(self.pw3):
                            self.pw3 = self.whiteCutPiece_3
                        if self.boxLst[self.boxLst.index(self.pb5) + 8 - 1].colliderect(self.pw4):
                            self.pw4 = self.whiteCutPiece_4
                        if self.boxLst[self.boxLst.index(self.pb5) + 8 - 1].colliderect(self.pw5):
                            self.pw5 = self.whiteCutPiece_5
                        if self.boxLst[self.boxLst.index(self.pb5) + 8 - 1].colliderect(self.pw6):
                            self.pw6 = self.whiteCutPiece_6
                        if self.boxLst[self.boxLst.index(self.pb5) + 8 - 1].colliderect(self.pw7):
                            self.pw7 = self.whiteCutPiece_7
                        if self.boxLst[self.boxLst.index(self.pb5) + 8 - 1].colliderect(self.pw8):
                            self.pw8 = self.whiteCutPiece_8
                        if self.boxLst[self.boxLst.index(self.pb5) + 8 - 1].colliderect(self.rw1):
                            self.rw1 = self.whiteCutPiece_9
                        if self.boxLst[self.boxLst.index(self.pb5) + 8 - 1].colliderect(self.rw2):
                            self.rw2 = self.whiteCutPiece_10
                        if self.boxLst[self.boxLst.index(self.pb5) + 8 - 1].colliderect(self.kw1):
                            self.kw1 = self.whiteCutPiece_11
                        if self.boxLst[self.boxLst.index(self.pb5) + 8 - 1].colliderect(self.kw2):
                            self.kw2 = self.whiteCutPiece_12
                        if self.boxLst[self.boxLst.index(self.pb5) + 8 - 1].colliderect(self.bw1):
                            self.bw1 = self.whiteCutPiece_13
                        if self.boxLst[self.boxLst.index(self.pb5) + 8 - 1].colliderect(self.bw2):
                            self.bw2 = self.whiteCutPiece_14
                        if self.boxLst[self.boxLst.index(self.pb5) + 8 - 1].colliderect(self.Kw):
                            self.Kw = self.whiteCutPiece_15
                            self.KingWhite_isDead = 1
                        if self.boxLst[self.boxLst.index(self.pb5) + 8 - 1].colliderect(self.Qw):
                            self.Qw = self.whiteCutPiece_16
                        self.pb5 = self.boxLst[self.boxLst.index(self.pb5) + 8 - 1]
                        self.pawnBlack5Clicked = 0
                        self.pawnBlack5Clicked_cut = 0
                        self.turn = "white"
            if self.pb5.y < self.box49.y:
                if self.pawnBlack5Clicked_twoStep == 1:
                    if self.boxLst[self.boxLst.index(self.pb5) + 16].collidepoint(self.mouse_x, self.mouse_y):
                        self.pb5 = self.boxLst[self.boxLst.index(self.pb5) + 16]
                        self.pawnBlack5Clicked = 0
                        self.pawnBlack5Clicked_twoStep = 0
                        self.turn = "white"

        elif self.pawnBlack6Clicked == 1:
            if self.boxLst[self.boxLst.index(self.pb6) + 8].collidepoint(self.mouse_x, self.mouse_y):
                self.pb6 = self.boxLst[self.boxLst.index(self.pb6) + 8]
                self.pawnBlack6Clicked = 0
                self.turn = "white"
            if self.pawnBlack6Clicked_cut == 1:
                if self.pb6.x < self.box8.x and self.pb6.y < self.box57.y:
                    if self.boxLst[self.boxLst.index(self.pb6) + 8 + 1].collidepoint(self.mouse_x, self.mouse_y):
                        if self.boxLst[self.boxLst.index(self.pb6) + 8 + 1].colliderect(self.pw1):
                            self.pw1 = self.whiteCutPiece_1
                        if self.boxLst[self.boxLst.index(self.pb6) + 8 + 1].colliderect(self.pw2):
                            self.pw2 = self.whiteCutPiece_2
                        if self.boxLst[self.boxLst.index(self.pb6) + 8 + 1].colliderect(self.pw3):
                            self.pw3 = self.whiteCutPiece_3
                        if self.boxLst[self.boxLst.index(self.pb6) + 8 + 1].colliderect(self.pw4):
                            self.pw4 = self.whiteCutPiece_4
                        if self.boxLst[self.boxLst.index(self.pb6) + 8 + 1].colliderect(self.pw5):
                            self.pw5 = self.whiteCutPiece_5
                        if self.boxLst[self.boxLst.index(self.pb6) + 8 + 1].colliderect(self.pw6):
                            self.pw6 = self.whiteCutPiece_6
                        if self.boxLst[self.boxLst.index(self.pb6) + 8 + 1].colliderect(self.pw7):
                            self.pw7 = self.whiteCutPiece_7
                        if self.boxLst[self.boxLst.index(self.pb6) + 8 + 1].colliderect(self.pw8):
                            self.pw8 = self.whiteCutPiece_8
                        if self.boxLst[self.boxLst.index(self.pb6) + 8 + 1].colliderect(self.rw1):
                            self.rw1 = self.whiteCutPiece_9
                        if self.boxLst[self.boxLst.index(self.pb6) + 8 + 1].colliderect(self.rw2):
                            self.rw2 = self.whiteCutPiece_10
                        if self.boxLst[self.boxLst.index(self.pb6) + 8 + 1].colliderect(self.kw1):
                            self.kw1 = self.whiteCutPiece_11
                        if self.boxLst[self.boxLst.index(self.pb6) + 8 + 1].colliderect(self.kw2):
                            self.kw2 = self.whiteCutPiece_12
                        if self.boxLst[self.boxLst.index(self.pb6) + 8 + 1].colliderect(self.bw1):
                            self.bw1 = self.whiteCutPiece_13
                        if self.boxLst[self.boxLst.index(self.pb6) + 8 + 1].colliderect(self.bw2):
                            self.bw2 = self.whiteCutPiece_14
                        if self.boxLst[self.boxLst.index(self.pb6) + 8 + 1].colliderect(self.Kw):
                            self.Kw = self.whiteCutPiece_15
                            self.KingWhite_isDead = 1
                        if self.boxLst[self.boxLst.index(self.pb6) + 8 + 1].colliderect(self.Qw):
                            self.Qw = self.whiteCutPiece_16
                        self.pb6 = self.boxLst[self.boxLst.index(self.pb6) + 8 + 1]
                        self.pawnBlack6Clicked = 0
                        self.pawnBlack6Clicked_cut = 0
                        self.turn = "white"
                if self.box1.x <= self.pb6.x and self.pb6.y < self.box57.y:
                    if self.boxLst[self.boxLst.index(self.pb6) + 8 - 1].collidepoint(self.mouse_x, self.mouse_y):
                        if self.boxLst[self.boxLst.index(self.pb6) + 8 - 1].colliderect(self.pw1):
                            self.pw1 = self.whiteCutPiece_1
                        if self.boxLst[self.boxLst.index(self.pb6) + 8 - 1].colliderect(self.pw2):
                            self.pw2 = self.whiteCutPiece_2
                        if self.boxLst[self.boxLst.index(self.pb6) + 8 - 1].colliderect(self.pw3):
                            self.pw3 = self.whiteCutPiece_3
                        if self.boxLst[self.boxLst.index(self.pb6) + 8 - 1].colliderect(self.pw4):
                            self.pw4 = self.whiteCutPiece_4
                        if self.boxLst[self.boxLst.index(self.pb6) + 8 - 1].colliderect(self.pw5):
                            self.pw5 = self.whiteCutPiece_5
                        if self.boxLst[self.boxLst.index(self.pb6) + 8 - 1].colliderect(self.pw6):
                            self.pw6 = self.whiteCutPiece_6
                        if self.boxLst[self.boxLst.index(self.pb6) + 8 - 1].colliderect(self.pw7):
                            self.pw7 = self.whiteCutPiece_7
                        if self.boxLst[self.boxLst.index(self.pb6) + 8 - 1].colliderect(self.pw8):
                            self.pw8 = self.whiteCutPiece_8
                        if self.boxLst[self.boxLst.index(self.pb6) + 8 - 1].colliderect(self.rw1):
                            self.rw1 = self.whiteCutPiece_9
                        if self.boxLst[self.boxLst.index(self.pb6) + 8 - 1].colliderect(self.rw2):
                            self.rw2 = self.whiteCutPiece_10
                        if self.boxLst[self.boxLst.index(self.pb6) + 8 - 1].colliderect(self.kw1):
                            self.kw1 = self.whiteCutPiece_11
                        if self.boxLst[self.boxLst.index(self.pb6) + 8 - 1].colliderect(self.kw2):
                            self.kw2 = self.whiteCutPiece_12
                        if self.boxLst[self.boxLst.index(self.pb6) + 8 - 1].colliderect(self.bw1):
                            self.bw1 = self.whiteCutPiece_13
                        if self.boxLst[self.boxLst.index(self.pb6) + 8 - 1].colliderect(self.bw2):
                            self.bw2 = self.whiteCutPiece_14
                        if self.boxLst[self.boxLst.index(self.pb6) + 8 - 1].colliderect(self.Kw):
                            self.Kw = self.whiteCutPiece_15
                            self.KingWhite_isDead = 1
                        if self.boxLst[self.boxLst.index(self.pb6) + 8 - 1].colliderect(self.Qw):
                            self.Qw = self.whiteCutPiece_16
                        self.pb6 = self.boxLst[self.boxLst.index(self.pb6) + 8 - 1]
                        self.pawnBlack6Clicked = 0
                        self.pawnBlack6Clicked_cut = 0
                        self.turn = "white"
            if self.pb6.y < self.box49.y:
                if self.pawnBlack6Clicked_twoStep == 1:
                    if self.boxLst[self.boxLst.index(self.pb6) + 16].collidepoint(self.mouse_x, self.mouse_y):
                        self.pb6 = self.boxLst[self.boxLst.index(self.pb6) + 16]
                        self.pawnBlack6Clicked = 0
                        self.pawnBlack6Clicked_twoStep = 0
                        self.turn = "white"

        elif self.pawnBlack7Clicked == 1:
            if self.boxLst[self.boxLst.index(self.pb7) + 8].collidepoint(self.mouse_x, self.mouse_y):
                self.pb7 = self.boxLst[self.boxLst.index(self.pb7) + 8]
                self.pawnBlack7Clicked = 0
                self.turn = "white"
            if self.pawnBlack7Clicked_cut == 1:
                if self.pb7.x < self.box8.x and self.pb7.y < self.box57.y:
                    if self.boxLst[self.boxLst.index(self.pb7) + 8 + 1].collidepoint(self.mouse_x, self.mouse_y):
                        if self.boxLst[self.boxLst.index(self.pb7) + 8 + 1].colliderect(self.pw1):
                            self.pw1 = self.whiteCutPiece_1
                        if self.boxLst[self.boxLst.index(self.pb7) + 8 + 1].colliderect(self.pw2):
                            self.pw2 = self.whiteCutPiece_2
                        if self.boxLst[self.boxLst.index(self.pb7) + 8 + 1].colliderect(self.pw3):
                            self.pw3 = self.whiteCutPiece_3
                        if self.boxLst[self.boxLst.index(self.pb7) + 8 + 1].colliderect(self.pw4):
                            self.pw4 = self.whiteCutPiece_4
                        if self.boxLst[self.boxLst.index(self.pb7) + 8 + 1].colliderect(self.pw5):
                            self.pw5 = self.whiteCutPiece_5
                        if self.boxLst[self.boxLst.index(self.pb7) + 8 + 1].colliderect(self.pw6):
                            self.pw6 = self.whiteCutPiece_6
                        if self.boxLst[self.boxLst.index(self.pb7) + 8 + 1].colliderect(self.pw7):
                            self.pw7 = self.whiteCutPiece_7
                        if self.boxLst[self.boxLst.index(self.pb7) + 8 + 1].colliderect(self.pw8):
                            self.pw8 = self.whiteCutPiece_8
                        if self.boxLst[self.boxLst.index(self.pb7) + 8 + 1].colliderect(self.rw1):
                            self.rw1 = self.whiteCutPiece_9
                        if self.boxLst[self.boxLst.index(self.pb7) + 8 + 1].colliderect(self.rw2):
                            self.rw2 = self.whiteCutPiece_10
                        if self.boxLst[self.boxLst.index(self.pb7) + 8 + 1].colliderect(self.kw1):
                            self.kw1 = self.whiteCutPiece_11
                        if self.boxLst[self.boxLst.index(self.pb7) + 8 + 1].colliderect(self.kw2):
                            self.kw2 = self.whiteCutPiece_12
                        if self.boxLst[self.boxLst.index(self.pb7) + 8 + 1].colliderect(self.bw1):
                            self.bw1 = self.whiteCutPiece_13
                        if self.boxLst[self.boxLst.index(self.pb7) + 8 + 1].colliderect(self.bw2):
                            self.bw2 = self.whiteCutPiece_14
                        if self.boxLst[self.boxLst.index(self.pb7) + 8 + 1].colliderect(self.Kw):
                            self.Kw = self.whiteCutPiece_15
                            self.KingWhite_isDead = 1
                        if self.boxLst[self.boxLst.index(self.pb7) + 8 + 1].colliderect(self.Qw):
                            self.Qw = self.whiteCutPiece_16
                        self.pb7 = self.boxLst[self.boxLst.index(self.pb7) + 8 + 1]
                        self.pawnBlack7Clicked = 0
                        self.pawnBlack7Clicked_cut = 0
                        self.turn = "white"
                if self.box1.x <= self.pb7.x and self.pb7.y < self.box57.y:
                    if self.boxLst[self.boxLst.index(self.pb7) + 8 - 1].collidepoint(self.mouse_x, self.mouse_y):
                        if self.boxLst[self.boxLst.index(self.pb7) + 8 - 1].colliderect(self.pw1):
                            self.pw1 = self.whiteCutPiece_1
                        if self.boxLst[self.boxLst.index(self.pb7) + 8 - 1].colliderect(self.pw2):
                            self.pw2 = self.whiteCutPiece_2
                        if self.boxLst[self.boxLst.index(self.pb7) + 8 - 1].colliderect(self.pw3):
                            self.pw3 = self.whiteCutPiece_3
                        if self.boxLst[self.boxLst.index(self.pb7) + 8 - 1].colliderect(self.pw4):
                            self.pw4 = self.whiteCutPiece_4
                        if self.boxLst[self.boxLst.index(self.pb7) + 8 - 1].colliderect(self.pw5):
                            self.pw5 = self.whiteCutPiece_5
                        if self.boxLst[self.boxLst.index(self.pb7) + 8 - 1].colliderect(self.pw6):
                            self.pw6 = self.whiteCutPiece_6
                        if self.boxLst[self.boxLst.index(self.pb7) + 8 - 1].colliderect(self.pw7):
                            self.pw7 = self.whiteCutPiece_7
                        if self.boxLst[self.boxLst.index(self.pb7) + 8 - 1].colliderect(self.pw8):
                            self.pw8 = self.whiteCutPiece_8
                        if self.boxLst[self.boxLst.index(self.pb7) + 8 - 1].colliderect(self.rw1):
                            self.rw1 = self.whiteCutPiece_9
                        if self.boxLst[self.boxLst.index(self.pb7) + 8 - 1].colliderect(self.rw2):
                            self.rw2 = self.whiteCutPiece_10
                        if self.boxLst[self.boxLst.index(self.pb7) + 8 - 1].colliderect(self.kw1):
                            self.kw1 = self.whiteCutPiece_11
                        if self.boxLst[self.boxLst.index(self.pb7) + 8 - 1].colliderect(self.kw2):
                            self.kw2 = self.whiteCutPiece_12
                        if self.boxLst[self.boxLst.index(self.pb7) + 8 - 1].colliderect(self.bw1):
                            self.bw1 = self.whiteCutPiece_13
                        if self.boxLst[self.boxLst.index(self.pb7) + 8 - 1].colliderect(self.bw2):
                            self.bw2 = self.whiteCutPiece_14
                        if self.boxLst[self.boxLst.index(self.pb7) + 8 - 1].colliderect(self.Kw):
                            self.Kw = self.whiteCutPiece_15
                            self.KingWhite_isDead = 1
                        if self.boxLst[self.boxLst.index(self.pb7) + 8 - 1].colliderect(self.Qw):
                            self.Qw = self.whiteCutPiece_16
                        self.pb7 = self.boxLst[self.boxLst.index(self.pb7) + 8 - 1]
                        self.pawnBlack7Clicked = 0
                        self.pawnBlack7Clicked_cut = 0
                        self.turn = "white"
            if self.pb7.y < self.box49.y:
                if self.pawnBlack7Clicked_twoStep == 1:
                    if self.boxLst[self.boxLst.index(self.pb7) + 16].collidepoint(self.mouse_x, self.mouse_y):
                        self.pb7 = self.boxLst[self.boxLst.index(self.pb7) + 16]
                        self.pawnBlack7Clicked = 0
                        self.pawnBlack7Clicked_twoStep = 0
                        self.turn = "white"

        elif self.pawnBlack8Clicked == 1:
            if self.boxLst[self.boxLst.index(self.pb8) + 8].collidepoint(self.mouse_x, self.mouse_y):
                self.pb8 = self.boxLst[self.boxLst.index(self.pb8) + 8]
                self.pawnBlack8Clicked = 0
                self.turn = "white"
            if self.pawnBlack8Clicked_cut == 1:
                if self.pb8.x < self.box8.x and self.pb8.y < self.box57.y:
                    if self.boxLst[self.boxLst.index(self.pb8) + 8 + 1].collidepoint(self.mouse_x, self.mouse_y):
                        if self.boxLst[self.boxLst.index(self.pb8) + 8 + 1].colliderect(self.pw1):
                            self.pw1 = self.whiteCutPiece_1
                        if self.boxLst[self.boxLst.index(self.pb8) + 8 + 1].colliderect(self.pw2):
                            self.pw2 = self.whiteCutPiece_2
                        if self.boxLst[self.boxLst.index(self.pb8) + 8 + 1].colliderect(self.pw3):
                            self.pw3 = self.whiteCutPiece_3
                        if self.boxLst[self.boxLst.index(self.pb8) + 8 + 1].colliderect(self.pw4):
                            self.pw4 = self.whiteCutPiece_4
                        if self.boxLst[self.boxLst.index(self.pb8) + 8 + 1].colliderect(self.pw5):
                            self.pw5 = self.whiteCutPiece_5
                        if self.boxLst[self.boxLst.index(self.pb8) + 8 + 1].colliderect(self.pw6):
                            self.pw6 = self.whiteCutPiece_6
                        if self.boxLst[self.boxLst.index(self.pb8) + 8 + 1].colliderect(self.pw7):
                            self.pw7 = self.whiteCutPiece_7
                        if self.boxLst[self.boxLst.index(self.pb8) + 8 + 1].colliderect(self.pw8):
                            self.pw8 = self.whiteCutPiece_8
                        if self.boxLst[self.boxLst.index(self.pb8) + 8 + 1].colliderect(self.rw1):
                            self.rw1 = self.whiteCutPiece_9
                        if self.boxLst[self.boxLst.index(self.pb8) + 8 + 1].colliderect(self.rw2):
                            self.rw2 = self.whiteCutPiece_10
                        if self.boxLst[self.boxLst.index(self.pb8) + 8 + 1].colliderect(self.kw1):
                            self.kw1 = self.whiteCutPiece_11
                        if self.boxLst[self.boxLst.index(self.pb8) + 8 + 1].colliderect(self.kw2):
                            self.kw2 = self.whiteCutPiece_12
                        if self.boxLst[self.boxLst.index(self.pb8) + 8 + 1].colliderect(self.bw1):
                            self.bw1 = self.whiteCutPiece_13
                        if self.boxLst[self.boxLst.index(self.pb8) + 8 + 1].colliderect(self.bw2):
                            self.bw2 = self.whiteCutPiece_14
                        if self.boxLst[self.boxLst.index(self.pb8) + 8 + 1].colliderect(self.Kw):
                            self.Kw = self.whiteCutPiece_15
                            self.KingWhite_isDead = 1
                        if self.boxLst[self.boxLst.index(self.pb8) + 8 + 1].colliderect(self.Qw):
                            self.Qw = self.whiteCutPiece_16
                        self.pb8 = self.boxLst[self.boxLst.index(self.pb8) + 8 + 1]
                        self.pawnBlack8Clicked = 0
                        self.pawnBlack8Clicked_cut = 0
                        self.turn = "white"
                if self.box1.x <= self.pb8.x and self.pb8.y < self.box57.y:
                    if self.boxLst[self.boxLst.index(self.pb8) + 8 - 1].collidepoint(self.mouse_x, self.mouse_y):
                        if self.boxLst[self.boxLst.index(self.pb8) + 8 - 1].colliderect(self.pw1):
                            self.pw1 = self.whiteCutPiece_1
                        if self.boxLst[self.boxLst.index(self.pb8) + 8 - 1].colliderect(self.pw2):
                            self.pw2 = self.whiteCutPiece_2
                        if self.boxLst[self.boxLst.index(self.pb8) + 8 - 1].colliderect(self.pw3):
                            self.pw3 = self.whiteCutPiece_3
                        if self.boxLst[self.boxLst.index(self.pb8) + 8 - 1].colliderect(self.pw4):
                            self.pw4 = self.whiteCutPiece_4
                        if self.boxLst[self.boxLst.index(self.pb8) + 8 - 1].colliderect(self.pw5):
                            self.pw5 = self.whiteCutPiece_5
                        if self.boxLst[self.boxLst.index(self.pb8) + 8 - 1].colliderect(self.pw6):
                            self.pw6 = self.whiteCutPiece_6
                        if self.boxLst[self.boxLst.index(self.pb8) + 8 - 1].colliderect(self.pw7):
                            self.pw7 = self.whiteCutPiece_7
                        if self.boxLst[self.boxLst.index(self.pb8) + 8 - 1].colliderect(self.pw8):
                            self.pw8 = self.whiteCutPiece_8
                        if self.boxLst[self.boxLst.index(self.pb8) + 8 - 1].colliderect(self.rw1):
                            self.rw1 = self.whiteCutPiece_9
                        if self.boxLst[self.boxLst.index(self.pb8) + 8 - 1].colliderect(self.rw2):
                            self.rw2 = self.whiteCutPiece_10
                        if self.boxLst[self.boxLst.index(self.pb8) + 8 - 1].colliderect(self.kw1):
                            self.kw1 = self.whiteCutPiece_11
                        if self.boxLst[self.boxLst.index(self.pb8) + 8 - 1].colliderect(self.kw2):
                            self.kw2 = self.whiteCutPiece_12
                        if self.boxLst[self.boxLst.index(self.pb8) + 8 - 1].colliderect(self.bw1):
                            self.bw1 = self.whiteCutPiece_13
                        if self.boxLst[self.boxLst.index(self.pb8) + 8 - 1].colliderect(self.bw2):
                            self.bw2 = self.whiteCutPiece_14
                        if self.boxLst[self.boxLst.index(self.pb8) + 8 - 1].colliderect(self.Kw):
                            self.Kw = self.whiteCutPiece_15
                            self.KingWhite_isDead = 1
                        if self.boxLst[self.boxLst.index(self.pb8) + 8 - 1].colliderect(self.Qw):
                            self.Qw = self.whiteCutPiece_16
                        self.pb8 = self.boxLst[self.boxLst.index(self.pb8) + 8 - 1]
                        self.pawnBlack8Clicked = 0
                        self.pawnBlack8Clicked_cut = 0
                        self.turn = "white"
            if self.pb8.y < self.box49.y:
                if self.pawnBlack8Clicked_twoStep == 1:
                    if self.boxLst[self.boxLst.index(self.pb8) + 16].collidepoint(self.mouse_x, self.mouse_y):
                        self.pb8 = self.boxLst[self.boxLst.index(self.pb8) + 16]
                        self.pawnBlack8Clicked = 0
                        self.pawnBlack8Clicked_twoStep = 0
                        self.turn = "white"

        # pawn promoted to queen
        if 8 * self.boxSize > self.pb1.y > self.box49.y:
            self.newQueenBlack_1 = self.pb1
            self.window.blit(self.assets['Qb'], self.newQueenBlack_1)
        if 8 * self.boxSize > self.pb2.y > self.box49.y:
            self.newQueenBlack_2 = self.pb2
            self.window.blit(self.assets['Qb'], self.newQueenBlack_2)
        if 8 * self.boxSize > self.pb3.y > self.box49.y:
            self.newQueenBlack_3 = self.pb3
            self.window.blit(self.assets['Qb'], self.newQueenBlack_3)
        if 8 * self.boxSize > self.pb4.y > self.box49.y:
            self.newQueenBlack_4 = self.pb4
            self.window.blit(self.assets['Qb'], self.newQueenBlack_4)
        if 8 * self.boxSize > self.pb5.y > self.box49.y:
            self.newQueenBlack_5 = self.pb5
            self.window.blit(self.assets['Qb'], self.newQueenBlack_5)
        if 8 * self.boxSize > self.pb6.y > self.box49.y:
            self.newQueenBlack_6 = self.pb6
            self.window.blit(self.assets['Qb'], self.newQueenBlack_6)
        if 8 * self.boxSize > self.pb7.y > self.box49.y:
            self.newQueenBlack_7 = self.pb7
            self.window.blit(self.assets['Qb'], self.newQueenBlack_7)
        if 8 * self.boxSize > self.pb8.y > self.box49.y:
            self.newQueenBlack_8 = self.pb8
            self.window.blit(self.assets['Qb'], self.newQueenBlack_8)

    def kingBMovements(self):
        for event in pygame.event.get():
            if event.type == MOUSEBUTTONDOWN:
                self.mouse_x, self.mouse_y = pygame.mouse.get_pos()

        def drawRect_plusOne():
            if not self.boxLst[self.boxLst.index(self.Kb) + 1].colliderect(self.pw1) and not \
                    self.boxLst[self.boxLst.index(self.Kb) + 1].colliderect(self.pw2) and not \
                    self.boxLst[self.boxLst.index(self.Kb) + 1].colliderect(self.pw3) and not \
                    self.boxLst[self.boxLst.index(self.Kb) + 1].colliderect(self.pw4) and not \
                    self.boxLst[self.boxLst.index(self.Kb) + 1].colliderect(self.pw5) and not \
                    self.boxLst[self.boxLst.index(self.Kb) + 1].colliderect(self.pw6) and not \
                    self.boxLst[self.boxLst.index(self.Kb) + 1].colliderect(self.pw7) and not \
                    self.boxLst[self.boxLst.index(self.Kb) + 1].colliderect(self.pw8) and not \
                    self.boxLst[self.boxLst.index(self.Kb) + 1].colliderect(self.Kw) and not \
                    self.boxLst[self.boxLst.index(self.Kb) + 1].colliderect(self.Qw) and not \
                    self.boxLst[self.boxLst.index(self.Kb) + 1].colliderect(self.rw1) and not \
                    self.boxLst[self.boxLst.index(self.Kb) + 1].colliderect(self.rw2) and not \
                    self.boxLst[self.boxLst.index(self.Kb) + 1].colliderect(self.kw1) and not \
                    self.boxLst[self.boxLst.index(self.Kb) + 1].colliderect(self.kw2) and not \
                    self.boxLst[self.boxLst.index(self.Kb) + 1].colliderect(self.bw1) and not \
                    self.boxLst[self.boxLst.index(self.Kb) + 1].colliderect(self.bw2) and not \
                    self.boxLst[self.boxLst.index(self.Kb) + 1].colliderect(self.pb2) and not \
                    self.boxLst[self.boxLst.index(self.Kb) + 1].colliderect(self.pb3) and not \
                    self.boxLst[self.boxLst.index(self.Kb) + 1].colliderect(self.pb4) and not \
                    self.boxLst[self.boxLst.index(self.Kb) + 1].colliderect(self.pb5) and not \
                    self.boxLst[self.boxLst.index(self.Kb) + 1].colliderect(self.pb6) and not \
                    self.boxLst[self.boxLst.index(self.Kb) + 1].colliderect(self.pb7) and not \
                    self.boxLst[self.boxLst.index(self.Kb) + 1].colliderect(self.pb8) and not \
                    self.boxLst[self.boxLst.index(self.Kb) + 1].colliderect(self.pb1) and not \
                    self.boxLst[self.boxLst.index(self.Kb) + 1].colliderect(self.Qb) and not \
                    self.boxLst[self.boxLst.index(self.Kb) + 1].colliderect(self.rb1) and not \
                    self.boxLst[self.boxLst.index(self.Kb) + 1].colliderect(self.rb2) and not \
                    self.boxLst[self.boxLst.index(self.Kb) + 1].colliderect(self.kb1) and not \
                    self.boxLst[self.boxLst.index(self.Kb) + 1].colliderect(self.kb2) and not \
                    self.boxLst[self.boxLst.index(self.Kb) + 1].colliderect(self.bb1) and not \
                    self.boxLst[self.boxLst.index(self.Kb) + 1].colliderect(self.bb2):
                pygame.draw.rect(self.window, self.blue, self.boxLst[self.boxLst.index(self.Kb) + 1], border_radius=100)
                self.KingBlackClicked = 1
                self.pawnBlack1Clicked = 0
                self.pawnBlack2Clicked = 0
                self.pawnBlack3Clicked = 0
                self.pawnBlack4Clicked = 0
                self.pawnBlack5Clicked = 0
                self.pawnBlack6Clicked = 0
                self.pawnBlack7Clicked = 0
                self.pawnBlack8Clicked = 0
                self.knightBlack1Clicked = 0
                self.knightBlack2Clicked = 0
                self.rookBlack1Clicked = 0
                self.rookBlack2Clicked = 0
                self.bishopBlack1Clicked = 0
                self.bishopBlack2Clicked = 0
                self.QueenBlackClicked = 0

        def drawRect_minusOne():
            if not self.boxLst[self.boxLst.index(self.Kb) - 1].colliderect(self.pw1) and not \
                    self.boxLst[self.boxLst.index(self.Kb) - 1].colliderect(self.pw2) and not \
                    self.boxLst[self.boxLst.index(self.Kb) - 1].colliderect(self.pw3) and not \
                    self.boxLst[self.boxLst.index(self.Kb) - 1].colliderect(self.pw4) and not \
                    self.boxLst[self.boxLst.index(self.Kb) - 1].colliderect(self.pw5) and not \
                    self.boxLst[self.boxLst.index(self.Kb) - 1].colliderect(self.pw6) and not \
                    self.boxLst[self.boxLst.index(self.Kb) - 1].colliderect(self.pw7) and not \
                    self.boxLst[self.boxLst.index(self.Kb) - 1].colliderect(self.pw8) and not \
                    self.boxLst[self.boxLst.index(self.Kb) - 1].colliderect(self.Kw) and not \
                    self.boxLst[self.boxLst.index(self.Kb) - 1].colliderect(self.Qw) and not \
                    self.boxLst[self.boxLst.index(self.Kb) - 1].colliderect(self.rw1) and not \
                    self.boxLst[self.boxLst.index(self.Kb) - 1].colliderect(self.rw2) and not \
                    self.boxLst[self.boxLst.index(self.Kb) - 1].colliderect(self.kw1) and not \
                    self.boxLst[self.boxLst.index(self.Kb) - 1].colliderect(self.kw2) and not \
                    self.boxLst[self.boxLst.index(self.Kb) - 1].colliderect(self.bw1) and not \
                    self.boxLst[self.boxLst.index(self.Kb) - 1].colliderect(self.bw2) and not \
                    self.boxLst[self.boxLst.index(self.Kb) - 1].colliderect(self.pb2) and not \
                    self.boxLst[self.boxLst.index(self.Kb) - 1].colliderect(self.pb3) and not \
                    self.boxLst[self.boxLst.index(self.Kb) - 1].colliderect(self.pb4) and not \
                    self.boxLst[self.boxLst.index(self.Kb) - 1].colliderect(self.pb5) and not \
                    self.boxLst[self.boxLst.index(self.Kb) - 1].colliderect(self.pb6) and not \
                    self.boxLst[self.boxLst.index(self.Kb) - 1].colliderect(self.pb7) and not \
                    self.boxLst[self.boxLst.index(self.Kb) - 1].colliderect(self.pb8) and not \
                    self.boxLst[self.boxLst.index(self.Kb) - 1].colliderect(self.pb1) and not \
                    self.boxLst[self.boxLst.index(self.Kb) - 1].colliderect(self.Qb) and not \
                    self.boxLst[self.boxLst.index(self.Kb) - 1].colliderect(self.rb1) and not \
                    self.boxLst[self.boxLst.index(self.Kb) - 1].colliderect(self.rb2) and not \
                    self.boxLst[self.boxLst.index(self.Kb) - 1].colliderect(self.kb1) and not \
                    self.boxLst[self.boxLst.index(self.Kb) - 1].colliderect(self.kb2) and not \
                    self.boxLst[self.boxLst.index(self.Kb) - 1].colliderect(self.bb1) and not \
                    self.boxLst[self.boxLst.index(self.Kb) - 1].colliderect(self.bb2):
                pygame.draw.rect(self.window, self.blue, self.boxLst[self.boxLst.index(self.Kb) - 1], border_radius=100)
                self.KingBlackClicked = 1
                self.pawnBlack1Clicked = 0
                self.pawnBlack2Clicked = 0
                self.pawnBlack3Clicked = 0
                self.pawnBlack4Clicked = 0
                self.pawnBlack5Clicked = 0
                self.pawnBlack6Clicked = 0
                self.pawnBlack7Clicked = 0
                self.pawnBlack8Clicked = 0
                self.knightBlack1Clicked = 0
                self.knightBlack2Clicked = 0
                self.rookBlack1Clicked = 0
                self.rookBlack2Clicked = 0
                self.bishopBlack1Clicked = 0
                self.bishopBlack2Clicked = 0
                self.QueenBlackClicked = 0

        def drawRect_plusEight():
            if not self.boxLst[self.boxLst.index(self.Kb) + 8].colliderect(self.pw1) and not \
                    self.boxLst[self.boxLst.index(self.Kb) + 8].colliderect(self.pw2) and not \
                    self.boxLst[self.boxLst.index(self.Kb) + 8].colliderect(self.pw3) and not \
                    self.boxLst[self.boxLst.index(self.Kb) + 8].colliderect(self.pw4) and not \
                    self.boxLst[self.boxLst.index(self.Kb) + 8].colliderect(self.pw5) and not \
                    self.boxLst[self.boxLst.index(self.Kb) + 8].colliderect(self.pw6) and not \
                    self.boxLst[self.boxLst.index(self.Kb) + 8].colliderect(self.pw7) and not \
                    self.boxLst[self.boxLst.index(self.Kb) + 8].colliderect(self.pw8) and not \
                    self.boxLst[self.boxLst.index(self.Kb) + 8].colliderect(self.Kw) and not \
                    self.boxLst[self.boxLst.index(self.Kb) + 8].colliderect(self.Qw) and not \
                    self.boxLst[self.boxLst.index(self.Kb) + 8].colliderect(self.rw1) and not \
                    self.boxLst[self.boxLst.index(self.Kb) + 8].colliderect(self.rw2) and not \
                    self.boxLst[self.boxLst.index(self.Kb) + 8].colliderect(self.kw1) and not \
                    self.boxLst[self.boxLst.index(self.Kb) + 8].colliderect(self.kw2) and not \
                    self.boxLst[self.boxLst.index(self.Kb) + 8].colliderect(self.bw1) and not \
                    self.boxLst[self.boxLst.index(self.Kb) + 8].colliderect(self.bw2) and not \
                    self.boxLst[self.boxLst.index(self.Kb) + 8].colliderect(self.pb2) and not \
                    self.boxLst[self.boxLst.index(self.Kb) + 8].colliderect(self.pb3) and not \
                    self.boxLst[self.boxLst.index(self.Kb) + 8].colliderect(self.pb4) and not \
                    self.boxLst[self.boxLst.index(self.Kb) + 8].colliderect(self.pb5) and not \
                    self.boxLst[self.boxLst.index(self.Kb) + 8].colliderect(self.pb6) and not \
                    self.boxLst[self.boxLst.index(self.Kb) + 8].colliderect(self.pb7) and not \
                    self.boxLst[self.boxLst.index(self.Kb) + 8].colliderect(self.pb8) and not \
                    self.boxLst[self.boxLst.index(self.Kb) + 8].colliderect(self.pb1) and not \
                    self.boxLst[self.boxLst.index(self.Kb) + 8].colliderect(self.Qb) and not \
                    self.boxLst[self.boxLst.index(self.Kb) + 8].colliderect(self.rb1) and not \
                    self.boxLst[self.boxLst.index(self.Kb) + 8].colliderect(self.rb2) and not \
                    self.boxLst[self.boxLst.index(self.Kb) + 8].colliderect(self.kb1) and not \
                    self.boxLst[self.boxLst.index(self.Kb) + 8].colliderect(self.kb2) and not \
                    self.boxLst[self.boxLst.index(self.Kb) + 8].colliderect(self.bb1) and not \
                    self.boxLst[self.boxLst.index(self.Kb) + 8].colliderect(self.bb2):
                pygame.draw.rect(self.window, self.blue, self.boxLst[self.boxLst.index(self.Kb) + 8], border_radius=100)
                self.KingBlackClicked = 1
                self.pawnBlack1Clicked = 0
                self.pawnBlack2Clicked = 0
                self.pawnBlack3Clicked = 0
                self.pawnBlack4Clicked = 0
                self.pawnBlack5Clicked = 0
                self.pawnBlack6Clicked = 0
                self.pawnBlack7Clicked = 0
                self.pawnBlack8Clicked = 0
                self.knightBlack1Clicked = 0
                self.knightBlack2Clicked = 0
                self.rookBlack1Clicked = 0
                self.rookBlack2Clicked = 0
                self.bishopBlack1Clicked = 0
                self.bishopBlack2Clicked = 0
                self.QueenBlackClicked = 0

        def drawRect_plusEight_plusOne():
            if not self.boxLst[self.boxLst.index(self.Kb) + 8 + 1].colliderect(self.pw1) and not \
                    self.boxLst[self.boxLst.index(self.Kb) + 8 + 1].colliderect(self.pw2) and not \
                    self.boxLst[self.boxLst.index(self.Kb) + 8 + 1].colliderect(self.pw3) and not \
                    self.boxLst[self.boxLst.index(self.Kb) + 8 + 1].colliderect(self.pw4) and not \
                    self.boxLst[self.boxLst.index(self.Kb) + 8 + 1].colliderect(self.pw5) and not \
                    self.boxLst[self.boxLst.index(self.Kb) + 8 + 1].colliderect(self.pw6) and not \
                    self.boxLst[self.boxLst.index(self.Kb) + 8 + 1].colliderect(self.pw7) and not \
                    self.boxLst[self.boxLst.index(self.Kb) + 8 + 1].colliderect(self.pw8) and not \
                    self.boxLst[self.boxLst.index(self.Kb) + 8 + 1].colliderect(self.Kw) and not \
                    self.boxLst[self.boxLst.index(self.Kb) + 8 + 1].colliderect(self.Qw) and not \
                    self.boxLst[self.boxLst.index(self.Kb) + 8 + 1].colliderect(self.rw1) and not \
                    self.boxLst[self.boxLst.index(self.Kb) + 8 + 1].colliderect(self.rw2) and not \
                    self.boxLst[self.boxLst.index(self.Kb) + 8 + 1].colliderect(self.kw1) and not \
                    self.boxLst[self.boxLst.index(self.Kb) + 8 + 1].colliderect(self.kw2) and not \
                    self.boxLst[self.boxLst.index(self.Kb) + 8 + 1].colliderect(self.bw1) and not \
                    self.boxLst[self.boxLst.index(self.Kb) + 8 + 1].colliderect(self.bw2) and not \
                    self.boxLst[self.boxLst.index(self.Kb) + 8 + 1].colliderect(self.pb2) and not \
                    self.boxLst[self.boxLst.index(self.Kb) + 8 + 1].colliderect(self.pb3) and not \
                    self.boxLst[self.boxLst.index(self.Kb) + 8 + 1].colliderect(self.pb4) and not \
                    self.boxLst[self.boxLst.index(self.Kb) + 8 + 1].colliderect(self.pb5) and not \
                    self.boxLst[self.boxLst.index(self.Kb) + 8 + 1].colliderect(self.pb6) and not \
                    self.boxLst[self.boxLst.index(self.Kb) + 8 + 1].colliderect(self.pb7) and not \
                    self.boxLst[self.boxLst.index(self.Kb) + 8 + 1].colliderect(self.pb8) and not \
                    self.boxLst[self.boxLst.index(self.Kb) + 8 + 1].colliderect(self.pb1) and not \
                    self.boxLst[self.boxLst.index(self.Kb) + 8 + 1].colliderect(self.Qb) and not \
                    self.boxLst[self.boxLst.index(self.Kb) + 8 + 1].colliderect(self.rb1) and not \
                    self.boxLst[self.boxLst.index(self.Kb) + 8 + 1].colliderect(self.rb2) and not \
                    self.boxLst[self.boxLst.index(self.Kb) + 8 + 1].colliderect(self.kb1) and not \
                    self.boxLst[self.boxLst.index(self.Kb) + 8 + 1].colliderect(self.kb2) and not \
                    self.boxLst[self.boxLst.index(self.Kb) + 8 + 1].colliderect(self.bb1) and not \
                    self.boxLst[self.boxLst.index(self.Kb) + 8 + 1].colliderect(self.bb2):
                pygame.draw.rect(self.window, self.blue, self.boxLst[self.boxLst.index(self.Kb) + 8 + 1], border_radius=100)
                self.KingBlackClicked = 1
                self.pawnBlack1Clicked = 0
                self.pawnBlack2Clicked = 0
                self.pawnBlack3Clicked = 0
                self.pawnBlack4Clicked = 0
                self.pawnBlack5Clicked = 0
                self.pawnBlack6Clicked = 0
                self.pawnBlack7Clicked = 0
                self.pawnBlack8Clicked = 0
                self.knightBlack1Clicked = 0
                self.knightBlack2Clicked = 0
                self.rookBlack1Clicked = 0
                self.rookBlack2Clicked = 0
                self.bishopBlack1Clicked = 0
                self.bishopBlack2Clicked = 0
                self.QueenBlackClicked = 0

        def drawRect_plusEight_minusOne():
            if not self.boxLst[self.boxLst.index(self.Kb) + 8 - 1].colliderect(self.pw1) and not \
                    self.boxLst[self.boxLst.index(self.Kb) + 8 - 1].colliderect(self.pw2) and not \
                    self.boxLst[self.boxLst.index(self.Kb) + 8 - 1].colliderect(self.pw3) and not \
                    self.boxLst[self.boxLst.index(self.Kb) + 8 - 1].colliderect(self.pw4) and not \
                    self.boxLst[self.boxLst.index(self.Kb) + 8 - 1].colliderect(self.pw5) and not \
                    self.boxLst[self.boxLst.index(self.Kb) + 8 - 1].colliderect(self.pw6) and not \
                    self.boxLst[self.boxLst.index(self.Kb) + 8 - 1].colliderect(self.pw7) and not \
                    self.boxLst[self.boxLst.index(self.Kb) + 8 - 1].colliderect(self.pw8) and not \
                    self.boxLst[self.boxLst.index(self.Kb) + 8 - 1].colliderect(self.Kw) and not \
                    self.boxLst[self.boxLst.index(self.Kb) + 8 - 1].colliderect(self.Qw) and not \
                    self.boxLst[self.boxLst.index(self.Kb) + 8 - 1].colliderect(self.rw1) and not \
                    self.boxLst[self.boxLst.index(self.Kb) + 8 - 1].colliderect(self.rw2) and not \
                    self.boxLst[self.boxLst.index(self.Kb) + 8 - 1].colliderect(self.kw1) and not \
                    self.boxLst[self.boxLst.index(self.Kb) + 8 - 1].colliderect(self.kw2) and not \
                    self.boxLst[self.boxLst.index(self.Kb) + 8 - 1].colliderect(self.bw1) and not \
                    self.boxLst[self.boxLst.index(self.Kb) + 8 - 1].colliderect(self.bw2) and not \
                    self.boxLst[self.boxLst.index(self.Kb) + 8 - 1].colliderect(self.pb2) and not \
                    self.boxLst[self.boxLst.index(self.Kb) + 8 - 1].colliderect(self.pb3) and not \
                    self.boxLst[self.boxLst.index(self.Kb) + 8 - 1].colliderect(self.pb4) and not \
                    self.boxLst[self.boxLst.index(self.Kb) + 8 - 1].colliderect(self.pb5) and not \
                    self.boxLst[self.boxLst.index(self.Kb) + 8 - 1].colliderect(self.pb6) and not \
                    self.boxLst[self.boxLst.index(self.Kb) + 8 - 1].colliderect(self.pb7) and not \
                    self.boxLst[self.boxLst.index(self.Kb) + 8 - 1].colliderect(self.pb8) and not \
                    self.boxLst[self.boxLst.index(self.Kb) + 8 - 1].colliderect(self.pb1) and not \
                    self.boxLst[self.boxLst.index(self.Kb) + 8 - 1].colliderect(self.Qb) and not \
                    self.boxLst[self.boxLst.index(self.Kb) + 8 - 1].colliderect(self.rb1) and not \
                    self.boxLst[self.boxLst.index(self.Kb) + 8 - 1].colliderect(self.rb2) and not \
                    self.boxLst[self.boxLst.index(self.Kb) + 8 - 1].colliderect(self.kb1) and not \
                    self.boxLst[self.boxLst.index(self.Kb) + 8 - 1].colliderect(self.kb2) and not \
                    self.boxLst[self.boxLst.index(self.Kb) + 8 - 1].colliderect(self.bb1) and not \
                    self.boxLst[self.boxLst.index(self.Kb) + 8 - 1].colliderect(self.bb2):
                pygame.draw.rect(self.window, self.blue, self.boxLst[self.boxLst.index(self.Kb) + 8 - 1], border_radius=100)
                self.KingBlackClicked = 1
                self.pawnBlack1Clicked = 0
                self.pawnBlack2Clicked = 0
                self.pawnBlack3Clicked = 0
                self.pawnBlack4Clicked = 0
                self.pawnBlack5Clicked = 0
                self.pawnBlack6Clicked = 0
                self.pawnBlack7Clicked = 0
                self.pawnBlack8Clicked = 0
                self.knightBlack1Clicked = 0
                self.knightBlack2Clicked = 0
                self.rookBlack1Clicked = 0
                self.rookBlack2Clicked = 0
                self.bishopBlack1Clicked = 0
                self.bishopBlack2Clicked = 0
                self.QueenBlackClicked = 0

        def drawRect_minusEight():
            if not self.boxLst[self.boxLst.index(self.Kb) - 8].colliderect(self.pw1) and not \
                    self.boxLst[self.boxLst.index(self.Kb) - 8].colliderect(self.pw2) and not \
                    self.boxLst[self.boxLst.index(self.Kb) - 8].colliderect(self.pw3) and not \
                    self.boxLst[self.boxLst.index(self.Kb) - 8].colliderect(self.pw4) and not \
                    self.boxLst[self.boxLst.index(self.Kb) - 8].colliderect(self.pw5) and not \
                    self.boxLst[self.boxLst.index(self.Kb) - 8].colliderect(self.pw6) and not \
                    self.boxLst[self.boxLst.index(self.Kb) - 8].colliderect(self.pw7) and not \
                    self.boxLst[self.boxLst.index(self.Kb) - 8].colliderect(self.pw8) and not \
                    self.boxLst[self.boxLst.index(self.Kb) - 8].colliderect(self.Kw) and not \
                    self.boxLst[self.boxLst.index(self.Kb) - 8].colliderect(self.Qw) and not \
                    self.boxLst[self.boxLst.index(self.Kb) - 8].colliderect(self.rw1) and not \
                    self.boxLst[self.boxLst.index(self.Kb) - 8].colliderect(self.rw2) and not \
                    self.boxLst[self.boxLst.index(self.Kb) - 8].colliderect(self.kw1) and not \
                    self.boxLst[self.boxLst.index(self.Kb) - 8].colliderect(self.kw2) and not \
                    self.boxLst[self.boxLst.index(self.Kb) - 8].colliderect(self.bw1) and not \
                    self.boxLst[self.boxLst.index(self.Kb) - 8].colliderect(self.bw2) and not \
                    self.boxLst[self.boxLst.index(self.Kb) - 8].colliderect(self.pb2) and not \
                    self.boxLst[self.boxLst.index(self.Kb) - 8].colliderect(self.pb3) and not \
                    self.boxLst[self.boxLst.index(self.Kb) - 8].colliderect(self.pb4) and not \
                    self.boxLst[self.boxLst.index(self.Kb) - 8].colliderect(self.pb5) and not \
                    self.boxLst[self.boxLst.index(self.Kb) - 8].colliderect(self.pb6) and not \
                    self.boxLst[self.boxLst.index(self.Kb) - 8].colliderect(self.pb7) and not \
                    self.boxLst[self.boxLst.index(self.Kb) - 8].colliderect(self.pb8) and not \
                    self.boxLst[self.boxLst.index(self.Kb) - 8].colliderect(self.pb1) and not \
                    self.boxLst[self.boxLst.index(self.Kb) - 8].colliderect(self.Qb) and not \
                    self.boxLst[self.boxLst.index(self.Kb) - 8].colliderect(self.rb1) and not \
                    self.boxLst[self.boxLst.index(self.Kb) - 8].colliderect(self.rb2) and not \
                    self.boxLst[self.boxLst.index(self.Kb) - 8].colliderect(self.kb1) and not \
                    self.boxLst[self.boxLst.index(self.Kb) - 8].colliderect(self.kb2) and not \
                    self.boxLst[self.boxLst.index(self.Kb) - 8].colliderect(self.bb1) and not \
                    self.boxLst[self.boxLst.index(self.Kb) - 8].colliderect(self.bb2):
                pygame.draw.rect(self.window, self.blue, self.boxLst[self.boxLst.index(self.Kb) - 8], border_radius=100)
                self.KingBlackClicked = 1
                self.pawnBlack1Clicked = 0
                self.pawnBlack2Clicked = 0
                self.pawnBlack3Clicked = 0
                self.pawnBlack4Clicked = 0
                self.pawnBlack5Clicked = 0
                self.pawnBlack6Clicked = 0
                self.pawnBlack7Clicked = 0
                self.pawnBlack8Clicked = 0
                self.knightBlack1Clicked = 0
                self.knightBlack2Clicked = 0
                self.rookBlack1Clicked = 0
                self.rookBlack2Clicked = 0
                self.bishopBlack1Clicked = 0
                self.bishopBlack2Clicked = 0
                self.QueenBlackClicked = 0

        def drawRect_minusEight_plusOne():
            if not self.boxLst[self.boxLst.index(self.Kb) - 8 + 1].colliderect(self.pw1) and not \
                    self.boxLst[self.boxLst.index(self.Kb) - 8 + 1].colliderect(self.pw2) and not \
                    self.boxLst[self.boxLst.index(self.Kb) - 8 + 1].colliderect(self.pw3) and not \
                    self.boxLst[self.boxLst.index(self.Kb) - 8 + 1].colliderect(self.pw4) and not \
                    self.boxLst[self.boxLst.index(self.Kb) - 8 + 1].colliderect(self.pw5) and not \
                    self.boxLst[self.boxLst.index(self.Kb) - 8 + 1].colliderect(self.pw6) and not \
                    self.boxLst[self.boxLst.index(self.Kb) - 8 + 1].colliderect(self.pw7) and not \
                    self.boxLst[self.boxLst.index(self.Kb) - 8 + 1].colliderect(self.pw8) and not \
                    self.boxLst[self.boxLst.index(self.Kb) - 8 + 1].colliderect(self.Kw) and not \
                    self.boxLst[self.boxLst.index(self.Kb) - 8 + 1].colliderect(self.Qw) and not \
                    self.boxLst[self.boxLst.index(self.Kb) - 8 + 1].colliderect(self.rw1) and not \
                    self.boxLst[self.boxLst.index(self.Kb) - 8 + 1].colliderect(self.rw2) and not \
                    self.boxLst[self.boxLst.index(self.Kb) - 8 + 1].colliderect(self.kw1) and not \
                    self.boxLst[self.boxLst.index(self.Kb) - 8 + 1].colliderect(self.kw2) and not \
                    self.boxLst[self.boxLst.index(self.Kb) - 8 + 1].colliderect(self.bw1) and not \
                    self.boxLst[self.boxLst.index(self.Kb) - 8 + 1].colliderect(self.bw2) and not \
                    self.boxLst[self.boxLst.index(self.Kb) - 8 + 1].colliderect(self.pb2) and not \
                    self.boxLst[self.boxLst.index(self.Kb) - 8 + 1].colliderect(self.pb3) and not \
                    self.boxLst[self.boxLst.index(self.Kb) - 8 + 1].colliderect(self.pb4) and not \
                    self.boxLst[self.boxLst.index(self.Kb) - 8 + 1].colliderect(self.pb5) and not \
                    self.boxLst[self.boxLst.index(self.Kb) - 8 + 1].colliderect(self.pb6) and not \
                    self.boxLst[self.boxLst.index(self.Kb) - 8 + 1].colliderect(self.pb7) and not \
                    self.boxLst[self.boxLst.index(self.Kb) - 8 + 1].colliderect(self.pb8) and not \
                    self.boxLst[self.boxLst.index(self.Kb) - 8 + 1].colliderect(self.pb1) and not \
                    self.boxLst[self.boxLst.index(self.Kb) - 8 + 1].colliderect(self.Qb) and not \
                    self.boxLst[self.boxLst.index(self.Kb) - 8 + 1].colliderect(self.rb1) and not \
                    self.boxLst[self.boxLst.index(self.Kb) - 8 + 1].colliderect(self.rb2) and not \
                    self.boxLst[self.boxLst.index(self.Kb) - 8 + 1].colliderect(self.kb1) and not \
                    self.boxLst[self.boxLst.index(self.Kb) - 8 + 1].colliderect(self.kb2) and not \
                    self.boxLst[self.boxLst.index(self.Kb) - 8 + 1].colliderect(self.bb1) and not \
                    self.boxLst[self.boxLst.index(self.Kb) - 8 + 1].colliderect(self.bb2):
                pygame.draw.rect(self.window, self.blue, self.boxLst[self.boxLst.index(self.Kb) - 8 + 1], border_radius=100)
                self.KingBlackClicked = 1
                self.pawnBlack1Clicked = 0
                self.pawnBlack2Clicked = 0
                self.pawnBlack3Clicked = 0
                self.pawnBlack4Clicked = 0
                self.pawnBlack5Clicked = 0
                self.pawnBlack6Clicked = 0
                self.pawnBlack7Clicked = 0
                self.pawnBlack8Clicked = 0
                self.knightBlack1Clicked = 0
                self.knightBlack2Clicked = 0
                self.rookBlack1Clicked = 0
                self.rookBlack2Clicked = 0
                self.bishopBlack1Clicked = 0
                self.bishopBlack2Clicked = 0
                self.QueenBlackClicked = 0

        def drawRect_minusEight_minusOne():
            if not self.boxLst[self.boxLst.index(self.Kb) - 8 - 1].colliderect(self.pw1) and not \
                    self.boxLst[self.boxLst.index(self.Kb) - 8 - 1].colliderect(self.pw2) and not \
                    self.boxLst[self.boxLst.index(self.Kb) - 8 - 1].colliderect(self.pw3) and not \
                    self.boxLst[self.boxLst.index(self.Kb) - 8 - 1].colliderect(self.pw4) and not \
                    self.boxLst[self.boxLst.index(self.Kb) - 8 - 1].colliderect(self.pw5) and not \
                    self.boxLst[self.boxLst.index(self.Kb) - 8 - 1].colliderect(self.pw6) and not \
                    self.boxLst[self.boxLst.index(self.Kb) - 8 - 1].colliderect(self.pw7) and not \
                    self.boxLst[self.boxLst.index(self.Kb) - 8 - 1].colliderect(self.pw8) and not \
                    self.boxLst[self.boxLst.index(self.Kb) - 8 - 1].colliderect(self.Kw) and not \
                    self.boxLst[self.boxLst.index(self.Kb) - 8 - 1].colliderect(self.Qw) and not \
                    self.boxLst[self.boxLst.index(self.Kb) - 8 - 1].colliderect(self.rw1) and not \
                    self.boxLst[self.boxLst.index(self.Kb) - 8 - 1].colliderect(self.rw2) and not \
                    self.boxLst[self.boxLst.index(self.Kb) - 8 - 1].colliderect(self.kw1) and not \
                    self.boxLst[self.boxLst.index(self.Kb) - 8 - 1].colliderect(self.kw2) and not \
                    self.boxLst[self.boxLst.index(self.Kb) - 8 - 1].colliderect(self.bw1) and not \
                    self.boxLst[self.boxLst.index(self.Kb) - 8 - 1].colliderect(self.bw2) and not \
                    self.boxLst[self.boxLst.index(self.Kb) - 8 - 1].colliderect(self.pb2) and not \
                    self.boxLst[self.boxLst.index(self.Kb) - 8 - 1].colliderect(self.pb3) and not \
                    self.boxLst[self.boxLst.index(self.Kb) - 8 - 1].colliderect(self.pb4) and not \
                    self.boxLst[self.boxLst.index(self.Kb) - 8 - 1].colliderect(self.pb5) and not \
                    self.boxLst[self.boxLst.index(self.Kb) - 8 - 1].colliderect(self.pb6) and not \
                    self.boxLst[self.boxLst.index(self.Kb) - 8 - 1].colliderect(self.pb7) and not \
                    self.boxLst[self.boxLst.index(self.Kb) - 8 - 1].colliderect(self.pb8) and not \
                    self.boxLst[self.boxLst.index(self.Kb) - 8 - 1].colliderect(self.pb1) and not \
                    self.boxLst[self.boxLst.index(self.Kb) - 8 - 1].colliderect(self.Qb) and not \
                    self.boxLst[self.boxLst.index(self.Kb) - 8 - 1].colliderect(self.rb1) and not \
                    self.boxLst[self.boxLst.index(self.Kb) - 8 - 1].colliderect(self.rb2) and not \
                    self.boxLst[self.boxLst.index(self.Kb) - 8 - 1].colliderect(self.kb1) and not \
                    self.boxLst[self.boxLst.index(self.Kb) - 8 - 1].colliderect(self.kb2) and not \
                    self.boxLst[self.boxLst.index(self.Kb) - 8 - 1].colliderect(self.bb1) and not \
                    self.boxLst[self.boxLst.index(self.Kb) - 8 - 1].colliderect(self.bb2):
                pygame.draw.rect(self.window, self.blue, self.boxLst[self.boxLst.index(self.Kb) - 8 - 1], border_radius=100)
                self.KingBlackClicked = 1
                self.pawnBlack1Clicked = 0
                self.pawnBlack2Clicked = 0
                self.pawnBlack3Clicked = 0
                self.pawnBlack4Clicked = 0
                self.pawnBlack5Clicked = 0
                self.pawnBlack6Clicked = 0
                self.pawnBlack7Clicked = 0
                self.pawnBlack8Clicked = 0
                self.knightBlack1Clicked = 0
                self.knightBlack2Clicked = 0
                self.rookBlack1Clicked = 0
                self.rookBlack2Clicked = 0
                self.bishopBlack1Clicked = 0
                self.bishopBlack2Clicked = 0
                self.QueenBlackClicked = 0

        if self.turn == "black":
            # detection of collision with mouse
            if self.Kb.collidepoint(self.mouse_x, self.mouse_y):
                if self.Kb == self.box1:
                    drawRect_plusOne()
                    drawRect_plusEight_plusOne()
                    drawRect_plusEight()

                elif self.Kb == self.box8:
                    drawRect_minusOne()
                    drawRect_plusEight()
                    drawRect_plusEight_minusOne()

                elif self.Kb == self.box57:
                    drawRect_plusOne()
                    drawRect_minusEight_plusOne()
                    drawRect_minusEight()

                elif self.Kb == self.box64:
                    drawRect_minusOne()
                    drawRect_minusEight()
                    drawRect_minusEight_minusOne()

                elif self.Kb.x < self.box8.x and self.Kb.y < self.box9.y:
                    drawRect_plusOne()
                    drawRect_minusOne()
                    drawRect_plusEight()
                    drawRect_plusEight_plusOne()
                    drawRect_plusEight_minusOne()

                elif self.Kb.x < self.box8.x and self.Kb.y == self.box57.y:
                    drawRect_minusOne()
                    drawRect_plusOne()
                    drawRect_minusEight()
                    drawRect_minusEight_minusOne()
                    drawRect_minusEight_plusOne()

                elif self.Kb.x == self.box8.x and self.Kb.y < self.box57.y:
                    drawRect_minusEight()
                    drawRect_minusEight_minusOne()
                    drawRect_minusOne()
                    drawRect_plusEight_minusOne()
                    drawRect_plusEight()

                elif self.Kb.x == self.box1.x and self.Kb.y < self.box57.y:
                    drawRect_plusOne()
                    drawRect_minusEight()
                    drawRect_plusEight()
                    drawRect_minusEight_plusOne()
                    drawRect_plusEight_plusOne()

                elif self.box1.x < self.Kb.x < self.box8.x and self.box8.y < self.Kb.y < self.box57.y:
                    drawRect_plusOne()
                    drawRect_minusOne()
                    drawRect_minusEight()
                    drawRect_plusEight()
                    drawRect_minusEight_plusOne()
                    drawRect_minusEight_minusOne()
                    drawRect_plusEight_minusOne()
                    drawRect_plusEight_plusOne()

                # checking if white pieces can be cut or not
                if self.Kb.x > self.box1.x:
                    if self.boxLst[self.boxLst.index(self.Kb) - 1].colliderect(self.pw1) or \
                            self.boxLst[self.boxLst.index(self.Kb) - 1].colliderect(self.pw2) or \
                            self.boxLst[self.boxLst.index(self.Kb) - 1].colliderect(self.pw3) or \
                            self.boxLst[self.boxLst.index(self.Kb) - 1].colliderect(self.pw4) or \
                            self.boxLst[self.boxLst.index(self.Kb) - 1].colliderect(self.pw5) or \
                            self.boxLst[self.boxLst.index(self.Kb) - 1].colliderect(self.pw6) or \
                            self.boxLst[self.boxLst.index(self.Kb) - 1].colliderect(self.pw7) or \
                            self.boxLst[self.boxLst.index(self.Kb) - 1].colliderect(self.pw8) or \
                            self.boxLst[self.boxLst.index(self.Kb) - 1].colliderect(self.Kw) or \
                            self.boxLst[self.boxLst.index(self.Kb) - 1].colliderect(self.Qw) or \
                            self.boxLst[self.boxLst.index(self.Kb) - 1].colliderect(self.rw1) or \
                            self.boxLst[self.boxLst.index(self.Kb) - 1].colliderect(self.rw2) or \
                            self.boxLst[self.boxLst.index(self.Kb) - 1].colliderect(self.kw1) or \
                            self.boxLst[self.boxLst.index(self.Kb) - 1].colliderect(self.kw2) or \
                            self.boxLst[self.boxLst.index(self.Kb) - 1].colliderect(self.bw1) or \
                            self.boxLst[self.boxLst.index(self.Kb) - 1].colliderect(self.bw2):
                        pygame.draw.rect(self.window, self.red, self.boxLst[self.boxLst.index(self.Kb) - 1], border_radius=100)
                        self.KingBlackClicked = 1
                        self.pawnBlack1Clicked = 0
                        self.pawnBlack2Clicked = 0
                        self.pawnBlack3Clicked = 0
                        self.pawnBlack4Clicked = 0
                        self.pawnBlack5Clicked = 0
                        self.pawnBlack6Clicked = 0
                        self.pawnBlack7Clicked = 0
                        self.pawnBlack8Clicked = 0
                        self.knightBlack1Clicked = 0
                        self.knightBlack2Clicked = 0
                        self.rookBlack1Clicked = 0
                        self.bishopBlack1Clicked = 0
                        self.bishopBlack2Clicked = 0
                        self.QueenBlackClicked = 0
                        self.KingBlackClicked_cut = 1

                if self.Kb.x < self.box8.x:
                    if self.boxLst[self.boxLst.index(self.Kb) + 1].colliderect(self.pw1) or \
                            self.boxLst[self.boxLst.index(self.Kb) + 1].colliderect(self.pw2) or \
                            self.boxLst[self.boxLst.index(self.Kb) + 1].colliderect(self.pw3) or \
                            self.boxLst[self.boxLst.index(self.Kb) + 1].colliderect(self.pw4) or \
                            self.boxLst[self.boxLst.index(self.Kb) + 1].colliderect(self.pw5) or \
                            self.boxLst[self.boxLst.index(self.Kb) + 1].colliderect(self.pw6) or \
                            self.boxLst[self.boxLst.index(self.Kb) + 1].colliderect(self.pw7) or \
                            self.boxLst[self.boxLst.index(self.Kb) + 1].colliderect(self.pw8) or \
                            self.boxLst[self.boxLst.index(self.Kb) + 1].colliderect(self.Kw) or \
                            self.boxLst[self.boxLst.index(self.Kb) + 1].colliderect(self.Qw) or \
                            self.boxLst[self.boxLst.index(self.Kb) + 1].colliderect(self.rw1) or \
                            self.boxLst[self.boxLst.index(self.Kb) + 1].colliderect(self.rw2) or \
                            self.boxLst[self.boxLst.index(self.Kb) + 1].colliderect(self.kw1) or \
                            self.boxLst[self.boxLst.index(self.Kb) + 1].colliderect(self.kw2) or \
                            self.boxLst[self.boxLst.index(self.Kb) + 1].colliderect(self.bw1) or \
                            self.boxLst[self.boxLst.index(self.Kb) + 1].colliderect(self.bw2):
                        pygame.draw.rect(self.window, self.red, self.boxLst[self.boxLst.index(self.Kb) + 1], border_radius=100)
                        self.KingBlackClicked = 1
                        self.pawnBlack1Clicked = 0
                        self.pawnBlack2Clicked = 0
                        self.pawnBlack3Clicked = 0
                        self.pawnBlack4Clicked = 0
                        self.pawnBlack5Clicked = 0
                        self.pawnBlack6Clicked = 0
                        self.pawnBlack7Clicked = 0
                        self.pawnBlack8Clicked = 0
                        self.knightBlack1Clicked = 0
                        self.knightBlack2Clicked = 0
                        self.rookBlack1Clicked = 0
                        self.bishopBlack1Clicked = 0
                        self.bishopBlack2Clicked = 0
                        self.QueenBlackClicked = 0
                        self.KingBlackClicked_cut = 1

                if self.Kb.y < self.box57.y:
                    if self.boxLst[self.boxLst.index(self.Kb) + 8].colliderect(self.pw1) or \
                            self.boxLst[self.boxLst.index(self.Kb) + 8].colliderect(self.pw2) or \
                            self.boxLst[self.boxLst.index(self.Kb) + 8].colliderect(self.pw3) or \
                            self.boxLst[self.boxLst.index(self.Kb) + 8].colliderect(self.pw4) or \
                            self.boxLst[self.boxLst.index(self.Kb) + 8].colliderect(self.pw5) or \
                            self.boxLst[self.boxLst.index(self.Kb) + 8].colliderect(self.pw6) or \
                            self.boxLst[self.boxLst.index(self.Kb) + 8].colliderect(self.pw7) or \
                            self.boxLst[self.boxLst.index(self.Kb) + 8].colliderect(self.pw8) or \
                            self.boxLst[self.boxLst.index(self.Kb) + 8].colliderect(self.Kw) or \
                            self.boxLst[self.boxLst.index(self.Kb) + 8].colliderect(self.Qw) or \
                            self.boxLst[self.boxLst.index(self.Kb) + 8].colliderect(self.rw1) or \
                            self.boxLst[self.boxLst.index(self.Kb) + 8].colliderect(self.rw2) or \
                            self.boxLst[self.boxLst.index(self.Kb) + 8].colliderect(self.kw1) or \
                            self.boxLst[self.boxLst.index(self.Kb) + 8].colliderect(self.kw2) or \
                            self.boxLst[self.boxLst.index(self.Kb) + 8].colliderect(self.bw1) or \
                            self.boxLst[self.boxLst.index(self.Kb) + 8].colliderect(self.bw2):
                        pygame.draw.rect(self.window, self.red, self.boxLst[self.boxLst.index(self.Kb) + 8], border_radius=100)
                        self.KingBlackClicked = 1
                        self.pawnBlack1Clicked = 0
                        self.pawnBlack2Clicked = 0
                        self.pawnBlack3Clicked = 0
                        self.pawnBlack4Clicked = 0
                        self.pawnBlack5Clicked = 0
                        self.pawnBlack6Clicked = 0
                        self.pawnBlack7Clicked = 0
                        self.pawnBlack8Clicked = 0
                        self.knightBlack1Clicked = 0
                        self.knightBlack2Clicked = 0
                        self.rookBlack1Clicked = 0
                        self.rookBlack2Clicked = 0
                        self.bishopBlack1Clicked = 0
                        self.bishopBlack2Clicked = 0
                        self.QueenBlackClicked = 0
                        self.KingBlackClicked_cut = 1

                if self.Kb.y < self.box57.y:
                    if self.Kb.x > self.box1.x:
                        if self.boxLst[self.boxLst.index(self.Kb) + 8 - 1].colliderect(self.pw1) or \
                                self.boxLst[self.boxLst.index(self.Kb) + 8 - 1].colliderect(self.pw2) or \
                                self.boxLst[self.boxLst.index(self.Kb) + 8 - 1].colliderect(self.pw3) or \
                                self.boxLst[self.boxLst.index(self.Kb) + 8 - 1].colliderect(self.pw4) or \
                                self.boxLst[self.boxLst.index(self.Kb) + 8 - 1].colliderect(self.pw5) or \
                                self.boxLst[self.boxLst.index(self.Kb) + 8 - 1].colliderect(self.pw6) or \
                                self.boxLst[self.boxLst.index(self.Kb) + 8 - 1].colliderect(self.pw7) or \
                                self.boxLst[self.boxLst.index(self.Kb) + 8 - 1].colliderect(self.pw8) or \
                                self.boxLst[self.boxLst.index(self.Kb) + 8 - 1].colliderect(self.Kw) or \
                                self.boxLst[self.boxLst.index(self.Kb) + 8 - 1].colliderect(self.Qw) or \
                                self.boxLst[self.boxLst.index(self.Kb) + 8 - 1].colliderect(self.rw1) or \
                                self.boxLst[self.boxLst.index(self.Kb) + 8 - 1].colliderect(self.rw2) or \
                                self.boxLst[self.boxLst.index(self.Kb) + 8 - 1].colliderect(self.kw1) or \
                                self.boxLst[self.boxLst.index(self.Kb) + 8 - 1].colliderect(self.kw2) or \
                                self.boxLst[self.boxLst.index(self.Kb) + 8 - 1].colliderect(self.bw1) or \
                                self.boxLst[self.boxLst.index(self.Kb) + 8 - 1].colliderect(self.bw2):
                            pygame.draw.rect(self.window, self.red, self.boxLst[self.boxLst.index(self.Kb) + 8 - 1], border_radius=100)
                            self.KingBlackClicked = 1
                            self.pawnBlack1Clicked = 0
                            self.pawnBlack2Clicked = 0
                            self.pawnBlack3Clicked = 0
                            self.pawnBlack4Clicked = 0
                            self.pawnBlack5Clicked = 0
                            self.pawnBlack6Clicked = 0
                            self.pawnBlack7Clicked = 0
                            self.pawnBlack8Clicked = 0
                            self.knightBlack1Clicked = 0
                            self.knightBlack2Clicked = 0
                            self.rookBlack1Clicked = 0
                            self.rookBlack2Clicked = 0
                            self.bishopBlack1Clicked = 0
                            self.bishopBlack2Clicked = 0
                            self.QueenBlackClicked = 0
                            self.KingBlackClicked_cut = 1

                if self.Kb.y < self.box57.y:
                    if self.Kb.x < self.box8.x:
                        if self.boxLst[self.boxLst.index(self.Kb) + 8 + 1].colliderect(self.pw1) or \
                                self.boxLst[self.boxLst.index(self.Kb) + 8 + 1].colliderect(self.pw2) or \
                                self.boxLst[self.boxLst.index(self.Kb) + 8 + 1].colliderect(self.pw3) or \
                                self.boxLst[self.boxLst.index(self.Kb) + 8 + 1].colliderect(self.pw4) or \
                                self.boxLst[self.boxLst.index(self.Kb) + 8 + 1].colliderect(self.pw5) or \
                                self.boxLst[self.boxLst.index(self.Kb) + 8 + 1].colliderect(self.pw6) or \
                                self.boxLst[self.boxLst.index(self.Kb) + 8 + 1].colliderect(self.pw7) or \
                                self.boxLst[self.boxLst.index(self.Kb) + 8 + 1].colliderect(self.pw8) or \
                                self.boxLst[self.boxLst.index(self.Kb) + 8 + 1].colliderect(self.Kw) or \
                                self.boxLst[self.boxLst.index(self.Kb) + 8 + 1].colliderect(self.Qw) or \
                                self.boxLst[self.boxLst.index(self.Kb) + 8 + 1].colliderect(self.rw1) or \
                                self.boxLst[self.boxLst.index(self.Kb) + 8 + 1].colliderect(self.rw2) or \
                                self.boxLst[self.boxLst.index(self.Kb) + 8 + 1].colliderect(self.kw1) or \
                                self.boxLst[self.boxLst.index(self.Kb) + 8 + 1].colliderect(self.kw2) or \
                                self.boxLst[self.boxLst.index(self.Kb) + 8 + 1].colliderect(self.bw1) or \
                                self.boxLst[self.boxLst.index(self.Kb) + 8 + 1].colliderect(self.bw2):
                            pygame.draw.rect(self.window, self.red, self.boxLst[self.boxLst.index(self.Kb) + 8 + 1], border_radius=100)
                            self.KingBlackClicked = 1
                            self.pawnBlack1Clicked = 0
                            self.pawnBlack2Clicked = 0
                            self.pawnBlack3Clicked = 0
                            self.pawnBlack4Clicked = 0
                            self.pawnBlack5Clicked = 0
                            self.pawnBlack6Clicked = 0
                            self.pawnBlack7Clicked = 0
                            self.pawnBlack8Clicked = 0
                            self.knightBlack1Clicked = 0
                            self.knightBlack2Clicked = 0
                            self.rookBlack1Clicked = 0
                            self.rookBlack2Clicked = 0
                            self.bishopBlack1Clicked = 0
                            self.bishopBlack2Clicked = 0
                            self.QueenBlackClicked = 0
                            self.KingBlackClicked_cut = 1

                if self.Kb.y > self.box1.y:
                    if self.boxLst[self.boxLst.index(self.Kb) - 8].colliderect(self.pw1) or \
                            self.boxLst[self.boxLst.index(self.Kb) - 8].colliderect(self.pw2) or \
                            self.boxLst[self.boxLst.index(self.Kb) - 8].colliderect(self.pw3) or \
                            self.boxLst[self.boxLst.index(self.Kb) - 8].colliderect(self.pw4) or \
                            self.boxLst[self.boxLst.index(self.Kb) - 8].colliderect(self.pw5) or \
                            self.boxLst[self.boxLst.index(self.Kb) - 8].colliderect(self.pw6) or \
                            self.boxLst[self.boxLst.index(self.Kb) - 8].colliderect(self.pw7) or \
                            self.boxLst[self.boxLst.index(self.Kb) - 8].colliderect(self.pw8) or \
                            self.boxLst[self.boxLst.index(self.Kb) - 8].colliderect(self.Kw) or \
                            self.boxLst[self.boxLst.index(self.Kb) - 8].colliderect(self.Qw) or \
                            self.boxLst[self.boxLst.index(self.Kb) - 8].colliderect(self.rw1) or \
                            self.boxLst[self.boxLst.index(self.Kb) - 8].colliderect(self.rw2) or \
                            self.boxLst[self.boxLst.index(self.Kb) - 8].colliderect(self.kw1) or \
                            self.boxLst[self.boxLst.index(self.Kb) - 8].colliderect(self.kw2) or \
                            self.boxLst[self.boxLst.index(self.Kb) - 8].colliderect(self.bw1) or \
                            self.boxLst[self.boxLst.index(self.Kb) - 8].colliderect(self.bw2):
                        pygame.draw.rect(self.window, self.red, self.boxLst[self.boxLst.index(self.Kb) - 8], border_radius=100)
                        self.KingBlackClicked = 1
                        self.pawnBlack1Clicked = 0
                        self.pawnBlack2Clicked = 0
                        self.pawnBlack3Clicked = 0
                        self.pawnBlack4Clicked = 0
                        self.pawnBlack5Clicked = 0
                        self.pawnBlack6Clicked = 0
                        self.pawnBlack7Clicked = 0
                        self.pawnBlack8Clicked = 0
                        self.knightBlack1Clicked = 0
                        self.knightBlack2Clicked = 0
                        self.rookBlack1Clicked = 0
                        self.rookBlack1Clicked = 0
                        self.bishopBlack1Clicked = 0
                        self.bishopBlack2Clicked = 0
                        self.QueenBlackClicked = 0
                        self.KingBlackClicked_cut = 1

                if self.Kb.y > self.box1.y:
                    if self.Kb.x > self.box1.x:
                        if self.boxLst[self.boxLst.index(self.Kb) - 8 - 1].colliderect(self.pw1) or \
                                self.boxLst[self.boxLst.index(self.Kb) - 8 - 1].colliderect(self.pw2) or \
                                self.boxLst[self.boxLst.index(self.Kb) - 8 - 1].colliderect(self.pw3) or \
                                self.boxLst[self.boxLst.index(self.Kb) - 8 - 1].colliderect(self.pw4) or \
                                self.boxLst[self.boxLst.index(self.Kb) - 8 - 1].colliderect(self.pw5) or \
                                self.boxLst[self.boxLst.index(self.Kb) - 8 - 1].colliderect(self.pw6) or \
                                self.boxLst[self.boxLst.index(self.Kb) - 8 - 1].colliderect(self.pw7) or \
                                self.boxLst[self.boxLst.index(self.Kb) - 8 - 1].colliderect(self.pw8) or \
                                self.boxLst[self.boxLst.index(self.Kb) - 8 - 1].colliderect(self.Kw) or \
                                self.boxLst[self.boxLst.index(self.Kb) - 8 - 1].colliderect(self.Qw) or \
                                self.boxLst[self.boxLst.index(self.Kb) - 8 - 1].colliderect(self.rw1) or \
                                self.boxLst[self.boxLst.index(self.Kb) - 8 - 1].colliderect(self.rw2) or \
                                self.boxLst[self.boxLst.index(self.Kb) - 8 - 1].colliderect(self.kw1) or \
                                self.boxLst[self.boxLst.index(self.Kb) - 8 - 1].colliderect(self.kw2) or \
                                self.boxLst[self.boxLst.index(self.Kb) - 8 - 1].colliderect(self.bw1) or \
                                self.boxLst[self.boxLst.index(self.Kb) - 8 - 1].colliderect(self.bw2):
                            pygame.draw.rect(self.window, self.red, self.boxLst[self.boxLst.index(self.Kb) - 8 - 1], border_radius=100)
                            self.KingBlackClicked = 1
                            self.pawnBlack1Clicked = 0
                            self.pawnBlack2Clicked = 0
                            self.pawnBlack3Clicked = 0
                            self.pawnBlack4Clicked = 0
                            self.pawnBlack5Clicked = 0
                            self.pawnBlack6Clicked = 0
                            self.pawnBlack7Clicked = 0
                            self.pawnBlack8Clicked = 0
                            self.knightBlack1Clicked = 0
                            self.knightBlack2Clicked = 0
                            self.rookBlack1Clicked = 0
                            self.rookBlack2Clicked = 0
                            self.bishopBlack1Clicked = 0
                            self.bishopBlack2Clicked = 0
                            self.QueenBlackClicked = 0
                            self.KingBlackClicked_cut = 1

                if self.Kb.y > self.box1.y:
                    if self.Kb.x < self.box8.x:
                        if self.boxLst[self.boxLst.index(self.Kb) - 8 + 1].colliderect(self.pw1) or \
                                self.boxLst[self.boxLst.index(self.Kb) - 8 + 1].colliderect(self.pw2) or \
                                self.boxLst[self.boxLst.index(self.Kb) - 8 + 1].colliderect(self.pw3) or \
                                self.boxLst[self.boxLst.index(self.Kb) - 8 + 1].colliderect(self.pw4) or \
                                self.boxLst[self.boxLst.index(self.Kb) - 8 + 1].colliderect(self.pw5) or \
                                self.boxLst[self.boxLst.index(self.Kb) - 8 + 1].colliderect(self.pw6) or \
                                self.boxLst[self.boxLst.index(self.Kb) - 8 + 1].colliderect(self.pw7) or \
                                self.boxLst[self.boxLst.index(self.Kb) - 8 + 1].colliderect(self.pw8) or \
                                self.boxLst[self.boxLst.index(self.Kb) - 8 + 1].colliderect(self.Kw) or \
                                self.boxLst[self.boxLst.index(self.Kb) - 8 + 1].colliderect(self.Qw) or \
                                self.boxLst[self.boxLst.index(self.Kb) - 8 + 1].colliderect(self.rw1) or \
                                self.boxLst[self.boxLst.index(self.Kb) - 8 + 1].colliderect(self.rw2) or \
                                self.boxLst[self.boxLst.index(self.Kb) - 8 + 1].colliderect(self.kw1) or \
                                self.boxLst[self.boxLst.index(self.Kb) - 8 + 1].colliderect(self.kw2) or \
                                self.boxLst[self.boxLst.index(self.Kb) - 8 + 1].colliderect(self.bw1) or \
                                self.boxLst[self.boxLst.index(self.Kb) - 8 + 1].colliderect(self.bw2):
                            pygame.draw.rect(self.window, self.red, self.boxLst[self.boxLst.index(self.Kb) - 8 + 1], border_radius=100)
                            self.KingBlackClicked = 1
                            self.pawnBlack1Clicked = 0
                            self.pawnBlack2Clicked = 0
                            self.pawnBlack3Clicked = 0
                            self.pawnBlack4Clicked = 0
                            self.pawnBlack5Clicked = 0
                            self.pawnBlack6Clicked = 0
                            self.pawnBlack7Clicked = 0
                            self.pawnBlack8Clicked = 0
                            self.knightBlack1Clicked = 0
                            self.knightBlack2Clicked = 0
                            self.rookBlack1Clicked = 0
                            self.rookBlack2Clicked = 0
                            self.bishopBlack1Clicked = 0
                            self.bishopBlack2Clicked = 0
                            self.QueenBlackClicked = 0
                            self.KingBlackClicked_cut = 1

        # what should happen if king is clicked
        if self.KingBlackClicked == 1:

            # cut the pieces
            if self.KingBlackClicked_cut == 1:
                if self.Kb.x < self.box8.x:
                    if self.boxLst[self.boxLst.index(self.Kb) + 1].collidepoint(self.mouse_x, self.mouse_y):
                        if self.boxLst[self.boxLst.index(self.Kb) + 1].colliderect(self.pw1):
                            self.pw1 = self.whiteCutPiece_1
                        if self.boxLst[self.boxLst.index(self.Kb) + 1].colliderect(self.pw2):
                            self.pw2 = self.whiteCutPiece_2
                        if self.boxLst[self.boxLst.index(self.Kb) + 1].colliderect(self.pw3):
                            self.pw3 = self.whiteCutPiece_3
                        if self.boxLst[self.boxLst.index(self.Kb) + 1].colliderect(self.pw4):
                            self.pw4 = self.whiteCutPiece_4
                        if self.boxLst[self.boxLst.index(self.Kb) + 1].colliderect(self.pw5):
                            self.pw5 = self.whiteCutPiece_5
                        if self.boxLst[self.boxLst.index(self.Kb) + 1].colliderect(self.pw6):
                            self.pw6 = self.whiteCutPiece_6
                        if self.boxLst[self.boxLst.index(self.Kb) + 1].colliderect(self.pw7):
                            self.pw7 = self.whiteCutPiece_7
                        if self.boxLst[self.boxLst.index(self.Kb) + 1].colliderect(self.pw8):
                            self.pw8 = self.whiteCutPiece_8
                        if self.boxLst[self.boxLst.index(self.Kb) + 1].colliderect(self.rw1):
                            self.rw1 = self.whiteCutPiece_9
                        if self.boxLst[self.boxLst.index(self.Kb) + 1].colliderect(self.rw2):
                            self.rw2 = self.whiteCutPiece_10
                        if self.boxLst[self.boxLst.index(self.Kb) + 1].colliderect(self.kw1):
                            self.kw1 = self.whiteCutPiece_11
                        if self.boxLst[self.boxLst.index(self.Kb) + 1].colliderect(self.kw2):
                            self.kw2 = self.whiteCutPiece_12
                        if self.boxLst[self.boxLst.index(self.Kb) + 1].colliderect(self.bw1):
                            self.bw1 = self.whiteCutPiece_13
                        if self.boxLst[self.boxLst.index(self.Kb) + 1].colliderect(self.bw2):
                            self.bw2 = self.whiteCutPiece_14
                        if self.boxLst[self.boxLst.index(self.Kb) + 1].colliderect(self.Kw):
                            self.Kw = self.whiteCutPiece_15
                            self.KingWhite_isDead = 1
                        if self.boxLst[self.boxLst.index(self.Kb) + 1].colliderect(self.Qw):
                            self.Qw = self.whiteCutPiece_16
                        self.Kb = self.boxLst[self.boxLst.index(self.Kb) + 1]
                        self.KingBlackClicked = 0
                        self.KingBlackClicked_cut = 0
                        self.turn = "white"
                if self.Kb.x > self.box1.x:
                    if self.boxLst[self.boxLst.index(self.Kb) - 1].collidepoint(self.mouse_x, self.mouse_y):
                        if self.boxLst[self.boxLst.index(self.Kb) - 1].colliderect(self.pw1):
                            self.pw1 = self.whiteCutPiece_1
                        if self.boxLst[self.boxLst.index(self.Kb) - 1].colliderect(self.pw2):
                            self.pw2 = self.whiteCutPiece_2
                        if self.boxLst[self.boxLst.index(self.Kb) - 1].colliderect(self.pw3):
                            self.pw3 = self.whiteCutPiece_3
                        if self.boxLst[self.boxLst.index(self.Kb) - 1].colliderect(self.pw4):
                            self.pw4 = self.whiteCutPiece_4
                        if self.boxLst[self.boxLst.index(self.Kb) - 1].colliderect(self.pw5):
                            self.pw5 = self.whiteCutPiece_5
                        if self.boxLst[self.boxLst.index(self.Kb) - 1].colliderect(self.pw6):
                            self.pw6 = self.whiteCutPiece_6
                        if self.boxLst[self.boxLst.index(self.Kb) - 1].colliderect(self.pw7):
                            self.pw7 = self.whiteCutPiece_7
                        if self.boxLst[self.boxLst.index(self.Kb) - 1].colliderect(self.pw8):
                            self.pw8 = self.whiteCutPiece_8
                        if self.boxLst[self.boxLst.index(self.Kb) - 1].colliderect(self.rw1):
                            self.rw1 = self.whiteCutPiece_9
                        if self.boxLst[self.boxLst.index(self.Kb) - 1].colliderect(self.rw2):
                            self.rw2 = self.whiteCutPiece_10
                        if self.boxLst[self.boxLst.index(self.Kb) - 1].colliderect(self.kw1):
                            self.kw1 = self.whiteCutPiece_11
                        if self.boxLst[self.boxLst.index(self.Kb) - 1].colliderect(self.kw2):
                            self.kw2 = self.whiteCutPiece_12
                        if self.boxLst[self.boxLst.index(self.Kb) - 1].colliderect(self.bw1):
                            self.bw1 = self.whiteCutPiece_13
                        if self.boxLst[self.boxLst.index(self.Kb) - 1].colliderect(self.bw2):
                            self.bw2 = self.whiteCutPiece_14
                        if self.boxLst[self.boxLst.index(self.Kb) - 1].colliderect(self.Kw):
                            self.Kw = self.whiteCutPiece_15
                            self.KingWhite_isDead = 1
                        if self.boxLst[self.boxLst.index(self.Kb) - 1].colliderect(self.Qw):
                            self.Qw = self.whiteCutPiece_16
                        self.Kb = self.boxLst[self.boxLst.index(self.Kb) - 1]
                        self.KingBlackClicked = 0
                        self.KingBlackClicked_cut = 0
                        self.turn = "white"
                if self.Kb.y < self.box57.y:
                    if self.Kb.x > self.box1.x:
                        if self.boxLst[self.boxLst.index(self.Kb) + 8 - 1].collidepoint(self.mouse_x, self.mouse_y):
                            if self.boxLst[self.boxLst.index(self.Kb) + 8 - 1].colliderect(self.pw1):
                                self.pw1 = self.whiteCutPiece_1
                            if self.boxLst[self.boxLst.index(self.Kb) + 8 - 1].colliderect(self.pw2):
                                self.pw2 = self.whiteCutPiece_2
                            if self.boxLst[self.boxLst.index(self.Kb) + 8 - 1].colliderect(self.pw3):
                                self.pw3 = self.whiteCutPiece_3
                            if self.boxLst[self.boxLst.index(self.Kb) + 8 - 1].colliderect(self.pw4):
                                self.pw4 = self.whiteCutPiece_4
                            if self.boxLst[self.boxLst.index(self.Kb) + 8 - 1].colliderect(self.pw5):
                                self.pw5 = self.whiteCutPiece_5
                            if self.boxLst[self.boxLst.index(self.Kb) + 8 - 1].colliderect(self.pw6):
                                self.pw6 = self.whiteCutPiece_6
                            if self.boxLst[self.boxLst.index(self.Kb) + 8 - 1].colliderect(self.pw7):
                                self.pw7 = self.whiteCutPiece_7
                            if self.boxLst[self.boxLst.index(self.Kb) + 8 - 1].colliderect(self.pw8):
                                self.pw8 = self.whiteCutPiece_8
                            if self.boxLst[self.boxLst.index(self.Kb) + 8 - 1].colliderect(self.rw1):
                                self.rw1 = self.whiteCutPiece_9
                            if self.boxLst[self.boxLst.index(self.Kb) + 8 - 1].colliderect(self.rw2):
                                self.rw2 = self.whiteCutPiece_10
                            if self.boxLst[self.boxLst.index(self.Kb) + 8 - 1].colliderect(self.kw1):
                                self.kw1 = self.whiteCutPiece_11
                            if self.boxLst[self.boxLst.index(self.Kb) + 8 - 1].colliderect(self.kw2):
                                self.kw2 = self.whiteCutPiece_12
                            if self.boxLst[self.boxLst.index(self.Kb) + 8 - 1].colliderect(self.bw1):
                                self.bw1 = self.whiteCutPiece_13
                            if self.boxLst[self.boxLst.index(self.Kb) + 8 - 1].colliderect(self.bw2):
                                self.bw2 = self.whiteCutPiece_14
                            if self.boxLst[self.boxLst.index(self.Kb) + 8 - 1].colliderect(self.Kw):
                                self.Kw = self.whiteCutPiece_15
                                self.KingWhite_isDead = 1
                            if self.boxLst[self.boxLst.index(self.Kb) + 8 - 1].colliderect(self.Qw):
                                self.Qw = self.whiteCutPiece_16
                            self.Kb = self.boxLst[self.boxLst.index(self.Kb) + 8 - 1]
                            self.KingBlackClicked = 0
                            self.KingBlackClicked_cut = 0
                            self.turn = "white"
                    if self.Kb.y < self.box57.y:
                        if self.boxLst[self.boxLst.index(self.Kb) + 8].collidepoint(self.mouse_x, self.mouse_y):
                            if self.boxLst[self.boxLst.index(self.Kb) + 8].colliderect(self.pw1):
                                self.pw1 = self.whiteCutPiece_1
                            if self.boxLst[self.boxLst.index(self.Kb) + 8].colliderect(self.pw2):
                                self.pw2 = self.whiteCutPiece_2
                            if self.boxLst[self.boxLst.index(self.Kb) + 8].colliderect(self.pw3):
                                self.pw3 = self.whiteCutPiece_3
                            if self.boxLst[self.boxLst.index(self.Kb) + 8].colliderect(self.pw4):
                                self.pw4 = self.whiteCutPiece_4
                            if self.boxLst[self.boxLst.index(self.Kb) + 8].colliderect(self.pw5):
                                self.pw5 = self.whiteCutPiece_5
                            if self.boxLst[self.boxLst.index(self.Kb) + 8].colliderect(self.pw6):
                                self.pw6 = self.whiteCutPiece_6
                            if self.boxLst[self.boxLst.index(self.Kb) + 8].colliderect(self.pw7):
                                self.pw7 = self.whiteCutPiece_7
                            if self.boxLst[self.boxLst.index(self.Kb) + 8].colliderect(self.pw8):
                                self.pw8 = self.whiteCutPiece_8
                            if self.boxLst[self.boxLst.index(self.Kb) + 8].colliderect(self.rw1):
                                self.rw1 = self.whiteCutPiece_9
                            if self.boxLst[self.boxLst.index(self.Kb) + 8].colliderect(self.rw2):
                                self.rw2 = self.whiteCutPiece_10
                            if self.boxLst[self.boxLst.index(self.Kb) + 8].colliderect(self.kw1):
                                self.kw1 = self.whiteCutPiece_11
                            if self.boxLst[self.boxLst.index(self.Kb) + 8].colliderect(self.kw2):
                                self.kw2 = self.whiteCutPiece_12
                            if self.boxLst[self.boxLst.index(self.Kb) + 8].colliderect(self.bw1):
                                self.bw1 = self.whiteCutPiece_13
                            if self.boxLst[self.boxLst.index(self.Kb) + 8].colliderect(self.bw2):
                                self.bw2 = self.whiteCutPiece_14
                            if self.boxLst[self.boxLst.index(self.Kb) + 8].colliderect(self.Kw):
                                self.Kw = self.whiteCutPiece_15
                                self.KingWhite_isDead = 1
                            if self.boxLst[self.boxLst.index(self.Kb) + 8].colliderect(self.Qw):
                                self.Qw = self.whiteCutPiece_16
                            self.Kb = self.boxLst[self.boxLst.index(self.Kb) + 8]
                            self.KingBlackClicked = 0
                            self.KingBlackClicked_cut = 0
                            self.turn = "white"

                    if self.Kb.y < self.box57.y:
                        if self.Kb.x < self.box8.x:
                            if self.boxLst[self.boxLst.index(self.Kb) + 8 + 1].collidepoint(self.mouse_x, self.mouse_y):
                                if self.boxLst[self.boxLst.index(self.Kb) + 8 + 1].colliderect(self.pw1):
                                    self.pw1 = self.whiteCutPiece_1
                                if self.boxLst[self.boxLst.index(self.Kb) + 8 + 1].colliderect(self.pw2):
                                    self.pw2 = self.whiteCutPiece_2
                                if self.boxLst[self.boxLst.index(self.Kb) + 8 + 1].colliderect(self.pw3):
                                    self.pw3 = self.whiteCutPiece_3
                                if self.boxLst[self.boxLst.index(self.Kb) + 8 + 1].colliderect(self.pw4):
                                    self.pw4 = self.whiteCutPiece_4
                                if self.boxLst[self.boxLst.index(self.Kb) + 8 + 1].colliderect(self.pw5):
                                    self.pw5 = self.whiteCutPiece_5
                                if self.boxLst[self.boxLst.index(self.Kb) + 8 + 1].colliderect(self.pw6):
                                    self.pw6 = self.whiteCutPiece_6
                                if self.boxLst[self.boxLst.index(self.Kb) + 8 + 1].colliderect(self.pw7):
                                    self.pw7 = self.whiteCutPiece_7
                                if self.boxLst[self.boxLst.index(self.Kb) + 8 + 1].colliderect(self.pw8):
                                    self.pw8 = self.whiteCutPiece_8
                                if self.boxLst[self.boxLst.index(self.Kb) + 8 + 1].colliderect(self.rw1):
                                    self.rw1 = self.whiteCutPiece_9
                                if self.boxLst[self.boxLst.index(self.Kb) + 8 + 1].colliderect(self.rw2):
                                    self.rw2 = self.whiteCutPiece_10
                                if self.boxLst[self.boxLst.index(self.Kb) + 8 + 1].colliderect(self.kw1):
                                    self.kw1 = self.whiteCutPiece_11
                                if self.boxLst[self.boxLst.index(self.Kb) + 8 + 1].colliderect(self.kw2):
                                    self.kw2 = self.whiteCutPiece_12
                                if self.boxLst[self.boxLst.index(self.Kb) + 8 + 1].colliderect(self.bw1):
                                    self.bw1 = self.whiteCutPiece_13
                                if self.boxLst[self.boxLst.index(self.Kb) + 8 + 1].colliderect(self.bw2):
                                    self.bw2 = self.whiteCutPiece_14
                                if self.boxLst[self.boxLst.index(self.Kb) + 8 + 1].colliderect(self.Kw):
                                    self.Kw = self.whiteCutPiece_15
                                    self.KingWhite_isDead = 1
                                if self.boxLst[self.boxLst.index(self.Kb) + 8 + 1].colliderect(self.Qw):
                                    self.Qw = self.whiteCutPiece_16
                                self.Kb = self.boxLst[self.boxLst.index(self.Kb) + 8 + 1]
                                self.KingBlackClicked = 0
                                self.KingBlackClicked_cut = 0
                                self.turn = "white"
                if self.Kb.y > self.box1.y:
                    if self.Kb.x > self.box1.x:
                        if self.boxLst[self.boxLst.index(self.Kb) - 8 - 1].collidepoint(self.mouse_x, self.mouse_y):
                            if self.boxLst[self.boxLst.index(self.Kb) - 8 - 1].colliderect(self.pw1):
                                self.pw1 = self.whiteCutPiece_1
                            if self.boxLst[self.boxLst.index(self.Kb) - 8 - 1].colliderect(self.pw2):
                                self.pw2 = self.whiteCutPiece_2
                            if self.boxLst[self.boxLst.index(self.Kb) - 8 - 1].colliderect(self.pw3):
                                self.pw3 = self.whiteCutPiece_3
                            if self.boxLst[self.boxLst.index(self.Kb) - 8 - 1].colliderect(self.pw4):
                                self.pw4 = self.whiteCutPiece_4
                            if self.boxLst[self.boxLst.index(self.Kb) - 8 - 1].colliderect(self.pw5):
                                self.pw5 = self.whiteCutPiece_5
                            if self.boxLst[self.boxLst.index(self.Kb) - 8 - 1].colliderect(self.pw6):
                                self.pw6 = self.whiteCutPiece_6
                            if self.boxLst[self.boxLst.index(self.Kb) - 8 - 1].colliderect(self.pw7):
                                self.pw7 = self.whiteCutPiece_7
                            if self.boxLst[self.boxLst.index(self.Kb) - 8 - 1].colliderect(self.pw8):
                                self.pw8 = self.whiteCutPiece_8
                            if self.boxLst[self.boxLst.index(self.Kb) - 8 - 1].colliderect(self.rw1):
                                self.rw1 = self.whiteCutPiece_9
                            if self.boxLst[self.boxLst.index(self.Kb) - 8 - 1].colliderect(self.rw2):
                                self.rw2 = self.whiteCutPiece_10
                            if self.boxLst[self.boxLst.index(self.Kb) - 8 - 1].colliderect(self.kw1):
                                self.kw1 = self.whiteCutPiece_11
                            if self.boxLst[self.boxLst.index(self.Kb) - 8 - 1].colliderect(self.kw2):
                                self.kw2 = self.whiteCutPiece_12
                            if self.boxLst[self.boxLst.index(self.Kb) - 8 - 1].colliderect(self.bw1):
                                self.bw1 = self.whiteCutPiece_13
                            if self.boxLst[self.boxLst.index(self.Kb) - 8 - 1].colliderect(self.bw2):
                                self.bw2 = self.whiteCutPiece_14
                            if self.boxLst[self.boxLst.index(self.Kb) - 8 - 1].colliderect(self.Kw):
                                self.Kw = self.whiteCutPiece_15
                                self.KingWhite_isDead = 1
                            if self.boxLst[self.boxLst.index(self.Kb) - 8 - 1].colliderect(self.Qw):
                                self.Qw = self.whiteCutPiece_16
                            self.Kb = self.boxLst[self.boxLst.index(self.Kb) - 8 - 1]
                            self.KingBlackClicked = 0
                            self.KingBlackClicked_cut = 0
                            self.turn = "white"
                    if self.boxLst[self.boxLst.index(self.Kb) - 8].collidepoint(self.mouse_x, self.mouse_y):
                        if self.boxLst[self.boxLst.index(self.Kb) - 8].colliderect(self.pw1):
                            self.pw1 = self.whiteCutPiece_1
                        if self.boxLst[self.boxLst.index(self.Kb) - 8].colliderect(self.pw2):
                            self.pw2 = self.whiteCutPiece_2
                        if self.boxLst[self.boxLst.index(self.Kb) - 8].colliderect(self.pw3):
                            self.pw3 = self.whiteCutPiece_3
                        if self.boxLst[self.boxLst.index(self.Kb) - 8].colliderect(self.pw4):
                            self.pw4 = self.whiteCutPiece_4
                        if self.boxLst[self.boxLst.index(self.Kb) - 8].colliderect(self.pw5):
                            self.pw5 = self.whiteCutPiece_5
                        if self.boxLst[self.boxLst.index(self.Kb) - 8].colliderect(self.pw6):
                            self.pw6 = self.whiteCutPiece_6
                        if self.boxLst[self.boxLst.index(self.Kb) - 8].colliderect(self.pw7):
                            self.pw7 = self.whiteCutPiece_7
                        if self.boxLst[self.boxLst.index(self.Kb) - 8].colliderect(self.pw8):
                            self.pw8 = self.whiteCutPiece_8
                        if self.boxLst[self.boxLst.index(self.Kb) - 8].colliderect(self.rw1):
                            self.rw1 = self.whiteCutPiece_9
                        if self.boxLst[self.boxLst.index(self.Kb) - 8].colliderect(self.rw2):
                            self.rw2 = self.whiteCutPiece_10
                        if self.boxLst[self.boxLst.index(self.Kb) - 8].colliderect(self.kw1):
                            self.kw1 = self.whiteCutPiece_11
                        if self.boxLst[self.boxLst.index(self.Kb) - 8].colliderect(self.kw2):
                            self.kw2 = self.whiteCutPiece_12
                        if self.boxLst[self.boxLst.index(self.Kb) - 8].colliderect(self.bw1):
                            self.bw1 = self.whiteCutPiece_13
                        if self.boxLst[self.boxLst.index(self.Kb) - 8].colliderect(self.bw2):
                            self.bw2 = self.whiteCutPiece_14
                        if self.boxLst[self.boxLst.index(self.Kb) - 8].colliderect(self.Kw):
                            self.Kw = self.whiteCutPiece_15
                            self.KingWhite_isDead = 1
                        if self.boxLst[self.boxLst.index(self.Kb) - 8].colliderect(self.Qw):
                            self.Qw = self.whiteCutPiece_16
                        self.Kb = self.boxLst[self.boxLst.index(self.Kb) - 8]
                        self.KingBlackClicked = 0
                        self.KingBlackClicked_cut = 0
                        self.turn = "white"
                    if self.Kb.x < self.box8.x:
                        if self.boxLst[self.boxLst.index(self.Kb) - 8 + 1].collidepoint(self.mouse_x, self.mouse_y):
                            if self.boxLst[self.boxLst.index(self.Kb) - 8 + 1].colliderect(self.pw1):
                                self.pw1 = self.whiteCutPiece_1
                            if self.boxLst[self.boxLst.index(self.Kb) - 8 + 1].colliderect(self.pw2):
                                self.pw2 = self.whiteCutPiece_2
                            if self.boxLst[self.boxLst.index(self.Kb) - 8 + 1].colliderect(self.pw3):
                                self.pw3 = self.whiteCutPiece_3
                            if self.boxLst[self.boxLst.index(self.Kb) - 8 + 1].colliderect(self.pw4):
                                self.pw4 = self.whiteCutPiece_4
                            if self.boxLst[self.boxLst.index(self.Kb) - 8 + 1].colliderect(self.pw5):
                                self.pw5 = self.whiteCutPiece_5
                            if self.boxLst[self.boxLst.index(self.Kb) - 8 + 1].colliderect(self.pw6):
                                self.pw6 = self.whiteCutPiece_6
                            if self.boxLst[self.boxLst.index(self.Kb) - 8 + 1].colliderect(self.pw7):
                                self.pw7 = self.whiteCutPiece_7
                            if self.boxLst[self.boxLst.index(self.Kb) - 8 + 1].colliderect(self.pw8):
                                self.pw8 = self.whiteCutPiece_8
                            if self.boxLst[self.boxLst.index(self.Kb) - 8 + 1].colliderect(self.rw1):
                                self.rw1 = self.whiteCutPiece_9
                            if self.boxLst[self.boxLst.index(self.Kb) - 8 + 1].colliderect(self.rw2):
                                self.rw2 = self.whiteCutPiece_10
                            if self.boxLst[self.boxLst.index(self.Kb) - 8 + 1].colliderect(self.kw1):
                                self.kw1 = self.whiteCutPiece_11
                            if self.boxLst[self.boxLst.index(self.Kb) - 8 + 1].colliderect(self.kw2):
                                self.kw2 = self.whiteCutPiece_12
                            if self.boxLst[self.boxLst.index(self.Kb) - 8 + 1].colliderect(self.bw1):
                                self.bw1 = self.whiteCutPiece_13
                            if self.boxLst[self.boxLst.index(self.Kb) - 8 + 1].colliderect(self.bw2):
                                self.bw2 = self.whiteCutPiece_14
                            if self.boxLst[self.boxLst.index(self.Kb) - 8 + 1].colliderect(self.Kw):
                                self.Kw = self.whiteCutPiece_15
                                self.KingWhite_isDead = 1
                            if self.boxLst[self.boxLst.index(self.Kb) - 8 + 1].colliderect(self.Qw):
                                self.Qw = self.whiteCutPiece_16
                            self.Kb = self.boxLst[self.boxLst.index(self.Kb) - 8 + 1]
                            self.KingBlackClicked = 0
                            self.KingBlackClicked_cut = 0
                            self.turn = "white"

            if self.Kb.x < self.box8.x:
                if self.boxLst[self.boxLst.index(self.Kb) + 1].collidepoint(self.mouse_x, self.mouse_y):
                    self.Kb = self.boxLst[self.boxLst.index(self.Kb) + 1]
                    self.KingBlackClicked = 0
                    self.turn = "white"
            if self.Kb.x > self.box1.x:
                if self.boxLst[self.boxLst.index(self.Kb) - 1].collidepoint(self.mouse_x, self.mouse_y):
                    self.Kb = self.boxLst[self.boxLst.index(self.Kb) - 1]
                    self.KingBlackClicked = 0
                    self.turn = "white"
            if self.Kb.y < self.box57.y:
                if self.Kb.x > self.box1.x:
                    if self.boxLst[self.boxLst.index(self.Kb) + 8 - 1].collidepoint(self.mouse_x, self.mouse_y):
                        self.Kb = self.boxLst[self.boxLst.index(self.Kb) + 8 - 1]
                        self.KingBlackClicked = 0
                        self.turn = "white"
            if self.Kb.y < self.box57.y:
                if self.boxLst[self.boxLst.index(self.Kb) + 8].collidepoint(self.mouse_x, self.mouse_y):
                    self.Kb = self.boxLst[self.boxLst.index(self.Kb) + 8]
                    self.KingBlackClicked = 0
                    self.turn = "white"
            if self.Kb.y < self.box57.y:
                if self.Kb.x < self.box8.x:
                    if self.boxLst[self.boxLst.index(self.Kb) + 8 + 1].collidepoint(self.mouse_x, self.mouse_y):
                        self.Kb = self.boxLst[self.boxLst.index(self.Kb) + 8 + 1]
                        self.KingBlackClicked = 0
                        self.turn = "white"
            if self.Kb.y > self.box1.y:
                if self.Kb.x > self.box1.x:
                    if self.boxLst[self.boxLst.index(self.Kb) - 8 - 1].collidepoint(self.mouse_x, self.mouse_y):
                        self.Kb = self.boxLst[self.boxLst.index(self.Kb) - 8 - 1]
                        self.KingBlackClicked = 0
                        self.turn = "white"
                if self.boxLst[self.boxLst.index(self.Kb) - 8].collidepoint(self.mouse_x, self.mouse_y):
                    self.Kb = self.boxLst[self.boxLst.index(self.Kb) - 8]
                    self.KingBlackClicked = 0
                    self.turn = "white"
                if self.Kb.x < self.box8.x:
                    if self.boxLst[self.boxLst.index(self.Kb) - 8 + 1].collidepoint(self.mouse_x, self.mouse_y):
                        self.Kb = self.boxLst[self.boxLst.index(self.Kb) - 8 + 1]
                        self.KingBlackClicked = 0
                        self.turn = "white"

    def knightB1Movements(self):
        for event in pygame.event.get():
            if event.type == MOUSEBUTTONDOWN:
                self.mouse_x, self.mouse_y = pygame.mouse.get_pos()

        # knight 1
        def drawRect_plus16_plusOne():
            if not self.boxLst[self.boxLst.index(self.kb1) + 16 + 1].colliderect(self.pw1) and not \
                    self.boxLst[self.boxLst.index(self.kb1) + 16 + 1].colliderect(self.pw2) and not \
                    self.boxLst[self.boxLst.index(self.kb1) + 16 + 1].colliderect(self.pw3) and not \
                    self.boxLst[self.boxLst.index(self.kb1) + 16 + 1].colliderect(self.pw4) and not \
                    self.boxLst[self.boxLst.index(self.kb1) + 16 + 1].colliderect(self.pw5) and not \
                    self.boxLst[self.boxLst.index(self.kb1) + 16 + 1].colliderect(self.pw6) and not \
                    self.boxLst[self.boxLst.index(self.kb1) + 16 + 1].colliderect(self.pw7) and not \
                    self.boxLst[self.boxLst.index(self.kb1) + 16 + 1].colliderect(self.pw8) and not \
                    self.boxLst[self.boxLst.index(self.kb1) + 16 + 1].colliderect(self.Kw) and not \
                    self.boxLst[self.boxLst.index(self.kb1) + 16 + 1].colliderect(self.Qw) and not \
                    self.boxLst[self.boxLst.index(self.kb1) + 16 + 1].colliderect(self.rw1) and not \
                    self.boxLst[self.boxLst.index(self.kb1) + 16 + 1].colliderect(self.rw2) and not \
                    self.boxLst[self.boxLst.index(self.kb1) + 16 + 1].colliderect(self.kw1) and not \
                    self.boxLst[self.boxLst.index(self.kb1) + 16 + 1].colliderect(self.kw2) and not \
                    self.boxLst[self.boxLst.index(self.kb1) + 16 + 1].colliderect(self.bw1) and not \
                    self.boxLst[self.boxLst.index(self.kb1) + 16 + 1].colliderect(self.bw2) and not \
                    self.boxLst[self.boxLst.index(self.kb1) + 16 + 1].colliderect(self.pb2) and not \
                    self.boxLst[self.boxLst.index(self.kb1) + 16 + 1].colliderect(self.pb3) and not \
                    self.boxLst[self.boxLst.index(self.kb1) + 16 + 1].colliderect(self.pb4) and not \
                    self.boxLst[self.boxLst.index(self.kb1) + 16 + 1].colliderect(self.pb5) and not \
                    self.boxLst[self.boxLst.index(self.kb1) + 16 + 1].colliderect(self.pb6) and not \
                    self.boxLst[self.boxLst.index(self.kb1) + 16 + 1].colliderect(self.pb7) and not \
                    self.boxLst[self.boxLst.index(self.kb1) + 16 + 1].colliderect(self.pb8) and not \
                    self.boxLst[self.boxLst.index(self.kb1) + 16 + 1].colliderect(self.Kb) and not \
                    self.boxLst[self.boxLst.index(self.kb1) + 16 + 1].colliderect(self.Qb) and not \
                    self.boxLst[self.boxLst.index(self.kb1) + 16 + 1].colliderect(self.rb1) and not \
                    self.boxLst[self.boxLst.index(self.kb1) + 16 + 1].colliderect(self.rb2) and not \
                    self.boxLst[self.boxLst.index(self.kb1) + 16 + 1].colliderect(self.pb1) and not \
                    self.boxLst[self.boxLst.index(self.kb1) + 16 + 1].colliderect(self.kb2) and not \
                    self.boxLst[self.boxLst.index(self.kb1) + 16 + 1].colliderect(self.bb1) and not \
                    self.boxLst[self.boxLst.index(self.kb1) + 16 + 1].colliderect(self.bb2):
                pygame.draw.rect(self.window, self.blue, self.boxLst[self.boxLst.index(self.kb1) + 16 + 1], border_radius=100)
                self.knightBlack1Clicked = 1
                self.pawnBlack1Clicked = 0
                self.pawnBlack2Clicked = 0
                self.pawnBlack3Clicked = 0
                self.pawnBlack4Clicked = 0
                self.pawnBlack5Clicked = 0
                self.pawnBlack6Clicked = 0
                self.pawnBlack7Clicked = 0
                self.pawnBlack8Clicked = 0
                self.KingBlackClicked = 0
                self.knightBlack2Clicked = 0
                self.rookBlack1Clicked = 0
                self.rookBlack2Clicked = 0
                self.bishopBlack1Clicked = 0
                self.bishopBlack2Clicked = 0
                self.QueenBlackClicked = 0

        def drawRect_plus16_minusOne():
            if not self.boxLst[self.boxLst.index(self.kb1) + 16 - 1].colliderect(self.pw1) and not \
                    self.boxLst[self.boxLst.index(self.kb1) + 16 - 1].colliderect(self.pw2) and not \
                    self.boxLst[self.boxLst.index(self.kb1) + 16 - 1].colliderect(self.pw3) and not \
                    self.boxLst[self.boxLst.index(self.kb1) + 16 - 1].colliderect(self.pw4) and not \
                    self.boxLst[self.boxLst.index(self.kb1) + 16 - 1].colliderect(self.pw5) and not \
                    self.boxLst[self.boxLst.index(self.kb1) + 16 - 1].colliderect(self.pw6) and not \
                    self.boxLst[self.boxLst.index(self.kb1) + 16 - 1].colliderect(self.pw7) and not \
                    self.boxLst[self.boxLst.index(self.kb1) + 16 - 1].colliderect(self.pw8) and not \
                    self.boxLst[self.boxLst.index(self.kb1) + 16 - 1].colliderect(self.Kw) and not \
                    self.boxLst[self.boxLst.index(self.kb1) + 16 - 1].colliderect(self.Qw) and not \
                    self.boxLst[self.boxLst.index(self.kb1) + 16 - 1].colliderect(self.rw1) and not \
                    self.boxLst[self.boxLst.index(self.kb1) + 16 - 1].colliderect(self.rw2) and not \
                    self.boxLst[self.boxLst.index(self.kb1) + 16 - 1].colliderect(self.kw1) and not \
                    self.boxLst[self.boxLst.index(self.kb1) + 16 - 1].colliderect(self.kw2) and not \
                    self.boxLst[self.boxLst.index(self.kb1) + 16 - 1].colliderect(self.bw1) and not \
                    self.boxLst[self.boxLst.index(self.kb1) + 16 - 1].colliderect(self.bw2) and not \
                    self.boxLst[self.boxLst.index(self.kb1) + 16 - 1].colliderect(self.pb2) and not \
                    self.boxLst[self.boxLst.index(self.kb1) + 16 - 1].colliderect(self.pb3) and not \
                    self.boxLst[self.boxLst.index(self.kb1) + 16 - 1].colliderect(self.pb4) and not \
                    self.boxLst[self.boxLst.index(self.kb1) + 16 - 1].colliderect(self.pb5) and not \
                    self.boxLst[self.boxLst.index(self.kb1) + 16 - 1].colliderect(self.pb6) and not \
                    self.boxLst[self.boxLst.index(self.kb1) + 16 - 1].colliderect(self.pb7) and not \
                    self.boxLst[self.boxLst.index(self.kb1) + 16 - 1].colliderect(self.pb8) and not \
                    self.boxLst[self.boxLst.index(self.kb1) + 16 - 1].colliderect(self.Kb) and not \
                    self.boxLst[self.boxLst.index(self.kb1) + 16 - 1].colliderect(self.Qb) and not \
                    self.boxLst[self.boxLst.index(self.kb1) + 16 - 1].colliderect(self.rb1) and not \
                    self.boxLst[self.boxLst.index(self.kb1) + 16 - 1].colliderect(self.rb2) and not \
                    self.boxLst[self.boxLst.index(self.kb1) + 16 - 1].colliderect(self.pb1) and not \
                    self.boxLst[self.boxLst.index(self.kb1) + 16 - 1].colliderect(self.kb2) and not \
                    self.boxLst[self.boxLst.index(self.kb1) + 16 - 1].colliderect(self.bb1) and not \
                    self.boxLst[self.boxLst.index(self.kb1) + 16 - 1].colliderect(self.bb2):
                pygame.draw.rect(self.window, self.blue, self.boxLst[self.boxLst.index(self.kb1) + 16 - 1], border_radius=100)
                self.knightBlack1Clicked = 1
                self.pawnBlack1Clicked = 0
                self.pawnBlack2Clicked = 0
                self.pawnBlack3Clicked = 0
                self.pawnBlack4Clicked = 0
                self.pawnBlack5Clicked = 0
                self.pawnBlack6Clicked = 0
                self.pawnBlack7Clicked = 0
                self.pawnBlack8Clicked = 0
                self.KingBlackClicked = 0
                self.knightBlack2Clicked = 0
                self.rookBlack1Clicked = 0
                self.rookBlack2Clicked = 0
                self.bishopBlack1Clicked = 0
                self.bishopBlack2Clicked = 0
                self.QueenBlackClicked = 0

        def drawRect_minus16_plusOne():
            if not self.boxLst[self.boxLst.index(self.kb1) - 16 + 1].colliderect(self.pw1) and not \
                    self.boxLst[self.boxLst.index(self.kb1) - 16 + 1].colliderect(self.pw2) and not \
                    self.boxLst[self.boxLst.index(self.kb1) - 16 + 1].colliderect(self.pw3) and not \
                    self.boxLst[self.boxLst.index(self.kb1) - 16 + 1].colliderect(self.pw4) and not \
                    self.boxLst[self.boxLst.index(self.kb1) - 16 + 1].colliderect(self.pw5) and not \
                    self.boxLst[self.boxLst.index(self.kb1) - 16 + 1].colliderect(self.pw6) and not \
                    self.boxLst[self.boxLst.index(self.kb1) - 16 + 1].colliderect(self.pw7) and not \
                    self.boxLst[self.boxLst.index(self.kb1) - 16 + 1].colliderect(self.pw8) and not \
                    self.boxLst[self.boxLst.index(self.kb1) - 16 + 1].colliderect(self.Kw) and not \
                    self.boxLst[self.boxLst.index(self.kb1) - 16 + 1].colliderect(self.Qw) and not \
                    self.boxLst[self.boxLst.index(self.kb1) - 16 + 1].colliderect(self.rw1) and not \
                    self.boxLst[self.boxLst.index(self.kb1) - 16 + 1].colliderect(self.rw2) and not \
                    self.boxLst[self.boxLst.index(self.kb1) - 16 + 1].colliderect(self.kw1) and not \
                    self.boxLst[self.boxLst.index(self.kb1) - 16 + 1].colliderect(self.kw2) and not \
                    self.boxLst[self.boxLst.index(self.kb1) - 16 + 1].colliderect(self.bw1) and not \
                    self.boxLst[self.boxLst.index(self.kb1) - 16 + 1].colliderect(self.bw2) and not \
                    self.boxLst[self.boxLst.index(self.kb1) - 16 + 1].colliderect(self.pb2) and not \
                    self.boxLst[self.boxLst.index(self.kb1) - 16 + 1].colliderect(self.pb3) and not \
                    self.boxLst[self.boxLst.index(self.kb1) - 16 + 1].colliderect(self.pb4) and not \
                    self.boxLst[self.boxLst.index(self.kb1) - 16 + 1].colliderect(self.pb5) and not \
                    self.boxLst[self.boxLst.index(self.kb1) - 16 + 1].colliderect(self.pb6) and not \
                    self.boxLst[self.boxLst.index(self.kb1) - 16 + 1].colliderect(self.pb7) and not \
                    self.boxLst[self.boxLst.index(self.kb1) - 16 + 1].colliderect(self.pb8) and not \
                    self.boxLst[self.boxLst.index(self.kb1) - 16 + 1].colliderect(self.Kb) and not \
                    self.boxLst[self.boxLst.index(self.kb1) - 16 + 1].colliderect(self.Qb) and not \
                    self.boxLst[self.boxLst.index(self.kb1) - 16 + 1].colliderect(self.rb1) and not \
                    self.boxLst[self.boxLst.index(self.kb1) - 16 + 1].colliderect(self.rb2) and not \
                    self.boxLst[self.boxLst.index(self.kb1) - 16 + 1].colliderect(self.pb1) and not \
                    self.boxLst[self.boxLst.index(self.kb1) - 16 + 1].colliderect(self.kb2) and not \
                    self.boxLst[self.boxLst.index(self.kb1) - 16 + 1].colliderect(self.bb1) and not \
                    self.boxLst[self.boxLst.index(self.kb1) - 16 + 1].colliderect(self.bb2):
                pygame.draw.rect(self.window, self.blue, self.boxLst[self.boxLst.index(self.kb1) - 16 + 1], border_radius=100)
                self.knightBlack1Clicked = 1
                self.pawnBlack1Clicked = 0
                self.pawnBlack2Clicked = 0
                self.pawnBlack3Clicked = 0
                self.pawnBlack4Clicked = 0
                self.pawnBlack5Clicked = 0
                self.pawnBlack6Clicked = 0
                self.pawnBlack7Clicked = 0
                self.pawnBlack8Clicked = 0
                self.KingBlackClicked = 0
                self.knightBlack2Clicked = 0
                self.rookBlack1Clicked = 0
                self.rookBlack2Clicked = 0
                self.bishopBlack1Clicked = 0
                self.bishopBlack2Clicked = 0
                self.QueenBlackClicked = 0

        def drawRect_minus16_minusOne():
            if not self.boxLst[self.boxLst.index(self.kb1) - 16 - 1].colliderect(self.pw1) and not \
                    self.boxLst[self.boxLst.index(self.kb1) - 16 - 1].colliderect(self.pw2) and not \
                    self.boxLst[self.boxLst.index(self.kb1) - 16 - 1].colliderect(self.pw3) and not \
                    self.boxLst[self.boxLst.index(self.kb1) - 16 - 1].colliderect(self.pw4) and not \
                    self.boxLst[self.boxLst.index(self.kb1) - 16 - 1].colliderect(self.pw5) and not \
                    self.boxLst[self.boxLst.index(self.kb1) - 16 - 1].colliderect(self.pw6) and not \
                    self.boxLst[self.boxLst.index(self.kb1) - 16 - 1].colliderect(self.pw7) and not \
                    self.boxLst[self.boxLst.index(self.kb1) - 16 - 1].colliderect(self.pw8) and not \
                    self.boxLst[self.boxLst.index(self.kb1) - 16 - 1].colliderect(self.Kw) and not \
                    self.boxLst[self.boxLst.index(self.kb1) - 16 - 1].colliderect(self.Qw) and not \
                    self.boxLst[self.boxLst.index(self.kb1) - 16 - 1].colliderect(self.rw1) and not \
                    self.boxLst[self.boxLst.index(self.kb1) - 16 - 1].colliderect(self.rw2) and not \
                    self.boxLst[self.boxLst.index(self.kb1) - 16 - 1].colliderect(self.kw1) and not \
                    self.boxLst[self.boxLst.index(self.kb1) - 16 - 1].colliderect(self.kw2) and not \
                    self.boxLst[self.boxLst.index(self.kb1) - 16 - 1].colliderect(self.bw1) and not \
                    self.boxLst[self.boxLst.index(self.kb1) - 16 - 1].colliderect(self.bw2) and not \
                    self.boxLst[self.boxLst.index(self.kb1) - 16 - 1].colliderect(self.pb2) and not \
                    self.boxLst[self.boxLst.index(self.kb1) - 16 - 1].colliderect(self.pb3) and not \
                    self.boxLst[self.boxLst.index(self.kb1) - 16 - 1].colliderect(self.pb4) and not \
                    self.boxLst[self.boxLst.index(self.kb1) - 16 - 1].colliderect(self.pb5) and not \
                    self.boxLst[self.boxLst.index(self.kb1) - 16 - 1].colliderect(self.pb6) and not \
                    self.boxLst[self.boxLst.index(self.kb1) - 16 - 1].colliderect(self.pb7) and not \
                    self.boxLst[self.boxLst.index(self.kb1) - 16 - 1].colliderect(self.pb8) and not \
                    self.boxLst[self.boxLst.index(self.kb1) - 16 - 1].colliderect(self.Kb) and not \
                    self.boxLst[self.boxLst.index(self.kb1) - 16 - 1].colliderect(self.Qb) and not \
                    self.boxLst[self.boxLst.index(self.kb1) - 16 - 1].colliderect(self.rb1) and not \
                    self.boxLst[self.boxLst.index(self.kb1) - 16 - 1].colliderect(self.rb2) and not \
                    self.boxLst[self.boxLst.index(self.kb1) - 16 - 1].colliderect(self.pb1) and not \
                    self.boxLst[self.boxLst.index(self.kb1) - 16 - 1].colliderect(self.kb2) and not \
                    self.boxLst[self.boxLst.index(self.kb1) - 16 - 1].colliderect(self.bb1) and not \
                    self.boxLst[self.boxLst.index(self.kb1) - 16 - 1].colliderect(self.bb2):
                pygame.draw.rect(self.window, self.blue, self.boxLst[self.boxLst.index(self.kb1) - 16 - 1], border_radius=100)
                self.knightBlack1Clicked = 1
                self.pawnBlack1Clicked = 0
                self.pawnBlack2Clicked = 0
                self.pawnBlack3Clicked = 0
                self.pawnBlack4Clicked = 0
                self.pawnBlack5Clicked = 0
                self.pawnBlack6Clicked = 0
                self.pawnBlack7Clicked = 0
                self.pawnBlack8Clicked = 0
                self.KingBlackClicked = 0
                self.knightBlack2Clicked = 0
                self.rookBlack1Clicked = 0
                self.rookBlack2Clicked = 0
                self.bishopBlack1Clicked = 0
                self.bishopBlack2Clicked = 0
                self.QueenBlackClicked = 0

        def drawRect_plusEight_plusTwo():
            if not self.boxLst[self.boxLst.index(self.kb1) + 8 + 2].colliderect(self.pw1) and not \
                    self.boxLst[self.boxLst.index(self.kb1) + 8 + 2].colliderect(self.pw2) and not \
                    self.boxLst[self.boxLst.index(self.kb1) + 8 + 2].colliderect(self.pw3) and not \
                    self.boxLst[self.boxLst.index(self.kb1) + 8 + 2].colliderect(self.pw4) and not \
                    self.boxLst[self.boxLst.index(self.kb1) + 8 + 2].colliderect(self.pw5) and not \
                    self.boxLst[self.boxLst.index(self.kb1) + 8 + 2].colliderect(self.pw6) and not \
                    self.boxLst[self.boxLst.index(self.kb1) + 8 + 2].colliderect(self.pw7) and not \
                    self.boxLst[self.boxLst.index(self.kb1) + 8 + 2].colliderect(self.pw8) and not \
                    self.boxLst[self.boxLst.index(self.kb1) + 8 + 2].colliderect(self.Kw) and not \
                    self.boxLst[self.boxLst.index(self.kb1) + 8 + 2].colliderect(self.Qw) and not \
                    self.boxLst[self.boxLst.index(self.kb1) + 8 + 2].colliderect(self.rw1) and not \
                    self.boxLst[self.boxLst.index(self.kb1) + 8 + 2].colliderect(self.rw2) and not \
                    self.boxLst[self.boxLst.index(self.kb1) + 8 + 2].colliderect(self.kw1) and not \
                    self.boxLst[self.boxLst.index(self.kb1) + 8 + 2].colliderect(self.kw2) and not \
                    self.boxLst[self.boxLst.index(self.kb1) + 8 + 2].colliderect(self.bw1) and not \
                    self.boxLst[self.boxLst.index(self.kb1) + 8 + 2].colliderect(self.bw2) and not \
                    self.boxLst[self.boxLst.index(self.kb1) + 8 + 2].colliderect(self.pb2) and not \
                    self.boxLst[self.boxLst.index(self.kb1) + 8 + 2].colliderect(self.pb3) and not \
                    self.boxLst[self.boxLst.index(self.kb1) + 8 + 2].colliderect(self.pb4) and not \
                    self.boxLst[self.boxLst.index(self.kb1) + 8 + 2].colliderect(self.pb5) and not \
                    self.boxLst[self.boxLst.index(self.kb1) + 8 + 2].colliderect(self.pb6) and not \
                    self.boxLst[self.boxLst.index(self.kb1) + 8 + 2].colliderect(self.pb7) and not \
                    self.boxLst[self.boxLst.index(self.kb1) + 8 + 2].colliderect(self.pb8) and not \
                    self.boxLst[self.boxLst.index(self.kb1) + 8 + 2].colliderect(self.Kb) and not \
                    self.boxLst[self.boxLst.index(self.kb1) + 8 + 2].colliderect(self.Qb) and not \
                    self.boxLst[self.boxLst.index(self.kb1) + 8 + 2].colliderect(self.rb1) and not \
                    self.boxLst[self.boxLst.index(self.kb1) + 8 + 2].colliderect(self.rb2) and not \
                    self.boxLst[self.boxLst.index(self.kb1) + 8 + 2].colliderect(self.pb1) and not \
                    self.boxLst[self.boxLst.index(self.kb1) + 8 + 2].colliderect(self.kb2) and not \
                    self.boxLst[self.boxLst.index(self.kb1) + 8 + 2].colliderect(self.bb1) and not \
                    self.boxLst[self.boxLst.index(self.kb1) + 8 + 2].colliderect(self.bb2):
                pygame.draw.rect(self.window, self.blue, self.boxLst[self.boxLst.index(self.kb1) + 8 + 2], border_radius=100)
                self.knightBlack1Clicked = 1
                self.pawnBlack1Clicked = 0
                self.pawnBlack2Clicked = 0
                self.pawnBlack3Clicked = 0
                self.pawnBlack4Clicked = 0
                self.pawnBlack5Clicked = 0
                self.pawnBlack6Clicked = 0
                self.pawnBlack7Clicked = 0
                self.pawnBlack8Clicked = 0
                self.KingBlackClicked = 0
                self.knightBlack2Clicked = 0
                self.rookBlack1Clicked = 0
                self.rookBlack2Clicked = 0
                self.bishopBlack1Clicked = 0
                self.bishopBlack2Clicked = 0
                self.QueenBlackClicked = 0

        def drawRect_plusEight_minusTwo():
            if not self.boxLst[self.boxLst.index(self.kb1) + 8 - 2].colliderect(self.pw1) and not \
                    self.boxLst[self.boxLst.index(self.kb1) + 8 - 2].colliderect(self.pw2) and not \
                    self.boxLst[self.boxLst.index(self.kb1) + 8 - 2].colliderect(self.pw3) and not \
                    self.boxLst[self.boxLst.index(self.kb1) + 8 - 2].colliderect(self.pw4) and not \
                    self.boxLst[self.boxLst.index(self.kb1) + 8 - 2].colliderect(self.pw5) and not \
                    self.boxLst[self.boxLst.index(self.kb1) + 8 - 2].colliderect(self.pw6) and not \
                    self.boxLst[self.boxLst.index(self.kb1) + 8 - 2].colliderect(self.pw7) and not \
                    self.boxLst[self.boxLst.index(self.kb1) + 8 - 2].colliderect(self.pw8) and not \
                    self.boxLst[self.boxLst.index(self.kb1) + 8 - 2].colliderect(self.Kw) and not \
                    self.boxLst[self.boxLst.index(self.kb1) + 8 - 2].colliderect(self.Qw) and not \
                    self.boxLst[self.boxLst.index(self.kb1) + 8 - 2].colliderect(self.rw1) and not \
                    self.boxLst[self.boxLst.index(self.kb1) + 8 - 2].colliderect(self.rw2) and not \
                    self.boxLst[self.boxLst.index(self.kb1) + 8 - 2].colliderect(self.kw1) and not \
                    self.boxLst[self.boxLst.index(self.kb1) + 8 - 2].colliderect(self.kw2) and not \
                    self.boxLst[self.boxLst.index(self.kb1) + 8 - 2].colliderect(self.bw1) and not \
                    self.boxLst[self.boxLst.index(self.kb1) + 8 - 2].colliderect(self.bw2) and not \
                    self.boxLst[self.boxLst.index(self.kb1) + 8 - 2].colliderect(self.pb2) and not \
                    self.boxLst[self.boxLst.index(self.kb1) + 8 - 2].colliderect(self.pb3) and not \
                    self.boxLst[self.boxLst.index(self.kb1) + 8 - 2].colliderect(self.pb4) and not \
                    self.boxLst[self.boxLst.index(self.kb1) + 8 - 2].colliderect(self.pb5) and not \
                    self.boxLst[self.boxLst.index(self.kb1) + 8 - 2].colliderect(self.pb6) and not \
                    self.boxLst[self.boxLst.index(self.kb1) + 8 - 2].colliderect(self.pb7) and not \
                    self.boxLst[self.boxLst.index(self.kb1) + 8 - 2].colliderect(self.pb8) and not \
                    self.boxLst[self.boxLst.index(self.kb1) + 8 - 2].colliderect(self.Kb) and not \
                    self.boxLst[self.boxLst.index(self.kb1) + 8 - 2].colliderect(self.Qb) and not \
                    self.boxLst[self.boxLst.index(self.kb1) + 8 - 2].colliderect(self.rb1) and not \
                    self.boxLst[self.boxLst.index(self.kb1) + 8 - 2].colliderect(self.rb2) and not \
                    self.boxLst[self.boxLst.index(self.kb1) + 8 - 2].colliderect(self.pb1) and not \
                    self.boxLst[self.boxLst.index(self.kb1) + 8 - 2].colliderect(self.kb2) and not \
                    self.boxLst[self.boxLst.index(self.kb1) + 8 - 2].colliderect(self.bb1) and not \
                    self.boxLst[self.boxLst.index(self.kb1) + 8 - 2].colliderect(self.bb2):
                pygame.draw.rect(self.window, self.blue, self.boxLst[self.boxLst.index(self.kb1) + 8 - 2], border_radius=100)
                self.knightBlack1Clicked = 1
                self.pawnBlack1Clicked = 0
                self.pawnBlack2Clicked = 0
                self.pawnBlack3Clicked = 0
                self.pawnBlack4Clicked = 0
                self.pawnBlack5Clicked = 0
                self.pawnBlack6Clicked = 0
                self.pawnBlack7Clicked = 0
                self.pawnBlack8Clicked = 0
                self.KingBlackClicked = 0
                self.knightBlack2Clicked = 0
                self.rookBlack1Clicked = 0
                self.rookBlack2Clicked = 0
                self.bishopBlack1Clicked = 0
                self.bishopBlack2Clicked = 0
                self.QueenBlackClicked = 0

        def drawRect_minusEight_plusTwo():
            if not self.boxLst[self.boxLst.index(self.kb1) - 8 + 2].colliderect(self.pw1) and not \
                    self.boxLst[self.boxLst.index(self.kb1) - 8 + 2].colliderect(self.pw2) and not \
                    self.boxLst[self.boxLst.index(self.kb1) - 8 + 2].colliderect(self.pw3) and not \
                    self.boxLst[self.boxLst.index(self.kb1) - 8 + 2].colliderect(self.pw4) and not \
                    self.boxLst[self.boxLst.index(self.kb1) - 8 + 2].colliderect(self.pw5) and not \
                    self.boxLst[self.boxLst.index(self.kb1) - 8 + 2].colliderect(self.pw6) and not \
                    self.boxLst[self.boxLst.index(self.kb1) - 8 + 2].colliderect(self.pw7) and not \
                    self.boxLst[self.boxLst.index(self.kb1) - 8 + 2].colliderect(self.pw8) and not \
                    self.boxLst[self.boxLst.index(self.kb1) - 8 + 2].colliderect(self.Kw) and not \
                    self.boxLst[self.boxLst.index(self.kb1) - 8 + 2].colliderect(self.Qw) and not \
                    self.boxLst[self.boxLst.index(self.kb1) - 8 + 2].colliderect(self.rw1) and not \
                    self.boxLst[self.boxLst.index(self.kb1) - 8 + 2].colliderect(self.rw2) and not \
                    self.boxLst[self.boxLst.index(self.kb1) - 8 + 2].colliderect(self.kw1) and not \
                    self.boxLst[self.boxLst.index(self.kb1) - 8 + 2].colliderect(self.kw2) and not \
                    self.boxLst[self.boxLst.index(self.kb1) - 8 + 2].colliderect(self.bw1) and not \
                    self.boxLst[self.boxLst.index(self.kb1) - 8 + 2].colliderect(self.bw2) and not \
                    self.boxLst[self.boxLst.index(self.kb1) - 8 + 2].colliderect(self.pb2) and not \
                    self.boxLst[self.boxLst.index(self.kb1) - 8 + 2].colliderect(self.pb3) and not \
                    self.boxLst[self.boxLst.index(self.kb1) - 8 + 2].colliderect(self.pb4) and not \
                    self.boxLst[self.boxLst.index(self.kb1) - 8 + 2].colliderect(self.pb5) and not \
                    self.boxLst[self.boxLst.index(self.kb1) - 8 + 2].colliderect(self.pb6) and not \
                    self.boxLst[self.boxLst.index(self.kb1) - 8 + 2].colliderect(self.pb7) and not \
                    self.boxLst[self.boxLst.index(self.kb1) - 8 + 2].colliderect(self.pb8) and not \
                    self.boxLst[self.boxLst.index(self.kb1) - 8 + 2].colliderect(self.Kb) and not \
                    self.boxLst[self.boxLst.index(self.kb1) - 8 + 2].colliderect(self.Qb) and not \
                    self.boxLst[self.boxLst.index(self.kb1) - 8 + 2].colliderect(self.rb1) and not \
                    self.boxLst[self.boxLst.index(self.kb1) - 8 + 2].colliderect(self.rb2) and not \
                    self.boxLst[self.boxLst.index(self.kb1) - 8 + 2].colliderect(self.pb1) and not \
                    self.boxLst[self.boxLst.index(self.kb1) - 8 + 2].colliderect(self.kb2) and not \
                    self.boxLst[self.boxLst.index(self.kb1) - 8 + 2].colliderect(self.bb1) and not \
                    self.boxLst[self.boxLst.index(self.kb1) - 8 + 2].colliderect(self.bb2):
                pygame.draw.rect(self.window, self.blue, self.boxLst[self.boxLst.index(self.kb1) - 8 + 2], border_radius=100)
                self.knightBlack1Clicked = 1
                self.pawnBlack1Clicked = 0
                self.pawnBlack2Clicked = 0
                self.pawnBlack3Clicked = 0
                self.pawnBlack4Clicked = 0
                self.pawnBlack5Clicked = 0
                self.pawnBlack6Clicked = 0
                self.pawnBlack7Clicked = 0
                self.pawnBlack8Clicked = 0
                self.KingBlackClicked = 0
                self.knightBlack2Clicked = 0
                self.rookBlack1Clicked = 0
                self.rookBlack2Clicked = 0
                self.bishopBlack1Clicked = 0
                self.bishopBlack2Clicked = 0
                self.QueenBlackClicked = 0

        def drawRect_minusEight_minusTwo():
            if not self.boxLst[self.boxLst.index(self.kb1) - 8 - 2].colliderect(self.pw1) and not \
                    self.boxLst[self.boxLst.index(self.kb1) - 8 - 2].colliderect(self.pw2) and not \
                    self.boxLst[self.boxLst.index(self.kb1) - 8 - 2].colliderect(self.pw3) and not \
                    self.boxLst[self.boxLst.index(self.kb1) - 8 - 2].colliderect(self.pw4) and not \
                    self.boxLst[self.boxLst.index(self.kb1) - 8 - 2].colliderect(self.pw5) and not \
                    self.boxLst[self.boxLst.index(self.kb1) - 8 - 2].colliderect(self.pw6) and not \
                    self.boxLst[self.boxLst.index(self.kb1) - 8 - 2].colliderect(self.pw7) and not \
                    self.boxLst[self.boxLst.index(self.kb1) - 8 - 2].colliderect(self.pw8) and not \
                    self.boxLst[self.boxLst.index(self.kb1) - 8 - 2].colliderect(self.Kw) and not \
                    self.boxLst[self.boxLst.index(self.kb1) - 8 - 2].colliderect(self.Qw) and not \
                    self.boxLst[self.boxLst.index(self.kb1) - 8 - 2].colliderect(self.rw1) and not \
                    self.boxLst[self.boxLst.index(self.kb1) - 8 - 2].colliderect(self.rw2) and not \
                    self.boxLst[self.boxLst.index(self.kb1) - 8 - 2].colliderect(self.kw1) and not \
                    self.boxLst[self.boxLst.index(self.kb1) - 8 - 2].colliderect(self.kw2) and not \
                    self.boxLst[self.boxLst.index(self.kb1) - 8 - 2].colliderect(self.bw1) and not \
                    self.boxLst[self.boxLst.index(self.kb1) - 8 - 2].colliderect(self.bw2) and not \
                    self.boxLst[self.boxLst.index(self.kb1) - 8 - 2].colliderect(self.pb2) and not \
                    self.boxLst[self.boxLst.index(self.kb1) - 8 - 2].colliderect(self.pb3) and not \
                    self.boxLst[self.boxLst.index(self.kb1) - 8 - 2].colliderect(self.pb4) and not \
                    self.boxLst[self.boxLst.index(self.kb1) - 8 - 2].colliderect(self.pb5) and not \
                    self.boxLst[self.boxLst.index(self.kb1) - 8 - 2].colliderect(self.pb6) and not \
                    self.boxLst[self.boxLst.index(self.kb1) - 8 - 2].colliderect(self.pb7) and not \
                    self.boxLst[self.boxLst.index(self.kb1) - 8 - 2].colliderect(self.pb8) and not \
                    self.boxLst[self.boxLst.index(self.kb1) - 8 - 2].colliderect(self.Kb) and not \
                    self.boxLst[self.boxLst.index(self.kb1) - 8 - 2].colliderect(self.Qb) and not \
                    self.boxLst[self.boxLst.index(self.kb1) - 8 - 2].colliderect(self.rb1) and not \
                    self.boxLst[self.boxLst.index(self.kb1) - 8 - 2].colliderect(self.rb2) and not \
                    self.boxLst[self.boxLst.index(self.kb1) - 8 - 2].colliderect(self.pb1) and not \
                    self.boxLst[self.boxLst.index(self.kb1) - 8 - 2].colliderect(self.kb2) and not \
                    self.boxLst[self.boxLst.index(self.kb1) - 8 - 2].colliderect(self.bb1) and not \
                    self.boxLst[self.boxLst.index(self.kb1) - 8 - 2].colliderect(self.bb2):
                pygame.draw.rect(self.window, self.blue, self.boxLst[self.boxLst.index(self.kb1) - 8 - 2], border_radius=100)
                self.knightBlack1Clicked = 1
                self.pawnBlack1Clicked = 0
                self.pawnBlack2Clicked = 0
                self.pawnBlack3Clicked = 0
                self.pawnBlack4Clicked = 0
                self.pawnBlack5Clicked = 0
                self.pawnBlack6Clicked = 0
                self.pawnBlack7Clicked = 0
                self.pawnBlack8Clicked = 0
                self.KingBlackClicked = 0
                self.knightBlack2Clicked = 0
                self.rookBlack1Clicked = 0
                self.rookBlack2Clicked = 0
                self.bishopBlack1Clicked = 0
                self.bishopBlack2Clicked = 0
                self.QueenBlackClicked = 0

        if self.turn == "black":
            if self.kb1.collidepoint(self.mouse_x, self.mouse_y):
                if self.kb1.x < self.box8.x and self.kb1.y < self.box49.y:
                    drawRect_plus16_plusOne()
                if self.kb1.x > self.box1.x and self.kb1.y < self.box49.y:
                    drawRect_plus16_minusOne()
                if self.kb1.x < self.box8.x and self.kb1.y > self.box9.y:
                    drawRect_minus16_plusOne()
                if self.kb1.x > self.box1.x and self.kb1.y > self.box9.y:
                    drawRect_minus16_minusOne()
                if self.kb1.x < self.box7.x and self.kb1.y < self.box57.y:
                    drawRect_plusEight_plusTwo()
                if self.kb1.x > self.box2.x and self.kb1.y < self.box57.y:
                    drawRect_plusEight_minusTwo()
                if self.kb1.x < self.box7.x and self.kb1.y > self.box1.y:
                    drawRect_minusEight_plusTwo()
                if self.kb1.x > self.box2.x and self.kb1.y > self.box1.y:
                    drawRect_minusEight_minusTwo()

                if self.kb1.x < self.box8.x and self.kb1.y < self.box49.y:
                    if self.boxLst[self.boxLst.index(self.kb1) + 16 + 1].colliderect(self.pw1) or \
                            self.boxLst[self.boxLst.index(self.kb1) + 16 + 1].colliderect(self.pw2) or \
                            self.boxLst[self.boxLst.index(self.kb1) + 16 + 1].colliderect(self.pw3) or \
                            self.boxLst[self.boxLst.index(self.kb1) + 16 + 1].colliderect(self.pw4) or \
                            self.boxLst[self.boxLst.index(self.kb1) + 16 + 1].colliderect(self.pw5) or \
                            self.boxLst[self.boxLst.index(self.kb1) + 16 + 1].colliderect(self.pw6) or \
                            self.boxLst[self.boxLst.index(self.kb1) + 16 + 1].colliderect(self.pw7) or \
                            self.boxLst[self.boxLst.index(self.kb1) + 16 + 1].colliderect(self.pw8) or \
                            self.boxLst[self.boxLst.index(self.kb1) + 16 + 1].colliderect(self.Kw) or \
                            self.boxLst[self.boxLst.index(self.kb1) + 16 + 1].colliderect(self.Qw) or \
                            self.boxLst[self.boxLst.index(self.kb1) + 16 + 1].colliderect(self.rw1) or \
                            self.boxLst[self.boxLst.index(self.kb1) + 16 + 1].colliderect(self.rw2) or \
                            self.boxLst[self.boxLst.index(self.kb1) + 16 + 1].colliderect(self.kw1) or \
                            self.boxLst[self.boxLst.index(self.kb1) + 16 + 1].colliderect(self.kw2) or \
                            self.boxLst[self.boxLst.index(self.kb1) + 16 + 1].colliderect(self.bw1) or \
                            self.boxLst[self.boxLst.index(self.kb1) + 16 + 1].colliderect(self.bw2):
                        pygame.draw.rect(self.window, self.red, self.boxLst[self.boxLst.index(self.kb1) + 16 + 1], border_radius=100)
                        self.knightBlack1Clicked = 1
                        self.pawnBlack1Clicked = 0
                        self.pawnBlack2Clicked = 0
                        self.pawnBlack3Clicked = 0
                        self.pawnBlack4Clicked = 0
                        self.pawnBlack5Clicked = 0
                        self.pawnBlack6Clicked = 0
                        self.pawnBlack7Clicked = 0
                        self.pawnBlack8Clicked = 0
                        self.KingBlackClicked = 0
                        self.knightBlack2Clicked = 0
                        self.rookBlack1Clicked = 0
                        self.rookBlack2Clicked = 0
                        self.bishopBlack1Clicked = 0
                        self.bishopBlack2Clicked = 0
                        self.QueenBlackClicked = 0
                        self.knightBlack1Clicked_cut = 1
                if self.kb1.x > self.box1.x and self.kb1.y < self.box49.y:
                    if self.boxLst[self.boxLst.index(self.kb1) + 16 - 1].colliderect(self.pw1) or \
                            self.boxLst[self.boxLst.index(self.kb1) + 16 - 1].colliderect(self.pw2) or \
                            self.boxLst[self.boxLst.index(self.kb1) + 16 - 1].colliderect(self.pw3) or \
                            self.boxLst[self.boxLst.index(self.kb1) + 16 - 1].colliderect(self.pw4) or \
                            self.boxLst[self.boxLst.index(self.kb1) + 16 - 1].colliderect(self.pw5) or \
                            self.boxLst[self.boxLst.index(self.kb1) + 16 - 1].colliderect(self.pw6) or \
                            self.boxLst[self.boxLst.index(self.kb1) + 16 - 1].colliderect(self.pw7) or \
                            self.boxLst[self.boxLst.index(self.kb1) + 16 - 1].colliderect(self.pw8) or \
                            self.boxLst[self.boxLst.index(self.kb1) + 16 - 1].colliderect(self.Kw) or \
                            self.boxLst[self.boxLst.index(self.kb1) + 16 - 1].colliderect(self.Qw) or \
                            self.boxLst[self.boxLst.index(self.kb1) + 16 - 1].colliderect(self.rw1) or \
                            self.boxLst[self.boxLst.index(self.kb1) + 16 - 1].colliderect(self.rw2) or \
                            self.boxLst[self.boxLst.index(self.kb1) + 16 - 1].colliderect(self.kw1) or \
                            self.boxLst[self.boxLst.index(self.kb1) + 16 - 1].colliderect(self.kw2) or \
                            self.boxLst[self.boxLst.index(self.kb1) + 16 - 1].colliderect(self.bw1) or \
                            self.boxLst[self.boxLst.index(self.kb1) + 16 - 1].colliderect(self.bw2):
                        pygame.draw.rect(self.window, self.red, self.boxLst[self.boxLst.index(self.kb1) + 16 - 1], border_radius=100)
                        self.knightBlack1Clicked = 1
                        self.pawnBlack1Clicked = 0
                        self.pawnBlack2Clicked = 0
                        self.pawnBlack3Clicked = 0
                        self.pawnBlack4Clicked = 0
                        self.pawnBlack5Clicked = 0
                        self.pawnBlack6Clicked = 0
                        self.pawnBlack7Clicked = 0
                        self.pawnBlack8Clicked = 0
                        self.KingBlackClicked = 0
                        self.knightBlack2Clicked = 0
                        self.rookBlack1Clicked = 0
                        self.rookBlack2Clicked = 0
                        self.bishopBlack1Clicked = 0
                        self.bishopBlack2Clicked = 0
                        self.QueenBlackClicked = 0
                        self.knightBlack1Clicked_cut = 1
                if self.kb1.x < self.box8.x and self.kb1.y > self.box9.y:
                    if self.boxLst[self.boxLst.index(self.kb1) - 16 + 1].colliderect(self.pw1) or \
                            self.boxLst[self.boxLst.index(self.kb1) - 16 + 1].colliderect(self.pw2) or \
                            self.boxLst[self.boxLst.index(self.kb1) - 16 + 1].colliderect(self.pw3) or \
                            self.boxLst[self.boxLst.index(self.kb1) - 16 + 1].colliderect(self.pw4) or \
                            self.boxLst[self.boxLst.index(self.kb1) - 16 + 1].colliderect(self.pw5) or \
                            self.boxLst[self.boxLst.index(self.kb1) - 16 + 1].colliderect(self.pw6) or \
                            self.boxLst[self.boxLst.index(self.kb1) - 16 + 1].colliderect(self.pw7) or \
                            self.boxLst[self.boxLst.index(self.kb1) - 16 + 1].colliderect(self.pw8) or \
                            self.boxLst[self.boxLst.index(self.kb1) - 16 + 1].colliderect(self.Kw) or \
                            self.boxLst[self.boxLst.index(self.kb1) - 16 + 1].colliderect(self.Qw) or \
                            self.boxLst[self.boxLst.index(self.kb1) - 16 + 1].colliderect(self.rw1) or \
                            self.boxLst[self.boxLst.index(self.kb1) - 16 + 1].colliderect(self.rw2) or \
                            self.boxLst[self.boxLst.index(self.kb1) - 16 + 1].colliderect(self.kw1) or \
                            self.boxLst[self.boxLst.index(self.kb1) - 16 + 1].colliderect(self.kw2) or \
                            self.boxLst[self.boxLst.index(self.kb1) - 16 + 1].colliderect(self.bw1) or \
                            self.boxLst[self.boxLst.index(self.kb1) - 16 + 1].colliderect(self.bw2):
                        pygame.draw.rect(self.window, self.red, self.boxLst[self.boxLst.index(self.kb1) - 16 + 1], border_radius=100)
                        self.knightBlack1Clicked = 1
                        self.pawnBlack1Clicked = 0
                        self.pawnBlack2Clicked = 0
                        self.pawnBlack3Clicked = 0
                        self.pawnBlack4Clicked = 0
                        self.pawnBlack5Clicked = 0
                        self.pawnBlack6Clicked = 0
                        self.pawnBlack7Clicked = 0
                        self.pawnBlack8Clicked = 0
                        self.KingBlackClicked = 0
                        self.knightBlack2Clicked = 0
                        self.rookBlack1Clicked = 0
                        self.rookBlack2Clicked = 0
                        self.bishopBlack1Clicked = 0
                        self.bishopBlack2Clicked = 0
                        self.QueenBlackClicked = 0
                        self.knightBlack1Clicked_cut = 1
                if self.kb1.x > self.box1.x and self.kb1.y > self.box9.y:
                    if self.boxLst[self.boxLst.index(self.kb1) - 16 - 1].colliderect(self.pw1) or \
                            self.boxLst[self.boxLst.index(self.kb1) - 16 - 1].colliderect(self.pw2) or \
                            self.boxLst[self.boxLst.index(self.kb1) - 16 - 1].colliderect(self.pw3) or \
                            self.boxLst[self.boxLst.index(self.kb1) - 16 - 1].colliderect(self.pw4) or \
                            self.boxLst[self.boxLst.index(self.kb1) - 16 - 1].colliderect(self.pw5) or \
                            self.boxLst[self.boxLst.index(self.kb1) - 16 - 1].colliderect(self.pw6) or \
                            self.boxLst[self.boxLst.index(self.kb1) - 16 - 1].colliderect(self.pw7) or \
                            self.boxLst[self.boxLst.index(self.kb1) - 16 - 1].colliderect(self.pw8) or \
                            self.boxLst[self.boxLst.index(self.kb1) - 16 - 1].colliderect(self.Kw) or \
                            self.boxLst[self.boxLst.index(self.kb1) - 16 - 1].colliderect(self.Qw) or \
                            self.boxLst[self.boxLst.index(self.kb1) - 16 - 1].colliderect(self.rw1) or \
                            self.boxLst[self.boxLst.index(self.kb1) - 16 - 1].colliderect(self.rw2) or \
                            self.boxLst[self.boxLst.index(self.kb1) - 16 - 1].colliderect(self.kw1) or \
                            self.boxLst[self.boxLst.index(self.kb1) - 16 - 1].colliderect(self.kw2) or \
                            self.boxLst[self.boxLst.index(self.kb1) - 16 - 1].colliderect(self.bw1) or \
                            self.boxLst[self.boxLst.index(self.kb1) - 16 - 1].colliderect(self.bw2):
                        pygame.draw.rect(self.window, self.red, self.boxLst[self.boxLst.index(self.kb1) - 16 - 1], border_radius=100)
                        self.knightBlack1Clicked = 1
                        self.pawnBlack1Clicked = 0
                        self.pawnBlack2Clicked = 0
                        self.pawnBlack3Clicked = 0
                        self.pawnBlack4Clicked = 0
                        self.pawnBlack5Clicked = 0
                        self.pawnBlack6Clicked = 0
                        self.pawnBlack7Clicked = 0
                        self.pawnBlack8Clicked = 0
                        self.KingBlackClicked = 0
                        self.knightBlack2Clicked = 0
                        self.rookBlack1Clicked = 0
                        self.rookBlack2Clicked = 0
                        self.bishopBlack1Clicked = 0
                        self.bishopBlack2Clicked = 0
                        self.QueenBlackClicked = 0
                        self.knightBlack1Clicked_cut = 1
                if self.kb1.x < self.box7.x and self.kb1.y < self.box57.y:
                    if self.boxLst[self.boxLst.index(self.kb1) + 8 + 2].colliderect(self.pw1) or \
                            self.boxLst[self.boxLst.index(self.kb1) + 8 + 2].colliderect(self.pw2) or \
                            self.boxLst[self.boxLst.index(self.kb1) + 8 + 2].colliderect(self.pw3) or \
                            self.boxLst[self.boxLst.index(self.kb1) + 8 + 2].colliderect(self.pw4) or \
                            self.boxLst[self.boxLst.index(self.kb1) + 8 + 2].colliderect(self.pw5) or \
                            self.boxLst[self.boxLst.index(self.kb1) + 8 + 2].colliderect(self.pw6) or \
                            self.boxLst[self.boxLst.index(self.kb1) + 8 + 2].colliderect(self.pw7) or \
                            self.boxLst[self.boxLst.index(self.kb1) + 8 + 2].colliderect(self.pw8) or \
                            self.boxLst[self.boxLst.index(self.kb1) + 8 + 2].colliderect(self.Kw) or \
                            self.boxLst[self.boxLst.index(self.kb1) + 8 + 2].colliderect(self.Qw) or \
                            self.boxLst[self.boxLst.index(self.kb1) + 8 + 2].colliderect(self.rw1) or \
                            self.boxLst[self.boxLst.index(self.kb1) + 8 + 2].colliderect(self.rw2) or \
                            self.boxLst[self.boxLst.index(self.kb1) + 8 + 2].colliderect(self.kw1) or \
                            self.boxLst[self.boxLst.index(self.kb1) + 8 + 2].colliderect(self.kw2) or \
                            self.boxLst[self.boxLst.index(self.kb1) + 8 + 2].colliderect(self.bw1) or \
                            self.boxLst[self.boxLst.index(self.kb1) + 8 + 2].colliderect(self.bw2):
                        pygame.draw.rect(self.window, self.red, self.boxLst[self.boxLst.index(self.kb1) + 8 + 2], border_radius=100)
                        self.knightBlack1Clicked = 1
                        self.pawnBlack1Clicked = 0
                        self.pawnBlack2Clicked = 0
                        self.pawnBlack3Clicked = 0
                        self.pawnBlack4Clicked = 0
                        self.pawnBlack5Clicked = 0
                        self.pawnBlack6Clicked = 0
                        self.pawnBlack7Clicked = 0
                        self.pawnBlack8Clicked = 0
                        self.KingBlackClicked = 0
                        self.knightBlack2Clicked = 0
                        self.rookBlack1Clicked = 0
                        self.rookBlack2Clicked = 0
                        self.bishopBlack1Clicked = 0
                        self.bishopBlack2Clicked = 0
                        self.QueenBlackClicked = 0
                        self.knightBlack1Clicked_cut = 1
                if self.kb1.x > self.box2.x and self.kb1.y < self.box57.y:
                    if self.boxLst[self.boxLst.index(self.kb1) + 8 - 2].colliderect(self.pw1) or \
                            self.boxLst[self.boxLst.index(self.kb1) + 8 - 2].colliderect(self.pw2) or \
                            self.boxLst[self.boxLst.index(self.kb1) + 8 - 2].colliderect(self.pw3) or \
                            self.boxLst[self.boxLst.index(self.kb1) + 8 - 2].colliderect(self.pw4) or \
                            self.boxLst[self.boxLst.index(self.kb1) + 8 - 2].colliderect(self.pw5) or \
                            self.boxLst[self.boxLst.index(self.kb1) + 8 - 2].colliderect(self.pw6) or \
                            self.boxLst[self.boxLst.index(self.kb1) + 8 - 2].colliderect(self.pw7) or \
                            self.boxLst[self.boxLst.index(self.kb1) + 8 - 2].colliderect(self.pw8) or \
                            self.boxLst[self.boxLst.index(self.kb1) + 8 - 2].colliderect(self.Kw) or \
                            self.boxLst[self.boxLst.index(self.kb1) + 8 - 2].colliderect(self.Qw) or \
                            self.boxLst[self.boxLst.index(self.kb1) + 8 - 2].colliderect(self.rw1) or \
                            self.boxLst[self.boxLst.index(self.kb1) + 8 - 2].colliderect(self.rw2) or \
                            self.boxLst[self.boxLst.index(self.kb1) + 8 - 2].colliderect(self.kw1) or \
                            self.boxLst[self.boxLst.index(self.kb1) + 8 - 2].colliderect(self.kw2) or \
                            self.boxLst[self.boxLst.index(self.kb1) + 8 - 2].colliderect(self.bw1) or \
                            self.boxLst[self.boxLst.index(self.kb1) + 8 - 2].colliderect(self.bw2):
                        pygame.draw.rect(self.window, self.red, self.boxLst[self.boxLst.index(self.kb1) + 8 - 2], border_radius=100)
                        self.knightBlack1Clicked = 1
                        self.pawnBlack1Clicked = 0
                        self.pawnBlack2Clicked = 0
                        self.pawnBlack3Clicked = 0
                        self.pawnBlack4Clicked = 0
                        self.pawnBlack5Clicked = 0
                        self.pawnBlack6Clicked = 0
                        self.pawnBlack7Clicked = 0
                        self.pawnBlack8Clicked = 0
                        self.KingBlackClicked = 0
                        self.knightBlack2Clicked = 0
                        self.rookBlack1Clicked = 0
                        self.rookBlack2Clicked = 0
                        self.bishopBlack1Clicked = 0
                        self.bishopBlack2Clicked = 0
                        self.QueenBlackClicked = 0
                        self.knightBlack1Clicked_cut = 1
                if self.kb1.x < self.box7.x and self.kb1.y > self.box1.y:
                    if self.boxLst[self.boxLst.index(self.kb1) - 8 + 2].colliderect(self.pw1) or \
                            self.boxLst[self.boxLst.index(self.kb1) - 8 + 2].colliderect(self.pw2) or \
                            self.boxLst[self.boxLst.index(self.kb1) - 8 + 2].colliderect(self.pw3) or \
                            self.boxLst[self.boxLst.index(self.kb1) - 8 + 2].colliderect(self.pw4) or \
                            self.boxLst[self.boxLst.index(self.kb1) - 8 + 2].colliderect(self.pw5) or \
                            self.boxLst[self.boxLst.index(self.kb1) - 8 + 2].colliderect(self.pw6) or \
                            self.boxLst[self.boxLst.index(self.kb1) - 8 + 2].colliderect(self.pw7) or \
                            self.boxLst[self.boxLst.index(self.kb1) - 8 + 2].colliderect(self.pw8) or \
                            self.boxLst[self.boxLst.index(self.kb1) - 8 + 2].colliderect(self.Kw) or \
                            self.boxLst[self.boxLst.index(self.kb1) - 8 + 2].colliderect(self.Qw) or \
                            self.boxLst[self.boxLst.index(self.kb1) - 8 + 2].colliderect(self.rw1) or \
                            self.boxLst[self.boxLst.index(self.kb1) - 8 + 2].colliderect(self.rw2) or \
                            self.boxLst[self.boxLst.index(self.kb1) - 8 + 2].colliderect(self.kw1) or \
                            self.boxLst[self.boxLst.index(self.kb1) - 8 + 2].colliderect(self.kw2) or \
                            self.boxLst[self.boxLst.index(self.kb1) - 8 + 2].colliderect(self.bw1) or \
                            self.boxLst[self.boxLst.index(self.kb1) - 8 + 2].colliderect(self.bw2):
                        pygame.draw.rect(self.window, self.red, self.boxLst[self.boxLst.index(self.kb1) - 8 + 2], border_radius=100)
                        self.knightBlack1Clicked = 1
                        self.pawnBlack1Clicked = 0
                        self.pawnBlack2Clicked = 0
                        self.pawnBlack3Clicked = 0
                        self.pawnBlack4Clicked = 0
                        self.pawnBlack5Clicked = 0
                        self.pawnBlack6Clicked = 0
                        self.pawnBlack7Clicked = 0
                        self.pawnBlack8Clicked = 0
                        self.KingBlackClicked = 0
                        self.knightBlack2Clicked = 0
                        self.rookBlack1Clicked = 0
                        self.rookBlack2Clicked = 0
                        self.bishopBlack1Clicked = 0
                        self.bishopBlack2Clicked = 0
                        self.QueenBlackClicked = 0
                        self.knightBlack1Clicked_cut = 1
                if self.kb1.x > self.box2.x and self.kb1.y > self.box1.y:
                    if self.boxLst[self.boxLst.index(self.kb1) - 8 - 2].colliderect(self.pw1) or \
                            self.boxLst[self.boxLst.index(self.kb1) - 8 - 2].colliderect(self.pw2) or \
                            self.boxLst[self.boxLst.index(self.kb1) - 8 - 2].colliderect(self.pw3) or \
                            self.boxLst[self.boxLst.index(self.kb1) - 8 - 2].colliderect(self.pw4) or \
                            self.boxLst[self.boxLst.index(self.kb1) - 8 - 2].colliderect(self.pw5) or \
                            self.boxLst[self.boxLst.index(self.kb1) - 8 - 2].colliderect(self.pw6) or \
                            self.boxLst[self.boxLst.index(self.kb1) - 8 - 2].colliderect(self.pw7) or \
                            self.boxLst[self.boxLst.index(self.kb1) - 8 - 2].colliderect(self.pw8) or \
                            self.boxLst[self.boxLst.index(self.kb1) - 8 - 2].colliderect(self.Kw) or \
                            self.boxLst[self.boxLst.index(self.kb1) - 8 - 2].colliderect(self.Qw) or \
                            self.boxLst[self.boxLst.index(self.kb1) - 8 - 2].colliderect(self.rw1) or \
                            self.boxLst[self.boxLst.index(self.kb1) - 8 - 2].colliderect(self.rw2) or \
                            self.boxLst[self.boxLst.index(self.kb1) - 8 - 2].colliderect(self.kw1) or \
                            self.boxLst[self.boxLst.index(self.kb1) - 8 - 2].colliderect(self.kw2) or \
                            self.boxLst[self.boxLst.index(self.kb1) - 8 - 2].colliderect(self.bw1) or \
                            self.boxLst[self.boxLst.index(self.kb1) - 8 - 2].colliderect(self.bw2):
                        pygame.draw.rect(self.window, self.red, self.boxLst[self.boxLst.index(self.kb1) - 8 - 2], border_radius=100)
                        self.knightBlack1Clicked = 1
                        self.pawnBlack1Clicked = 0
                        self.pawnBlack2Clicked = 0
                        self.pawnBlack3Clicked = 0
                        self.pawnBlack4Clicked = 0
                        self.pawnBlack5Clicked = 0
                        self.pawnBlack6Clicked = 0
                        self.pawnBlack7Clicked = 0
                        self.pawnBlack8Clicked = 0
                        self.KingBlackClicked = 0
                        self.knightBlack2Clicked = 0
                        self.rookBlack1Clicked = 0
                        self.rookBlack2Clicked = 0
                        self.bishopBlack1Clicked = 0
                        self.bishopBlack2Clicked = 0
                        self.QueenBlackClicked = 0
                        self.knightBlack1Clicked_cut = 1

        if self.knightBlack1Clicked == 1:
            # cut white pieces
            if self.knightBlack1Clicked_cut == 1:
                if self.kb1.x > self.box1.x and self.kb1.y < self.box49.y:
                    if self.boxLst[self.boxLst.index(self.kb1) + 16 - 1].collidepoint(self.mouse_x, self.mouse_y):
                        if self.boxLst[self.boxLst.index(self.kb1) + 16 - 1].colliderect(self.pw1):
                            self.pw1 = self.whiteCutPiece_1
                        if self.boxLst[self.boxLst.index(self.kb1) + 16 - 1].colliderect(self.pw2):
                            self.pw2 = self.whiteCutPiece_2
                        if self.boxLst[self.boxLst.index(self.kb1) + 16 - 1].colliderect(self.pw3):
                            self.pw3 = self.whiteCutPiece_3
                        if self.boxLst[self.boxLst.index(self.kb1) + 16 - 1].colliderect(self.pw4):
                            self.pw4 = self.whiteCutPiece_4
                        if self.boxLst[self.boxLst.index(self.kb1) + 16 - 1].colliderect(self.pw5):
                            self.pw5 = self.whiteCutPiece_5
                        if self.boxLst[self.boxLst.index(self.kb1) + 16 - 1].colliderect(self.pw6):
                            self.pw6 = self.whiteCutPiece_6
                        if self.boxLst[self.boxLst.index(self.kb1) + 16 - 1].colliderect(self.pw7):
                            self.pw7 = self.whiteCutPiece_7
                        if self.boxLst[self.boxLst.index(self.kb1) + 16 - 1].colliderect(self.pw8):
                            self.pw8 = self.whiteCutPiece_8
                        if self.boxLst[self.boxLst.index(self.kb1) + 16 - 1].colliderect(self.rw1):
                            self.rw1 = self.whiteCutPiece_9
                        if self.boxLst[self.boxLst.index(self.kb1) + 16 - 1].colliderect(self.rw2):
                            self.rw2 = self.whiteCutPiece_10
                        if self.boxLst[self.boxLst.index(self.kb1) + 16 - 1].colliderect(self.kw1):
                            self.kw1 = self.whiteCutPiece_11
                        if self.boxLst[self.boxLst.index(self.kb1) + 16 - 1].colliderect(self.kw2):
                            self.kw2 = self.whiteCutPiece_12
                        if self.boxLst[self.boxLst.index(self.kb1) + 16 - 1].colliderect(self.bw1):
                            self.bw1 = self.whiteCutPiece_13
                        if self.boxLst[self.boxLst.index(self.kb1) + 16 - 1].colliderect(self.bw2):
                            self.bw2 = self.whiteCutPiece_14
                        if self.boxLst[self.boxLst.index(self.kb1) + 16 - 1].colliderect(self.Kw):
                            self.Kw = self.whiteCutPiece_15
                            self.KingWhite_isDead = 1
                        if self.boxLst[self.boxLst.index(self.kb1) + 16 - 1].colliderect(self.Qw):
                            self.Qw = self.whiteCutPiece_16
                        self.kb1 = self.boxLst[self.boxLst.index(self.kb1) + 16 - 1]
                        self.knightBlack1Clicked = 0
                        self.knightBlack1Clicked_cut = 0
                        self.turn = "white"

                if self.kb1.x < self.box8.x and self.kb1.y < self.box49.y:
                    if self.boxLst[self.boxLst.index(self.kb1) + 16 + 1].collidepoint(self.mouse_x, self.mouse_y):
                        if self.boxLst[self.boxLst.index(self.kb1) + 16 + 1].colliderect(self.pw1):
                            self.pw1 = self.whiteCutPiece_1
                        if self.boxLst[self.boxLst.index(self.kb1) + 16 + 1].colliderect(self.pw2):
                            self.pw2 = self.whiteCutPiece_2
                        if self.boxLst[self.boxLst.index(self.kb1) + 16 + 1].colliderect(self.pw3):
                            self.pw3 = self.whiteCutPiece_3
                        if self.boxLst[self.boxLst.index(self.kb1) + 16 + 1].colliderect(self.pw4):
                            self.pw4 = self.whiteCutPiece_4
                        if self.boxLst[self.boxLst.index(self.kb1) + 16 + 1].colliderect(self.pw5):
                            self.pw5 = self.whiteCutPiece_5
                        if self.boxLst[self.boxLst.index(self.kb1) + 16 + 1].colliderect(self.pw6):
                            self.pw6 = self.whiteCutPiece_6
                        if self.boxLst[self.boxLst.index(self.kb1) + 16 + 1].colliderect(self.pw7):
                            self.pw7 = self.whiteCutPiece_7
                        if self.boxLst[self.boxLst.index(self.kb1) + 16 + 1].colliderect(self.pw8):
                            self.pw8 = self.whiteCutPiece_8
                        if self.boxLst[self.boxLst.index(self.kb1) + 16 + 1].colliderect(self.rw1):
                            self.rw1 = self.whiteCutPiece_9
                        if self.boxLst[self.boxLst.index(self.kb1) + 16 + 1].colliderect(self.rw2):
                            self.rw2 = self.whiteCutPiece_10
                        if self.boxLst[self.boxLst.index(self.kb1) + 16 + 1].colliderect(self.kw1):
                            self.kw1 = self.whiteCutPiece_11
                        if self.boxLst[self.boxLst.index(self.kb1) + 16 + 1].colliderect(self.kw2):
                            self.kw2 = self.whiteCutPiece_12
                        if self.boxLst[self.boxLst.index(self.kb1) + 16 + 1].colliderect(self.bw1):
                            self.bw1 = self.whiteCutPiece_13
                        if self.boxLst[self.boxLst.index(self.kb1) + 16 + 1].colliderect(self.bw2):
                            self.bw2 = self.whiteCutPiece_14
                        if self.boxLst[self.boxLst.index(self.kb1) + 16 + 1].colliderect(self.Kw):
                            self.Kw = self.whiteCutPiece_15
                            self.KingWhite_isDead = 1
                        if self.boxLst[self.boxLst.index(self.kb1) + 16 + 1].colliderect(self.Qw):
                            self.Qw = self.whiteCutPiece_16
                        self.kb1 = self.boxLst[self.boxLst.index(self.kb1) + 16 + 1]
                        self.knightBlack1Clicked = 0
                        self.knightBlack1Clicked_cut = 0
                        self.turn = "white"

                if self.kb1.x < self.box8.x and self.kb1.y > self.box9.y:
                    if self.boxLst[self.boxLst.index(self.kb1) - 16 + 1].collidepoint(self.mouse_x, self.mouse_y):
                        if self.boxLst[self.boxLst.index(self.kb1) - 16 + 1].colliderect(self.pw1):
                            self.pw1 = self.whiteCutPiece_1
                        if self.boxLst[self.boxLst.index(self.kb1) - 16 + 1].colliderect(self.pw2):
                            self.pw2 = self.whiteCutPiece_2
                        if self.boxLst[self.boxLst.index(self.kb1) - 16 + 1].colliderect(self.pw3):
                            self.pw3 = self.whiteCutPiece_3
                        if self.boxLst[self.boxLst.index(self.kb1) - 16 + 1].colliderect(self.pw4):
                            self.pw4 = self.whiteCutPiece_4
                        if self.boxLst[self.boxLst.index(self.kb1) - 16 + 1].colliderect(self.pw5):
                            self.pw5 = self.whiteCutPiece_5
                        if self.boxLst[self.boxLst.index(self.kb1) - 16 + 1].colliderect(self.pw6):
                            self.pw6 = self.whiteCutPiece_6
                        if self.boxLst[self.boxLst.index(self.kb1) - 16 + 1].colliderect(self.pw7):
                            self.pw7 = self.whiteCutPiece_7
                        if self.boxLst[self.boxLst.index(self.kb1) - 16 + 1].colliderect(self.pw8):
                            self.pw8 = self.whiteCutPiece_8
                        if self.boxLst[self.boxLst.index(self.kb1) - 16 + 1].colliderect(self.rw1):
                            self.rw1 = self.whiteCutPiece_9
                        if self.boxLst[self.boxLst.index(self.kb1) - 16 + 1].colliderect(self.rw2):
                            self.rw2 = self.whiteCutPiece_10
                        if self.boxLst[self.boxLst.index(self.kb1) - 16 + 1].colliderect(self.kw1):
                            self.kw1 = self.whiteCutPiece_11
                        if self.boxLst[self.boxLst.index(self.kb1) - 16 + 1].colliderect(self.kw2):
                            self.kw2 = self.whiteCutPiece_12
                        if self.boxLst[self.boxLst.index(self.kb1) - 16 + 1].colliderect(self.bw1):
                            self.bw1 = self.whiteCutPiece_13
                        if self.boxLst[self.boxLst.index(self.kb1) - 16 + 1].colliderect(self.bw2):
                            self.bw2 = self.whiteCutPiece_14
                        if self.boxLst[self.boxLst.index(self.kb1) - 16 + 1].colliderect(self.Kw):
                            self.Kw = self.whiteCutPiece_15
                            self.KingWhite_isDead = 1
                        if self.boxLst[self.boxLst.index(self.kb1) - 16 + 1].colliderect(self.Qw):
                            self.Qw = self.whiteCutPiece_16
                        self.kb1 = self.boxLst[self.boxLst.index(self.kb1) - 16 + 1]
                        self.knightBlack1Clicked = 0
                        self.knightBlack1Clicked_cut = 0
                        self.turn = "white"

                if self.kb1.x > self.box1.x and self.kb1.y > self.box9.y:
                    if self.boxLst[self.boxLst.index(self.kb1) - 16 - 1].collidepoint(self.mouse_x, self.mouse_y):
                        if self.boxLst[self.boxLst.index(self.kb1) - 16 - 1].colliderect(self.pw1):
                            self.pw1 = self.whiteCutPiece_1
                        if self.boxLst[self.boxLst.index(self.kb1) - 16 - 1].colliderect(self.pw2):
                            self.pw2 = self.whiteCutPiece_2
                        if self.boxLst[self.boxLst.index(self.kb1) - 16 - 1].colliderect(self.pw3):
                            self.pw3 = self.whiteCutPiece_3
                        if self.boxLst[self.boxLst.index(self.kb1) - 16 - 1].colliderect(self.pw4):
                            self.pw4 = self.whiteCutPiece_4
                        if self.boxLst[self.boxLst.index(self.kb1) - 16 - 1].colliderect(self.pw5):
                            self.pw5 = self.whiteCutPiece_5
                        if self.boxLst[self.boxLst.index(self.kb1) - 16 - 1].colliderect(self.pw6):
                            self.pw6 = self.whiteCutPiece_6
                        if self.boxLst[self.boxLst.index(self.kb1) - 16 - 1].colliderect(self.pw7):
                            self.pw7 = self.whiteCutPiece_7
                        if self.boxLst[self.boxLst.index(self.kb1) - 16 - 1].colliderect(self.pw8):
                            self.pw8 = self.whiteCutPiece_8
                        if self.boxLst[self.boxLst.index(self.kb1) - 16 - 1].colliderect(self.rw1):
                            self.rw1 = self.whiteCutPiece_9
                        if self.boxLst[self.boxLst.index(self.kb1) - 16 - 1].colliderect(self.rw2):
                            self.rw2 = self.whiteCutPiece_10
                        if self.boxLst[self.boxLst.index(self.kb1) - 16 - 1].colliderect(self.kw1):
                            self.kw1 = self.whiteCutPiece_11
                        if self.boxLst[self.boxLst.index(self.kb1) - 16 - 1].colliderect(self.kw2):
                            self.kw2 = self.whiteCutPiece_12
                        if self.boxLst[self.boxLst.index(self.kb1) - 16 - 1].colliderect(self.bw1):
                            self.bw1 = self.whiteCutPiece_13
                        if self.boxLst[self.boxLst.index(self.kb1) - 16 - 1].colliderect(self.bw2):
                            self.bw2 = self.whiteCutPiece_14
                        if self.boxLst[self.boxLst.index(self.kb1) - 16 - 1].colliderect(self.Kw):
                            self.Kw = self.whiteCutPiece_15
                            self.KingWhite_isDead = 1
                        if self.boxLst[self.boxLst.index(self.kb1) - 16 - 1].colliderect(self.Qw):
                            self.Qw = self.whiteCutPiece_16
                        self.kb1 = self.boxLst[self.boxLst.index(self.kb1) - 16 - 1]
                        self.knightBlack1Clicked = 0
                        self.knightBlack1Clicked_cut = 0
                        self.turn = "white"

                if self.kb1.x < self.box7.x and self.kb1.y < self.box57.y:
                    if self.boxLst[self.boxLst.index(self.kb1) + 8 + 2].collidepoint(self.mouse_x, self.mouse_y):
                        if self.boxLst[self.boxLst.index(self.kb1) + 8 + 2].colliderect(self.pw1):
                            self.pw1 = self.whiteCutPiece_1
                        if self.boxLst[self.boxLst.index(self.kb1) + 8 + 2].colliderect(self.pw2):
                            self.pw2 = self.whiteCutPiece_2
                        if self.boxLst[self.boxLst.index(self.kb1) + 8 + 2].colliderect(self.pw3):
                            self.pw3 = self.whiteCutPiece_3
                        if self.boxLst[self.boxLst.index(self.kb1) + 8 + 2].colliderect(self.pw4):
                            self.pw4 = self.whiteCutPiece_4
                        if self.boxLst[self.boxLst.index(self.kb1) + 8 + 2].colliderect(self.pw5):
                            self.pw5 = self.whiteCutPiece_5
                        if self.boxLst[self.boxLst.index(self.kb1) + 8 + 2].colliderect(self.pw6):
                            self.pw6 = self.whiteCutPiece_6
                        if self.boxLst[self.boxLst.index(self.kb1) + 8 + 2].colliderect(self.pw7):
                            self.pw7 = self.whiteCutPiece_7
                        if self.boxLst[self.boxLst.index(self.kb1) + 8 + 2].colliderect(self.pw8):
                            self.pw8 = self.whiteCutPiece_8
                        if self.boxLst[self.boxLst.index(self.kb1) + 8 + 2].colliderect(self.rw1):
                            self.rw1 = self.whiteCutPiece_9
                        if self.boxLst[self.boxLst.index(self.kb1) + 8 + 2].colliderect(self.rw2):
                            self.rw2 = self.whiteCutPiece_10
                        if self.boxLst[self.boxLst.index(self.kb1) + 8 + 2].colliderect(self.kw1):
                            self.kw1 = self.whiteCutPiece_11
                        if self.boxLst[self.boxLst.index(self.kb1) + 8 + 2].colliderect(self.kw2):
                            self.kw2 = self.whiteCutPiece_12
                        if self.boxLst[self.boxLst.index(self.kb1) + 8 + 2].colliderect(self.bw1):
                            self.bw1 = self.whiteCutPiece_13
                        if self.boxLst[self.boxLst.index(self.kb1) + 8 + 2].colliderect(self.bw2):
                            self.bw2 = self.whiteCutPiece_14
                        if self.boxLst[self.boxLst.index(self.kb1) + 8 + 2].colliderect(self.Kw):
                            self.Kw = self.whiteCutPiece_15
                            self.KingWhite_isDead = 1
                        if self.boxLst[self.boxLst.index(self.kb1) + 8 + 2].colliderect(self.Qw):
                            self.Qw = self.whiteCutPiece_16
                        self.kb1 = self.boxLst[self.boxLst.index(self.kb1) + 8 + 2]
                        self.knightBlack1Clicked = 0
                        self.knightBlack1Clicked_cut = 0
                        self.turn = "white"

                if self.kb1.x > self.box2.x and self.kb1.y < self.box57.y:
                    if self.boxLst[self.boxLst.index(self.kb1) + 8 - 2].collidepoint(self.mouse_x, self.mouse_y):
                        if self.boxLst[self.boxLst.index(self.kb1) + 8 - 2].colliderect(self.pw1):
                            self.pw1 = self.whiteCutPiece_1
                        if self.boxLst[self.boxLst.index(self.kb1) + 8 - 2].colliderect(self.pw2):
                            self.pw2 = self.whiteCutPiece_2
                        if self.boxLst[self.boxLst.index(self.kb1) + 8 - 2].colliderect(self.pw3):
                            self.pw3 = self.whiteCutPiece_3
                        if self.boxLst[self.boxLst.index(self.kb1) + 8 - 2].colliderect(self.pw4):
                            self.pw4 = self.whiteCutPiece_4
                        if self.boxLst[self.boxLst.index(self.kb1) + 8 - 2].colliderect(self.pw5):
                            self.pw5 = self.whiteCutPiece_5
                        if self.boxLst[self.boxLst.index(self.kb1) + 8 - 2].colliderect(self.pw6):
                            self.pw6 = self.whiteCutPiece_6
                        if self.boxLst[self.boxLst.index(self.kb1) + 8 - 2].colliderect(self.pw7):
                            self.pw7 = self.whiteCutPiece_7
                        if self.boxLst[self.boxLst.index(self.kb1) + 8 - 2].colliderect(self.pw8):
                            self.pw8 = self.whiteCutPiece_8
                        if self.boxLst[self.boxLst.index(self.kb1) + 8 - 2].colliderect(self.rw1):
                            self.rw1 = self.whiteCutPiece_9
                        if self.boxLst[self.boxLst.index(self.kb1) + 8 - 2].colliderect(self.rw2):
                            self.rw2 = self.whiteCutPiece_10
                        if self.boxLst[self.boxLst.index(self.kb1) + 8 - 2].colliderect(self.kw1):
                            self.kw1 = self.whiteCutPiece_11
                        if self.boxLst[self.boxLst.index(self.kb1) + 8 - 2].colliderect(self.kw2):
                            self.kw2 = self.whiteCutPiece_12
                        if self.boxLst[self.boxLst.index(self.kb1) + 8 - 2].colliderect(self.bw1):
                            self.bw1 = self.whiteCutPiece_13
                        if self.boxLst[self.boxLst.index(self.kb1) + 8 - 2].colliderect(self.bw2):
                            self.bw2 = self.whiteCutPiece_14
                        if self.boxLst[self.boxLst.index(self.kb1) + 8 - 2].colliderect(self.Kw):
                            self.Kw = self.whiteCutPiece_15
                            self.KingWhite_isDead = 1
                        if self.boxLst[self.boxLst.index(self.kb1) + 8 - 2].colliderect(self.Qw):
                            self.Qw = self.whiteCutPiece_16
                        self.kb1 = self.boxLst[self.boxLst.index(self.kb1) + 8 - 2]
                        self.knightBlack1Clicked = 0
                        self.knightBlack1Clicked_cut = 0
                        self.turn = "white"

                if self.kb1.x < self.box7.x and self.kb1.y > self.box1.y:
                    if self.boxLst[self.boxLst.index(self.kb1) - 8 + 2].collidepoint(self.mouse_x, self.mouse_y):
                        if self.boxLst[self.boxLst.index(self.kb1) - 8 + 2].colliderect(self.pw1):
                            self.pw1 = self.whiteCutPiece_1
                        if self.boxLst[self.boxLst.index(self.kb1) - 8 + 2].colliderect(self.pw2):
                            self.pw2 = self.whiteCutPiece_2
                        if self.boxLst[self.boxLst.index(self.kb1) - 8 + 2].colliderect(self.pw3):
                            self.pw3 = self.whiteCutPiece_3
                        if self.boxLst[self.boxLst.index(self.kb1) - 8 + 2].colliderect(self.pw4):
                            self.pw4 = self.whiteCutPiece_4
                        if self.boxLst[self.boxLst.index(self.kb1) - 8 + 2].colliderect(self.pw5):
                            self.pw5 = self.whiteCutPiece_5
                        if self.boxLst[self.boxLst.index(self.kb1) - 8 + 2].colliderect(self.pw6):
                            self.pw6 = self.whiteCutPiece_6
                        if self.boxLst[self.boxLst.index(self.kb1) - 8 + 2].colliderect(self.pw7):
                            self.pw7 = self.whiteCutPiece_7
                        if self.boxLst[self.boxLst.index(self.kb1) - 8 + 2].colliderect(self.pw8):
                            self.pw8 = self.whiteCutPiece_8
                        if self.boxLst[self.boxLst.index(self.kb1) - 8 + 2].colliderect(self.rw1):
                            self.rw1 = self.whiteCutPiece_9
                        if self.boxLst[self.boxLst.index(self.kb1) - 8 + 2].colliderect(self.rw2):
                            self.rw2 = self.whiteCutPiece_10
                        if self.boxLst[self.boxLst.index(self.kb1) - 8 + 2].colliderect(self.kw1):
                            self.kw1 = self.whiteCutPiece_11
                        if self.boxLst[self.boxLst.index(self.kb1) - 8 + 2].colliderect(self.kw2):
                            self.kw2 = self.whiteCutPiece_12
                        if self.boxLst[self.boxLst.index(self.kb1) - 8 + 2].colliderect(self.bw1):
                            self.bw1 = self.whiteCutPiece_13
                        if self.boxLst[self.boxLst.index(self.kb1) - 8 + 2].colliderect(self.bw2):
                            self.bw2 = self.whiteCutPiece_14
                        if self.boxLst[self.boxLst.index(self.kb1) - 8 + 2].colliderect(self.Kw):
                            self.Kw = self.whiteCutPiece_15
                            self.KingWhite_isDead = 1
                        if self.boxLst[self.boxLst.index(self.kb1) - 8 + 2].colliderect(self.Qw):
                            self.Qw = self.whiteCutPiece_16
                        self.kb1 = self.boxLst[self.boxLst.index(self.kb1) - 8 + 2]
                        self.knightBlack1Clicked = 0
                        self.knightBlack1Clicked_cut = 0
                        self.turn = "white"

                if self.kb1.x > self.box2.x and self.kb1.y > self.box1.y:
                    if self.boxLst[self.boxLst.index(self.kb1) - 8 - 2].collidepoint(self.mouse_x, self.mouse_y):
                        if self.boxLst[self.boxLst.index(self.kb1) - 8 - 2].colliderect(self.pw1):
                            self.pw1 = self.whiteCutPiece_1
                        if self.boxLst[self.boxLst.index(self.kb1) - 8 - 2].colliderect(self.pw2):
                            self.pw2 = self.whiteCutPiece_2
                        if self.boxLst[self.boxLst.index(self.kb1) - 8 - 2].colliderect(self.pw3):
                            self.pw3 = self.whiteCutPiece_3
                        if self.boxLst[self.boxLst.index(self.kb1) - 8 - 2].colliderect(self.pw4):
                            self.pw4 = self.whiteCutPiece_4
                        if self.boxLst[self.boxLst.index(self.kb1) - 8 - 2].colliderect(self.pw5):
                            self.pw5 = self.whiteCutPiece_5
                        if self.boxLst[self.boxLst.index(self.kb1) - 8 - 2].colliderect(self.pw6):
                            self.pw6 = self.whiteCutPiece_6
                        if self.boxLst[self.boxLst.index(self.kb1) - 8 - 2].colliderect(self.pw7):
                            self.pw7 = self.whiteCutPiece_7
                        if self.boxLst[self.boxLst.index(self.kb1) - 8 - 2].colliderect(self.pw8):
                            self.pw8 = self.whiteCutPiece_8
                        if self.boxLst[self.boxLst.index(self.kb1) - 8 - 2].colliderect(self.rw1):
                            self.rw1 = self.whiteCutPiece_9
                        if self.boxLst[self.boxLst.index(self.kb1) - 8 - 2].colliderect(self.rw2):
                            self.rw2 = self.whiteCutPiece_10
                        if self.boxLst[self.boxLst.index(self.kb1) - 8 - 2].colliderect(self.kw1):
                            self.kw1 = self.whiteCutPiece_11
                        if self.boxLst[self.boxLst.index(self.kb1) - 8 - 2].colliderect(self.kw2):
                            self.kw2 = self.whiteCutPiece_12
                        if self.boxLst[self.boxLst.index(self.kb1) - 8 - 2].colliderect(self.bw1):
                            self.bw1 = self.whiteCutPiece_13
                        if self.boxLst[self.boxLst.index(self.kb1) - 8 - 2].colliderect(self.bw2):
                            self.bw2 = self.whiteCutPiece_14
                        if self.boxLst[self.boxLst.index(self.kb1) - 8 - 2].colliderect(self.Kw):
                            self.Kw = self.whiteCutPiece_15
                            self.KingWhite_isDead = 1
                        if self.boxLst[self.boxLst.index(self.kb1) - 8 - 2].colliderect(self.Qw):
                            self.Qw = self.whiteCutPiece_16
                        self.kb1 = self.boxLst[self.boxLst.index(self.kb1) - 8 - 2]
                        self.knightBlack1Clicked = 0
                        self.knightBlack1Clicked_cut = 0
                        self.turn = "white"

            # move the knight
            if self.kb1.x > self.box1.x and self.kb1.y < self.box49.y:
                if self.boxLst[self.boxLst.index(self.kb1) + 16 - 1].collidepoint(self.mouse_x, self.mouse_y):
                    self.kb1 = self.boxLst[self.boxLst.index(self.kb1) + 16 - 1]
                    self.knightBlack1Clicked = 0
                    self.turn = "white"
            if self.kb1.x < self.box8.x and self.kb1.y < self.box49.y:
                if self.boxLst[self.boxLst.index(self.kb1) + 16 + 1].collidepoint(self.mouse_x, self.mouse_y):
                    self.kb1 = self.boxLst[self.boxLst.index(self.kb1) + 16 + 1]
                    self.knightBlack1Clicked = 0
                    self.turn = "white"
            if self.kb1.x < self.box8.x and self.kb1.y > self.box9.y:
                if self.boxLst[self.boxLst.index(self.kb1) - 16 + 1].collidepoint(self.mouse_x, self.mouse_y):
                    self.kb1 = self.boxLst[self.boxLst.index(self.kb1) - 16 + 1]
                    self.knightBlack1Clicked = 0
                    self.turn = "white"
            if self.kb1.x > self.box1.x and self.kb1.y > self.box9.y:
                if self.boxLst[self.boxLst.index(self.kb1) - 16 - 1].collidepoint(self.mouse_x, self.mouse_y):
                    self.kb1 = self.boxLst[self.boxLst.index(self.kb1) - 16 - 1]
                    self.knightBlack1Clicked = 0
                    self.turn = "white"
            if self.kb1.x < self.box7.x and self.kb1.y < self.box57.y:
                if self.boxLst[self.boxLst.index(self.kb1) + 8 + 2].collidepoint(self.mouse_x, self.mouse_y):
                    self.kb1 = self.boxLst[self.boxLst.index(self.kb1) + 8 + 2]
                    self.knightBlack1Clicked = 0
                    self.turn = "white"
            if self.kb1.x > self.box2.x and self.kb1.y < self.box57.y:
                if self.boxLst[self.boxLst.index(self.kb1) + 8 - 2].collidepoint(self.mouse_x, self.mouse_y):
                    self.kb1 = self.boxLst[self.boxLst.index(self.kb1) + 8 - 2]
                    self.knightBlack1Clicked = 0
                    self.turn = "white"
            if self.kb1.x < self.box7.x and self.kb1.y > self.box1.y:
                if self.boxLst[self.boxLst.index(self.kb1) - 8 + 2].collidepoint(self.mouse_x, self.mouse_y):
                    self.kb1 = self.boxLst[self.boxLst.index(self.kb1) - 8 + 2]
                    self.knightBlack1Clicked = 0
                    self.turn = "white"
            if self.kb1.x > self.box2.x and self.kb1.y > self.box1.y:
                if self.boxLst[self.boxLst.index(self.kb1) - 8 - 2].collidepoint(self.mouse_x, self.mouse_y):
                    self.kb1 = self.boxLst[self.boxLst.index(self.kb1) - 8 - 2]
                    self.knightBlack1Clicked = 0
                    self.turn = "white"

    def knightB2Movements(self):
        for event in pygame.event.get():
            if event.type == MOUSEBUTTONDOWN:
                self.mouse_x, self.mouse_y = pygame.mouse.get_pos()

        # knight 2
        def drawRect_plus16_plusOne():
            if not self.boxLst[self.boxLst.index(self.kb2) + 16 + 1].colliderect(self.pw1) and not \
                    self.boxLst[self.boxLst.index(self.kb2) + 16 + 1].colliderect(self.pw2) and not \
                    self.boxLst[self.boxLst.index(self.kb2) + 16 + 1].colliderect(self.pw3) and not \
                    self.boxLst[self.boxLst.index(self.kb2) + 16 + 1].colliderect(self.pw4) and not \
                    self.boxLst[self.boxLst.index(self.kb2) + 16 + 1].colliderect(self.pw5) and not \
                    self.boxLst[self.boxLst.index(self.kb2) + 16 + 1].colliderect(self.pw6) and not \
                    self.boxLst[self.boxLst.index(self.kb2) + 16 + 1].colliderect(self.pw7) and not \
                    self.boxLst[self.boxLst.index(self.kb2) + 16 + 1].colliderect(self.pw8) and not \
                    self.boxLst[self.boxLst.index(self.kb2) + 16 + 1].colliderect(self.Kw) and not \
                    self.boxLst[self.boxLst.index(self.kb2) + 16 + 1].colliderect(self.Qw) and not \
                    self.boxLst[self.boxLst.index(self.kb2) + 16 + 1].colliderect(self.rw1) and not \
                    self.boxLst[self.boxLst.index(self.kb2) + 16 + 1].colliderect(self.rw2) and not \
                    self.boxLst[self.boxLst.index(self.kb2) + 16 + 1].colliderect(self.kw1) and not \
                    self.boxLst[self.boxLst.index(self.kb2) + 16 + 1].colliderect(self.kw2) and not \
                    self.boxLst[self.boxLst.index(self.kb2) + 16 + 1].colliderect(self.bw1) and not \
                    self.boxLst[self.boxLst.index(self.kb2) + 16 + 1].colliderect(self.bw2) and not \
                    self.boxLst[self.boxLst.index(self.kb2) + 16 + 1].colliderect(self.pb2) and not \
                    self.boxLst[self.boxLst.index(self.kb2) + 16 + 1].colliderect(self.pb3) and not \
                    self.boxLst[self.boxLst.index(self.kb2) + 16 + 1].colliderect(self.pb4) and not \
                    self.boxLst[self.boxLst.index(self.kb2) + 16 + 1].colliderect(self.pb5) and not \
                    self.boxLst[self.boxLst.index(self.kb2) + 16 + 1].colliderect(self.pb6) and not \
                    self.boxLst[self.boxLst.index(self.kb2) + 16 + 1].colliderect(self.pb7) and not \
                    self.boxLst[self.boxLst.index(self.kb2) + 16 + 1].colliderect(self.pb8) and not \
                    self.boxLst[self.boxLst.index(self.kb2) + 16 + 1].colliderect(self.Kb) and not \
                    self.boxLst[self.boxLst.index(self.kb2) + 16 + 1].colliderect(self.Qb) and not \
                    self.boxLst[self.boxLst.index(self.kb2) + 16 + 1].colliderect(self.rb1) and not \
                    self.boxLst[self.boxLst.index(self.kb2) + 16 + 1].colliderect(self.rb2) and not \
                    self.boxLst[self.boxLst.index(self.kb2) + 16 + 1].colliderect(self.pb1) and not \
                    self.boxLst[self.boxLst.index(self.kb2) + 16 + 1].colliderect(self.kb1) and not \
                    self.boxLst[self.boxLst.index(self.kb2) + 16 + 1].colliderect(self.bb1) and not \
                    self.boxLst[self.boxLst.index(self.kb2) + 16 + 1].colliderect(self.bb2):
                pygame.draw.rect(self.window, self.blue, self.boxLst[self.boxLst.index(self.kb2) + 16 + 1], border_radius=100)
                self.knightBlack2Clicked = 1
                self.pawnBlack1Clicked = 0
                self.pawnBlack2Clicked = 0
                self.pawnBlack3Clicked = 0
                self.pawnBlack4Clicked = 0
                self.pawnBlack5Clicked = 0
                self.pawnBlack6Clicked = 0
                self.pawnBlack7Clicked = 0
                self.pawnBlack8Clicked = 0
                self.KingBlackClicked = 0
                self.knightBlack1Clicked = 0
                self.rookBlack1Clicked = 0
                self.rookBlack2Clicked = 0
                self.bishopBlack1Clicked = 0
                self.bishopBlack2Clicked = 0
                self.QueenBlackClicked = 0

        def drawRect_plus16_minusOne():
            if not self.boxLst[self.boxLst.index(self.kb2) + 16 - 1].colliderect(self.pw1) and not \
                    self.boxLst[self.boxLst.index(self.kb2) + 16 - 1].colliderect(self.pw2) and not \
                    self.boxLst[self.boxLst.index(self.kb2) + 16 - 1].colliderect(self.pw3) and not \
                    self.boxLst[self.boxLst.index(self.kb2) + 16 - 1].colliderect(self.pw4) and not \
                    self.boxLst[self.boxLst.index(self.kb2) + 16 - 1].colliderect(self.pw5) and not \
                    self.boxLst[self.boxLst.index(self.kb2) + 16 - 1].colliderect(self.pw6) and not \
                    self.boxLst[self.boxLst.index(self.kb2) + 16 - 1].colliderect(self.pw7) and not \
                    self.boxLst[self.boxLst.index(self.kb2) + 16 - 1].colliderect(self.pw8) and not \
                    self.boxLst[self.boxLst.index(self.kb2) + 16 - 1].colliderect(self.Kw) and not \
                    self.boxLst[self.boxLst.index(self.kb2) + 16 - 1].colliderect(self.Qw) and not \
                    self.boxLst[self.boxLst.index(self.kb2) + 16 - 1].colliderect(self.rw1) and not \
                    self.boxLst[self.boxLst.index(self.kb2) + 16 - 1].colliderect(self.rw2) and not \
                    self.boxLst[self.boxLst.index(self.kb2) + 16 - 1].colliderect(self.kw1) and not \
                    self.boxLst[self.boxLst.index(self.kb2) + 16 - 1].colliderect(self.kw2) and not \
                    self.boxLst[self.boxLst.index(self.kb2) + 16 - 1].colliderect(self.bw1) and not \
                    self.boxLst[self.boxLst.index(self.kb2) + 16 - 1].colliderect(self.bw2) and not \
                    self.boxLst[self.boxLst.index(self.kb2) + 16 - 1].colliderect(self.pb2) and not \
                    self.boxLst[self.boxLst.index(self.kb2) + 16 - 1].colliderect(self.pb3) and not \
                    self.boxLst[self.boxLst.index(self.kb2) + 16 - 1].colliderect(self.pb4) and not \
                    self.boxLst[self.boxLst.index(self.kb2) + 16 - 1].colliderect(self.pb5) and not \
                    self.boxLst[self.boxLst.index(self.kb2) + 16 - 1].colliderect(self.pb6) and not \
                    self.boxLst[self.boxLst.index(self.kb2) + 16 - 1].colliderect(self.pb7) and not \
                    self.boxLst[self.boxLst.index(self.kb2) + 16 - 1].colliderect(self.pb8) and not \
                    self.boxLst[self.boxLst.index(self.kb2) + 16 - 1].colliderect(self.Kb) and not \
                    self.boxLst[self.boxLst.index(self.kb2) + 16 - 1].colliderect(self.Qb) and not \
                    self.boxLst[self.boxLst.index(self.kb2) + 16 - 1].colliderect(self.rb1) and not \
                    self.boxLst[self.boxLst.index(self.kb2) + 16 - 1].colliderect(self.rb2) and not \
                    self.boxLst[self.boxLst.index(self.kb2) + 16 - 1].colliderect(self.pb1) and not \
                    self.boxLst[self.boxLst.index(self.kb2) + 16 - 1].colliderect(self.kb1) and not \
                    self.boxLst[self.boxLst.index(self.kb2) + 16 - 1].colliderect(self.bb1) and not \
                    self.boxLst[self.boxLst.index(self.kb2) + 16 - 1].colliderect(self.bb2):
                pygame.draw.rect(self.window, self.blue, self.boxLst[self.boxLst.index(self.kb2) + 16 - 1], border_radius=100)
                self.knightBlack2Clicked = 1
                self.pawnBlack1Clicked = 0
                self.pawnBlack2Clicked = 0
                self.pawnBlack3Clicked = 0
                self.pawnBlack4Clicked = 0
                self.pawnBlack5Clicked = 0
                self.pawnBlack6Clicked = 0
                self.pawnBlack7Clicked = 0
                self.pawnBlack8Clicked = 0
                self.KingBlackClicked = 0
                self.knightBlack1Clicked = 0
                self.rookBlack1Clicked = 0
                self.rookBlack2Clicked = 0
                self.bishopBlack1Clicked = 0
                self.bishopBlack2Clicked = 0
                self.QueenBlackClicked = 0

        def drawRect_minus16_plusOne():
            if not self.boxLst[self.boxLst.index(self.kb2) - 16 + 1].colliderect(self.pw1) and not \
                    self.boxLst[self.boxLst.index(self.kb2) - 16 + 1].colliderect(self.pw2) and not \
                    self.boxLst[self.boxLst.index(self.kb2) - 16 + 1].colliderect(self.pw3) and not \
                    self.boxLst[self.boxLst.index(self.kb2) - 16 + 1].colliderect(self.pw4) and not \
                    self.boxLst[self.boxLst.index(self.kb2) - 16 + 1].colliderect(self.pw5) and not \
                    self.boxLst[self.boxLst.index(self.kb2) - 16 + 1].colliderect(self.pw6) and not \
                    self.boxLst[self.boxLst.index(self.kb2) - 16 + 1].colliderect(self.pw7) and not \
                    self.boxLst[self.boxLst.index(self.kb2) - 16 + 1].colliderect(self.pw8) and not \
                    self.boxLst[self.boxLst.index(self.kb2) - 16 + 1].colliderect(self.Kw) and not \
                    self.boxLst[self.boxLst.index(self.kb2) - 16 + 1].colliderect(self.Qw) and not \
                    self.boxLst[self.boxLst.index(self.kb2) - 16 + 1].colliderect(self.rw1) and not \
                    self.boxLst[self.boxLst.index(self.kb2) - 16 + 1].colliderect(self.rw2) and not \
                    self.boxLst[self.boxLst.index(self.kb2) - 16 + 1].colliderect(self.kw1) and not \
                    self.boxLst[self.boxLst.index(self.kb2) - 16 + 1].colliderect(self.kw2) and not \
                    self.boxLst[self.boxLst.index(self.kb2) - 16 + 1].colliderect(self.bw1) and not \
                    self.boxLst[self.boxLst.index(self.kb2) - 16 + 1].colliderect(self.bw2) and not \
                    self.boxLst[self.boxLst.index(self.kb2) - 16 + 1].colliderect(self.pb2) and not \
                    self.boxLst[self.boxLst.index(self.kb2) - 16 + 1].colliderect(self.pb3) and not \
                    self.boxLst[self.boxLst.index(self.kb2) - 16 + 1].colliderect(self.pb4) and not \
                    self.boxLst[self.boxLst.index(self.kb2) - 16 + 1].colliderect(self.pb5) and not \
                    self.boxLst[self.boxLst.index(self.kb2) - 16 + 1].colliderect(self.pb6) and not \
                    self.boxLst[self.boxLst.index(self.kb2) - 16 + 1].colliderect(self.pb7) and not \
                    self.boxLst[self.boxLst.index(self.kb2) - 16 + 1].colliderect(self.pb8) and not \
                    self.boxLst[self.boxLst.index(self.kb2) - 16 + 1].colliderect(self.Kb) and not \
                    self.boxLst[self.boxLst.index(self.kb2) - 16 + 1].colliderect(self.Qb) and not \
                    self.boxLst[self.boxLst.index(self.kb2) - 16 + 1].colliderect(self.rb1) and not \
                    self.boxLst[self.boxLst.index(self.kb2) - 16 + 1].colliderect(self.rb2) and not \
                    self.boxLst[self.boxLst.index(self.kb2) - 16 + 1].colliderect(self.pb1) and not \
                    self.boxLst[self.boxLst.index(self.kb2) - 16 + 1].colliderect(self.kb1) and not \
                    self.boxLst[self.boxLst.index(self.kb2) - 16 + 1].colliderect(self.bb1) and not \
                    self.boxLst[self.boxLst.index(self.kb2) - 16 + 1].colliderect(self.bb2):
                pygame.draw.rect(self.window, self.blue, self.boxLst[self.boxLst.index(self.kb2) - 16 + 1], border_radius=100)
                self.knightBlack2Clicked = 1
                self.pawnBlack1Clicked = 0
                self.pawnBlack2Clicked = 0
                self.pawnBlack3Clicked = 0
                self.pawnBlack4Clicked = 0
                self.pawnBlack5Clicked = 0
                self.pawnBlack6Clicked = 0
                self.pawnBlack7Clicked = 0
                self.pawnBlack8Clicked = 0
                self.KingBlackClicked = 0
                self.knightBlack1Clicked = 0
                self.rookBlack1Clicked = 0
                self.rookBlack2Clicked = 0
                self.bishopBlack1Clicked = 0
                self.bishopBlack2Clicked = 0
                self.QueenBlackClicked = 0

        def drawRect_minus16_minusOne():
            if not self.boxLst[self.boxLst.index(self.kb2) - 16 - 1].colliderect(self.pw1) and not \
                    self.boxLst[self.boxLst.index(self.kb2) - 16 - 1].colliderect(self.pw2) and not \
                    self.boxLst[self.boxLst.index(self.kb2) - 16 - 1].colliderect(self.pw3) and not \
                    self.boxLst[self.boxLst.index(self.kb2) - 16 - 1].colliderect(self.pw4) and not \
                    self.boxLst[self.boxLst.index(self.kb2) - 16 - 1].colliderect(self.pw5) and not \
                    self.boxLst[self.boxLst.index(self.kb2) - 16 - 1].colliderect(self.pw6) and not \
                    self.boxLst[self.boxLst.index(self.kb2) - 16 - 1].colliderect(self.pw7) and not \
                    self.boxLst[self.boxLst.index(self.kb2) - 16 - 1].colliderect(self.pw8) and not \
                    self.boxLst[self.boxLst.index(self.kb2) - 16 - 1].colliderect(self.Kw) and not \
                    self.boxLst[self.boxLst.index(self.kb2) - 16 - 1].colliderect(self.Qw) and not \
                    self.boxLst[self.boxLst.index(self.kb2) - 16 - 1].colliderect(self.rw1) and not \
                    self.boxLst[self.boxLst.index(self.kb2) - 16 - 1].colliderect(self.rw2) and not \
                    self.boxLst[self.boxLst.index(self.kb2) - 16 - 1].colliderect(self.kw1) and not \
                    self.boxLst[self.boxLst.index(self.kb2) - 16 - 1].colliderect(self.kw2) and not \
                    self.boxLst[self.boxLst.index(self.kb2) - 16 - 1].colliderect(self.bw1) and not \
                    self.boxLst[self.boxLst.index(self.kb2) - 16 - 1].colliderect(self.bw2) and not \
                    self.boxLst[self.boxLst.index(self.kb2) - 16 - 1].colliderect(self.pb2) and not \
                    self.boxLst[self.boxLst.index(self.kb2) - 16 - 1].colliderect(self.pb3) and not \
                    self.boxLst[self.boxLst.index(self.kb2) - 16 - 1].colliderect(self.pb4) and not \
                    self.boxLst[self.boxLst.index(self.kb2) - 16 - 1].colliderect(self.pb5) and not \
                    self.boxLst[self.boxLst.index(self.kb2) - 16 - 1].colliderect(self.pb6) and not \
                    self.boxLst[self.boxLst.index(self.kb2) - 16 - 1].colliderect(self.pb7) and not \
                    self.boxLst[self.boxLst.index(self.kb2) - 16 - 1].colliderect(self.pb8) and not \
                    self.boxLst[self.boxLst.index(self.kb2) - 16 - 1].colliderect(self.Kb) and not \
                    self.boxLst[self.boxLst.index(self.kb2) - 16 - 1].colliderect(self.Qb) and not \
                    self.boxLst[self.boxLst.index(self.kb2) - 16 - 1].colliderect(self.rb1) and not \
                    self.boxLst[self.boxLst.index(self.kb2) - 16 - 1].colliderect(self.rb2) and not \
                    self.boxLst[self.boxLst.index(self.kb2) - 16 - 1].colliderect(self.pb1) and not \
                    self.boxLst[self.boxLst.index(self.kb2) - 16 - 1].colliderect(self.kb1) and not \
                    self.boxLst[self.boxLst.index(self.kb2) - 16 - 1].colliderect(self.bb1) and not \
                    self.boxLst[self.boxLst.index(self.kb2) - 16 - 1].colliderect(self.bb2):
                pygame.draw.rect(self.window, self.blue, self.boxLst[self.boxLst.index(self.kb2) - 16 - 1], border_radius=100)
                self.knightBlack2Clicked = 1
                self.pawnBlack1Clicked = 0
                self.pawnBlack2Clicked = 0
                self.pawnBlack3Clicked = 0
                self.pawnBlack4Clicked = 0
                self.pawnBlack5Clicked = 0
                self.pawnBlack6Clicked = 0
                self.pawnBlack7Clicked = 0
                self.pawnBlack8Clicked = 0
                self.KingBlackClicked = 0
                self.knightBlack1Clicked = 0
                self.rookBlack1Clicked = 0
                self.rookBlack2Clicked = 0
                self.bishopBlack1Clicked = 0
                self.bishopBlack2Clicked = 0
                self.QueenBlackClicked = 0

        def drawRect_plusEight_plusTwo():
            if not self.boxLst[self.boxLst.index(self.kb2) + 8 + 2].colliderect(self.pw1) and not \
                    self.boxLst[self.boxLst.index(self.kb2) + 8 + 2].colliderect(self.pw2) and not \
                    self.boxLst[self.boxLst.index(self.kb2) + 8 + 2].colliderect(self.pw3) and not \
                    self.boxLst[self.boxLst.index(self.kb2) + 8 + 2].colliderect(self.pw4) and not \
                    self.boxLst[self.boxLst.index(self.kb2) + 8 + 2].colliderect(self.pw5) and not \
                    self.boxLst[self.boxLst.index(self.kb2) + 8 + 2].colliderect(self.pw6) and not \
                    self.boxLst[self.boxLst.index(self.kb2) + 8 + 2].colliderect(self.pw7) and not \
                    self.boxLst[self.boxLst.index(self.kb2) + 8 + 2].colliderect(self.pw8) and not \
                    self.boxLst[self.boxLst.index(self.kb2) + 8 + 2].colliderect(self.Kw) and not \
                    self.boxLst[self.boxLst.index(self.kb2) + 8 + 2].colliderect(self.Qw) and not \
                    self.boxLst[self.boxLst.index(self.kb2) + 8 + 2].colliderect(self.rw1) and not \
                    self.boxLst[self.boxLst.index(self.kb2) + 8 + 2].colliderect(self.rw2) and not \
                    self.boxLst[self.boxLst.index(self.kb2) + 8 + 2].colliderect(self.kw1) and not \
                    self.boxLst[self.boxLst.index(self.kb2) + 8 + 2].colliderect(self.kw2) and not \
                    self.boxLst[self.boxLst.index(self.kb2) + 8 + 2].colliderect(self.bw1) and not \
                    self.boxLst[self.boxLst.index(self.kb2) + 8 + 2].colliderect(self.bw2) and not \
                    self.boxLst[self.boxLst.index(self.kb2) + 8 + 2].colliderect(self.pb2) and not \
                    self.boxLst[self.boxLst.index(self.kb2) + 8 + 2].colliderect(self.pb3) and not \
                    self.boxLst[self.boxLst.index(self.kb2) + 8 + 2].colliderect(self.pb4) and not \
                    self.boxLst[self.boxLst.index(self.kb2) + 8 + 2].colliderect(self.pb5) and not \
                    self.boxLst[self.boxLst.index(self.kb2) + 8 + 2].colliderect(self.pb6) and not \
                    self.boxLst[self.boxLst.index(self.kb2) + 8 + 2].colliderect(self.pb7) and not \
                    self.boxLst[self.boxLst.index(self.kb2) + 8 + 2].colliderect(self.pb8) and not \
                    self.boxLst[self.boxLst.index(self.kb2) + 8 + 2].colliderect(self.Kb) and not \
                    self.boxLst[self.boxLst.index(self.kb2) + 8 + 2].colliderect(self.Qb) and not \
                    self.boxLst[self.boxLst.index(self.kb2) + 8 + 2].colliderect(self.rb1) and not \
                    self.boxLst[self.boxLst.index(self.kb2) + 8 + 2].colliderect(self.rb2) and not \
                    self.boxLst[self.boxLst.index(self.kb2) + 8 + 2].colliderect(self.pb1) and not \
                    self.boxLst[self.boxLst.index(self.kb2) + 8 + 2].colliderect(self.kb1) and not \
                    self.boxLst[self.boxLst.index(self.kb2) + 8 + 2].colliderect(self.bb1) and not \
                    self.boxLst[self.boxLst.index(self.kb2) + 8 + 2].colliderect(self.bb2):
                pygame.draw.rect(self.window, self.blue, self.boxLst[self.boxLst.index(self.kb2) + 8 + 2], border_radius=100)
                self.knightBlack2Clicked = 1
                self.pawnBlack1Clicked = 0
                self.pawnBlack2Clicked = 0
                self.pawnBlack3Clicked = 0
                self.pawnBlack4Clicked = 0
                self.pawnBlack5Clicked = 0
                self.pawnBlack6Clicked = 0
                self.pawnBlack7Clicked = 0
                self.pawnBlack8Clicked = 0
                self.KingBlackClicked = 0
                self.knightBlack1Clicked = 0
                self.rookBlack1Clicked = 0
                self.rookBlack2Clicked = 0
                self.bishopBlack1Clicked = 0
                self.bishopBlack2Clicked = 0
                self.QueenBlackClicked = 0

        def drawRect_plusEight_minusTwo():
            if not self.boxLst[self.boxLst.index(self.kb2) + 8 - 2].colliderect(self.pw1) and not \
                    self.boxLst[self.boxLst.index(self.kb2) + 8 - 2].colliderect(self.pw2) and not \
                    self.boxLst[self.boxLst.index(self.kb2) + 8 - 2].colliderect(self.pw3) and not \
                    self.boxLst[self.boxLst.index(self.kb2) + 8 - 2].colliderect(self.pw4) and not \
                    self.boxLst[self.boxLst.index(self.kb2) + 8 - 2].colliderect(self.pw5) and not \
                    self.boxLst[self.boxLst.index(self.kb2) + 8 - 2].colliderect(self.pw6) and not \
                    self.boxLst[self.boxLst.index(self.kb2) + 8 - 2].colliderect(self.pw7) and not \
                    self.boxLst[self.boxLst.index(self.kb2) + 8 - 2].colliderect(self.pw8) and not \
                    self.boxLst[self.boxLst.index(self.kb2) + 8 - 2].colliderect(self.Kw) and not \
                    self.boxLst[self.boxLst.index(self.kb2) + 8 - 2].colliderect(self.Qw) and not \
                    self.boxLst[self.boxLst.index(self.kb2) + 8 - 2].colliderect(self.rw1) and not \
                    self.boxLst[self.boxLst.index(self.kb2) + 8 - 2].colliderect(self.rw2) and not \
                    self.boxLst[self.boxLst.index(self.kb2) + 8 - 2].colliderect(self.kw1) and not \
                    self.boxLst[self.boxLst.index(self.kb2) + 8 - 2].colliderect(self.kw2) and not \
                    self.boxLst[self.boxLst.index(self.kb2) + 8 - 2].colliderect(self.bw1) and not \
                    self.boxLst[self.boxLst.index(self.kb2) + 8 - 2].colliderect(self.bw2) and not \
                    self.boxLst[self.boxLst.index(self.kb2) + 8 - 2].colliderect(self.pb2) and not \
                    self.boxLst[self.boxLst.index(self.kb2) + 8 - 2].colliderect(self.pb3) and not \
                    self.boxLst[self.boxLst.index(self.kb2) + 8 - 2].colliderect(self.pb4) and not \
                    self.boxLst[self.boxLst.index(self.kb2) + 8 - 2].colliderect(self.pb5) and not \
                    self.boxLst[self.boxLst.index(self.kb2) + 8 - 2].colliderect(self.pb6) and not \
                    self.boxLst[self.boxLst.index(self.kb2) + 8 - 2].colliderect(self.pb7) and not \
                    self.boxLst[self.boxLst.index(self.kb2) + 8 - 2].colliderect(self.pb8) and not \
                    self.boxLst[self.boxLst.index(self.kb2) + 8 - 2].colliderect(self.Kb) and not \
                    self.boxLst[self.boxLst.index(self.kb2) + 8 - 2].colliderect(self.Qb) and not \
                    self.boxLst[self.boxLst.index(self.kb2) + 8 - 2].colliderect(self.rb1) and not \
                    self.boxLst[self.boxLst.index(self.kb2) + 8 - 2].colliderect(self.rb2) and not \
                    self.boxLst[self.boxLst.index(self.kb2) + 8 - 2].colliderect(self.pb1) and not \
                    self.boxLst[self.boxLst.index(self.kb2) + 8 - 2].colliderect(self.kb1) and not \
                    self.boxLst[self.boxLst.index(self.kb2) + 8 - 2].colliderect(self.bb1) and not \
                    self.boxLst[self.boxLst.index(self.kb2) + 8 - 2].colliderect(self.bb2):
                pygame.draw.rect(self.window, self.blue, self.boxLst[self.boxLst.index(self.kb2) + 8 - 2], border_radius=100)
                self.knightBlack2Clicked = 1
                self.pawnBlack1Clicked = 0
                self.pawnBlack2Clicked = 0
                self.pawnBlack3Clicked = 0
                self.pawnBlack4Clicked = 0
                self.pawnBlack5Clicked = 0
                self.pawnBlack6Clicked = 0
                self.pawnBlack7Clicked = 0
                self.pawnBlack8Clicked = 0
                self.KingBlackClicked = 0
                self.knightBlack1Clicked = 0
                self.rookBlack1Clicked = 0
                self.rookBlack2Clicked = 0
                self.bishopBlack1Clicked = 0
                self.bishopBlack2Clicked = 0
                self.QueenBlackClicked = 0

        def drawRect_minusEight_plusTwo():
            if not self.boxLst[self.boxLst.index(self.kb2) - 8 + 2].colliderect(self.pw1) and not \
                    self.boxLst[self.boxLst.index(self.kb2) - 8 + 2].colliderect(self.pw2) and not \
                    self.boxLst[self.boxLst.index(self.kb2) - 8 + 2].colliderect(self.pw3) and not \
                    self.boxLst[self.boxLst.index(self.kb2) - 8 + 2].colliderect(self.pw4) and not \
                    self.boxLst[self.boxLst.index(self.kb2) - 8 + 2].colliderect(self.pw5) and not \
                    self.boxLst[self.boxLst.index(self.kb2) - 8 + 2].colliderect(self.pw6) and not \
                    self.boxLst[self.boxLst.index(self.kb2) - 8 + 2].colliderect(self.pw7) and not \
                    self.boxLst[self.boxLst.index(self.kb2) - 8 + 2].colliderect(self.pw8) and not \
                    self.boxLst[self.boxLst.index(self.kb2) - 8 + 2].colliderect(self.Kw) and not \
                    self.boxLst[self.boxLst.index(self.kb2) - 8 + 2].colliderect(self.Qw) and not \
                    self.boxLst[self.boxLst.index(self.kb2) - 8 + 2].colliderect(self.rw1) and not \
                    self.boxLst[self.boxLst.index(self.kb2) - 8 + 2].colliderect(self.rw2) and not \
                    self.boxLst[self.boxLst.index(self.kb2) - 8 + 2].colliderect(self.kw1) and not \
                    self.boxLst[self.boxLst.index(self.kb2) - 8 + 2].colliderect(self.kw2) and not \
                    self.boxLst[self.boxLst.index(self.kb2) - 8 + 2].colliderect(self.bw1) and not \
                    self.boxLst[self.boxLst.index(self.kb2) - 8 + 2].colliderect(self.bw2) and not \
                    self.boxLst[self.boxLst.index(self.kb2) - 8 + 2].colliderect(self.pb2) and not \
                    self.boxLst[self.boxLst.index(self.kb2) - 8 + 2].colliderect(self.pb3) and not \
                    self.boxLst[self.boxLst.index(self.kb2) - 8 + 2].colliderect(self.pb4) and not \
                    self.boxLst[self.boxLst.index(self.kb2) - 8 + 2].colliderect(self.pb5) and not \
                    self.boxLst[self.boxLst.index(self.kb2) - 8 + 2].colliderect(self.pb6) and not \
                    self.boxLst[self.boxLst.index(self.kb2) - 8 + 2].colliderect(self.pb7) and not \
                    self.boxLst[self.boxLst.index(self.kb2) - 8 + 2].colliderect(self.pb8) and not \
                    self.boxLst[self.boxLst.index(self.kb2) - 8 + 2].colliderect(self.Kb) and not \
                    self.boxLst[self.boxLst.index(self.kb2) - 8 + 2].colliderect(self.Qb) and not \
                    self.boxLst[self.boxLst.index(self.kb2) - 8 + 2].colliderect(self.rb1) and not \
                    self.boxLst[self.boxLst.index(self.kb2) - 8 + 2].colliderect(self.rb2) and not \
                    self.boxLst[self.boxLst.index(self.kb2) - 8 + 2].colliderect(self.pb1) and not \
                    self.boxLst[self.boxLst.index(self.kb2) - 8 + 2].colliderect(self.kb1) and not \
                    self.boxLst[self.boxLst.index(self.kb2) - 8 + 2].colliderect(self.bb1) and not \
                    self.boxLst[self.boxLst.index(self.kb2) - 8 + 2].colliderect(self.bb2):
                pygame.draw.rect(self.window, self.blue, self.boxLst[self.boxLst.index(self.kb2) - 8 + 2], border_radius=100)
                self.knightBlack2Clicked = 1
                self.pawnBlack1Clicked = 0
                self.pawnBlack2Clicked = 0
                self.pawnBlack3Clicked = 0
                self.pawnBlack4Clicked = 0
                self.pawnBlack5Clicked = 0
                self.pawnBlack6Clicked = 0
                self.pawnBlack7Clicked = 0
                self.pawnBlack8Clicked = 0
                self.KingBlackClicked = 0
                self.knightBlack1Clicked = 0
                self.rookBlack1Clicked = 0
                self.rookBlack2Clicked = 0
                self.bishopBlack1Clicked = 0
                self.bishopBlack2Clicked = 0
                self.QueenBlackClicked = 0

        def drawRect_minusEight_minusTwo():
            if not self.boxLst[self.boxLst.index(self.kb2) - 8 - 2].colliderect(self.pw1) and not \
                    self.boxLst[self.boxLst.index(self.kb2) - 8 - 2].colliderect(self.pw2) and not \
                    self.boxLst[self.boxLst.index(self.kb2) - 8 - 2].colliderect(self.pw3) and not \
                    self.boxLst[self.boxLst.index(self.kb2) - 8 - 2].colliderect(self.pw4) and not \
                    self.boxLst[self.boxLst.index(self.kb2) - 8 - 2].colliderect(self.pw5) and not \
                    self.boxLst[self.boxLst.index(self.kb2) - 8 - 2].colliderect(self.pw6) and not \
                    self.boxLst[self.boxLst.index(self.kb2) - 8 - 2].colliderect(self.pw7) and not \
                    self.boxLst[self.boxLst.index(self.kb2) - 8 - 2].colliderect(self.pw8) and not \
                    self.boxLst[self.boxLst.index(self.kb2) - 8 - 2].colliderect(self.Kw) and not \
                    self.boxLst[self.boxLst.index(self.kb2) - 8 - 2].colliderect(self.Qw) and not \
                    self.boxLst[self.boxLst.index(self.kb2) - 8 - 2].colliderect(self.rw1) and not \
                    self.boxLst[self.boxLst.index(self.kb2) - 8 - 2].colliderect(self.rw2) and not \
                    self.boxLst[self.boxLst.index(self.kb2) - 8 - 2].colliderect(self.kw1) and not \
                    self.boxLst[self.boxLst.index(self.kb2) - 8 - 2].colliderect(self.kw2) and not \
                    self.boxLst[self.boxLst.index(self.kb2) - 8 - 2].colliderect(self.bw1) and not \
                    self.boxLst[self.boxLst.index(self.kb2) - 8 - 2].colliderect(self.bw2) and not \
                    self.boxLst[self.boxLst.index(self.kb2) - 8 - 2].colliderect(self.pb2) and not \
                    self.boxLst[self.boxLst.index(self.kb2) - 8 - 2].colliderect(self.pb3) and not \
                    self.boxLst[self.boxLst.index(self.kb2) - 8 - 2].colliderect(self.pb4) and not \
                    self.boxLst[self.boxLst.index(self.kb2) - 8 - 2].colliderect(self.pb5) and not \
                    self.boxLst[self.boxLst.index(self.kb2) - 8 - 2].colliderect(self.pb6) and not \
                    self.boxLst[self.boxLst.index(self.kb2) - 8 - 2].colliderect(self.pb7) and not \
                    self.boxLst[self.boxLst.index(self.kb2) - 8 - 2].colliderect(self.pb8) and not \
                    self.boxLst[self.boxLst.index(self.kb2) - 8 - 2].colliderect(self.Kb) and not \
                    self.boxLst[self.boxLst.index(self.kb2) - 8 - 2].colliderect(self.Qb) and not \
                    self.boxLst[self.boxLst.index(self.kb2) - 8 - 2].colliderect(self.rb1) and not \
                    self.boxLst[self.boxLst.index(self.kb2) - 8 - 2].colliderect(self.rb2) and not \
                    self.boxLst[self.boxLst.index(self.kb2) - 8 - 2].colliderect(self.pb1) and not \
                    self.boxLst[self.boxLst.index(self.kb2) - 8 - 2].colliderect(self.kb1) and not \
                    self.boxLst[self.boxLst.index(self.kb2) - 8 - 2].colliderect(self.bb1) and not \
                    self.boxLst[self.boxLst.index(self.kb2) - 8 - 2].colliderect(self.bb2):
                pygame.draw.rect(self.window, self.blue, self.boxLst[self.boxLst.index(self.kb2) - 8 - 2], border_radius=100)
                self.knightBlack2Clicked = 1
                self.pawnBlack1Clicked = 0
                self.pawnBlack2Clicked = 0
                self.pawnBlack3Clicked = 0
                self.pawnBlack4Clicked = 0
                self.pawnBlack5Clicked = 0
                self.pawnBlack6Clicked = 0
                self.pawnBlack7Clicked = 0
                self.pawnBlack8Clicked = 0
                self.KingBlackClicked = 0
                self.knightBlack1Clicked = 0
                self.rookBlack1Clicked = 0
                self.rookBlack2Clicked = 0
                self.bishopBlack1Clicked = 0
                self.bishopBlack2Clicked = 0
                self.QueenBlackClicked = 0

        if self.turn == "black":
            if self.kb2.collidepoint(self.mouse_x, self.mouse_y):
                if self.kb2.x < self.box8.x and self.kb2.y < self.box49.y:
                    drawRect_plus16_plusOne()
                if self.kb2.x > self.box1.x and self.kb2.y < self.box49.y:
                    drawRect_plus16_minusOne()
                if self.kb2.x < self.box8.x and self.kb2.y > self.box9.y:
                    drawRect_minus16_plusOne()
                if self.kb2.x > self.box1.x and self.kb2.y > self.box9.y:
                    drawRect_minus16_minusOne()
                if self.kb2.x < self.box7.x and self.kb2.y < self.box57.y:
                    drawRect_plusEight_plusTwo()
                if self.kb2.x > self.box2.x and self.kb2.y < self.box57.y:
                    drawRect_plusEight_minusTwo()
                if self.kb2.x < self.box7.x and self.kb2.y > self.box1.y:
                    drawRect_minusEight_plusTwo()
                if self.kb2.x > self.box2.x and self.kb2.y > self.box1.y:
                    drawRect_minusEight_minusTwo()

                if self.kb2.x < self.box8.x and self.kb2.y < self.box49.y:
                    if self.boxLst[self.boxLst.index(self.kb2) + 16 + 1].colliderect(self.pw1) or \
                            self.boxLst[self.boxLst.index(self.kb2) + 16 + 1].colliderect(self.pw2) or \
                            self.boxLst[self.boxLst.index(self.kb2) + 16 + 1].colliderect(self.pw3) or \
                            self.boxLst[self.boxLst.index(self.kb2) + 16 + 1].colliderect(self.pw4) or \
                            self.boxLst[self.boxLst.index(self.kb2) + 16 + 1].colliderect(self.pw5) or \
                            self.boxLst[self.boxLst.index(self.kb2) + 16 + 1].colliderect(self.pw6) or \
                            self.boxLst[self.boxLst.index(self.kb2) + 16 + 1].colliderect(self.pw7) or \
                            self.boxLst[self.boxLst.index(self.kb2) + 16 + 1].colliderect(self.pw8) or \
                            self.boxLst[self.boxLst.index(self.kb2) + 16 + 1].colliderect(self.Kw) or \
                            self.boxLst[self.boxLst.index(self.kb2) + 16 + 1].colliderect(self.Qw) or \
                            self.boxLst[self.boxLst.index(self.kb2) + 16 + 1].colliderect(self.rw1) or \
                            self.boxLst[self.boxLst.index(self.kb2) + 16 + 1].colliderect(self.rw2) or \
                            self.boxLst[self.boxLst.index(self.kb2) + 16 + 1].colliderect(self.kw1) or \
                            self.boxLst[self.boxLst.index(self.kb2) + 16 + 1].colliderect(self.kw2) or \
                            self.boxLst[self.boxLst.index(self.kb2) + 16 + 1].colliderect(self.bw1) or \
                            self.boxLst[self.boxLst.index(self.kb2) + 16 + 1].colliderect(self.bw2):
                        pygame.draw.rect(self.window, self.red, self.boxLst[self.boxLst.index(self.kb2) + 16 + 1], border_radius=100)
                        self.knightBlack2Clicked = 1
                        self.pawnBlack1Clicked = 0
                        self.pawnBlack2Clicked = 0
                        self.pawnBlack3Clicked = 0
                        self.pawnBlack4Clicked = 0
                        self.pawnBlack5Clicked = 0
                        self.pawnBlack6Clicked = 0
                        self.pawnBlack7Clicked = 0
                        self.pawnBlack8Clicked = 0
                        self.KingBlackClicked = 0
                        self.knightBlack1Clicked = 0
                        self.rookBlack1Clicked = 0
                        self.rookBlack2Clicked = 0
                        self.bishopBlack1Clicked = 0
                        self.bishopBlack2Clicked = 0
                        self.QueenBlackClicked = 0
                        self.knightBlack2Clicked_cut = 1
                if self.kb2.x > self.box1.x and self.kb2.y < self.box49.y:
                    if self.boxLst[self.boxLst.index(self.kb2) + 16 - 1].colliderect(self.pw1) or \
                            self.boxLst[self.boxLst.index(self.kb2) + 16 - 1].colliderect(self.pw2) or \
                            self.boxLst[self.boxLst.index(self.kb2) + 16 - 1].colliderect(self.pw3) or \
                            self.boxLst[self.boxLst.index(self.kb2) + 16 - 1].colliderect(self.pw4) or \
                            self.boxLst[self.boxLst.index(self.kb2) + 16 - 1].colliderect(self.pw5) or \
                            self.boxLst[self.boxLst.index(self.kb2) + 16 - 1].colliderect(self.pw6) or \
                            self.boxLst[self.boxLst.index(self.kb2) + 16 - 1].colliderect(self.pw7) or \
                            self.boxLst[self.boxLst.index(self.kb2) + 16 - 1].colliderect(self.pw8) or \
                            self.boxLst[self.boxLst.index(self.kb2) + 16 - 1].colliderect(self.Kw) or \
                            self.boxLst[self.boxLst.index(self.kb2) + 16 - 1].colliderect(self.Qw) or \
                            self.boxLst[self.boxLst.index(self.kb2) + 16 - 1].colliderect(self.rw1) or \
                            self.boxLst[self.boxLst.index(self.kb2) + 16 - 1].colliderect(self.rw2) or \
                            self.boxLst[self.boxLst.index(self.kb2) + 16 - 1].colliderect(self.kw1) or \
                            self.boxLst[self.boxLst.index(self.kb2) + 16 - 1].colliderect(self.kw2) or \
                            self.boxLst[self.boxLst.index(self.kb2) + 16 - 1].colliderect(self.bw1) or \
                            self.boxLst[self.boxLst.index(self.kb2) + 16 - 1].colliderect(self.bw2):
                        pygame.draw.rect(self.window, self.red, self.boxLst[self.boxLst.index(self.kb2) + 16 - 1], border_radius=100)
                        self.knightBlack2Clicked = 1
                        self.pawnBlack1Clicked = 0
                        self.pawnBlack2Clicked = 0
                        self.pawnBlack3Clicked = 0
                        self.pawnBlack4Clicked = 0
                        self.pawnBlack5Clicked = 0
                        self.pawnBlack6Clicked = 0
                        self.pawnBlack7Clicked = 0
                        self.pawnBlack8Clicked = 0
                        self.KingBlackClicked = 0
                        self.knightBlack1Clicked = 0
                        self.rookBlack1Clicked = 0
                        self.rookBlack2Clicked = 0
                        self.bishopBlack1Clicked = 0
                        self.bishopBlack2Clicked = 0
                        self.QueenBlackClicked = 0
                        self.knightBlack2Clicked_cut = 1
                if self.kb2.x < self.box8.x and self.kb2.y > self.box9.y:
                    if self.boxLst[self.boxLst.index(self.kb2) - 16 + 1].colliderect(self.pw1) or \
                            self.boxLst[self.boxLst.index(self.kb2) - 16 + 1].colliderect(self.pw2) or \
                            self.boxLst[self.boxLst.index(self.kb2) - 16 + 1].colliderect(self.pw3) or \
                            self.boxLst[self.boxLst.index(self.kb2) - 16 + 1].colliderect(self.pw4) or \
                            self.boxLst[self.boxLst.index(self.kb2) - 16 + 1].colliderect(self.pw5) or \
                            self.boxLst[self.boxLst.index(self.kb2) - 16 + 1].colliderect(self.pw6) or \
                            self.boxLst[self.boxLst.index(self.kb2) - 16 + 1].colliderect(self.pw7) or \
                            self.boxLst[self.boxLst.index(self.kb2) - 16 + 1].colliderect(self.pw8) or \
                            self.boxLst[self.boxLst.index(self.kb2) - 16 + 1].colliderect(self.Kw) or \
                            self.boxLst[self.boxLst.index(self.kb2) - 16 + 1].colliderect(self.Qw) or \
                            self.boxLst[self.boxLst.index(self.kb2) - 16 + 1].colliderect(self.rw1) or \
                            self.boxLst[self.boxLst.index(self.kb2) - 16 + 1].colliderect(self.rw2) or \
                            self.boxLst[self.boxLst.index(self.kb2) - 16 + 1].colliderect(self.kw1) or \
                            self.boxLst[self.boxLst.index(self.kb2) - 16 + 1].colliderect(self.kw2) or \
                            self.boxLst[self.boxLst.index(self.kb2) - 16 + 1].colliderect(self.bw1) or \
                            self.boxLst[self.boxLst.index(self.kb2) - 16 + 1].colliderect(self.bw2):
                        pygame.draw.rect(self.window, self.red, self.boxLst[self.boxLst.index(self.kb2) - 16 + 1], border_radius=100)
                        self.knightBlack2Clicked = 1
                        self.pawnBlack1Clicked = 0
                        self.pawnBlack2Clicked = 0
                        self.pawnBlack3Clicked = 0
                        self.pawnBlack4Clicked = 0
                        self.pawnBlack5Clicked = 0
                        self.pawnBlack6Clicked = 0
                        self.pawnBlack7Clicked = 0
                        self.pawnBlack8Clicked = 0
                        self.KingBlackClicked = 0
                        self.knightBlack1Clicked = 0
                        self.rookBlack1Clicked = 0
                        self.rookBlack2Clicked = 0
                        self.bishopBlack1Clicked = 0
                        self.bishopBlack2Clicked = 0
                        self.QueenBlackClicked = 0
                        self.knightBlack2Clicked_cut = 1
                if self.kb2.x > self.box1.x and self.kb2.y > self.box9.y:
                    if self.boxLst[self.boxLst.index(self.kb2) - 16 - 1].colliderect(self.pw1) or \
                            self.boxLst[self.boxLst.index(self.kb2) - 16 - 1].colliderect(self.pw2) or \
                            self.boxLst[self.boxLst.index(self.kb2) - 16 - 1].colliderect(self.pw3) or \
                            self.boxLst[self.boxLst.index(self.kb2) - 16 - 1].colliderect(self.pw4) or \
                            self.boxLst[self.boxLst.index(self.kb2) - 16 - 1].colliderect(self.pw5) or \
                            self.boxLst[self.boxLst.index(self.kb2) - 16 - 1].colliderect(self.pw6) or \
                            self.boxLst[self.boxLst.index(self.kb2) - 16 - 1].colliderect(self.pw7) or \
                            self.boxLst[self.boxLst.index(self.kb2) - 16 - 1].colliderect(self.pw8) or \
                            self.boxLst[self.boxLst.index(self.kb2) - 16 - 1].colliderect(self.Kw) or \
                            self.boxLst[self.boxLst.index(self.kb2) - 16 - 1].colliderect(self.Qw) or \
                            self.boxLst[self.boxLst.index(self.kb2) - 16 - 1].colliderect(self.rw1) or \
                            self.boxLst[self.boxLst.index(self.kb2) - 16 - 1].colliderect(self.rw2) or \
                            self.boxLst[self.boxLst.index(self.kb2) - 16 - 1].colliderect(self.kw1) or \
                            self.boxLst[self.boxLst.index(self.kb2) - 16 - 1].colliderect(self.kw2) or \
                            self.boxLst[self.boxLst.index(self.kb2) - 16 - 1].colliderect(self.bw1) or \
                            self.boxLst[self.boxLst.index(self.kb2) - 16 - 1].colliderect(self.bw2):
                        pygame.draw.rect(self.window, self.red, self.boxLst[self.boxLst.index(self.kb2) - 16 - 1], border_radius=100)
                        self.knightBlack2Clicked = 1
                        self.pawnBlack1Clicked = 0
                        self.pawnBlack2Clicked = 0
                        self.pawnBlack3Clicked = 0
                        self.pawnBlack4Clicked = 0
                        self.pawnBlack5Clicked = 0
                        self.pawnBlack6Clicked = 0
                        self.pawnBlack7Clicked = 0
                        self.pawnBlack8Clicked = 0
                        self.KingBlackClicked = 0
                        self.knightBlack1Clicked = 0
                        self.rookBlack1Clicked = 0
                        self.rookBlack2Clicked = 0
                        self.bishopBlack1Clicked = 0
                        self.bishopBlack2Clicked = 0
                        self.QueenBlackClicked = 0
                        self.knightBlack2Clicked_cut = 1
                if self.kb2.x < self.box7.x and self.kb2.y < self.box57.y:
                    if self.boxLst[self.boxLst.index(self.kb2) + 8 + 2].colliderect(self.pw1) or \
                            self.boxLst[self.boxLst.index(self.kb2) + 8 + 2].colliderect(self.pw2) or \
                            self.boxLst[self.boxLst.index(self.kb2) + 8 + 2].colliderect(self.pw3) or \
                            self.boxLst[self.boxLst.index(self.kb2) + 8 + 2].colliderect(self.pw4) or \
                            self.boxLst[self.boxLst.index(self.kb2) + 8 + 2].colliderect(self.pw5) or \
                            self.boxLst[self.boxLst.index(self.kb2) + 8 + 2].colliderect(self.pw6) or \
                            self.boxLst[self.boxLst.index(self.kb2) + 8 + 2].colliderect(self.pw7) or \
                            self.boxLst[self.boxLst.index(self.kb2) + 8 + 2].colliderect(self.pw8) or \
                            self.boxLst[self.boxLst.index(self.kb2) + 8 + 2].colliderect(self.Kw) or \
                            self.boxLst[self.boxLst.index(self.kb2) + 8 + 2].colliderect(self.Qw) or \
                            self.boxLst[self.boxLst.index(self.kb2) + 8 + 2].colliderect(self.rw1) or \
                            self.boxLst[self.boxLst.index(self.kb2) + 8 + 2].colliderect(self.rw2) or \
                            self.boxLst[self.boxLst.index(self.kb2) + 8 + 2].colliderect(self.kw1) or \
                            self.boxLst[self.boxLst.index(self.kb2) + 8 + 2].colliderect(self.kw2) or \
                            self.boxLst[self.boxLst.index(self.kb2) + 8 + 2].colliderect(self.bw1) or \
                            self.boxLst[self.boxLst.index(self.kb2) + 8 + 2].colliderect(self.bw2):
                        pygame.draw.rect(self.window, self.red, self.boxLst[self.boxLst.index(self.kb2) + 8 + 2], border_radius=100)
                        self.knightBlack2Clicked = 1
                        self.pawnBlack1Clicked = 0
                        self.pawnBlack2Clicked = 0
                        self.pawnBlack3Clicked = 0
                        self.pawnBlack4Clicked = 0
                        self.pawnBlack5Clicked = 0
                        self.pawnBlack6Clicked = 0
                        self.pawnBlack7Clicked = 0
                        self.pawnBlack8Clicked = 0
                        self.KingBlackClicked = 0
                        self.knightBlack1Clicked = 0
                        self.rookBlack1Clicked = 0
                        self.rookBlack2Clicked = 0
                        self.bishopBlack1Clicked = 0
                        self.bishopBlack2Clicked = 0
                        self.QueenBlackClicked = 0
                        self.knightBlack2Clicked_cut = 1
                if self.kb2.x > self.box2.x and self.kb2.y < self.box57.y:
                    if self.boxLst[self.boxLst.index(self.kb2) + 8 - 2].colliderect(self.pw1) or \
                            self.boxLst[self.boxLst.index(self.kb2) + 8 - 2].colliderect(self.pw2) or \
                            self.boxLst[self.boxLst.index(self.kb2) + 8 - 2].colliderect(self.pw3) or \
                            self.boxLst[self.boxLst.index(self.kb2) + 8 - 2].colliderect(self.pw4) or \
                            self.boxLst[self.boxLst.index(self.kb2) + 8 - 2].colliderect(self.pw5) or \
                            self.boxLst[self.boxLst.index(self.kb2) + 8 - 2].colliderect(self.pw6) or \
                            self.boxLst[self.boxLst.index(self.kb2) + 8 - 2].colliderect(self.pw7) or \
                            self.boxLst[self.boxLst.index(self.kb2) + 8 - 2].colliderect(self.pw8) or \
                            self.boxLst[self.boxLst.index(self.kb2) + 8 - 2].colliderect(self.Kw) or \
                            self.boxLst[self.boxLst.index(self.kb2) + 8 - 2].colliderect(self.Qw) or \
                            self.boxLst[self.boxLst.index(self.kb2) + 8 - 2].colliderect(self.rw1) or \
                            self.boxLst[self.boxLst.index(self.kb2) + 8 - 2].colliderect(self.rw2) or \
                            self.boxLst[self.boxLst.index(self.kb2) + 8 - 2].colliderect(self.kw1) or \
                            self.boxLst[self.boxLst.index(self.kb2) + 8 - 2].colliderect(self.kw2) or \
                            self.boxLst[self.boxLst.index(self.kb2) + 8 - 2].colliderect(self.bw1) or \
                            self.boxLst[self.boxLst.index(self.kb2) + 8 - 2].colliderect(self.bw2):
                        pygame.draw.rect(self.window, self.red, self.boxLst[self.boxLst.index(self.kb2) + 8 - 2], border_radius=100)
                        self.knightBlack2Clicked = 1
                        self.pawnBlack1Clicked = 0
                        self.pawnBlack2Clicked = 0
                        self.pawnBlack3Clicked = 0
                        self.pawnBlack4Clicked = 0
                        self.pawnBlack5Clicked = 0
                        self.pawnBlack6Clicked = 0
                        self.pawnBlack7Clicked = 0
                        self.pawnBlack8Clicked = 0
                        self.KingBlackClicked = 0
                        self.knightBlack1Clicked = 0
                        self.rookBlack1Clicked = 0
                        self.rookBlack2Clicked = 0
                        self.bishopBlack1Clicked = 0
                        self.bishopBlack2Clicked = 0
                        self.QueenBlackClicked = 0
                        self.knightBlack2Clicked_cut = 1
                if self.kb2.x < self.box7.x and self.kb2.y > self.box1.y:
                    if self.boxLst[self.boxLst.index(self.kb2) - 8 + 2].colliderect(self.pw1) or \
                            self.boxLst[self.boxLst.index(self.kb2) - 8 + 2].colliderect(self.pw2) or \
                            self.boxLst[self.boxLst.index(self.kb2) - 8 + 2].colliderect(self.pw3) or \
                            self.boxLst[self.boxLst.index(self.kb2) - 8 + 2].colliderect(self.pw4) or \
                            self.boxLst[self.boxLst.index(self.kb2) - 8 + 2].colliderect(self.pw5) or \
                            self.boxLst[self.boxLst.index(self.kb2) - 8 + 2].colliderect(self.pw6) or \
                            self.boxLst[self.boxLst.index(self.kb2) - 8 + 2].colliderect(self.pw7) or \
                            self.boxLst[self.boxLst.index(self.kb2) - 8 + 2].colliderect(self.pw8) or \
                            self.boxLst[self.boxLst.index(self.kb2) - 8 + 2].colliderect(self.Kw) or \
                            self.boxLst[self.boxLst.index(self.kb2) - 8 + 2].colliderect(self.Qw) or \
                            self.boxLst[self.boxLst.index(self.kb2) - 8 + 2].colliderect(self.rw1) or \
                            self.boxLst[self.boxLst.index(self.kb2) - 8 + 2].colliderect(self.rw2) or \
                            self.boxLst[self.boxLst.index(self.kb2) - 8 + 2].colliderect(self.kw1) or \
                            self.boxLst[self.boxLst.index(self.kb2) - 8 + 2].colliderect(self.kw2) or \
                            self.boxLst[self.boxLst.index(self.kb2) - 8 + 2].colliderect(self.bw1) or \
                            self.boxLst[self.boxLst.index(self.kb2) - 8 + 2].colliderect(self.bw2):
                        pygame.draw.rect(self.window, self.red, self.boxLst[self.boxLst.index(self.kb2) - 8 + 2], border_radius=100)
                        self.knightBlack2Clicked = 1
                        self.pawnBlack1Clicked = 0
                        self.pawnBlack2Clicked = 0
                        self.pawnBlack3Clicked = 0
                        self.pawnBlack4Clicked = 0
                        self.pawnBlack5Clicked = 0
                        self.pawnBlack6Clicked = 0
                        self.pawnBlack7Clicked = 0
                        self.pawnBlack8Clicked = 0
                        self.KingBlackClicked = 0
                        self.knightBlack1Clicked = 0
                        self.rookBlack1Clicked = 0
                        self.rookBlack2Clicked = 0
                        self.bishopBlack1Clicked = 0
                        self.bishopBlack2Clicked = 0
                        self.QueenBlackClicked = 0
                        self.knightBlack2Clicked_cut = 1
                if self.kb2.x > self.box2.x and self.kb2.y > self.box1.y:
                    if self.boxLst[self.boxLst.index(self.kb2) - 8 - 2].colliderect(self.pw1) or \
                            self.boxLst[self.boxLst.index(self.kb2) - 8 - 2].colliderect(self.pw2) or \
                            self.boxLst[self.boxLst.index(self.kb2) - 8 - 2].colliderect(self.pw3) or \
                            self.boxLst[self.boxLst.index(self.kb2) - 8 - 2].colliderect(self.pw4) or \
                            self.boxLst[self.boxLst.index(self.kb2) - 8 - 2].colliderect(self.pw5) or \
                            self.boxLst[self.boxLst.index(self.kb2) - 8 - 2].colliderect(self.pw6) or \
                            self.boxLst[self.boxLst.index(self.kb2) - 8 - 2].colliderect(self.pw7) or \
                            self.boxLst[self.boxLst.index(self.kb2) - 8 - 2].colliderect(self.pw8) or \
                            self.boxLst[self.boxLst.index(self.kb2) - 8 - 2].colliderect(self.Kw) or \
                            self.boxLst[self.boxLst.index(self.kb2) - 8 - 2].colliderect(self.Qw) or \
                            self.boxLst[self.boxLst.index(self.kb2) - 8 - 2].colliderect(self.rw1) or \
                            self.boxLst[self.boxLst.index(self.kb2) - 8 - 2].colliderect(self.rw2) or \
                            self.boxLst[self.boxLst.index(self.kb2) - 8 - 2].colliderect(self.kw1) or \
                            self.boxLst[self.boxLst.index(self.kb2) - 8 - 2].colliderect(self.kw2) or \
                            self.boxLst[self.boxLst.index(self.kb2) - 8 - 2].colliderect(self.bw1) or \
                            self.boxLst[self.boxLst.index(self.kb2) - 8 - 2].colliderect(self.bw2):
                        pygame.draw.rect(self.window, self.red, self.boxLst[self.boxLst.index(self.kb2) - 8 - 2], border_radius=100)
                        self.knightBlack2Clicked = 1
                        self.pawnBlack1Clicked = 0
                        self.pawnBlack2Clicked = 0
                        self.pawnBlack3Clicked = 0
                        self.pawnBlack4Clicked = 0
                        self.pawnBlack5Clicked = 0
                        self.pawnBlack6Clicked = 0
                        self.pawnBlack7Clicked = 0
                        self.pawnBlack8Clicked = 0
                        self.KingBlackClicked = 0
                        self.knightBlack1Clicked = 0
                        self.rookBlack1Clicked = 0
                        self.rookBlack2Clicked = 0
                        self.bishopBlack1Clicked = 0
                        self.bishopBlack2Clicked = 0
                        self.QueenBlackClicked = 0
                        self.knightBlack2Clicked_cut = 1

        if self.knightBlack2Clicked == 1:
            # cut white pieces
            if self.knightBlack2Clicked_cut == 1:
                if self.kb2.x > self.box1.x and self.kb2.y < self.box49.y:
                    if self.boxLst[self.boxLst.index(self.kb2) + 16 - 1].collidepoint(self.mouse_x, self.mouse_y):
                        if self.boxLst[self.boxLst.index(self.kb2) + 16 - 1].colliderect(self.pw1):
                            self.pw1 = self.whiteCutPiece_1
                        if self.boxLst[self.boxLst.index(self.kb2) + 16 - 1].colliderect(self.pw2):
                            self.pw2 = self.whiteCutPiece_2
                        if self.boxLst[self.boxLst.index(self.kb2) + 16 - 1].colliderect(self.pw3):
                            self.pw3 = self.whiteCutPiece_3
                        if self.boxLst[self.boxLst.index(self.kb2) + 16 - 1].colliderect(self.pw4):
                            self.pw4 = self.whiteCutPiece_4
                        if self.boxLst[self.boxLst.index(self.kb2) + 16 - 1].colliderect(self.pw5):
                            self.pw5 = self.whiteCutPiece_5
                        if self.boxLst[self.boxLst.index(self.kb2) + 16 - 1].colliderect(self.pw6):
                            self.pw6 = self.whiteCutPiece_6
                        if self.boxLst[self.boxLst.index(self.kb2) + 16 - 1].colliderect(self.pw7):
                            self.pw7 = self.whiteCutPiece_7
                        if self.boxLst[self.boxLst.index(self.kb2) + 16 - 1].colliderect(self.pw8):
                            self.pw8 = self.whiteCutPiece_8
                        if self.boxLst[self.boxLst.index(self.kb2) + 16 - 1].colliderect(self.rw1):
                            self.rw1 = self.whiteCutPiece_9
                        if self.boxLst[self.boxLst.index(self.kb2) + 16 - 1].colliderect(self.rw2):
                            self.rw2 = self.whiteCutPiece_10
                        if self.boxLst[self.boxLst.index(self.kb2) + 16 - 1].colliderect(self.kw1):
                            self.kw1 = self.whiteCutPiece_11
                        if self.boxLst[self.boxLst.index(self.kb2) + 16 - 1].colliderect(self.kw2):
                            self.kw2 = self.whiteCutPiece_12
                        if self.boxLst[self.boxLst.index(self.kb2) + 16 - 1].colliderect(self.bw1):
                            self.bw1 = self.whiteCutPiece_13
                        if self.boxLst[self.boxLst.index(self.kb2) + 16 - 1].colliderect(self.bw2):
                            self.bw2 = self.whiteCutPiece_14
                        if self.boxLst[self.boxLst.index(self.kb2) + 16 - 1].colliderect(self.Kw):
                            self.Kw = self.whiteCutPiece_15
                            self.KingWhite_isDead = 1
                        if self.boxLst[self.boxLst.index(self.kb2) + 16 - 1].colliderect(self.Qw):
                            self.Qw = self.whiteCutPiece_16
                        self.kb2 = self.boxLst[self.boxLst.index(self.kb2) + 16 - 1]
                        self.knightBlack2Clicked = 0
                        self.knightBlack2Clicked_cut = 0
                        self.turn = "white"

                if self.kb2.x < self.box8.x and self.kb2.y < self.box49.y:
                    if self.boxLst[self.boxLst.index(self.kb2) + 16 + 1].collidepoint(self.mouse_x, self.mouse_y):
                        if self.boxLst[self.boxLst.index(self.kb2) + 16 + 1].colliderect(self.pw1):
                            self.pw1 = self.whiteCutPiece_1
                        if self.boxLst[self.boxLst.index(self.kb2) + 16 + 1].colliderect(self.pw2):
                            self.pw2 = self.whiteCutPiece_2
                        if self.boxLst[self.boxLst.index(self.kb2) + 16 + 1].colliderect(self.pw3):
                            self.pw3 = self.whiteCutPiece_3
                        if self.boxLst[self.boxLst.index(self.kb2) + 16 + 1].colliderect(self.pw4):
                            self.pw4 = self.whiteCutPiece_4
                        if self.boxLst[self.boxLst.index(self.kb2) + 16 + 1].colliderect(self.pw5):
                            self.pw5 = self.whiteCutPiece_5
                        if self.boxLst[self.boxLst.index(self.kb2) + 16 + 1].colliderect(self.pw6):
                            self.pw6 = self.whiteCutPiece_6
                        if self.boxLst[self.boxLst.index(self.kb2) + 16 + 1].colliderect(self.pw7):
                            self.pw7 = self.whiteCutPiece_7
                        if self.boxLst[self.boxLst.index(self.kb2) + 16 + 1].colliderect(self.pw8):
                            self.pw8 = self.whiteCutPiece_8
                        if self.boxLst[self.boxLst.index(self.kb2) + 16 + 1].colliderect(self.rw1):
                            self.rw1 = self.whiteCutPiece_9
                        if self.boxLst[self.boxLst.index(self.kb2) + 16 + 1].colliderect(self.rw2):
                            self.rw2 = self.whiteCutPiece_10
                        if self.boxLst[self.boxLst.index(self.kb2) + 16 + 1].colliderect(self.kw1):
                            self.kw1 = self.whiteCutPiece_11
                        if self.boxLst[self.boxLst.index(self.kb2) + 16 + 1].colliderect(self.kw2):
                            self.kw2 = self.whiteCutPiece_12
                        if self.boxLst[self.boxLst.index(self.kb2) + 16 + 1].colliderect(self.bw1):
                            self.bw1 = self.whiteCutPiece_13
                        if self.boxLst[self.boxLst.index(self.kb2) + 16 + 1].colliderect(self.bw2):
                            self.bw2 = self.whiteCutPiece_14
                        if self.boxLst[self.boxLst.index(self.kb2) + 16 + 1].colliderect(self.Kw):
                            self.Kw = self.whiteCutPiece_15
                            self.KingWhite_isDead = 1
                        if self.boxLst[self.boxLst.index(self.kb2) + 16 + 1].colliderect(self.Qw):
                            self.Qw = self.whiteCutPiece_16
                        self.kb2 = self.boxLst[self.boxLst.index(self.kb2) + 16 + 1]
                        self.knightBlack2Clicked = 0
                        self.knightBlack2Clicked_cut = 0
                        self.turn = "white"

                if self.kb2.x < self.box8.x and self.kb2.y > self.box9.y:
                    if self.boxLst[self.boxLst.index(self.kb2) - 16 + 1].collidepoint(self.mouse_x, self.mouse_y):
                        if self.boxLst[self.boxLst.index(self.kb2) - 16 + 1].colliderect(self.pw1):
                            self.pw1 = self.whiteCutPiece_1
                        if self.boxLst[self.boxLst.index(self.kb2) - 16 + 1].colliderect(self.pw2):
                            self.pw2 = self.whiteCutPiece_2
                        if self.boxLst[self.boxLst.index(self.kb2) - 16 + 1].colliderect(self.pw3):
                            self.pw3 = self.whiteCutPiece_3
                        if self.boxLst[self.boxLst.index(self.kb2) - 16 + 1].colliderect(self.pw4):
                            self.pw4 = self.whiteCutPiece_4
                        if self.boxLst[self.boxLst.index(self.kb2) - 16 + 1].colliderect(self.pw5):
                            self.pw5 = self.whiteCutPiece_5
                        if self.boxLst[self.boxLst.index(self.kb2) - 16 + 1].colliderect(self.pw6):
                            self.pw6 = self.whiteCutPiece_6
                        if self.boxLst[self.boxLst.index(self.kb2) - 16 + 1].colliderect(self.pw7):
                            self.pw7 = self.whiteCutPiece_7
                        if self.boxLst[self.boxLst.index(self.kb2) - 16 + 1].colliderect(self.pw8):
                            self.pw8 = self.whiteCutPiece_8
                        if self.boxLst[self.boxLst.index(self.kb2) - 16 + 1].colliderect(self.rw1):
                            self.rw1 = self.whiteCutPiece_9
                        if self.boxLst[self.boxLst.index(self.kb2) - 16 + 1].colliderect(self.rw2):
                            self.rw2 = self.whiteCutPiece_10
                        if self.boxLst[self.boxLst.index(self.kb2) - 16 + 1].colliderect(self.kw1):
                            self.kw1 = self.whiteCutPiece_11
                        if self.boxLst[self.boxLst.index(self.kb2) - 16 + 1].colliderect(self.kw2):
                            self.kw2 = self.whiteCutPiece_12
                        if self.boxLst[self.boxLst.index(self.kb2) - 16 + 1].colliderect(self.bw1):
                            self.bw1 = self.whiteCutPiece_13
                        if self.boxLst[self.boxLst.index(self.kb2) - 16 + 1].colliderect(self.bw2):
                            self.bw2 = self.whiteCutPiece_14
                        if self.boxLst[self.boxLst.index(self.kb2) - 16 + 1].colliderect(self.Kw):
                            self.Kw = self.whiteCutPiece_15
                            self.KingWhite_isDead = 1
                        if self.boxLst[self.boxLst.index(self.kb2) - 16 + 1].colliderect(self.Qw):
                            self.Qw = self.whiteCutPiece_16
                        self.kb2 = self.boxLst[self.boxLst.index(self.kb2) - 16 + 1]
                        self.knightBlack2Clicked = 0
                        self.knightBlack2Clicked_cut = 0
                        self.turn = "white"

                if self.kb2.x > self.box1.x and self.kb2.y > self.box9.y:
                    if self.boxLst[self.boxLst.index(self.kb2) - 16 - 1].collidepoint(self.mouse_x, self.mouse_y):
                        if self.boxLst[self.boxLst.index(self.kb2) - 16 - 1].colliderect(self.pw1):
                            self.pw1 = self.whiteCutPiece_1
                        if self.boxLst[self.boxLst.index(self.kb2) - 16 - 1].colliderect(self.pw2):
                            self.pw2 = self.whiteCutPiece_2
                        if self.boxLst[self.boxLst.index(self.kb2) - 16 - 1].colliderect(self.pw3):
                            self.pw3 = self.whiteCutPiece_3
                        if self.boxLst[self.boxLst.index(self.kb2) - 16 - 1].colliderect(self.pw4):
                            self.pw4 = self.whiteCutPiece_4
                        if self.boxLst[self.boxLst.index(self.kb2) - 16 - 1].colliderect(self.pw5):
                            self.pw5 = self.whiteCutPiece_5
                        if self.boxLst[self.boxLst.index(self.kb2) - 16 - 1].colliderect(self.pw6):
                            self.pw6 = self.whiteCutPiece_6
                        if self.boxLst[self.boxLst.index(self.kb2) - 16 - 1].colliderect(self.pw7):
                            self.pw7 = self.whiteCutPiece_7
                        if self.boxLst[self.boxLst.index(self.kb2) - 16 - 1].colliderect(self.pw8):
                            self.pw8 = self.whiteCutPiece_8
                        if self.boxLst[self.boxLst.index(self.kb2) - 16 - 1].colliderect(self.rw1):
                            self.rw1 = self.whiteCutPiece_9
                        if self.boxLst[self.boxLst.index(self.kb2) - 16 - 1].colliderect(self.rw2):
                            self.rw2 = self.whiteCutPiece_10
                        if self.boxLst[self.boxLst.index(self.kb2) - 16 - 1].colliderect(self.kw1):
                            self.kw1 = self.whiteCutPiece_11
                        if self.boxLst[self.boxLst.index(self.kb2) - 16 - 1].colliderect(self.kw2):
                            self.kw2 = self.whiteCutPiece_12
                        if self.boxLst[self.boxLst.index(self.kb2) - 16 - 1].colliderect(self.bw1):
                            self.bw1 = self.whiteCutPiece_13
                        if self.boxLst[self.boxLst.index(self.kb2) - 16 - 1].colliderect(self.bw2):
                            self.bw2 = self.whiteCutPiece_14
                        if self.boxLst[self.boxLst.index(self.kb2) - 16 - 1].colliderect(self.Kw):
                            self.Kw = self.whiteCutPiece_15
                            self.KingWhite_isDead = 1
                        if self.boxLst[self.boxLst.index(self.kb2) - 16 - 1].colliderect(self.Qw):
                            self.Qw = self.whiteCutPiece_16
                        self.kb2 = self.boxLst[self.boxLst.index(self.kb2) - 16 - 1]
                        self.knightBlack2Clicked = 0
                        self.knightBlack2Clicked_cut = 0
                        self.turn = "white"

                if self.kb2.x < self.box7.x and self.kb2.y < self.box57.y:
                    if self.boxLst[self.boxLst.index(self.kb2) + 8 + 2].collidepoint(self.mouse_x, self.mouse_y):
                        if self.boxLst[self.boxLst.index(self.kb2) + 8 + 2].colliderect(self.pw1):
                            self.pw1 = self.whiteCutPiece_1
                        if self.boxLst[self.boxLst.index(self.kb2) + 8 + 2].colliderect(self.pw2):
                            self.pw2 = self.whiteCutPiece_2
                        if self.boxLst[self.boxLst.index(self.kb2) + 8 + 2].colliderect(self.pw3):
                            self.pw3 = self.whiteCutPiece_3
                        if self.boxLst[self.boxLst.index(self.kb2) + 8 + 2].colliderect(self.pw4):
                            self.pw4 = self.whiteCutPiece_4
                        if self.boxLst[self.boxLst.index(self.kb2) + 8 + 2].colliderect(self.pw5):
                            self.pw5 = self.whiteCutPiece_5
                        if self.boxLst[self.boxLst.index(self.kb2) + 8 + 2].colliderect(self.pw6):
                            self.pw6 = self.whiteCutPiece_6
                        if self.boxLst[self.boxLst.index(self.kb2) + 8 + 2].colliderect(self.pw7):
                            self.pw7 = self.whiteCutPiece_7
                        if self.boxLst[self.boxLst.index(self.kb2) + 8 + 2].colliderect(self.pw8):
                            self.pw8 = self.whiteCutPiece_8
                        if self.boxLst[self.boxLst.index(self.kb2) + 8 + 2].colliderect(self.rw1):
                            self.rw1 = self.whiteCutPiece_9
                        if self.boxLst[self.boxLst.index(self.kb2) + 8 + 2].colliderect(self.rw2):
                            self.rw2 = self.whiteCutPiece_10
                        if self.boxLst[self.boxLst.index(self.kb2) + 8 + 2].colliderect(self.kw1):
                            self.kw1 = self.whiteCutPiece_11
                        if self.boxLst[self.boxLst.index(self.kb2) + 8 + 2].colliderect(self.kw2):
                            self.kw2 = self.whiteCutPiece_12
                        if self.boxLst[self.boxLst.index(self.kb2) + 8 + 2].colliderect(self.bw1):
                            self.bw1 = self.whiteCutPiece_13
                        if self.boxLst[self.boxLst.index(self.kb2) + 8 + 2].colliderect(self.bw2):
                            self.bw2 = self.whiteCutPiece_14
                        if self.boxLst[self.boxLst.index(self.kb2) + 8 + 2].colliderect(self.Kw):
                            self.Kw = self.whiteCutPiece_15
                            self.KingWhite_isDead = 1
                        if self.boxLst[self.boxLst.index(self.kb2) + 8 + 2].colliderect(self.Qw):
                            self.Qw = self.whiteCutPiece_16
                        self.kb2 = self.boxLst[self.boxLst.index(self.kb2) + 8 + 2]
                        self.knightBlack2Clicked = 0
                        self.knightBlack2Clicked_cut = 0
                        self.turn = "white"

                if self.kb2.x > self.box2.x and self.kb2.y < self.box57.y:
                    if self.boxLst[self.boxLst.index(self.kb2) + 8 - 2].collidepoint(self.mouse_x, self.mouse_y):
                        if self.boxLst[self.boxLst.index(self.kb2) + 8 - 2].colliderect(self.pw1):
                            self.pw1 = self.whiteCutPiece_1
                        if self.boxLst[self.boxLst.index(self.kb2) + 8 - 2].colliderect(self.pw2):
                            self.pw2 = self.whiteCutPiece_2
                        if self.boxLst[self.boxLst.index(self.kb2) + 8 - 2].colliderect(self.pw3):
                            self.pw3 = self.whiteCutPiece_3
                        if self.boxLst[self.boxLst.index(self.kb2) + 8 - 2].colliderect(self.pw4):
                            self.pw4 = self.whiteCutPiece_4
                        if self.boxLst[self.boxLst.index(self.kb2) + 8 - 2].colliderect(self.pw5):
                            self.pw5 = self.whiteCutPiece_5
                        if self.boxLst[self.boxLst.index(self.kb2) + 8 - 2].colliderect(self.pw6):
                            self.pw6 = self.whiteCutPiece_6
                        if self.boxLst[self.boxLst.index(self.kb2) + 8 - 2].colliderect(self.pw7):
                            self.pw7 = self.whiteCutPiece_7
                        if self.boxLst[self.boxLst.index(self.kb2) + 8 - 2].colliderect(self.pw8):
                            self.pw8 = self.whiteCutPiece_8
                        if self.boxLst[self.boxLst.index(self.kb2) + 8 - 2].colliderect(self.rw1):
                            self.rw1 = self.whiteCutPiece_9
                        if self.boxLst[self.boxLst.index(self.kb2) + 8 - 2].colliderect(self.rw2):
                            self.rw2 = self.whiteCutPiece_10
                        if self.boxLst[self.boxLst.index(self.kb2) + 8 - 2].colliderect(self.kw1):
                            self.kw1 = self.whiteCutPiece_11
                        if self.boxLst[self.boxLst.index(self.kb2) + 8 - 2].colliderect(self.kw2):
                            self.kw2 = self.whiteCutPiece_12
                        if self.boxLst[self.boxLst.index(self.kb2) + 8 - 2].colliderect(self.bw1):
                            self.bw1 = self.whiteCutPiece_13
                        if self.boxLst[self.boxLst.index(self.kb2) + 8 - 2].colliderect(self.bw2):
                            self.bw2 = self.whiteCutPiece_14
                        if self.boxLst[self.boxLst.index(self.kb2) + 8 - 2].colliderect(self.Kw):
                            self.Kw = self.whiteCutPiece_15
                            self.KingWhite_isDead = 1
                        if self.boxLst[self.boxLst.index(self.kb2) + 8 - 2].colliderect(self.Qw):
                            self.Qw = self.whiteCutPiece_16
                        self.kb2 = self.boxLst[self.boxLst.index(self.kb2) + 8 - 2]
                        self.knightBlack2Clicked = 0
                        self.knightBlack2Clicked_cut = 0
                        self.turn = "white"

                if self.kb2.x < self.box7.x and self.kb2.y > self.box1.y:
                    if self.boxLst[self.boxLst.index(self.kb2) - 8 + 2].collidepoint(self.mouse_x, self.mouse_y):
                        if self.boxLst[self.boxLst.index(self.kb2) - 8 + 2].colliderect(self.pw1):
                            self.pw1 = self.whiteCutPiece_1
                        if self.boxLst[self.boxLst.index(self.kb2) - 8 + 2].colliderect(self.pw2):
                            self.pw2 = self.whiteCutPiece_2
                        if self.boxLst[self.boxLst.index(self.kb2) - 8 + 2].colliderect(self.pw3):
                            self.pw3 = self.whiteCutPiece_3
                        if self.boxLst[self.boxLst.index(self.kb2) - 8 + 2].colliderect(self.pw4):
                            self.pw4 = self.whiteCutPiece_4
                        if self.boxLst[self.boxLst.index(self.kb2) - 8 + 2].colliderect(self.pw5):
                            self.pw5 = self.whiteCutPiece_5
                        if self.boxLst[self.boxLst.index(self.kb2) - 8 + 2].colliderect(self.pw6):
                            self.pw6 = self.whiteCutPiece_6
                        if self.boxLst[self.boxLst.index(self.kb2) - 8 + 2].colliderect(self.pw7):
                            self.pw7 = self.whiteCutPiece_7
                        if self.boxLst[self.boxLst.index(self.kb2) - 8 + 2].colliderect(self.pw8):
                            self.pw8 = self.whiteCutPiece_8
                        if self.boxLst[self.boxLst.index(self.kb2) - 8 + 2].colliderect(self.rw1):
                            self.rw1 = self.whiteCutPiece_9
                        if self.boxLst[self.boxLst.index(self.kb2) - 8 + 2].colliderect(self.rw2):
                            self.rw2 = self.whiteCutPiece_10
                        if self.boxLst[self.boxLst.index(self.kb2) - 8 + 2].colliderect(self.kw1):
                            self.kw1 = self.whiteCutPiece_11
                        if self.boxLst[self.boxLst.index(self.kb2) - 8 + 2].colliderect(self.kw2):
                            self.kw2 = self.whiteCutPiece_12
                        if self.boxLst[self.boxLst.index(self.kb2) - 8 + 2].colliderect(self.bw1):
                            self.bw1 = self.whiteCutPiece_13
                        if self.boxLst[self.boxLst.index(self.kb2) - 8 + 2].colliderect(self.bw2):
                            self.bw2 = self.whiteCutPiece_14
                        if self.boxLst[self.boxLst.index(self.kb2) - 8 + 2].colliderect(self.Kw):
                            self.Kw = self.whiteCutPiece_15
                            self.KingWhite_isDead = 1
                        if self.boxLst[self.boxLst.index(self.kb2) - 8 + 2].colliderect(self.Qw):
                            self.Qw = self.whiteCutPiece_16
                        self.kb2 = self.boxLst[self.boxLst.index(self.kb2) - 8 + 2]
                        self.knightBlack2Clicked = 0
                        self.knightBlack2Clicked_cut = 0
                        self.turn = "white"

                if self.kb2.x > self.box2.x and self.kb2.y > self.box1.y:
                    if self.boxLst[self.boxLst.index(self.kb2) - 8 - 2].collidepoint(self.mouse_x, self.mouse_y):
                        if self.boxLst[self.boxLst.index(self.kb2) - 8 - 2].colliderect(self.pw1):
                            self.pw1 = self.whiteCutPiece_1
                        if self.boxLst[self.boxLst.index(self.kb2) - 8 - 2].colliderect(self.pw2):
                            self.pw2 = self.whiteCutPiece_2
                        if self.boxLst[self.boxLst.index(self.kb2) - 8 - 2].colliderect(self.pw3):
                            self.pw3 = self.whiteCutPiece_3
                        if self.boxLst[self.boxLst.index(self.kb2) - 8 - 2].colliderect(self.pw4):
                            self.pw4 = self.whiteCutPiece_4
                        if self.boxLst[self.boxLst.index(self.kb2) - 8 - 2].colliderect(self.pw5):
                            self.pw5 = self.whiteCutPiece_5
                        if self.boxLst[self.boxLst.index(self.kb2) - 8 - 2].colliderect(self.pw6):
                            self.pw6 = self.whiteCutPiece_6
                        if self.boxLst[self.boxLst.index(self.kb2) - 8 - 2].colliderect(self.pw7):
                            self.pw7 = self.whiteCutPiece_7
                        if self.boxLst[self.boxLst.index(self.kb2) - 8 - 2].colliderect(self.pw8):
                            self.pw8 = self.whiteCutPiece_8
                        if self.boxLst[self.boxLst.index(self.kb2) - 8 - 2].colliderect(self.rw1):
                            self.rw1 = self.whiteCutPiece_9
                        if self.boxLst[self.boxLst.index(self.kb2) - 8 - 2].colliderect(self.rw2):
                            self.rw2 = self.whiteCutPiece_10
                        if self.boxLst[self.boxLst.index(self.kb2) - 8 - 2].colliderect(self.kw1):
                            self.kw1 = self.whiteCutPiece_11
                        if self.boxLst[self.boxLst.index(self.kb2) - 8 - 2].colliderect(self.kw2):
                            self.kw2 = self.whiteCutPiece_12
                        if self.boxLst[self.boxLst.index(self.kb2) - 8 - 2].colliderect(self.bw1):
                            self.bw1 = self.whiteCutPiece_13
                        if self.boxLst[self.boxLst.index(self.kb2) - 8 - 2].colliderect(self.bw2):
                            self.bw2 = self.whiteCutPiece_14
                        if self.boxLst[self.boxLst.index(self.kb2) - 8 - 2].colliderect(self.Kw):
                            self.Kw = self.whiteCutPiece_15
                            self.KingWhite_isDead = 1
                        if self.boxLst[self.boxLst.index(self.kb2) - 8 - 2].colliderect(self.Qw):
                            self.Qw = self.whiteCutPiece_16
                        self.kb2 = self.boxLst[self.boxLst.index(self.kb2) - 8 - 2]
                        self.knightBlack2Clicked = 0
                        self.knightBlack2Clicked_cut = 0
                        self.turn = "white"

            # move the knight
            if self.kb2.x > self.box1.x and self.kb2.y < self.box49.y:
                if self.boxLst[self.boxLst.index(self.kb2) + 16 - 1].collidepoint(self.mouse_x, self.mouse_y):
                    self.kb2 = self.boxLst[self.boxLst.index(self.kb2) + 16 - 1]
                    self.knightBlack2Clicked = 0
                    self.turn = "white"
            if self.kb2.x < self.box8.x and self.kb2.y < self.box49.y:
                if self.boxLst[self.boxLst.index(self.kb2) + 16 + 1].collidepoint(self.mouse_x, self.mouse_y):
                    self.kb2 = self.boxLst[self.boxLst.index(self.kb2) + 16 + 1]
                    self.knightBlack2Clicked = 0
                    self.turn = "white"
            if self.kb2.x < self.box8.x and self.kb2.y > self.box9.y:
                if self.boxLst[self.boxLst.index(self.kb2) - 16 + 1].collidepoint(self.mouse_x, self.mouse_y):
                    self.kb2 = self.boxLst[self.boxLst.index(self.kb2) - 16 + 1]
                    self.knightBlack2Clicked = 0
                    self.turn = "white"
            if self.kb2.x > self.box1.x and self.kb2.y > self.box9.y:
                if self.boxLst[self.boxLst.index(self.kb2) - 16 - 1].collidepoint(self.mouse_x, self.mouse_y):
                    self.kb2 = self.boxLst[self.boxLst.index(self.kb2) - 16 - 1]
                    self.knightBlack2Clicked = 0
                    self.turn = "white"
            if self.kb2.x < self.box7.x and self.kb2.y < self.box57.y:
                if self.boxLst[self.boxLst.index(self.kb2) + 8 + 2].collidepoint(self.mouse_x, self.mouse_y):
                    self.kb2 = self.boxLst[self.boxLst.index(self.kb2) + 8 + 2]
                    self.knightBlack2Clicked = 0
                    self.turn = "white"
            if self.kb2.x > self.box2.x and self.kb2.y < self.box57.y:
                if self.boxLst[self.boxLst.index(self.kb2) + 8 - 2].collidepoint(self.mouse_x, self.mouse_y):
                    self.kb2 = self.boxLst[self.boxLst.index(self.kb2) + 8 - 2]
                    self.knightBlack2Clicked = 0
                    self.turn = "white"
            if self.kb2.x < self.box7.x and self.kb2.y > self.box1.y:
                if self.boxLst[self.boxLst.index(self.kb2) - 8 + 2].collidepoint(self.mouse_x, self.mouse_y):
                    self.kb2 = self.boxLst[self.boxLst.index(self.kb2) - 8 + 2]
                    self.knightBlack2Clicked = 0
                    self.turn = "white"
            if self.kb2.x > self.box2.x and self.kb2.y > self.box1.y:
                if self.boxLst[self.boxLst.index(self.kb2) - 8 - 2].collidepoint(self.mouse_x, self.mouse_y):
                    self.kb2 = self.boxLst[self.boxLst.index(self.kb2) - 8 - 2]
                    self.knightBlack2Clicked = 0
                    self.turn = "white"

    def rookB1Movements(self):
        for event in pygame.event.get():
            if event.type == MOUSEBUTTONDOWN:
                self.mouse_x, self.mouse_y = pygame.mouse.get_pos()

        # rook 1
        def drawRect_add(num):
            if not self.boxLst[self.boxLst.index(self.rb1) + num].colliderect(self.pw1) and not \
                    self.boxLst[self.boxLst.index(self.rb1) + num].colliderect(self.pw2) and not \
                    self.boxLst[self.boxLst.index(self.rb1) + num].colliderect(self.pw3) and not \
                    self.boxLst[self.boxLst.index(self.rb1) + num].colliderect(self.pw4) and not \
                    self.boxLst[self.boxLst.index(self.rb1) + num].colliderect(self.pw5) and not \
                    self.boxLst[self.boxLst.index(self.rb1) + num].colliderect(self.pw6) and not \
                    self.boxLst[self.boxLst.index(self.rb1) + num].colliderect(self.pw7) and not \
                    self.boxLst[self.boxLst.index(self.rb1) + num].colliderect(self.pw8) and not \
                    self.boxLst[self.boxLst.index(self.rb1) + num].colliderect(self.Kw) and not \
                    self.boxLst[self.boxLst.index(self.rb1) + num].colliderect(self.Qw) and not \
                    self.boxLst[self.boxLst.index(self.rb1) + num].colliderect(self.rw1) and not \
                    self.boxLst[self.boxLst.index(self.rb1) + num].colliderect(self.rw2) and not \
                    self.boxLst[self.boxLst.index(self.rb1) + num].colliderect(self.kw1) and not \
                    self.boxLst[self.boxLst.index(self.rb1) + num].colliderect(self.kw2) and not \
                    self.boxLst[self.boxLst.index(self.rb1) + num].colliderect(self.bw1) and not \
                    self.boxLst[self.boxLst.index(self.rb1) + num].colliderect(self.bw2) and not \
                    self.boxLst[self.boxLst.index(self.rb1) + num].colliderect(self.pb2) and not \
                    self.boxLst[self.boxLst.index(self.rb1) + num].colliderect(self.pb3) and not \
                    self.boxLst[self.boxLst.index(self.rb1) + num].colliderect(self.pb4) and not \
                    self.boxLst[self.boxLst.index(self.rb1) + num].colliderect(self.pb5) and not \
                    self.boxLst[self.boxLst.index(self.rb1) + num].colliderect(self.pb6) and not \
                    self.boxLst[self.boxLst.index(self.rb1) + num].colliderect(self.pb7) and not \
                    self.boxLst[self.boxLst.index(self.rb1) + num].colliderect(self.pb8) and not \
                    self.boxLst[self.boxLst.index(self.rb1) + num].colliderect(self.Kb) and not \
                    self.boxLst[self.boxLst.index(self.rb1) + num].colliderect(self.Qb) and not \
                    self.boxLst[self.boxLst.index(self.rb1) + num].colliderect(self.kb2) and not \
                    self.boxLst[self.boxLst.index(self.rb1) + num].colliderect(self.rb2) and not \
                    self.boxLst[self.boxLst.index(self.rb1) + num].colliderect(self.pb1) and not \
                    self.boxLst[self.boxLst.index(self.rb1) + num].colliderect(self.kb1) and not \
                    self.boxLst[self.boxLst.index(self.rb1) + num].colliderect(self.bb1) and not \
                    self.boxLst[self.boxLst.index(self.rb1) + num].colliderect(self.bb2):
                pygame.draw.rect(self.window, self.blue, self.boxLst[self.boxLst.index(self.rb1) + num], border_radius=100)

                if num == 8:
                    self.rookBlack1Clicked_plus8 = 1
                if num == 16:
                    self.rookBlack1Clicked_plus16 = 1
                if num == 24:
                    self.rookBlack1Clicked_plus24 = 1
                if num == 32:
                    self.rookBlack1Clicked_plus32 = 1
                if num == 40:
                    self.rookBlack1Clicked_plus40 = 1
                if num == 48:
                    self.rookBlack1Clicked_plus48 = 1
                if num == 1:
                    self.rookBlack1Clicked_plus1 = 1
                if num == 2:
                    self.rookBlack1Clicked_plus2 = 1
                if num == 3:
                    self.rookBlack1Clicked_plus3 = 1
                if num == 4:
                    self.rookBlack1Clicked_plus4 = 1
                if num == 5:
                    self.rookBlack1Clicked_plus5 = 1
                if num == 6:
                    self.rookBlack1Clicked_plus6 = 1

        def drawRect_sub(num):
            if not self.boxLst[self.boxLst.index(self.rb1) - num].colliderect(self.pw1) and not \
                    self.boxLst[self.boxLst.index(self.rb1) - num].colliderect(self.pw2) and not \
                    self.boxLst[self.boxLst.index(self.rb1) - num].colliderect(self.pw3) and not \
                    self.boxLst[self.boxLst.index(self.rb1) - num].colliderect(self.pw4) and not \
                    self.boxLst[self.boxLst.index(self.rb1) - num].colliderect(self.pw5) and not \
                    self.boxLst[self.boxLst.index(self.rb1) - num].colliderect(self.pw6) and not \
                    self.boxLst[self.boxLst.index(self.rb1) - num].colliderect(self.pw7) and not \
                    self.boxLst[self.boxLst.index(self.rb1) - num].colliderect(self.pw8) and not \
                    self.boxLst[self.boxLst.index(self.rb1) - num].colliderect(self.Kw) and not \
                    self.boxLst[self.boxLst.index(self.rb1) - num].colliderect(self.Qw) and not \
                    self.boxLst[self.boxLst.index(self.rb1) - num].colliderect(self.rw1) and not \
                    self.boxLst[self.boxLst.index(self.rb1) - num].colliderect(self.rw2) and not \
                    self.boxLst[self.boxLst.index(self.rb1) - num].colliderect(self.kw1) and not \
                    self.boxLst[self.boxLst.index(self.rb1) - num].colliderect(self.kw2) and not \
                    self.boxLst[self.boxLst.index(self.rb1) - num].colliderect(self.bw1) and not \
                    self.boxLst[self.boxLst.index(self.rb1) - num].colliderect(self.bw2) and not \
                    self.boxLst[self.boxLst.index(self.rb1) - num].colliderect(self.pb2) and not \
                    self.boxLst[self.boxLst.index(self.rb1) - num].colliderect(self.pb3) and not \
                    self.boxLst[self.boxLst.index(self.rb1) - num].colliderect(self.pb4) and not \
                    self.boxLst[self.boxLst.index(self.rb1) - num].colliderect(self.pb5) and not \
                    self.boxLst[self.boxLst.index(self.rb1) - num].colliderect(self.pb6) and not \
                    self.boxLst[self.boxLst.index(self.rb1) - num].colliderect(self.pb7) and not \
                    self.boxLst[self.boxLst.index(self.rb1) - num].colliderect(self.pb8) and not \
                    self.boxLst[self.boxLst.index(self.rb1) - num].colliderect(self.Kb) and not \
                    self.boxLst[self.boxLst.index(self.rb1) - num].colliderect(self.Qb) and not \
                    self.boxLst[self.boxLst.index(self.rb1) - num].colliderect(self.kb2) and not \
                    self.boxLst[self.boxLst.index(self.rb1) - num].colliderect(self.rb2) and not \
                    self.boxLst[self.boxLst.index(self.rb1) - num].colliderect(self.pb1) and not \
                    self.boxLst[self.boxLst.index(self.rb1) - num].colliderect(self.kb1) and not \
                    self.boxLst[self.boxLst.index(self.rb1) - num].colliderect(self.bb1) and not \
                    self.boxLst[self.boxLst.index(self.rb1) - num].colliderect(self.bb2):
                pygame.draw.rect(self.window, self.blue, self.boxLst[self.boxLst.index(self.rb1) - num], border_radius=100)

                if num == 8:
                    self.rookBlack1Clicked_minus8 = 1
                if num == 16:
                    self.rookBlack1Clicked_minus16 = 1
                if num == 24:
                    self.rookBlack1Clicked_minus24 = 1
                if num == 32:
                    self.rookBlack1Clicked_minus32 = 1
                if num == 40:
                    self.rookBlack1Clicked_minus40 = 1
                if num == 48:
                    self.rookBlack1Clicked_minus48 = 1
                if num == 1:
                    self.rookBlack1Clicked_minus1 = 1
                if num == 2:
                    self.rookBlack1Clicked_minus2 = 1
                if num == 3:
                    self.rookBlack1Clicked_minus3 = 1
                if num == 4:
                    self.rookBlack1Clicked_minus4 = 1
                if num == 5:
                    self.rookBlack1Clicked_minus5 = 1
                if num == 6:
                    self.rookBlack1Clicked_minus6 = 1

        def cutWhitePiece_add(num):
            if self.boxLst[self.boxLst.index(self.rb1) + num].colliderect(self.pw1) or \
                    self.boxLst[self.boxLst.index(self.rb1) + num].colliderect(self.pw2) or \
                    self.boxLst[self.boxLst.index(self.rb1) + num].colliderect(self.pw3) or \
                    self.boxLst[self.boxLst.index(self.rb1) + num].colliderect(self.pw4) or \
                    self.boxLst[self.boxLst.index(self.rb1) + num].colliderect(self.pw5) or \
                    self.boxLst[self.boxLst.index(self.rb1) + num].colliderect(self.pw6) or \
                    self.boxLst[self.boxLst.index(self.rb1) + num].colliderect(self.pw7) or \
                    self.boxLst[self.boxLst.index(self.rb1) + num].colliderect(self.pw8) or \
                    self.boxLst[self.boxLst.index(self.rb1) + num].colliderect(self.Kw) or \
                    self.boxLst[self.boxLst.index(self.rb1) + num].colliderect(self.Qw) or \
                    self.boxLst[self.boxLst.index(self.rb1) + num].colliderect(self.rw1) or \
                    self.boxLst[self.boxLst.index(self.rb1) + num].colliderect(self.rw2) or \
                    self.boxLst[self.boxLst.index(self.rb1) + num].colliderect(self.kw1) or \
                    self.boxLst[self.boxLst.index(self.rb1) + num].colliderect(self.kw2) or \
                    self.boxLst[self.boxLst.index(self.rb1) + num].colliderect(self.bw1) or \
                    self.boxLst[self.boxLst.index(self.rb1) + num].colliderect(self.bw2):
                pygame.draw.rect(self.window, self.red, self.boxLst[self.boxLst.index(self.rb1) + num], border_radius=100)
                self.rookBlack1Clicked = 1
                self.rookBlack2Clicked = 0
                self.pawnBlack1Clicked = 0
                self.pawnBlack2Clicked = 0
                self.pawnBlack3Clicked = 0
                self.pawnBlack4Clicked = 0
                self.pawnBlack5Clicked = 0
                self.pawnBlack6Clicked = 0
                self.pawnBlack7Clicked = 0
                self.pawnBlack8Clicked = 0
                self.KingBlackClicked = 0
                self.knightBlack1Clicked = 0
                self.knightBlack2Clicked = 0
                self.bishopBlack1Clicked = 0
                self.bishopBlack2Clicked = 0
                self.QueenBlackClicked = 0
                self.rookBlack1Clicked_cut = 1

        def cutWhitePiece_sub(num):
            if self.boxLst[self.boxLst.index(self.rb1) - num].colliderect(self.pw1) or \
                    self.boxLst[self.boxLst.index(self.rb1) - num].colliderect(self.pw2) or \
                    self.boxLst[self.boxLst.index(self.rb1) - num].colliderect(self.pw3) or \
                    self.boxLst[self.boxLst.index(self.rb1) - num].colliderect(self.pw4) or \
                    self.boxLst[self.boxLst.index(self.rb1) - num].colliderect(self.pw5) or \
                    self.boxLst[self.boxLst.index(self.rb1) - num].colliderect(self.pw6) or \
                    self.boxLst[self.boxLst.index(self.rb1) - num].colliderect(self.pw7) or \
                    self.boxLst[self.boxLst.index(self.rb1) - num].colliderect(self.pw8) or \
                    self.boxLst[self.boxLst.index(self.rb1) - num].colliderect(self.Kw) or \
                    self.boxLst[self.boxLst.index(self.rb1) - num].colliderect(self.Qw) or \
                    self.boxLst[self.boxLst.index(self.rb1) - num].colliderect(self.rw1) or \
                    self.boxLst[self.boxLst.index(self.rb1) - num].colliderect(self.rw2) or \
                    self.boxLst[self.boxLst.index(self.rb1) - num].colliderect(self.kw1) or \
                    self.boxLst[self.boxLst.index(self.rb1) - num].colliderect(self.kw2) or \
                    self.boxLst[self.boxLst.index(self.rb1) - num].colliderect(self.bw1) or \
                    self.boxLst[self.boxLst.index(self.rb1) - num].colliderect(self.bw2):
                pygame.draw.rect(self.window, self.red, self.boxLst[self.boxLst.index(self.rb1) - num], border_radius=100)
                self.rookBlack1Clicked = 1
                self.rookBlack2Clicked = 0
                self.pawnBlack1Clicked = 0
                self.pawnBlack2Clicked = 0
                self.pawnBlack3Clicked = 0
                self.pawnBlack4Clicked = 0
                self.pawnBlack5Clicked = 0
                self.pawnBlack6Clicked = 0
                self.pawnBlack7Clicked = 0
                self.pawnBlack8Clicked = 0
                self.KingBlackClicked = 0
                self.knightBlack1Clicked = 0
                self.knightBlack2Clicked = 0
                self.bishopBlack1Clicked = 0
                self.bishopBlack2Clicked = 0
                self.QueenBlackClicked = 0
                self.rookBlack1Clicked_cut = 1

        def removeWhitePiece_add(num):
            if self.boxLst[self.boxLst.index(self.rb1) + num].collidepoint(self.mouse_x, self.mouse_y):
                if self.boxLst[self.boxLst.index(self.rb1) + num].colliderect(self.pw1):
                    self.pw1 = self.whiteCutPiece_1
                if self.boxLst[self.boxLst.index(self.rb1) + num].colliderect(self.pw2):
                    self.pw2 = self.whiteCutPiece_2
                if self.boxLst[self.boxLst.index(self.rb1) + num].colliderect(self.pw3):
                    self.pw3 = self.whiteCutPiece_3
                if self.boxLst[self.boxLst.index(self.rb1) + num].colliderect(self.pw4):
                    self.pw4 = self.whiteCutPiece_4
                if self.boxLst[self.boxLst.index(self.rb1) + num].colliderect(self.pw5):
                    self.pw5 = self.whiteCutPiece_5
                if self.boxLst[self.boxLst.index(self.rb1) + num].colliderect(self.pw6):
                    self.pw6 = self.whiteCutPiece_6
                if self.boxLst[self.boxLst.index(self.rb1) + num].colliderect(self.pw7):
                    self.pw7 = self.whiteCutPiece_7
                if self.boxLst[self.boxLst.index(self.rb1) + num].colliderect(self.pw8):
                    self.pw8 = self.whiteCutPiece_8
                if self.boxLst[self.boxLst.index(self.rb1) + num].colliderect(self.rw1):
                    self.rw1 = self.whiteCutPiece_9
                if self.boxLst[self.boxLst.index(self.rb1) + num].colliderect(self.rw2):
                    self.rw2 = self.whiteCutPiece_10
                if self.boxLst[self.boxLst.index(self.rb1) + num].colliderect(self.kw1):
                    self.kw1 = self.whiteCutPiece_11
                if self.boxLst[self.boxLst.index(self.rb1) + num].colliderect(self.kw2):
                    self.kw2 = self.whiteCutPiece_12
                if self.boxLst[self.boxLst.index(self.rb1) + num].colliderect(self.bw1):
                    self.bw1 = self.whiteCutPiece_13
                if self.boxLst[self.boxLst.index(self.rb1) + num].colliderect(self.bw2):
                    self.bw2 = self.whiteCutPiece_14
                if self.boxLst[self.boxLst.index(self.rb1) + num].colliderect(self.Kw):
                    self.Kw = self.whiteCutPiece_15
                    self.KingWhite_isDead = 1
                if self.boxLst[self.boxLst.index(self.rb1) + num].colliderect(self.Qw):
                    self.Qw = self.whiteCutPiece_16
                self.rb1 = self.boxLst[self.boxLst.index(self.rb1) + num]
                self.rookBlack1Clicked = 0
                self.rookBlack1Clicked_cut = 0
                self.turn = "white"

        def removeWhitePiece_sub(num):
            if self.boxLst[self.boxLst.index(self.rb1) - num].collidepoint(self.mouse_x, self.mouse_y):
                if self.boxLst[self.boxLst.index(self.rb1) - num].colliderect(self.pw1):
                    self.pw1 = self.whiteCutPiece_1
                if self.boxLst[self.boxLst.index(self.rb1) - num].colliderect(self.pw2):
                    self.pw2 = self.whiteCutPiece_2
                if self.boxLst[self.boxLst.index(self.rb1) - num].colliderect(self.pw3):
                    self.pw3 = self.whiteCutPiece_3
                if self.boxLst[self.boxLst.index(self.rb1) - num].colliderect(self.pw4):
                    self.pw4 = self.whiteCutPiece_4
                if self.boxLst[self.boxLst.index(self.rb1) - num].colliderect(self.pw5):
                    self.pw5 = self.whiteCutPiece_5
                if self.boxLst[self.boxLst.index(self.rb1) - num].colliderect(self.pw6):
                    self.pw6 = self.whiteCutPiece_6
                if self.boxLst[self.boxLst.index(self.rb1) - num].colliderect(self.pw7):
                    self.pw7 = self.whiteCutPiece_7
                if self.boxLst[self.boxLst.index(self.rb1) - num].colliderect(self.pw8):
                    self.pw8 = self.whiteCutPiece_8
                if self.boxLst[self.boxLst.index(self.rb1) - num].colliderect(self.rw1):
                    self.rw1 = self.whiteCutPiece_9
                if self.boxLst[self.boxLst.index(self.rb1) - num].colliderect(self.rw2):
                    self.rw2 = self.whiteCutPiece_10
                if self.boxLst[self.boxLst.index(self.rb1) - num].colliderect(self.kw1):
                    self.kw1 = self.whiteCutPiece_11
                if self.boxLst[self.boxLst.index(self.rb1) - num].colliderect(self.kw2):
                    self.kw2 = self.whiteCutPiece_12
                if self.boxLst[self.boxLst.index(self.rb1) - num].colliderect(self.bw1):
                    self.bw1 = self.whiteCutPiece_13
                if self.boxLst[self.boxLst.index(self.rb1) - num].colliderect(self.bw2):
                    self.bw2 = self.whiteCutPiece_14
                if self.boxLst[self.boxLst.index(self.rb1) - num].colliderect(self.Kw):
                    self.Kw = self.whiteCutPiece_15
                    self.KingWhite_isDead = 1
                if self.boxLst[self.boxLst.index(self.rb1) - num].colliderect(self.Qw):
                    self.Qw = self.whiteCutPiece_16
                self.rb1 = self.boxLst[self.boxLst.index(self.rb1) - num]
                self.rookBlack1Clicked = 0
                self.rookBlack1Clicked_cut = 0
                self.turn = "white"

        if self.turn == "white":
            self.rookBlack1Clicked_plus8 = 0
            self.rookBlack1Clicked_plus16 = 0
            self.rookBlack1Clicked_plus24 = 0
            self.rookBlack1Clicked_plus32 = 0
            self.rookBlack1Clicked_plus40 = 0
            self.rookBlack1Clicked_plus48 = 0
            self.rookBlack1Clicked_plus1 = 0
            self.rookBlack1Clicked_plus2 = 0
            self.rookBlack1Clicked_plus3 = 0
            self.rookBlack1Clicked_plus4 = 0
            self.rookBlack1Clicked_plus5 = 0
            self.rookBlack1Clicked_plus6 = 0
            self.rookBlack1Clicked_minus8 = 0
            self.rookBlack1Clicked_minus16 = 0
            self.rookBlack1Clicked_minus24 = 0
            self.rookBlack1Clicked_minus32 = 0
            self.rookBlack1Clicked_minus40 = 0
            self.rookBlack1Clicked_minus48 = 0
            self.rookBlack1Clicked_minus1 = 0
            self.rookBlack1Clicked_minus2 = 0
            self.rookBlack1Clicked_minus3 = 0
            self.rookBlack1Clicked_minus4 = 0
            self.rookBlack1Clicked_minus5 = 0
            self.rookBlack1Clicked_minus6 = 0

        if self.turn == "black":
            if self.rb1.collidepoint(self.mouse_x, self.mouse_y):
                # along y-axis
                if self.rb1.y < self.box57.y:
                    drawRect_add(8)
                    self.rookBlack1Clicked = 1
                    self.rookBlack2Clicked = 0
                    self.pawnBlack1Clicked = 0
                    self.pawnBlack2Clicked = 0
                    self.pawnBlack3Clicked = 0
                    self.pawnBlack4Clicked = 0
                    self.pawnBlack5Clicked = 0
                    self.pawnBlack6Clicked = 0
                    self.pawnBlack7Clicked = 0
                    self.pawnBlack8Clicked = 0
                    self.KingBlackClicked = 0
                    self.knightBlack1Clicked = 0
                    self.knightBlack2Clicked = 0
                    self.bishopBlack1Clicked = 0
                    self.bishopBlack2Clicked = 0
                    self.QueenBlackClicked = 0
                if self.rb1.y < self.box49.y:
                    if self.rookBlack1Clicked_plus8 == 1:
                        drawRect_add(16)
                        self.rookBlack1Clicked = 1
                        self.rookBlack2Clicked = 0
                        self.pawnBlack1Clicked = 0
                        self.pawnBlack2Clicked = 0
                        self.pawnBlack3Clicked = 0
                        self.pawnBlack4Clicked = 0
                        self.pawnBlack5Clicked = 0
                        self.pawnBlack6Clicked = 0
                        self.pawnBlack7Clicked = 0
                        self.pawnBlack8Clicked = 0
                        self.KingBlackClicked = 0
                        self.knightBlack1Clicked = 0
                        self.knightBlack2Clicked = 0
                        self.bishopBlack1Clicked = 0
                        self.bishopBlack2Clicked = 0
                        self.QueenBlackClicked = 0
                if self.rb1.y < self.box41.y:
                    if self.rookBlack1Clicked_plus8 == 1 and self.rookBlack1Clicked_plus16 == 1:
                        drawRect_add(24)
                        self.rookBlack1Clicked = 1
                        self.rookBlack2Clicked = 0
                        self.pawnBlack1Clicked = 0
                        self.pawnBlack2Clicked = 0
                        self.pawnBlack3Clicked = 0
                        self.pawnBlack4Clicked = 0
                        self.pawnBlack5Clicked = 0
                        self.pawnBlack6Clicked = 0
                        self.pawnBlack7Clicked = 0
                        self.pawnBlack8Clicked = 0
                        self.KingBlackClicked = 0
                        self.knightBlack1Clicked = 0
                        self.knightBlack2Clicked = 0
                        self.bishopBlack1Clicked = 0
                        self.bishopBlack2Clicked = 0
                        self.QueenBlackClicked = 0
                if self.rb1.y < self.box33.y:
                    if self.rookBlack1Clicked_plus8 == 1 and self.rookBlack1Clicked_plus16 == 1 and self.rookBlack1Clicked_plus24 == 1:
                        drawRect_add(32)
                        self.rookBlack1Clicked = 1
                        self.rookBlack2Clicked = 0
                        self.pawnBlack1Clicked = 0
                        self.pawnBlack2Clicked = 0
                        self.pawnBlack3Clicked = 0
                        self.pawnBlack4Clicked = 0
                        self.pawnBlack5Clicked = 0
                        self.pawnBlack6Clicked = 0
                        self.pawnBlack7Clicked = 0
                        self.pawnBlack8Clicked = 0
                        self.KingBlackClicked = 0
                        self.knightBlack1Clicked = 0
                        self.knightBlack2Clicked = 0
                        self.bishopBlack1Clicked = 0
                        self.bishopBlack2Clicked = 0
                        self.QueenBlackClicked = 0
                if self.rb1.y < self.box25.y:
                    if self.rookBlack1Clicked_plus8 == 1 and self.rookBlack1Clicked_plus16 == 1 and self.rookBlack1Clicked_plus24 == 1 and self.rookBlack1Clicked_plus32 == 1:
                        drawRect_add(40)
                        self.rookBlack1Clicked = 1
                        self.rookBlack2Clicked = 0
                        self.pawnBlack1Clicked = 0
                        self.pawnBlack2Clicked = 0
                        self.pawnBlack3Clicked = 0
                        self.pawnBlack4Clicked = 0
                        self.pawnBlack5Clicked = 0
                        self.pawnBlack6Clicked = 0
                        self.pawnBlack7Clicked = 0
                        self.pawnBlack8Clicked = 0
                        self.KingBlackClicked = 0
                        self.knightBlack1Clicked = 0
                        self.knightBlack2Clicked = 0
                        self.bishopBlack1Clicked = 0
                        self.bishopBlack2Clicked = 0
                        self.QueenBlackClicked = 0
                if self.rb1.y < self.box17.y:
                    if self.rookBlack1Clicked_plus8 == 1 and self.rookBlack1Clicked_plus16 == 1 and self.rookBlack1Clicked_plus24 == 1 and self.rookBlack1Clicked_plus32 == 1 and \
                            self.rookBlack1Clicked_plus40 == 1:
                        drawRect_add(48)
                        self.rookBlack1Clicked = 1
                        self.rookBlack2Clicked = 0
                        self.pawnBlack1Clicked = 0
                        self.pawnBlack2Clicked = 0
                        self.pawnBlack3Clicked = 0
                        self.pawnBlack4Clicked = 0
                        self.pawnBlack5Clicked = 0
                        self.pawnBlack6Clicked = 0
                        self.pawnBlack7Clicked = 0
                        self.pawnBlack8Clicked = 0
                        self.KingBlackClicked = 0
                        self.knightBlack1Clicked = 0
                        self.knightBlack2Clicked = 0
                        self.bishopBlack1Clicked = 0
                        self.bishopBlack2Clicked = 0
                        self.QueenBlackClicked = 0
                if self.rb1.y < self.box9.y:
                    if self.rookBlack1Clicked_plus8 == 1 and self.rookBlack1Clicked_plus16 == 1 and self.rookBlack1Clicked_plus24 == 1 and self.rookBlack1Clicked_plus32 == 1 and \
                            self.rookBlack1Clicked_plus40 == 1 and self.rookBlack1Clicked_plus48 == 1:
                        drawRect_add(56)
                        self.rookBlack1Clicked = 1
                        self.rookBlack2Clicked = 0
                        self.pawnBlack1Clicked = 0
                        self.pawnBlack2Clicked = 0
                        self.pawnBlack3Clicked = 0
                        self.pawnBlack4Clicked = 0
                        self.pawnBlack5Clicked = 0
                        self.pawnBlack6Clicked = 0
                        self.pawnBlack7Clicked = 0
                        self.pawnBlack8Clicked = 0
                        self.KingBlackClicked = 0
                        self.knightBlack1Clicked = 0
                        self.knightBlack2Clicked = 0
                        self.bishopBlack1Clicked = 0
                        self.bishopBlack2Clicked = 0
                        self.QueenBlackClicked = 0

                if self.rb1.y > self.box1.y:
                    drawRect_sub(8)
                    self.rookBlack1Clicked = 1
                    self.rookBlack2Clicked = 0
                    self.pawnBlack1Clicked = 0
                    self.pawnBlack2Clicked = 0
                    self.pawnBlack3Clicked = 0
                    self.pawnBlack4Clicked = 0
                    self.pawnBlack5Clicked = 0
                    self.pawnBlack6Clicked = 0
                    self.pawnBlack7Clicked = 0
                    self.pawnBlack8Clicked = 0
                    self.KingBlackClicked = 0
                    self.knightBlack1Clicked = 0
                    self.knightBlack2Clicked = 0
                    self.bishopBlack1Clicked = 0
                    self.bishopBlack2Clicked = 0
                    self.QueenBlackClicked = 0
                if self.rb1.y > self.box9.y:
                    if self.rookBlack1Clicked_minus8 == 1:
                        drawRect_sub(16)
                        self.rookBlack1Clicked = 1
                        self.rookBlack2Clicked = 0
                        self.pawnBlack1Clicked = 0
                        self.pawnBlack2Clicked = 0
                        self.pawnBlack3Clicked = 0
                        self.pawnBlack4Clicked = 0
                        self.pawnBlack5Clicked = 0
                        self.pawnBlack6Clicked = 0
                        self.pawnBlack7Clicked = 0
                        self.pawnBlack8Clicked = 0
                        self.KingBlackClicked = 0
                        self.knightBlack1Clicked = 0
                        self.knightBlack2Clicked = 0
                        self.bishopBlack1Clicked = 0
                        self.bishopBlack2Clicked = 0
                        self.QueenBlackClicked = 0
                if self.rb1.y > self.box17.y:
                    if self.rookBlack1Clicked_minus8 == 1 and self.rookBlack1Clicked_minus16 == 1:
                        drawRect_sub(24)
                        self.rookBlack1Clicked = 1
                        self.rookBlack2Clicked = 0
                        self.pawnBlack1Clicked = 0
                        self.pawnBlack2Clicked = 0
                        self.pawnBlack3Clicked = 0
                        self.pawnBlack4Clicked = 0
                        self.pawnBlack5Clicked = 0
                        self.pawnBlack6Clicked = 0
                        self.pawnBlack7Clicked = 0
                        self.pawnBlack8Clicked = 0
                        self.KingBlackClicked = 0
                        self.knightBlack1Clicked = 0
                        self.knightBlack2Clicked = 0
                        self.bishopBlack1Clicked = 0
                        self.bishopBlack2Clicked = 0
                        self.QueenBlackClicked = 0
                if self.rb1.y > self.box25.y:
                    if self.rookBlack1Clicked_minus8 == 1 and self.rookBlack1Clicked_minus16 == 1 and self.rookBlack1Clicked_minus24 == 1:
                        drawRect_sub(32)
                        self.rookBlack1Clicked = 1
                        self.rookBlack2Clicked = 0
                        self.pawnBlack1Clicked = 0
                        self.pawnBlack2Clicked = 0
                        self.pawnBlack3Clicked = 0
                        self.pawnBlack4Clicked = 0
                        self.pawnBlack5Clicked = 0
                        self.pawnBlack6Clicked = 0
                        self.pawnBlack7Clicked = 0
                        self.pawnBlack8Clicked = 0
                        self.KingBlackClicked = 0
                        self.knightBlack1Clicked = 0
                        self.knightBlack2Clicked = 0
                        self.bishopBlack1Clicked = 0
                        self.bishopBlack2Clicked = 0
                        self.QueenBlackClicked = 0
                if self.rb1.y > self.box33.y:
                    if self.rookBlack1Clicked_minus8 == 1 and self.rookBlack1Clicked_minus16 == 1 and self.rookBlack1Clicked_minus24 == 1 and self.rookBlack1Clicked_minus32 == 1:
                        drawRect_sub(40)
                        self.rookBlack1Clicked = 1
                        self.rookBlack2Clicked = 0
                        self.pawnBlack1Clicked = 0
                        self.pawnBlack2Clicked = 0
                        self.pawnBlack3Clicked = 0
                        self.pawnBlack4Clicked = 0
                        self.pawnBlack5Clicked = 0
                        self.pawnBlack6Clicked = 0
                        self.pawnBlack7Clicked = 0
                        self.pawnBlack8Clicked = 0
                        self.KingBlackClicked = 0
                        self.knightBlack1Clicked = 0
                        self.knightBlack2Clicked = 0
                        self.bishopBlack1Clicked = 0
                        self.bishopBlack2Clicked = 0
                        self.QueenBlackClicked = 0
                if self.rb1.y > self.box41.y:
                    if self.rookBlack1Clicked_minus8 == 1 and self.rookBlack1Clicked_minus16 == 1 and self.rookBlack1Clicked_minus24 == 1 and self.rookBlack1Clicked_minus32 == 1 and \
                            self.rookBlack1Clicked_minus40:
                        drawRect_sub(48)
                        self.rookBlack1Clicked = 1
                        self.rookBlack2Clicked = 0
                        self.pawnBlack1Clicked = 0
                        self.pawnBlack2Clicked = 0
                        self.pawnBlack3Clicked = 0
                        self.pawnBlack4Clicked = 0
                        self.pawnBlack5Clicked = 0
                        self.pawnBlack6Clicked = 0
                        self.pawnBlack7Clicked = 0
                        self.pawnBlack8Clicked = 0
                        self.KingBlackClicked = 0
                        self.knightBlack1Clicked = 0
                        self.knightBlack2Clicked = 0
                        self.bishopBlack1Clicked = 0
                        self.bishopBlack2Clicked = 0
                        self.QueenBlackClicked = 0
                if self.rb1.y > self.box49.y:
                    if self.rookBlack1Clicked_minus8 == 1 and self.rookBlack1Clicked_minus16 == 1 and self.rookBlack1Clicked_minus24 == 1 and self.rookBlack1Clicked_minus32 == 1 and \
                            self.rookBlack1Clicked_minus40 and self.rookBlack1Clicked_minus48:
                        drawRect_sub(56)
                        self.rookBlack1Clicked = 1
                        self.rookBlack2Clicked = 0
                        self.pawnBlack1Clicked = 0
                        self.pawnBlack2Clicked = 0
                        self.pawnBlack3Clicked = 0
                        self.pawnBlack4Clicked = 0
                        self.pawnBlack5Clicked = 0
                        self.pawnBlack6Clicked = 0
                        self.pawnBlack7Clicked = 0
                        self.pawnBlack8Clicked = 0
                        self.KingBlackClicked = 0
                        self.knightBlack1Clicked = 0
                        self.knightBlack2Clicked = 0
                        self.bishopBlack1Clicked = 0
                        self.bishopBlack2Clicked = 0
                        self.QueenBlackClicked = 0

                # along x-axis
                if self.rb1.x < self.box8.x:
                    drawRect_add(1)
                    self.rookBlack1Clicked = 1
                    self.rookBlack2Clicked = 0
                    self.pawnBlack1Clicked = 0
                    self.pawnBlack2Clicked = 0
                    self.pawnBlack3Clicked = 0
                    self.pawnBlack4Clicked = 0
                    self.pawnBlack5Clicked = 0
                    self.pawnBlack6Clicked = 0
                    self.pawnBlack7Clicked = 0
                    self.pawnBlack8Clicked = 0
                    self.KingBlackClicked = 0
                    self.knightBlack1Clicked = 0
                    self.knightBlack2Clicked = 0
                    self.bishopBlack1Clicked = 0
                    self.bishopBlack2Clicked = 0
                    self.QueenBlackClicked = 0
                if self.rb1.x < self.box7.x:
                    if self.rookBlack1Clicked_plus1 == 1:
                        drawRect_add(2)
                        self.rookBlack1Clicked = 1
                        self.rookBlack2Clicked = 0
                        self.pawnBlack1Clicked = 0
                        self.pawnBlack2Clicked = 0
                        self.pawnBlack3Clicked = 0
                        self.pawnBlack4Clicked = 0
                        self.pawnBlack5Clicked = 0
                        self.pawnBlack6Clicked = 0
                        self.pawnBlack7Clicked = 0
                        self.pawnBlack8Clicked = 0
                        self.KingBlackClicked = 0
                        self.knightBlack1Clicked = 0
                        self.knightBlack2Clicked = 0
                        self.bishopBlack1Clicked = 0
                        self.bishopBlack2Clicked = 0
                        self.QueenBlackClicked = 0
                if self.rb1.x < self.box6.x:
                    if self.rookBlack1Clicked_plus1 == 1 and self.rookBlack1Clicked_plus2 == 1:
                        drawRect_add(3)
                        self.rookBlack1Clicked = 1
                        self.rookBlack2Clicked = 0
                        self.pawnBlack1Clicked = 0
                        self.pawnBlack2Clicked = 0
                        self.pawnBlack3Clicked = 0
                        self.pawnBlack4Clicked = 0
                        self.pawnBlack5Clicked = 0
                        self.pawnBlack6Clicked = 0
                        self.pawnBlack7Clicked = 0
                        self.pawnBlack8Clicked = 0
                        self.KingBlackClicked = 0
                        self.knightBlack1Clicked = 0
                        self.knightBlack2Clicked = 0
                        self.bishopBlack1Clicked = 0
                        self.bishopBlack2Clicked = 0
                        self.QueenBlackClicked = 0
                if self.rb1.x < self.box5.x:
                    if self.rookBlack1Clicked_plus1 == 1 and self.rookBlack1Clicked_plus2 == 1 and self.rookBlack1Clicked_plus3 == 1:
                        drawRect_add(4)
                        self.rookBlack1Clicked = 1
                        self.rookBlack2Clicked = 0
                        self.pawnBlack1Clicked = 0
                        self.pawnBlack2Clicked = 0
                        self.pawnBlack3Clicked = 0
                        self.pawnBlack4Clicked = 0
                        self.pawnBlack5Clicked = 0
                        self.pawnBlack6Clicked = 0
                        self.pawnBlack7Clicked = 0
                        self.pawnBlack8Clicked = 0
                        self.KingBlackClicked = 0
                        self.knightBlack1Clicked = 0
                        self.knightBlack2Clicked = 0
                        self.bishopBlack1Clicked = 0
                        self.bishopBlack2Clicked = 0
                        self.QueenBlackClicked = 0
                if self.rb1.x < self.box4.x:
                    if self.rookBlack1Clicked_plus1 == 1 and self.rookBlack1Clicked_plus2 == 1 and self.rookBlack1Clicked_plus3 == 1 and self.rookBlack1Clicked_plus4 == 1:
                        drawRect_add(5)
                        self.rookBlack1Clicked = 1
                        self.rookBlack2Clicked = 0
                        self.pawnBlack1Clicked = 0
                        self.pawnBlack2Clicked = 0
                        self.pawnBlack3Clicked = 0
                        self.pawnBlack4Clicked = 0
                        self.pawnBlack5Clicked = 0
                        self.pawnBlack6Clicked = 0
                        self.pawnBlack7Clicked = 0
                        self.pawnBlack8Clicked = 0
                        self.KingBlackClicked = 0
                        self.knightBlack1Clicked = 0
                        self.knightBlack2Clicked = 0
                        self.bishopBlack1Clicked = 0
                        self.bishopBlack2Clicked = 0
                        self.QueenBlackClicked = 0
                if self.rb1.x < self.box3.x:
                    if self.rookBlack1Clicked_plus1 == 1 and self.rookBlack1Clicked_plus2 == 1 and self.rookBlack1Clicked_plus3 == 1 and self.rookBlack1Clicked_plus4 == 1 and \
                            self.rookBlack1Clicked_plus5 == 1:
                        drawRect_add(6)
                        self.rookBlack1Clicked = 1
                        self.rookBlack2Clicked = 0
                        self.pawnBlack1Clicked = 0
                        self.pawnBlack2Clicked = 0
                        self.pawnBlack3Clicked = 0
                        self.pawnBlack4Clicked = 0
                        self.pawnBlack5Clicked = 0
                        self.pawnBlack6Clicked = 0
                        self.pawnBlack7Clicked = 0
                        self.pawnBlack8Clicked = 0
                        self.KingBlackClicked = 0
                        self.knightBlack1Clicked = 0
                        self.knightBlack2Clicked = 0
                        self.bishopBlack1Clicked = 0
                        self.bishopBlack2Clicked = 0
                        self.QueenBlackClicked = 0
                if self.rb1.x < self.box2.x:
                    if self.rookBlack1Clicked_plus1 == 1 and self.rookBlack1Clicked_plus2 == 1 and self.rookBlack1Clicked_plus3 == 1 and self.rookBlack1Clicked_plus4 == 1 and \
                            self.rookBlack1Clicked_plus5 == 1 and self.rookBlack1Clicked_plus6 == 1:
                        drawRect_add(7)
                        self.rookBlack1Clicked = 1
                        self.rookBlack2Clicked = 0
                        self.pawnBlack1Clicked = 0
                        self.pawnBlack2Clicked = 0
                        self.pawnBlack3Clicked = 0
                        self.pawnBlack4Clicked = 0
                        self.pawnBlack5Clicked = 0
                        self.pawnBlack6Clicked = 0
                        self.pawnBlack7Clicked = 0
                        self.pawnBlack8Clicked = 0
                        self.KingBlackClicked = 0
                        self.knightBlack1Clicked = 0
                        self.knightBlack2Clicked = 0
                        self.bishopBlack1Clicked = 0
                        self.bishopBlack2Clicked = 0
                        self.QueenBlackClicked = 0

                if self.rb1.x > self.box1.x:
                    drawRect_sub(1)
                    self.rookBlack1Clicked = 1
                    self.rookBlack2Clicked = 0
                    self.pawnBlack1Clicked = 0
                    self.pawnBlack2Clicked = 0
                    self.pawnBlack3Clicked = 0
                    self.pawnBlack4Clicked = 0
                    self.pawnBlack5Clicked = 0
                    self.pawnBlack6Clicked = 0
                    self.pawnBlack7Clicked = 0
                    self.pawnBlack8Clicked = 0
                    self.KingBlackClicked = 0
                    self.knightBlack1Clicked = 0
                    self.knightBlack2Clicked = 0
                    self.bishopBlack1Clicked = 0
                    self.bishopBlack2Clicked = 0
                    self.QueenBlackClicked = 0
                if self.rb1.x > self.box2.x:
                    if self.rookBlack1Clicked_minus1 == 1:
                        drawRect_sub(2)
                        self.rookBlack1Clicked = 1
                        self.rookBlack2Clicked = 0
                        self.pawnBlack1Clicked = 0
                        self.pawnBlack2Clicked = 0
                        self.pawnBlack3Clicked = 0
                        self.pawnBlack4Clicked = 0
                        self.pawnBlack5Clicked = 0
                        self.pawnBlack6Clicked = 0
                        self.pawnBlack7Clicked = 0
                        self.pawnBlack8Clicked = 0
                        self.KingBlackClicked = 0
                        self.knightBlack1Clicked = 0
                        self.knightBlack2Clicked = 0
                        self.bishopBlack1Clicked = 0
                        self.bishopBlack2Clicked = 0
                        self.QueenBlackClicked = 0
                if self.rb1.x > self.box3.x:
                    if self.rookBlack1Clicked_minus1 == 1 and self.rookBlack1Clicked_minus2 == 1:
                        drawRect_sub(3)
                        self.rookBlack1Clicked = 1
                        self.rookBlack2Clicked = 0
                        self.pawnBlack1Clicked = 0
                        self.pawnBlack2Clicked = 0
                        self.pawnBlack3Clicked = 0
                        self.pawnBlack4Clicked = 0
                        self.pawnBlack5Clicked = 0
                        self.pawnBlack6Clicked = 0
                        self.pawnBlack7Clicked = 0
                        self.pawnBlack8Clicked = 0
                        self.KingBlackClicked = 0
                        self.knightBlack1Clicked = 0
                        self.knightBlack2Clicked = 0
                        self.bishopBlack1Clicked = 0
                        self.bishopBlack2Clicked = 0
                        self.QueenBlackClicked = 0
                if self.rb1.x > self.box4.x:
                    if self.rookBlack1Clicked_minus1 == 1 and self.rookBlack1Clicked_minus2 == 1 and self.rookBlack1Clicked_minus3 == 1:
                        drawRect_sub(4)
                        self.rookBlack1Clicked = 1
                        self.rookBlack2Clicked = 0
                        self.pawnBlack1Clicked = 0
                        self.pawnBlack2Clicked = 0
                        self.pawnBlack3Clicked = 0
                        self.pawnBlack4Clicked = 0
                        self.pawnBlack5Clicked = 0
                        self.pawnBlack6Clicked = 0
                        self.pawnBlack7Clicked = 0
                        self.pawnBlack8Clicked = 0
                        self.KingBlackClicked = 0
                        self.knightBlack1Clicked = 0
                        self.knightBlack2Clicked = 0
                        self.bishopBlack1Clicked = 0
                        self.bishopBlack2Clicked = 0
                        self.QueenBlackClicked = 0
                if self.rb1.x > self.box5.x:
                    if self.rookBlack1Clicked_minus1 == 1 and self.rookBlack1Clicked_minus2 == 1 and self.rookBlack1Clicked_minus3 == 1 and self.rookBlack1Clicked_minus4 == 1:
                        drawRect_sub(5)
                        self.rookBlack1Clicked = 1
                        self.rookBlack2Clicked = 0
                        self.pawnBlack1Clicked = 0
                        self.pawnBlack2Clicked = 0
                        self.pawnBlack3Clicked = 0
                        self.pawnBlack4Clicked = 0
                        self.pawnBlack5Clicked = 0
                        self.pawnBlack6Clicked = 0
                        self.pawnBlack7Clicked = 0
                        self.pawnBlack8Clicked = 0
                        self.KingBlackClicked = 0
                        self.knightBlack1Clicked = 0
                        self.knightBlack2Clicked = 0
                        self.bishopBlack1Clicked = 0
                        self.bishopBlack2Clicked = 0
                        self.QueenBlackClicked = 0
                if self.rb1.x > self.box6.x:
                    if self.rookBlack1Clicked_minus1 == 1 and self.rookBlack1Clicked_minus2 == 1 and self.rookBlack1Clicked_minus3 == 1 and self.rookBlack1Clicked_minus4 == 1 and \
                            self.rookBlack1Clicked_minus5 == 1:
                        drawRect_sub(6)
                        self.rookBlack1Clicked = 1
                        self.rookBlack2Clicked = 0
                        self.pawnBlack1Clicked = 0
                        self.pawnBlack2Clicked = 0
                        self.pawnBlack3Clicked = 0
                        self.pawnBlack4Clicked = 0
                        self.pawnBlack5Clicked = 0
                        self.pawnBlack6Clicked = 0
                        self.pawnBlack7Clicked = 0
                        self.pawnBlack8Clicked = 0
                        self.KingBlackClicked = 0
                        self.knightBlack1Clicked = 0
                        self.knightBlack2Clicked = 0
                        self.bishopBlack1Clicked = 0
                        self.bishopBlack2Clicked = 0
                        self.QueenBlackClicked = 0
                if self.rb1.x > self.box7.x:
                    if self.rookBlack1Clicked_minus1 == 1 and self.rookBlack1Clicked_minus2 == 1 and self.rookBlack1Clicked_minus3 == 1 and self.rookBlack1Clicked_minus4 == 1 and \
                            self.rookBlack1Clicked_minus5 == 1 and self.rookBlack1Clicked_minus6 == 1:
                        drawRect_sub(7)
                        self.rookBlack1Clicked = 1
                        self.rookBlack2Clicked = 0
                        self.pawnBlack1Clicked = 0
                        self.pawnBlack2Clicked = 0
                        self.pawnBlack3Clicked = 0
                        self.pawnBlack4Clicked = 0
                        self.pawnBlack5Clicked = 0
                        self.pawnBlack6Clicked = 0
                        self.pawnBlack7Clicked = 0
                        self.pawnBlack8Clicked = 0
                        self.KingBlackClicked = 0
                        self.knightBlack1Clicked = 0
                        self.knightBlack2Clicked = 0
                        self.bishopBlack1Clicked = 0
                        self.bishopBlack2Clicked = 0
                        self.QueenBlackClicked = 0

                # check if white pieces can be cut or not
                if self.rb1.y < self.box57.y:
                    cutWhitePiece_add(8)
                if self.rb1.y < self.box49.y:
                    if self.rookBlack1Clicked_plus8 == 1:
                        cutWhitePiece_add(16)
                if self.rb1.y < self.box41.y:
                    if self.rookBlack1Clicked_plus8 == 1 and self.rookBlack1Clicked_plus16 == 1:
                        cutWhitePiece_add(24)
                if self.rb1.y < self.box33.y:
                    if self.rookBlack1Clicked_plus8 == 1 and self.rookBlack1Clicked_plus16 == 1 and self.rookBlack1Clicked_plus24 == 1:
                        cutWhitePiece_add(32)
                if self.rb1.y < self.box25.y:
                    if self.rookBlack1Clicked_plus8 == 1 and self.rookBlack1Clicked_plus16 == 1 and self.rookBlack1Clicked_plus24 == 1 and self.rookBlack1Clicked_plus32 == 1:
                        cutWhitePiece_add(40)
                if self.rb1.y < self.box17.y:
                    if self.rookBlack1Clicked_plus8 == 1 and self.rookBlack1Clicked_plus16 == 1 and self.rookBlack1Clicked_plus24 == 1 and self.rookBlack1Clicked_plus32 == 1 and \
                            self.rookBlack1Clicked_plus40 == 1:
                        cutWhitePiece_add(48)
                if self.rb1.y < self.box9.y:
                    if self.rookBlack1Clicked_plus8 == 1 and self.rookBlack1Clicked_plus16 == 1 and self.rookBlack1Clicked_plus24 == 1 and self.rookBlack1Clicked_plus32 == 1 and \
                            self.rookBlack1Clicked_plus40 == 1 and self.rookBlack1Clicked_plus48 == 1:
                        cutWhitePiece_add(56)

                if self.rb1.y > self.box1.y:
                    cutWhitePiece_sub(8)
                if self.rb1.y > self.box9.y:
                    if self.rookBlack1Clicked_minus8 == 1:
                        cutWhitePiece_sub(16)
                if self.rb1.y > self.box17.y:
                    if self.rookBlack1Clicked_minus8 == 1 and self.rookBlack1Clicked_minus16 == 1:
                        cutWhitePiece_sub(24)
                if self.rb1.y > self.box25.y:
                    if self.rookBlack1Clicked_minus8 == 1 and self.rookBlack1Clicked_minus16 == 1 and self.rookBlack1Clicked_minus24 == 1:
                        cutWhitePiece_sub(32)
                if self.rb1.y > self.box33.y:
                    if self.rookBlack1Clicked_minus8 == 1 and self.rookBlack1Clicked_minus16 == 1 and self.rookBlack1Clicked_minus24 == 1 and self.rookBlack1Clicked_minus32 == 1:
                        cutWhitePiece_sub(40)
                if self.rb1.y > self.box41.y:
                    if self.rookBlack1Clicked_minus8 == 1 and self.rookBlack1Clicked_minus16 == 1 and self.rookBlack1Clicked_minus24 == 1 and self.rookBlack1Clicked_minus32 == 1 and \
                            self.rookBlack1Clicked_minus40 == 1:
                        cutWhitePiece_sub(48)
                if self.rb1.y > self.box49.y:
                    if self.rookBlack1Clicked_minus8 == 1 and self.rookBlack1Clicked_minus16 == 1 and self.rookBlack1Clicked_minus24 == 1 and self.rookBlack1Clicked_minus32 == 1 and \
                            self.rookBlack1Clicked_minus40 == 1 and self.rookBlack1Clicked_minus48 == 1:
                        cutWhitePiece_sub(56)

                if self.rb1.x < self.box8.x:
                    cutWhitePiece_add(1)
                if self.rb1.x < self.box7.x:
                    if self.rookBlack1Clicked_plus1 == 1:
                        cutWhitePiece_add(2)
                if self.rb1.x < self.box6.x:
                    if self.rookBlack1Clicked_plus1 == 1 and self.rookBlack1Clicked_plus2 == 1:
                        cutWhitePiece_add(3)
                if self.rb1.x < self.box5.x:
                    if self.rookBlack1Clicked_plus1 == 1 and self.rookBlack1Clicked_plus2 == 1 and self.rookBlack1Clicked_plus3 == 1:
                        cutWhitePiece_add(4)
                if self.rb1.x < self.box4.x:
                    if self.rookBlack1Clicked_plus1 == 1 and self.rookBlack1Clicked_plus2 == 1 and self.rookBlack1Clicked_plus3 == 1 and self.rookBlack1Clicked_plus4 == 1:
                        cutWhitePiece_add(5)
                if self.rb1.x < self.box3.x:
                    if self.rookBlack1Clicked_plus1 == 1 and self.rookBlack1Clicked_plus2 == 1 and self.rookBlack1Clicked_plus3 == 1 and self.rookBlack1Clicked_plus4 == 1 and \
                            self.rookBlack1Clicked_plus5 == 1:
                        cutWhitePiece_add(6)
                if self.rb1.x < self.box2.x:
                    if self.rookBlack1Clicked_plus1 == 1 and self.rookBlack1Clicked_plus2 == 1 and self.rookBlack1Clicked_plus3 == 1 and self.rookBlack1Clicked_plus4 == 1 and \
                            self.rookBlack1Clicked_plus5 == 1 and self.rookBlack1Clicked_plus6 == 1:
                        cutWhitePiece_add(7)

                if self.rb1.x > self.box1.x:
                    cutWhitePiece_sub(1)
                if self.rb1.x > self.box2.x:
                    if self.rookBlack1Clicked_minus1 == 1:
                        cutWhitePiece_sub(2)
                if self.rb1.x > self.box3.x:
                    if self.rookBlack1Clicked_minus1 == 1 and self.rookBlack1Clicked_minus2 == 1:
                        cutWhitePiece_sub(3)
                if self.rb1.x > self.box4.x:
                    if self.rookBlack1Clicked_minus1 == 1 and self.rookBlack1Clicked_minus2 == 1 and self.rookBlack1Clicked_minus3 == 1:
                        cutWhitePiece_sub(4)
                if self.rb1.x > self.box5.x:
                    if self.rookBlack1Clicked_minus1 == 1 and self.rookBlack1Clicked_minus2 == 1 and self.rookBlack1Clicked_minus3 == 1 and self.rookBlack1Clicked_minus4 == 1:
                        cutWhitePiece_sub(5)
                if self.rb1.x > self.box6.x:
                    if self.rookBlack1Clicked_minus1 == 1 and self.rookBlack1Clicked_minus2 == 1 and self.rookBlack1Clicked_minus3 == 1 and self.rookBlack1Clicked_minus4 == 1 and \
                            self.rookBlack1Clicked_minus5 == 1:
                        cutWhitePiece_sub(6)
                if self.rb1.x > self.box7.x:
                    if self.rookBlack1Clicked_minus1 == 1 and self.rookBlack1Clicked_minus2 == 1 and self.rookBlack1Clicked_minus3 == 1 and self.rookBlack1Clicked_minus4 == 1 and \
                            self.rookBlack1Clicked_minus5 == 1 and self.rookBlack1Clicked_minus6 == 1:
                        cutWhitePiece_sub(7)

        # move the rook
        if self.rookBlack1Clicked == 1:

            # cut the pieces
            if self.rookBlack1Clicked_cut == 1:
                # along y-axis
                if self.rb1.y < self.box57.y:
                    removeWhitePiece_add(8)
                if self.rb1.y < self.box49.y:
                    removeWhitePiece_add(16)
                if self.rb1.y < self.box41.y:
                    removeWhitePiece_add(24)
                if self.rb1.y < self.box33.y:
                    removeWhitePiece_add(32)
                if self.rb1.y < self.box25.y:
                    removeWhitePiece_add(40)
                if self.rb1.y < self.box17.y:
                    removeWhitePiece_add(48)
                if self.rb1.y < self.box9.y:
                    removeWhitePiece_add(56)

                if self.rb1.y > self.box1.y:
                    removeWhitePiece_sub(8)
                if self.rb1.y > self.box9.y:
                    removeWhitePiece_sub(16)
                if self.rb1.y > self.box17.y:
                    removeWhitePiece_sub(24)
                if self.rb1.y > self.box25.y:
                    removeWhitePiece_sub(32)
                if self.rb1.y > self.box33.y:
                    removeWhitePiece_sub(40)
                if self.rb1.y > self.box41.y:
                    removeWhitePiece_sub(48)
                if self.rb1.y > self.box49.y:
                    removeWhitePiece_sub(56)

                # along x-axis
                if self.rb1.x < self.box8.x:
                    removeWhitePiece_add(1)
                if self.rb1.x < self.box7.x:
                    removeWhitePiece_add(2)
                if self.rb1.x < self.box6.x:
                    removeWhitePiece_add(3)
                if self.rb1.x < self.box5.x:
                    removeWhitePiece_add(4)
                if self.rb1.x < self.box4.x:
                    removeWhitePiece_add(5)
                if self.rb1.x < self.box3.x:
                    removeWhitePiece_add(6)
                if self.rb1.x < self.box2.x:
                    removeWhitePiece_add(7)

                if self.rb1.x > self.box1.x:
                    removeWhitePiece_sub(1)
                if self.rb1.x > self.box2.x:
                    removeWhitePiece_sub(2)
                if self.rb1.x > self.box3.x:
                    removeWhitePiece_sub(3)
                if self.rb1.x > self.box4.x:
                    removeWhitePiece_sub(4)
                if self.rb1.x > self.box5.x:
                    removeWhitePiece_sub(5)
                if self.rb1.x > self.box6.x:
                    removeWhitePiece_sub(6)
                if self.rb1.x > self.box7.x:
                    removeWhitePiece_sub(7)

            # along y-axis(+)
            if self.rb1.y < self.box57.y:
                if self.boxLst[self.boxLst.index(self.rb1) + 8].collidepoint(self.mouse_x, self.mouse_y):
                    self.rb1 = self.boxLst[self.boxLst.index(self.rb1) + 8]
                    self.rookBlack1Clicked = 0
                    self.turn = "white"
            if self.rb1.y < self.box49.y:
                if self.boxLst[self.boxLst.index(self.rb1) + 16].collidepoint(self.mouse_x, self.mouse_y):
                    self.rb1 = self.boxLst[self.boxLst.index(self.rb1) + 16]
                    self.rookBlack1Clicked = 0
                    self.turn = "white"
            if self.rb1.y < self.box41.y:
                if self.boxLst[self.boxLst.index(self.rb1) + 24].collidepoint(self.mouse_x, self.mouse_y):
                    self.rb1 = self.boxLst[self.boxLst.index(self.rb1) + 24]
                    self.rookBlack1Clicked = 0
                    self.turn = "white"
            if self.rb1.y < self.box33.y:
                if self.boxLst[self.boxLst.index(self.rb1) + 32].collidepoint(self.mouse_x, self.mouse_y):
                    self.rb1 = self.boxLst[self.boxLst.index(self.rb1) + 32]
                    self.rookBlack1Clicked = 0
                    self.turn = "white"
            if self.rb1.y < self.box25.y:
                if self.boxLst[self.boxLst.index(self.rb1) + 40].collidepoint(self.mouse_x, self.mouse_y):
                    self.rb1 = self.boxLst[self.boxLst.index(self.rb1) + 40]
                    self.rookBlack1Clicked = 0
                    self.turn = "white"
            if self.rb1.y < self.box17.y:
                if self.boxLst[self.boxLst.index(self.rb1) + 48].collidepoint(self.mouse_x, self.mouse_y):
                    self.rb1 = self.boxLst[self.boxLst.index(self.rb1) + 48]
                    self.rookBlack1Clicked = 0
                    self.turn = "white"
            if self.rb1.y < self.box9.y:
                if self.boxLst[self.boxLst.index(self.rb1) + 56].collidepoint(self.mouse_x, self.mouse_y):
                    self.rb1 = self.boxLst[self.boxLst.index(self.rb1) + 56]
                    self.rookBlack1Clicked = 0
                    self.turn = "white"

            # along y-axis(-)
            if self.rb1.y > self.box1.y:
                if self.boxLst[self.boxLst.index(self.rb1) - 8].collidepoint(self.mouse_x, self.mouse_y):
                    self.rb1 = self.boxLst[self.boxLst.index(self.rb1) - 8]
                    self.rookBlack1Clicked = 0
                    self.turn = "white"
            if self.rb1.y > self.box9.y:
                if self.boxLst[self.boxLst.index(self.rb1) - 16].collidepoint(self.mouse_x, self.mouse_y):
                    self.rb1 = self.boxLst[self.boxLst.index(self.rb1) - 16]
                    self.rookBlack1Clicked = 0
                    self.turn = "white"
            if self.rb1.y > self.box17.y:
                if self.boxLst[self.boxLst.index(self.rb1) - 24].collidepoint(self.mouse_x, self.mouse_y):
                    self.rb1 = self.boxLst[self.boxLst.index(self.rb1) - 24]
                    self.rookBlack1Clicked = 0
                    self.turn = "white"
            if self.rb1.y > self.box25.y:
                if self.boxLst[self.boxLst.index(self.rb1) - 32].collidepoint(self.mouse_x, self.mouse_y):
                    self.rb1 = self.boxLst[self.boxLst.index(self.rb1) - 32]
                    self.rookBlack1Clicked = 0
                    self.turn = "white"
            if self.rb1.y > self.box33.y:
                if self.boxLst[self.boxLst.index(self.rb1) - 40].collidepoint(self.mouse_x, self.mouse_y):
                    self.rb1 = self.boxLst[self.boxLst.index(self.rb1) - 40]
                    self.rookBlack1Clicked = 0
                    self.turn = "white"
            if self.rb1.y > self.box41.y:
                if self.boxLst[self.boxLst.index(self.rb1) - 48].collidepoint(self.mouse_x, self.mouse_y):
                    self.rb1 = self.boxLst[self.boxLst.index(self.rb1) - 48]
                    self.rookBlack1Clicked = 0
                    self.turn = "white"
            if self.rb1.y > self.box49.y:
                if self.boxLst[self.boxLst.index(self.rb1) - 56].collidepoint(self.mouse_x, self.mouse_y):
                    self.rb1 = self.boxLst[self.boxLst.index(self.rb1) - 56]
                    self.rookBlack1Clicked = 0
                    self.turn = "white"

            # along x-axis(+)
            if self.rb1.x < self.box8.x:
                if self.boxLst[self.boxLst.index(self.rb1) + 1].collidepoint(self.mouse_x, self.mouse_y):
                    self.rb1 = self.boxLst[self.boxLst.index(self.rb1) + 1]
                    self.rookBlack1Clicked = 0
                    self.turn = "white"
            if self.rb1.x < self.box7.x:
                if self.boxLst[self.boxLst.index(self.rb1) + 2].collidepoint(self.mouse_x, self.mouse_y):
                    self.rb1 = self.boxLst[self.boxLst.index(self.rb1) + 2]
                    self.rookBlack1Clicked = 0
                    self.turn = "white"
            if self.rb1.x < self.box6.x:
                if self.boxLst[self.boxLst.index(self.rb1) + 3].collidepoint(self.mouse_x, self.mouse_y):
                    self.rb1 = self.boxLst[self.boxLst.index(self.rb1) + 3]
                    self.rookBlack1Clicked = 0
                    self.turn = "white"
            if self.rb1.x < self.box5.x:
                if self.boxLst[self.boxLst.index(self.rb1) + 4].collidepoint(self.mouse_x, self.mouse_y):
                    self.rb1 = self.boxLst[self.boxLst.index(self.rb1) + 4]
                    self.rookBlack1Clicked = 0
                    self.turn = "white"
            if self.rb1.x < self.box4.x:
                if self.boxLst[self.boxLst.index(self.rb1) + 5].collidepoint(self.mouse_x, self.mouse_y):
                    self.rb1 = self.boxLst[self.boxLst.index(self.rb1) + 5]
                    self.rookBlack1Clicked = 0
                    self.turn = "white"
            if self.rb1.x < self.box3.x:
                if self.boxLst[self.boxLst.index(self.rb1) + 6].collidepoint(self.mouse_x, self.mouse_y):
                    self.rb1 = self.boxLst[self.boxLst.index(self.rb1) + 6]
                    self.rookBlack1Clicked = 0
                    self.turn = "white"
            if self.rb1.x < self.box2.x:
                if self.boxLst[self.boxLst.index(self.rb1) + 7].collidepoint(self.mouse_x, self.mouse_y):
                    self.rb1 = self.boxLst[self.boxLst.index(self.rb1) + 7]
                    self.rookBlack1Clicked = 0
                    self.turn = "white"

            # along x-axis(-)
            if self.rb1.x > self.box1.x:
                if self.boxLst[self.boxLst.index(self.rb1) - 1].collidepoint(self.mouse_x, self.mouse_y):
                    self.rb1 = self.boxLst[self.boxLst.index(self.rb1) - 1]
                    self.rookBlack1Clicked = 0
                    self.turn = "white"
            if self.rb1.x > self.box2.x:
                if self.boxLst[self.boxLst.index(self.rb1) - 2].collidepoint(self.mouse_x, self.mouse_y):
                    self.rb1 = self.boxLst[self.boxLst.index(self.rb1) - 2]
                    self.rookBlack1Clicked = 0
                    self.turn = "white"
            if self.rb1.x > self.box3.x:
                if self.boxLst[self.boxLst.index(self.rb1) - 3].collidepoint(self.mouse_x, self.mouse_y):
                    self.rb1 = self.boxLst[self.boxLst.index(self.rb1) - 3]
                    self.rookBlack1Clicked = 0
                    self.turn = "white"
            if self.rb1.x > self.box4.x:
                if self.boxLst[self.boxLst.index(self.rb1) - 4].collidepoint(self.mouse_x, self.mouse_y):
                    self.rb1 = self.boxLst[self.boxLst.index(self.rb1) - 4]
                    self.rookBlack1Clicked = 0
                    self.turn = "white"
            if self.rb1.x > self.box5.x:
                if self.boxLst[self.boxLst.index(self.rb1) - 5].collidepoint(self.mouse_x, self.mouse_y):
                    self.rb1 = self.boxLst[self.boxLst.index(self.rb1) - 5]
                    self.rookBlack1Clicked = 0
                    self.turn = "white"
            if self.rb1.x > self.box6.x:
                if self.boxLst[self.boxLst.index(self.rb1) - 6].collidepoint(self.mouse_x, self.mouse_y):
                    self.rb1 = self.boxLst[self.boxLst.index(self.rb1) - 6]
                    self.rookBlack1Clicked = 0
                    self.turn = "white"
            if self.rb1.x > self.box7.x:
                if self.boxLst[self.boxLst.index(self.rb1) - 7].collidepoint(self.mouse_x, self.mouse_y):
                    self.rb1 = self.boxLst[self.boxLst.index(self.rb1) - 7]
                    self.rookBlack1Clicked = 0
                    self.turn = "white"

    def rookB2Movements(self):
        for event in pygame.event.get():
            if event.type == MOUSEBUTTONDOWN:
                self.mouse_x, self.mouse_y = pygame.mouse.get_pos()

        # rook 2
        def drawRect_add(num):
            if not self.boxLst[self.boxLst.index(self.rb2) + num].colliderect(self.pw1) and not \
                    self.boxLst[self.boxLst.index(self.rb2) + num].colliderect(self.pw2) and not \
                    self.boxLst[self.boxLst.index(self.rb2) + num].colliderect(self.pw3) and not \
                    self.boxLst[self.boxLst.index(self.rb2) + num].colliderect(self.pw4) and not \
                    self.boxLst[self.boxLst.index(self.rb2) + num].colliderect(self.pw5) and not \
                    self.boxLst[self.boxLst.index(self.rb2) + num].colliderect(self.pw6) and not \
                    self.boxLst[self.boxLst.index(self.rb2) + num].colliderect(self.pw7) and not \
                    self.boxLst[self.boxLst.index(self.rb2) + num].colliderect(self.pw8) and not \
                    self.boxLst[self.boxLst.index(self.rb2) + num].colliderect(self.Kw) and not \
                    self.boxLst[self.boxLst.index(self.rb2) + num].colliderect(self.Qw) and not \
                    self.boxLst[self.boxLst.index(self.rb2) + num].colliderect(self.rw1) and not \
                    self.boxLst[self.boxLst.index(self.rb2) + num].colliderect(self.rw2) and not \
                    self.boxLst[self.boxLst.index(self.rb2) + num].colliderect(self.kw1) and not \
                    self.boxLst[self.boxLst.index(self.rb2) + num].colliderect(self.kw2) and not \
                    self.boxLst[self.boxLst.index(self.rb2) + num].colliderect(self.bw1) and not \
                    self.boxLst[self.boxLst.index(self.rb2) + num].colliderect(self.bw2) and not \
                    self.boxLst[self.boxLst.index(self.rb2) + num].colliderect(self.pb2) and not \
                    self.boxLst[self.boxLst.index(self.rb2) + num].colliderect(self.pb3) and not \
                    self.boxLst[self.boxLst.index(self.rb2) + num].colliderect(self.pb4) and not \
                    self.boxLst[self.boxLst.index(self.rb2) + num].colliderect(self.pb5) and not \
                    self.boxLst[self.boxLst.index(self.rb2) + num].colliderect(self.pb6) and not \
                    self.boxLst[self.boxLst.index(self.rb2) + num].colliderect(self.pb7) and not \
                    self.boxLst[self.boxLst.index(self.rb2) + num].colliderect(self.pb8) and not \
                    self.boxLst[self.boxLst.index(self.rb2) + num].colliderect(self.Kb) and not \
                    self.boxLst[self.boxLst.index(self.rb2) + num].colliderect(self.Qb) and not \
                    self.boxLst[self.boxLst.index(self.rb2) + num].colliderect(self.kb2) and not \
                    self.boxLst[self.boxLst.index(self.rb2) + num].colliderect(self.rb1) and not \
                    self.boxLst[self.boxLst.index(self.rb2) + num].colliderect(self.pb1) and not \
                    self.boxLst[self.boxLst.index(self.rb2) + num].colliderect(self.kb1) and not \
                    self.boxLst[self.boxLst.index(self.rb2) + num].colliderect(self.bb1) and not \
                    self.boxLst[self.boxLst.index(self.rb2) + num].colliderect(self.bb2):
                pygame.draw.rect(self.window, self.blue, self.boxLst[self.boxLst.index(self.rb2) + num], border_radius=100)

                if num == 8:
                    self.rookBlack2Clicked_plus8 = 1
                if num == 16:
                    self.rookBlack2Clicked_plus16 = 1
                if num == 24:
                    self.rookBlack2Clicked_plus24 = 1
                if num == 32:
                    self.rookBlack2Clicked_plus32 = 1
                if num == 40:
                    self.rookBlack2Clicked_plus40 = 1
                if num == 48:
                    self.rookBlack2Clicked_plus48 = 1
                if num == 1:
                    self.rookBlack2Clicked_plus1 = 1
                if num == 2:
                    self.rookBlack2Clicked_plus2 = 1
                if num == 3:
                    self.rookBlack2Clicked_plus3 = 1
                if num == 4:
                    self.rookBlack2Clicked_plus4 = 1
                if num == 5:
                    self.rookBlack2Clicked_plus5 = 1
                if num == 6:
                    self.rookBlack2Clicked_plus6 = 1

        def drawRect_sub(num):
            if not self.boxLst[self.boxLst.index(self.rb2) - num].colliderect(self.pw1) and not \
                    self.boxLst[self.boxLst.index(self.rb2) - num].colliderect(self.pw2) and not \
                    self.boxLst[self.boxLst.index(self.rb2) - num].colliderect(self.pw3) and not \
                    self.boxLst[self.boxLst.index(self.rb2) - num].colliderect(self.pw4) and not \
                    self.boxLst[self.boxLst.index(self.rb2) - num].colliderect(self.pw5) and not \
                    self.boxLst[self.boxLst.index(self.rb2) - num].colliderect(self.pw6) and not \
                    self.boxLst[self.boxLst.index(self.rb2) - num].colliderect(self.pw7) and not \
                    self.boxLst[self.boxLst.index(self.rb2) - num].colliderect(self.pw8) and not \
                    self.boxLst[self.boxLst.index(self.rb2) - num].colliderect(self.Kw) and not \
                    self.boxLst[self.boxLst.index(self.rb2) - num].colliderect(self.Qw) and not \
                    self.boxLst[self.boxLst.index(self.rb2) - num].colliderect(self.rw1) and not \
                    self.boxLst[self.boxLst.index(self.rb2) - num].colliderect(self.rw2) and not \
                    self.boxLst[self.boxLst.index(self.rb2) - num].colliderect(self.kw1) and not \
                    self.boxLst[self.boxLst.index(self.rb2) - num].colliderect(self.kw2) and not \
                    self.boxLst[self.boxLst.index(self.rb2) - num].colliderect(self.bw1) and not \
                    self.boxLst[self.boxLst.index(self.rb2) - num].colliderect(self.bw2) and not \
                    self.boxLst[self.boxLst.index(self.rb2) - num].colliderect(self.pb2) and not \
                    self.boxLst[self.boxLst.index(self.rb2) - num].colliderect(self.pb3) and not \
                    self.boxLst[self.boxLst.index(self.rb2) - num].colliderect(self.pb4) and not \
                    self.boxLst[self.boxLst.index(self.rb2) - num].colliderect(self.pb5) and not \
                    self.boxLst[self.boxLst.index(self.rb2) - num].colliderect(self.pb6) and not \
                    self.boxLst[self.boxLst.index(self.rb2) - num].colliderect(self.pb7) and not \
                    self.boxLst[self.boxLst.index(self.rb2) - num].colliderect(self.pb8) and not \
                    self.boxLst[self.boxLst.index(self.rb2) - num].colliderect(self.Kb) and not \
                    self.boxLst[self.boxLst.index(self.rb2) - num].colliderect(self.Qb) and not \
                    self.boxLst[self.boxLst.index(self.rb2) - num].colliderect(self.kb2) and not \
                    self.boxLst[self.boxLst.index(self.rb2) - num].colliderect(self.rb1) and not \
                    self.boxLst[self.boxLst.index(self.rb2) - num].colliderect(self.pb1) and not \
                    self.boxLst[self.boxLst.index(self.rb2) - num].colliderect(self.kb1) and not \
                    self.boxLst[self.boxLst.index(self.rb2) - num].colliderect(self.bb1) and not \
                    self.boxLst[self.boxLst.index(self.rb2) - num].colliderect(self.bb2):
                pygame.draw.rect(self.window, self.blue, self.boxLst[self.boxLst.index(self.rb2) - num], border_radius=100)

                if num == 8:
                    self.rookBlack2Clicked_minus8 = 1
                if num == 16:
                    self.rookBlack2Clicked_minus16 = 1
                if num == 24:
                    self.rookBlack2Clicked_minus24 = 1
                if num == 32:
                    self.rookBlack2Clicked_minus32 = 1
                if num == 40:
                    self.rookBlack2Clicked_minus40 = 1
                if num == 48:
                    self.rookBlack2Clicked_minus48 = 1
                if num == 1:
                    self.rookBlack2Clicked_minus1 = 1
                if num == 2:
                    self.rookBlack2Clicked_minus2 = 1
                if num == 3:
                    self.rookBlack2Clicked_minus3 = 1
                if num == 4:
                    self.rookBlack2Clicked_minus4 = 1
                if num == 5:
                    self.rookBlack2Clicked_minus5 = 1
                if num == 6:
                    self.rookBlack2Clicked_minus6 = 1

        def cutWhitePiece_add(num):
            if self.boxLst[self.boxLst.index(self.rb2) + num].colliderect(self.pw1) or \
                    self.boxLst[self.boxLst.index(self.rb2) + num].colliderect(self.pw2) or \
                    self.boxLst[self.boxLst.index(self.rb2) + num].colliderect(self.pw3) or \
                    self.boxLst[self.boxLst.index(self.rb2) + num].colliderect(self.pw4) or \
                    self.boxLst[self.boxLst.index(self.rb2) + num].colliderect(self.pw5) or \
                    self.boxLst[self.boxLst.index(self.rb2) + num].colliderect(self.pw6) or \
                    self.boxLst[self.boxLst.index(self.rb2) + num].colliderect(self.pw7) or \
                    self.boxLst[self.boxLst.index(self.rb2) + num].colliderect(self.pw8) or \
                    self.boxLst[self.boxLst.index(self.rb2) + num].colliderect(self.Kw) or \
                    self.boxLst[self.boxLst.index(self.rb2) + num].colliderect(self.Qw) or \
                    self.boxLst[self.boxLst.index(self.rb2) + num].colliderect(self.rw1) or \
                    self.boxLst[self.boxLst.index(self.rb2) + num].colliderect(self.rw2) or \
                    self.boxLst[self.boxLst.index(self.rb2) + num].colliderect(self.kw1) or \
                    self.boxLst[self.boxLst.index(self.rb2) + num].colliderect(self.kw2) or \
                    self.boxLst[self.boxLst.index(self.rb2) + num].colliderect(self.bw1) or \
                    self.boxLst[self.boxLst.index(self.rb2) + num].colliderect(self.bw2):
                pygame.draw.rect(self.window, self.red, self.boxLst[self.boxLst.index(self.rb2) + num], border_radius=100)
                self.rookBlack2Clicked = 1
                self.rookBlack1Clicked = 0
                self.pawnBlack1Clicked = 0
                self.pawnBlack2Clicked = 0
                self.pawnBlack3Clicked = 0
                self.pawnBlack4Clicked = 0
                self.pawnBlack5Clicked = 0
                self.pawnBlack6Clicked = 0
                self.pawnBlack7Clicked = 0
                self.pawnBlack8Clicked = 0
                self.KingBlackClicked = 0
                self.knightBlack1Clicked = 0
                self.knightBlack2Clicked = 0
                self.bishopBlack1Clicked = 0
                self.bishopBlack2Clicked = 0
                self.QueenBlackClicked = 0
                self.rookBlack2Clicked_cut = 1

        def cutWhitePiece_sub(num):
            if self.boxLst[self.boxLst.index(self.rb2) - num].colliderect(self.pw1) or \
                    self.boxLst[self.boxLst.index(self.rb2) - num].colliderect(self.pw2) or \
                    self.boxLst[self.boxLst.index(self.rb2) - num].colliderect(self.pw3) or \
                    self.boxLst[self.boxLst.index(self.rb2) - num].colliderect(self.pw4) or \
                    self.boxLst[self.boxLst.index(self.rb2) - num].colliderect(self.pw5) or \
                    self.boxLst[self.boxLst.index(self.rb2) - num].colliderect(self.pw6) or \
                    self.boxLst[self.boxLst.index(self.rb2) - num].colliderect(self.pw7) or \
                    self.boxLst[self.boxLst.index(self.rb2) - num].colliderect(self.pw8) or \
                    self.boxLst[self.boxLst.index(self.rb2) - num].colliderect(self.Kw) or \
                    self.boxLst[self.boxLst.index(self.rb2) - num].colliderect(self.Qw) or \
                    self.boxLst[self.boxLst.index(self.rb2) - num].colliderect(self.rw1) or \
                    self.boxLst[self.boxLst.index(self.rb2) - num].colliderect(self.rw2) or \
                    self.boxLst[self.boxLst.index(self.rb2) - num].colliderect(self.kw1) or \
                    self.boxLst[self.boxLst.index(self.rb2) - num].colliderect(self.kw2) or \
                    self.boxLst[self.boxLst.index(self.rb2) - num].colliderect(self.bw1) or \
                    self.boxLst[self.boxLst.index(self.rb2) - num].colliderect(self.bw2):
                pygame.draw.rect(self.window, self.red, self.boxLst[self.boxLst.index(self.rb2) - num], border_radius=100)
                self.rookBlack2Clicked = 1
                self.rookBlack1Clicked = 0
                self.pawnBlack1Clicked = 0
                self.pawnBlack2Clicked = 0
                self.pawnBlack3Clicked = 0
                self.pawnBlack4Clicked = 0
                self.pawnBlack5Clicked = 0
                self.pawnBlack6Clicked = 0
                self.pawnBlack7Clicked = 0
                self.pawnBlack8Clicked = 0
                self.KingBlackClicked = 0
                self.knightBlack1Clicked = 0
                self.knightBlack2Clicked = 0
                self.bishopBlack1Clicked = 0
                self.bishopBlack2Clicked = 0
                self.QueenBlackClicked = 0
                self.rookBlack2Clicked_cut = 1

        def removeWhitePiece_add(num):
            if self.boxLst[self.boxLst.index(self.rb2) + num].collidepoint(self.mouse_x, self.mouse_y):
                if self.boxLst[self.boxLst.index(self.rb2) + num].colliderect(self.pw1):
                    self.pw1 = self.whiteCutPiece_1
                if self.boxLst[self.boxLst.index(self.rb2) + num].colliderect(self.pw2):
                    self.pw2 = self.whiteCutPiece_2
                if self.boxLst[self.boxLst.index(self.rb2) + num].colliderect(self.pw3):
                    self.pw3 = self.whiteCutPiece_3
                if self.boxLst[self.boxLst.index(self.rb2) + num].colliderect(self.pw4):
                    self.pw4 = self.whiteCutPiece_4
                if self.boxLst[self.boxLst.index(self.rb2) + num].colliderect(self.pw5):
                    self.pw5 = self.whiteCutPiece_5
                if self.boxLst[self.boxLst.index(self.rb2) + num].colliderect(self.pw6):
                    self.pw6 = self.whiteCutPiece_6
                if self.boxLst[self.boxLst.index(self.rb2) + num].colliderect(self.pw7):
                    self.pw7 = self.whiteCutPiece_7
                if self.boxLst[self.boxLst.index(self.rb2) + num].colliderect(self.pw8):
                    self.pw8 = self.whiteCutPiece_8
                if self.boxLst[self.boxLst.index(self.rb2) + num].colliderect(self.rw1):
                    self.rw1 = self.whiteCutPiece_9
                if self.boxLst[self.boxLst.index(self.rb2) + num].colliderect(self.rw2):
                    self.rw2 = self.whiteCutPiece_10
                if self.boxLst[self.boxLst.index(self.rb2) + num].colliderect(self.kw1):
                    self.kw1 = self.whiteCutPiece_11
                if self.boxLst[self.boxLst.index(self.rb2) + num].colliderect(self.kw2):
                    self.kw2 = self.whiteCutPiece_12
                if self.boxLst[self.boxLst.index(self.rb2) + num].colliderect(self.bw1):
                    self.bw1 = self.whiteCutPiece_13
                if self.boxLst[self.boxLst.index(self.rb2) + num].colliderect(self.bw2):
                    self.bw2 = self.whiteCutPiece_14
                if self.boxLst[self.boxLst.index(self.rb2) + num].colliderect(self.Kw):
                    self.Kw = self.whiteCutPiece_15
                    self.KingWhite_isDead = 1
                if self.boxLst[self.boxLst.index(self.rb2) + num].colliderect(self.Qw):
                    self.Qw = self.whiteCutPiece_16
                self.rb2 = self.boxLst[self.boxLst.index(self.rb2) + num]
                self.rookBlack2Clicked = 0
                self.rookBlack2Clicked_cut = 0
                self.turn = "white"

        def removeWhitePiece_sub(num):
            if self.boxLst[self.boxLst.index(self.rb2) - num].collidepoint(self.mouse_x, self.mouse_y):
                if self.boxLst[self.boxLst.index(self.rb2) - num].colliderect(self.pw1):
                    self.pw1 = self.whiteCutPiece_1
                if self.boxLst[self.boxLst.index(self.rb2) - num].colliderect(self.pw2):
                    self.pw2 = self.whiteCutPiece_2
                if self.boxLst[self.boxLst.index(self.rb2) - num].colliderect(self.pw3):
                    self.pw3 = self.whiteCutPiece_3
                if self.boxLst[self.boxLst.index(self.rb2) - num].colliderect(self.pw4):
                    self.pw4 = self.whiteCutPiece_4
                if self.boxLst[self.boxLst.index(self.rb2) - num].colliderect(self.pw5):
                    self.pw5 = self.whiteCutPiece_5
                if self.boxLst[self.boxLst.index(self.rb2) - num].colliderect(self.pw6):
                    self.pw6 = self.whiteCutPiece_6
                if self.boxLst[self.boxLst.index(self.rb2) - num].colliderect(self.pw7):
                    self.pw7 = self.whiteCutPiece_7
                if self.boxLst[self.boxLst.index(self.rb2) - num].colliderect(self.pw8):
                    self.pw8 = self.whiteCutPiece_8
                if self.boxLst[self.boxLst.index(self.rb2) - num].colliderect(self.rw1):
                    self.rw1 = self.whiteCutPiece_9
                if self.boxLst[self.boxLst.index(self.rb2) - num].colliderect(self.rw2):
                    self.rw2 = self.whiteCutPiece_10
                if self.boxLst[self.boxLst.index(self.rb2) - num].colliderect(self.kw1):
                    self.kw1 = self.whiteCutPiece_11
                if self.boxLst[self.boxLst.index(self.rb2) - num].colliderect(self.kw2):
                    self.kw2 = self.whiteCutPiece_12
                if self.boxLst[self.boxLst.index(self.rb2) - num].colliderect(self.bw1):
                    self.bw1 = self.whiteCutPiece_13
                if self.boxLst[self.boxLst.index(self.rb2) - num].colliderect(self.bw2):
                    self.bw2 = self.whiteCutPiece_14
                if self.boxLst[self.boxLst.index(self.rb2) - num].colliderect(self.Kw):
                    self.Kw = self.whiteCutPiece_15
                    self.KingWhite_isDead = 1
                if self.boxLst[self.boxLst.index(self.rb2) - num].colliderect(self.Qw):
                    self.Qw = self.whiteCutPiece_16
                self.rb2 = self.boxLst[self.boxLst.index(self.rb2) - num]
                self.rookBlack2Clicked = 0
                self.rookBlack2Clicked_cut = 0
                self.turn = "white"

        if self.turn == "white":
            self.rookBlack2Clicked_plus8 = 0
            self.rookBlack2Clicked_plus16 = 0
            self.rookBlack2Clicked_plus24 = 0
            self.rookBlack2Clicked_plus32 = 0
            self.rookBlack2Clicked_plus40 = 0
            self.rookBlack2Clicked_plus48 = 0
            self.rookBlack2Clicked_plus1 = 0
            self.rookBlack2Clicked_plus2 = 0
            self.rookBlack2Clicked_plus3 = 0
            self.rookBlack2Clicked_plus4 = 0
            self.rookBlack2Clicked_plus5 = 0
            self.rookBlack2Clicked_plus6 = 0
            self.rookBlack2Clicked_minus8 = 0
            self.rookBlack2Clicked_minus16 = 0
            self.rookBlack2Clicked_minus24 = 0
            self.rookBlack2Clicked_minus32 = 0
            self.rookBlack2Clicked_minus40 = 0
            self.rookBlack2Clicked_minus48 = 0
            self.rookBlack2Clicked_minus1 = 0
            self.rookBlack2Clicked_minus2 = 0
            self.rookBlack2Clicked_minus3 = 0
            self.rookBlack2Clicked_minus4 = 0
            self.rookBlack2Clicked_minus5 = 0
            self.rookBlack2Clicked_minus6 = 0

        if self.turn == "black":
            if self.rb2.collidepoint(self.mouse_x, self.mouse_y):
                # along y-axis
                if self.rb2.y < self.box57.y:
                    drawRect_add(8)
                    self.rookBlack2Clicked = 1
                    self.rookBlack1Clicked = 0
                    self.pawnBlack1Clicked = 0
                    self.pawnBlack2Clicked = 0
                    self.pawnBlack3Clicked = 0
                    self.pawnBlack4Clicked = 0
                    self.pawnBlack5Clicked = 0
                    self.pawnBlack6Clicked = 0
                    self.pawnBlack7Clicked = 0
                    self.pawnBlack8Clicked = 0
                    self.KingBlackClicked = 0
                    self.knightBlack1Clicked = 0
                    self.knightBlack2Clicked = 0
                    self.bishopBlack1Clicked = 0
                    self.bishopBlack2Clicked = 0
                    self.QueenBlackClicked = 0
                if self.rb2.y < self.box49.y:
                    if self.rookBlack2Clicked_plus8 == 1:
                        drawRect_add(16)
                        self.rookBlack2Clicked = 1
                        self.rookBlack1Clicked = 0
                        self.pawnBlack1Clicked = 0
                        self.pawnBlack2Clicked = 0
                        self.pawnBlack3Clicked = 0
                        self.pawnBlack4Clicked = 0
                        self.pawnBlack5Clicked = 0
                        self.pawnBlack6Clicked = 0
                        self.pawnBlack7Clicked = 0
                        self.pawnBlack8Clicked = 0
                        self.KingBlackClicked = 0
                        self.knightBlack1Clicked = 0
                        self.knightBlack2Clicked = 0
                        self.bishopBlack1Clicked = 0
                        self.bishopBlack2Clicked = 0
                        self.QueenBlackClicked = 0
                if self.rb2.y < self.box41.y:
                    if self.rookBlack2Clicked_plus8 == 1 and self.rookBlack2Clicked_plus16 == 1:
                        drawRect_add(24)
                        self.rookBlack2Clicked = 1
                        self.rookBlack1Clicked = 0
                        self.pawnBlack1Clicked = 0
                        self.pawnBlack2Clicked = 0
                        self.pawnBlack3Clicked = 0
                        self.pawnBlack4Clicked = 0
                        self.pawnBlack5Clicked = 0
                        self.pawnBlack6Clicked = 0
                        self.pawnBlack7Clicked = 0
                        self.pawnBlack8Clicked = 0
                        self.KingBlackClicked = 0
                        self.knightBlack1Clicked = 0
                        self.knightBlack2Clicked = 0
                        self.bishopBlack1Clicked = 0
                        self.bishopBlack2Clicked = 0
                        self.QueenBlackClicked = 0
                if self.rb2.y < self.box33.y:
                    if self.rookBlack2Clicked_plus8 == 1 and self.rookBlack2Clicked_plus16 == 1 and self.rookBlack2Clicked_plus24 == 1:
                        drawRect_add(32)
                        self.rookBlack2Clicked = 1
                        self.rookBlack1Clicked = 0
                        self.pawnBlack1Clicked = 0
                        self.pawnBlack2Clicked = 0
                        self.pawnBlack3Clicked = 0
                        self.pawnBlack4Clicked = 0
                        self.pawnBlack5Clicked = 0
                        self.pawnBlack6Clicked = 0
                        self.pawnBlack7Clicked = 0
                        self.pawnBlack8Clicked = 0
                        self.KingBlackClicked = 0
                        self.knightBlack1Clicked = 0
                        self.knightBlack2Clicked = 0
                        self.bishopBlack1Clicked = 0
                        self.bishopBlack2Clicked = 0
                        self.QueenBlackClicked = 0
                if self.rb2.y < self.box25.y:
                    if self.rookBlack2Clicked_plus8 == 1 and self.rookBlack2Clicked_plus16 == 1 and self.rookBlack2Clicked_plus24 == 1 and self.rookBlack2Clicked_plus32 == 1:
                        drawRect_add(40)
                        self.rookBlack2Clicked = 1
                        self.rookBlack1Clicked = 0
                        self.pawnBlack1Clicked = 0
                        self.pawnBlack2Clicked = 0
                        self.pawnBlack3Clicked = 0
                        self.pawnBlack4Clicked = 0
                        self.pawnBlack5Clicked = 0
                        self.pawnBlack6Clicked = 0
                        self.pawnBlack7Clicked = 0
                        self.pawnBlack8Clicked = 0
                        self.KingBlackClicked = 0
                        self.knightBlack1Clicked = 0
                        self.knightBlack2Clicked = 0
                        self.bishopBlack1Clicked = 0
                        self.bishopBlack2Clicked = 0
                        self.QueenBlackClicked = 0
                if self.rb2.y < self.box17.y:
                    if self.rookBlack2Clicked_plus8 == 1 and self.rookBlack2Clicked_plus16 == 1 and self.rookBlack2Clicked_plus24 == 1 and self.rookBlack2Clicked_plus32 == 1 and \
                            self.rookBlack2Clicked_plus40 == 1:
                        drawRect_add(48)
                        self.rookBlack2Clicked = 1
                        self.rookBlack1Clicked = 0
                        self.pawnBlack1Clicked = 0
                        self.pawnBlack2Clicked = 0
                        self.pawnBlack3Clicked = 0
                        self.pawnBlack4Clicked = 0
                        self.pawnBlack5Clicked = 0
                        self.pawnBlack6Clicked = 0
                        self.pawnBlack7Clicked = 0
                        self.pawnBlack8Clicked = 0
                        self.KingBlackClicked = 0
                        self.knightBlack1Clicked = 0
                        self.knightBlack2Clicked = 0
                        self.bishopBlack1Clicked = 0
                        self.bishopBlack2Clicked = 0
                        self.QueenBlackClicked = 0
                if self.rb2.y < self.box9.y:
                    if self.rookBlack2Clicked_plus8 == 1 and self.rookBlack2Clicked_plus16 == 1 and self.rookBlack2Clicked_plus24 == 1 and self.rookBlack2Clicked_plus32 == 1 and \
                            self.rookBlack2Clicked_plus40 == 1 and self.rookBlack2Clicked_plus48 == 1:
                        drawRect_add(56)
                        self.rookBlack2Clicked = 1
                        self.rookBlack1Clicked = 0
                        self.pawnBlack1Clicked = 0
                        self.pawnBlack2Clicked = 0
                        self.pawnBlack3Clicked = 0
                        self.pawnBlack4Clicked = 0
                        self.pawnBlack5Clicked = 0
                        self.pawnBlack6Clicked = 0
                        self.pawnBlack7Clicked = 0
                        self.pawnBlack8Clicked = 0
                        self.KingBlackClicked = 0
                        self.knightBlack1Clicked = 0
                        self.knightBlack2Clicked = 0
                        self.bishopBlack1Clicked = 0
                        self.bishopBlack2Clicked = 0
                        self.QueenBlackClicked = 0

                if self.rb2.y > self.box1.y:
                    drawRect_sub(8)
                    self.rookBlack2Clicked = 1
                    self.rookBlack1Clicked = 0
                    self.pawnBlack1Clicked = 0
                    self.pawnBlack2Clicked = 0
                    self.pawnBlack3Clicked = 0
                    self.pawnBlack4Clicked = 0
                    self.pawnBlack5Clicked = 0
                    self.pawnBlack6Clicked = 0
                    self.pawnBlack7Clicked = 0
                    self.pawnBlack8Clicked = 0
                    self.KingBlackClicked = 0
                    self.knightBlack1Clicked = 0
                    self.knightBlack2Clicked = 0
                    self.bishopBlack1Clicked = 0
                    self.bishopBlack2Clicked = 0
                    self.QueenBlackClicked = 0
                if self.rb2.y > self.box9.y:
                    if self.rookBlack2Clicked_minus8 == 1:
                        drawRect_sub(16)
                        self.rookBlack2Clicked = 1
                        self.rookBlack1Clicked = 0
                        self.pawnBlack1Clicked = 0
                        self.pawnBlack2Clicked = 0
                        self.pawnBlack3Clicked = 0
                        self.pawnBlack4Clicked = 0
                        self.pawnBlack5Clicked = 0
                        self.pawnBlack6Clicked = 0
                        self.pawnBlack7Clicked = 0
                        self.pawnBlack8Clicked = 0
                        self.KingBlackClicked = 0
                        self.knightBlack1Clicked = 0
                        self.knightBlack2Clicked = 0
                        self.bishopBlack1Clicked = 0
                        self.bishopBlack2Clicked = 0
                        self.QueenBlackClicked = 0
                if self.rb2.y > self.box17.y:
                    if self.rookBlack2Clicked_minus8 == 1 and self.rookBlack2Clicked_minus16 == 1:
                        drawRect_sub(24)
                        self.rookBlack2Clicked = 1
                        self.rookBlack1Clicked = 0
                        self.pawnBlack1Clicked = 0
                        self.pawnBlack2Clicked = 0
                        self.pawnBlack3Clicked = 0
                        self.pawnBlack4Clicked = 0
                        self.pawnBlack5Clicked = 0
                        self.pawnBlack6Clicked = 0
                        self.pawnBlack7Clicked = 0
                        self.pawnBlack8Clicked = 0
                        self.KingBlackClicked = 0
                        self.knightBlack1Clicked = 0
                        self.knightBlack2Clicked = 0
                        self.bishopBlack1Clicked = 0
                        self.bishopBlack2Clicked = 0
                        self.QueenBlackClicked = 0
                if self.rb2.y > self.box25.y:
                    if self.rookBlack2Clicked_minus8 == 1 and self.rookBlack2Clicked_minus16 == 1 and self.rookBlack2Clicked_minus24 == 1:
                        drawRect_sub(32)
                        self.rookBlack2Clicked = 1
                        self.rookBlack1Clicked = 0
                        self.pawnBlack1Clicked = 0
                        self.pawnBlack2Clicked = 0
                        self.pawnBlack3Clicked = 0
                        self.pawnBlack4Clicked = 0
                        self.pawnBlack5Clicked = 0
                        self.pawnBlack6Clicked = 0
                        self.pawnBlack7Clicked = 0
                        self.pawnBlack8Clicked = 0
                        self.KingBlackClicked = 0
                        self.knightBlack1Clicked = 0
                        self.knightBlack2Clicked = 0
                        self.bishopBlack1Clicked = 0
                        self.bishopBlack2Clicked = 0
                        self.QueenBlackClicked = 0
                if self.rb2.y > self.box33.y:
                    if self.rookBlack2Clicked_minus8 == 1 and self.rookBlack2Clicked_minus16 == 1 and self.rookBlack2Clicked_minus24 == 1 and self.rookBlack2Clicked_minus32 == 1:
                        drawRect_sub(40)
                        self.rookBlack2Clicked = 1
                        self.rookBlack1Clicked = 0
                        self.pawnBlack1Clicked = 0
                        self.pawnBlack2Clicked = 0
                        self.pawnBlack3Clicked = 0
                        self.pawnBlack4Clicked = 0
                        self.pawnBlack5Clicked = 0
                        self.pawnBlack6Clicked = 0
                        self.pawnBlack7Clicked = 0
                        self.pawnBlack8Clicked = 0
                        self.KingBlackClicked = 0
                        self.knightBlack1Clicked = 0
                        self.knightBlack2Clicked = 0
                        self.bishopBlack1Clicked = 0
                        self.bishopBlack2Clicked = 0
                        self.QueenBlackClicked = 0
                if self.rb2.y > self.box41.y:
                    if self.rookBlack2Clicked_minus8 == 1 and self.rookBlack2Clicked_minus16 == 1 and self.rookBlack2Clicked_minus24 == 1 and self.rookBlack2Clicked_minus32 == 1 and \
                            self.rookBlack2Clicked_minus40:
                        drawRect_sub(48)
                        self.rookBlack2Clicked = 1
                        self.rookBlack1Clicked = 0
                        self.pawnBlack1Clicked = 0
                        self.pawnBlack2Clicked = 0
                        self.pawnBlack3Clicked = 0
                        self.pawnBlack4Clicked = 0
                        self.pawnBlack5Clicked = 0
                        self.pawnBlack6Clicked = 0
                        self.pawnBlack7Clicked = 0
                        self.pawnBlack8Clicked = 0
                        self.KingBlackClicked = 0
                        self.knightBlack1Clicked = 0
                        self.knightBlack2Clicked = 0
                        self.bishopBlack1Clicked = 0
                        self.bishopBlack2Clicked = 0
                        self.QueenBlackClicked = 0
                if self.rb2.y > self.box49.y:
                    if self.rookBlack2Clicked_minus8 == 1 and self.rookBlack2Clicked_minus16 == 1 and self.rookBlack2Clicked_minus24 == 1 and self.rookBlack2Clicked_minus32 == 1 and \
                            self.rookBlack2Clicked_minus40 and self.rookBlack2Clicked_minus48:
                        drawRect_sub(56)
                        self.rookBlack2Clicked = 1
                        self.rookBlack1Clicked = 0
                        self.pawnBlack1Clicked = 0
                        self.pawnBlack2Clicked = 0
                        self.pawnBlack3Clicked = 0
                        self.pawnBlack4Clicked = 0
                        self.pawnBlack5Clicked = 0
                        self.pawnBlack6Clicked = 0
                        self.pawnBlack7Clicked = 0
                        self.pawnBlack8Clicked = 0
                        self.KingBlackClicked = 0
                        self.knightBlack1Clicked = 0
                        self.knightBlack2Clicked = 0
                        self.bishopBlack1Clicked = 0
                        self.bishopBlack2Clicked = 0
                        self.QueenBlackClicked = 0

                # along x-axis
                if self.rb2.x < self.box8.x:
                    drawRect_add(1)
                    self.rookBlack2Clicked = 1
                    self.rookBlack1Clicked = 0
                    self.pawnBlack1Clicked = 0
                    self.pawnBlack2Clicked = 0
                    self.pawnBlack3Clicked = 0
                    self.pawnBlack4Clicked = 0
                    self.pawnBlack5Clicked = 0
                    self.pawnBlack6Clicked = 0
                    self.pawnBlack7Clicked = 0
                    self.pawnBlack8Clicked = 0
                    self.KingBlackClicked = 0
                    self.knightBlack1Clicked = 0
                    self.knightBlack2Clicked = 0
                    self.bishopBlack1Clicked = 0
                    self.bishopBlack2Clicked = 0
                    self.QueenBlackClicked = 0
                if self.rb2.x < self.box7.x:
                    if self.rookBlack2Clicked_plus1 == 1:
                        drawRect_add(2)
                        self.rookBlack2Clicked = 1
                        self.rookBlack1Clicked = 0
                        self.pawnBlack1Clicked = 0
                        self.pawnBlack2Clicked = 0
                        self.pawnBlack3Clicked = 0
                        self.pawnBlack4Clicked = 0
                        self.pawnBlack5Clicked = 0
                        self.pawnBlack6Clicked = 0
                        self.pawnBlack7Clicked = 0
                        self.pawnBlack8Clicked = 0
                        self.KingBlackClicked = 0
                        self.knightBlack1Clicked = 0
                        self.knightBlack2Clicked = 0
                        self.bishopBlack1Clicked = 0
                        self.bishopBlack2Clicked = 0
                        self.QueenBlackClicked = 0
                if self.rb2.x < self.box6.x:
                    if self.rookBlack2Clicked_plus1 == 1 and self.rookBlack2Clicked_plus2 == 1:
                        drawRect_add(3)
                        self.rookBlack2Clicked = 1
                        self.rookBlack1Clicked = 0
                        self.pawnBlack1Clicked = 0
                        self.pawnBlack2Clicked = 0
                        self.pawnBlack3Clicked = 0
                        self.pawnBlack4Clicked = 0
                        self.pawnBlack5Clicked = 0
                        self.pawnBlack6Clicked = 0
                        self.pawnBlack7Clicked = 0
                        self.pawnBlack8Clicked = 0
                        self.KingBlackClicked = 0
                        self.knightBlack1Clicked = 0
                        self.knightBlack2Clicked = 0
                        self.bishopBlack1Clicked = 0
                        self.bishopBlack2Clicked = 0
                        self.QueenBlackClicked = 0
                if self.rb2.x < self.box5.x:
                    if self.rookBlack2Clicked_plus1 == 1 and self.rookBlack2Clicked_plus2 == 1 and self.rookBlack2Clicked_plus3 == 1:
                        drawRect_add(4)
                        self.rookBlack2Clicked = 1
                        self.rookBlack1Clicked = 0
                        self.pawnBlack1Clicked = 0
                        self.pawnBlack2Clicked = 0
                        self.pawnBlack3Clicked = 0
                        self.pawnBlack4Clicked = 0
                        self.pawnBlack5Clicked = 0
                        self.pawnBlack6Clicked = 0
                        self.pawnBlack7Clicked = 0
                        self.pawnBlack8Clicked = 0
                        self.KingBlackClicked = 0
                        self.knightBlack1Clicked = 0
                        self.knightBlack2Clicked = 0
                        self.bishopBlack1Clicked = 0
                        self.bishopBlack2Clicked = 0
                        self.QueenBlackClicked = 0
                if self.rb2.x < self.box4.x:
                    if self.rookBlack2Clicked_plus1 == 1 and self.rookBlack2Clicked_plus2 == 1 and self.rookBlack2Clicked_plus3 == 1 and self.rookBlack2Clicked_plus4 == 1:
                        drawRect_add(5)
                        self.rookBlack2Clicked = 1
                        self.rookBlack1Clicked = 0
                        self.pawnBlack1Clicked = 0
                        self.pawnBlack2Clicked = 0
                        self.pawnBlack3Clicked = 0
                        self.pawnBlack4Clicked = 0
                        self.pawnBlack5Clicked = 0
                        self.pawnBlack6Clicked = 0
                        self.pawnBlack7Clicked = 0
                        self.pawnBlack8Clicked = 0
                        self.KingBlackClicked = 0
                        self.knightBlack1Clicked = 0
                        self.knightBlack2Clicked = 0
                        self.bishopBlack1Clicked = 0
                        self.bishopBlack2Clicked = 0
                        self.QueenBlackClicked = 0
                if self.rb2.x < self.box3.x:
                    if self.rookBlack2Clicked_plus1 == 1 and self.rookBlack2Clicked_plus2 == 1 and self.rookBlack2Clicked_plus3 == 1 and self.rookBlack2Clicked_plus4 == 1 and \
                            self.rookBlack2Clicked_plus5 == 1:
                        drawRect_add(6)
                        self.rookBlack2Clicked = 1
                        self.rookBlack1Clicked = 0
                        self.pawnBlack1Clicked = 0
                        self.pawnBlack2Clicked = 0
                        self.pawnBlack3Clicked = 0
                        self.pawnBlack4Clicked = 0
                        self.pawnBlack5Clicked = 0
                        self.pawnBlack6Clicked = 0
                        self.pawnBlack7Clicked = 0
                        self.pawnBlack8Clicked = 0
                        self.KingBlackClicked = 0
                        self.knightBlack1Clicked = 0
                        self.knightBlack2Clicked = 0
                        self.bishopBlack1Clicked = 0
                        self.bishopBlack2Clicked = 0
                        self.QueenBlackClicked = 0
                if self.rb2.x < self.box2.x:
                    if self.rookBlack2Clicked_plus1 == 1 and self.rookBlack2Clicked_plus2 == 1 and self.rookBlack2Clicked_plus3 == 1 and self.rookBlack2Clicked_plus4 == 1 and \
                            self.rookBlack2Clicked_plus5 == 1 and self.rookBlack2Clicked_plus6 == 1:
                        drawRect_add(7)
                        self.rookBlack2Clicked = 1
                        self.rookBlack1Clicked = 0
                        self.pawnBlack1Clicked = 0
                        self.pawnBlack2Clicked = 0
                        self.pawnBlack3Clicked = 0
                        self.pawnBlack4Clicked = 0
                        self.pawnBlack5Clicked = 0
                        self.pawnBlack6Clicked = 0
                        self.pawnBlack7Clicked = 0
                        self.pawnBlack8Clicked = 0
                        self.KingBlackClicked = 0
                        self.knightBlack1Clicked = 0
                        self.knightBlack2Clicked = 0
                        self.bishopBlack1Clicked = 0
                        self.bishopBlack2Clicked = 0
                        self.QueenBlackClicked = 0

                if self.rb2.x > self.box1.x:
                    drawRect_sub(1)
                    self.rookBlack2Clicked = 1
                    self.rookBlack1Clicked = 0
                    self.pawnBlack1Clicked = 0
                    self.pawnBlack2Clicked = 0
                    self.pawnBlack3Clicked = 0
                    self.pawnBlack4Clicked = 0
                    self.pawnBlack5Clicked = 0
                    self.pawnBlack6Clicked = 0
                    self.pawnBlack7Clicked = 0
                    self.pawnBlack8Clicked = 0
                    self.KingBlackClicked = 0
                    self.knightBlack1Clicked = 0
                    self.knightBlack2Clicked = 0
                    self.bishopBlack1Clicked = 0
                    self.bishopBlack2Clicked = 0
                    self.QueenBlackClicked = 0
                if self.rb2.x > self.box2.x:
                    if self.rookBlack2Clicked_minus1 == 1:
                        drawRect_sub(2)
                        self.rookBlack2Clicked = 1
                        self.rookBlack1Clicked = 0
                        self.pawnBlack1Clicked = 0
                        self.pawnBlack2Clicked = 0
                        self.pawnBlack3Clicked = 0
                        self.pawnBlack4Clicked = 0
                        self.pawnBlack5Clicked = 0
                        self.pawnBlack6Clicked = 0
                        self.pawnBlack7Clicked = 0
                        self.pawnBlack8Clicked = 0
                        self.KingBlackClicked = 0
                        self.knightBlack1Clicked = 0
                        self.knightBlack2Clicked = 0
                        self.bishopBlack1Clicked = 0
                        self.bishopBlack2Clicked = 0
                        self.QueenBlackClicked = 0
                if self.rb2.x > self.box3.x:
                    if self.rookBlack2Clicked_minus1 == 1 and self.rookBlack2Clicked_minus2 == 1:
                        drawRect_sub(3)
                        self.rookBlack2Clicked = 1
                        self.rookBlack1Clicked = 0
                        self.pawnBlack1Clicked = 0
                        self.pawnBlack2Clicked = 0
                        self.pawnBlack3Clicked = 0
                        self.pawnBlack4Clicked = 0
                        self.pawnBlack5Clicked = 0
                        self.pawnBlack6Clicked = 0
                        self.pawnBlack7Clicked = 0
                        self.pawnBlack8Clicked = 0
                        self.KingBlackClicked = 0
                        self.knightBlack1Clicked = 0
                        self.knightBlack2Clicked = 0
                        self.bishopBlack1Clicked = 0
                        self.bishopBlack2Clicked = 0
                        self.QueenBlackClicked = 0
                if self.rb2.x > self.box4.x:
                    if self.rookBlack2Clicked_minus1 == 1 and self.rookBlack2Clicked_minus2 == 1 and self.rookBlack2Clicked_minus3 == 1:
                        drawRect_sub(4)
                        self.rookBlack2Clicked = 1
                        self.rookBlack1Clicked = 0
                        self.pawnBlack1Clicked = 0
                        self.pawnBlack2Clicked = 0
                        self.pawnBlack3Clicked = 0
                        self.pawnBlack4Clicked = 0
                        self.pawnBlack5Clicked = 0
                        self.pawnBlack6Clicked = 0
                        self.pawnBlack7Clicked = 0
                        self.pawnBlack8Clicked = 0
                        self.KingBlackClicked = 0
                        self.knightBlack1Clicked = 0
                        self.knightBlack2Clicked = 0
                        self.bishopBlack1Clicked = 0
                        self.bishopBlack2Clicked = 0
                        self.QueenBlackClicked = 0
                if self.rb2.x > self.box5.x:
                    if self.rookBlack2Clicked_minus1 == 1 and self.rookBlack2Clicked_minus2 == 1 and self.rookBlack2Clicked_minus3 == 1 and self.rookBlack2Clicked_minus4 == 1:
                        drawRect_sub(5)
                        self.rookBlack2Clicked = 1
                        self.rookBlack1Clicked = 0
                        self.pawnBlack1Clicked = 0
                        self.pawnBlack2Clicked = 0
                        self.pawnBlack3Clicked = 0
                        self.pawnBlack4Clicked = 0
                        self.pawnBlack5Clicked = 0
                        self.pawnBlack6Clicked = 0
                        self.pawnBlack7Clicked = 0
                        self.pawnBlack8Clicked = 0
                        self.KingBlackClicked = 0
                        self.knightBlack1Clicked = 0
                        self.knightBlack2Clicked = 0
                        self.bishopBlack1Clicked = 0
                        self.bishopBlack2Clicked = 0
                        self.QueenBlackClicked = 0
                if self.rb2.x > self.box6.x:
                    if self.rookBlack2Clicked_minus1 == 1 and self.rookBlack2Clicked_minus2 == 1 and self.rookBlack2Clicked_minus3 == 1 and self.rookBlack2Clicked_minus4 == 1 and \
                            self.rookBlack2Clicked_minus5 == 1:
                        drawRect_sub(6)
                        self.rookBlack2Clicked = 1
                        self.rookBlack1Clicked = 0
                        self.pawnBlack1Clicked = 0
                        self.pawnBlack2Clicked = 0
                        self.pawnBlack3Clicked = 0
                        self.pawnBlack4Clicked = 0
                        self.pawnBlack5Clicked = 0
                        self.pawnBlack6Clicked = 0
                        self.pawnBlack7Clicked = 0
                        self.pawnBlack8Clicked = 0
                        self.KingBlackClicked = 0
                        self.knightBlack1Clicked = 0
                        self.knightBlack2Clicked = 0
                        self.bishopBlack1Clicked = 0
                        self.bishopBlack2Clicked = 0
                        self.QueenBlackClicked = 0
                if self.rb2.x > self.box7.x:
                    if self.rookBlack2Clicked_minus1 == 1 and self.rookBlack2Clicked_minus2 == 1 and self.rookBlack2Clicked_minus3 == 1 and self.rookBlack2Clicked_minus4 == 1 and \
                            self.rookBlack2Clicked_minus5 == 1 and self.rookBlack2Clicked_minus6 == 1:
                        drawRect_sub(7)
                        self.rookBlack2Clicked = 1
                        self.rookBlack1Clicked = 0
                        self.pawnBlack1Clicked = 0
                        self.pawnBlack2Clicked = 0
                        self.pawnBlack3Clicked = 0
                        self.pawnBlack4Clicked = 0
                        self.pawnBlack5Clicked = 0
                        self.pawnBlack6Clicked = 0
                        self.pawnBlack7Clicked = 0
                        self.pawnBlack8Clicked = 0
                        self.KingBlackClicked = 0
                        self.knightBlack1Clicked = 0
                        self.knightBlack2Clicked = 0
                        self.bishopBlack1Clicked = 0
                        self.bishopBlack2Clicked = 0
                        self.QueenBlackClicked = 0

                # check if white pieces can be cut or not
                if self.rb2.y < self.box57.y:
                    cutWhitePiece_add(8)
                if self.rb2.y < self.box49.y:
                    if self.rookBlack2Clicked_plus8 == 1:
                        cutWhitePiece_add(16)
                if self.rb2.y < self.box41.y:
                    if self.rookBlack2Clicked_plus8 == 1 and self.rookBlack2Clicked_plus16 == 1:
                        cutWhitePiece_add(24)
                if self.rb2.y < self.box33.y:
                    if self.rookBlack2Clicked_plus8 == 1 and self.rookBlack2Clicked_plus16 == 1 and self.rookBlack2Clicked_plus24 == 1:
                        cutWhitePiece_add(32)
                if self.rb2.y < self.box25.y:
                    if self.rookBlack2Clicked_plus8 == 1 and self.rookBlack2Clicked_plus16 == 1 and self.rookBlack2Clicked_plus24 == 1 and self.rookBlack2Clicked_plus32 == 1:
                        cutWhitePiece_add(40)
                if self.rb2.y < self.box17.y:
                    if self.rookBlack2Clicked_plus8 == 1 and self.rookBlack2Clicked_plus16 == 1 and self.rookBlack2Clicked_plus24 == 1 and self.rookBlack2Clicked_plus32 == 1 and \
                            self.rookBlack2Clicked_plus40 == 1:
                        cutWhitePiece_add(48)
                if self.rb2.y < self.box9.y:
                    if self.rookBlack2Clicked_plus8 == 1 and self.rookBlack2Clicked_plus16 == 1 and self.rookBlack2Clicked_plus24 == 1 and self.rookBlack2Clicked_plus32 == 1 and \
                            self.rookBlack2Clicked_plus40 == 1 and self.rookBlack2Clicked_plus48 == 1:
                        cutWhitePiece_add(56)

                if self.rb2.y > self.box1.y:
                    cutWhitePiece_sub(8)
                if self.rb2.y > self.box9.y:
                    if self.rookBlack2Clicked_minus8 == 1:
                        cutWhitePiece_sub(16)
                if self.rb2.y > self.box17.y:
                    if self.rookBlack2Clicked_minus8 == 1 and self.rookBlack2Clicked_minus16 == 1:
                        cutWhitePiece_sub(24)
                if self.rb2.y > self.box25.y:
                    if self.rookBlack2Clicked_minus8 == 1 and self.rookBlack2Clicked_minus16 == 1 and self.rookBlack2Clicked_minus24 == 1:
                        cutWhitePiece_sub(32)
                if self.rb2.y > self.box33.y:
                    if self.rookBlack2Clicked_minus8 == 1 and self.rookBlack2Clicked_minus16 == 1 and self.rookBlack2Clicked_minus24 == 1 and self.rookBlack2Clicked_minus32 == 1:
                        cutWhitePiece_sub(40)
                if self.rb2.y > self.box41.y:
                    if self.rookBlack2Clicked_minus8 == 1 and self.rookBlack2Clicked_minus16 == 1 and self.rookBlack2Clicked_minus24 == 1 and self.rookBlack2Clicked_minus32 == 1 and \
                            self.rookBlack2Clicked_minus40 == 1:
                        cutWhitePiece_sub(48)
                if self.rb2.y > self.box49.y:
                    if self.rookBlack2Clicked_minus8 == 1 and self.rookBlack2Clicked_minus16 == 1 and self.rookBlack2Clicked_minus24 == 1 and self.rookBlack2Clicked_minus32 == 1 and \
                            self.rookBlack2Clicked_minus40 == 1 and self.rookBlack2Clicked_minus48 == 1:
                        cutWhitePiece_sub(56)

                if self.rb2.x < self.box8.x:
                    cutWhitePiece_add(1)
                if self.rb2.x < self.box7.x:
                    if self.rookBlack2Clicked_plus1 == 1:
                        cutWhitePiece_add(2)
                if self.rb2.x < self.box6.x:
                    if self.rookBlack2Clicked_plus1 == 1 and self.rookBlack2Clicked_plus2 == 1:
                        cutWhitePiece_add(3)
                if self.rb2.x < self.box5.x:
                    if self.rookBlack2Clicked_plus1 == 1 and self.rookBlack2Clicked_plus2 == 1 and self.rookBlack2Clicked_plus3 == 1:
                        cutWhitePiece_add(4)
                if self.rb2.x < self.box4.x:
                    if self.rookBlack2Clicked_plus1 == 1 and self.rookBlack2Clicked_plus2 == 1 and self.rookBlack2Clicked_plus3 == 1 and self.rookBlack2Clicked_plus4 == 1:
                        cutWhitePiece_add(5)
                if self.rb2.x < self.box3.x:
                    if self.rookBlack2Clicked_plus1 == 1 and self.rookBlack2Clicked_plus2 == 1 and self.rookBlack2Clicked_plus3 == 1 and self.rookBlack2Clicked_plus4 == 1 and \
                            self.rookBlack2Clicked_plus5 == 1:
                        cutWhitePiece_add(6)
                if self.rb2.x < self.box2.x:
                    if self.rookBlack2Clicked_plus1 == 1 and self.rookBlack2Clicked_plus2 == 1 and self.rookBlack2Clicked_plus3 == 1 and self.rookBlack2Clicked_plus4 == 1 and \
                            self.rookBlack2Clicked_plus5 == 1 and self.rookBlack2Clicked_plus6 == 1:
                        cutWhitePiece_add(7)

                if self.rb2.x > self.box1.x:
                    cutWhitePiece_sub(1)
                if self.rb2.x > self.box2.x:
                    if self.rookBlack2Clicked_minus1 == 1:
                        cutWhitePiece_sub(2)
                if self.rb2.x > self.box3.x:
                    if self.rookBlack2Clicked_minus1 == 1 and self.rookBlack2Clicked_minus2 == 1:
                        cutWhitePiece_sub(3)
                if self.rb2.x > self.box4.x:
                    if self.rookBlack2Clicked_minus1 == 1 and self.rookBlack2Clicked_minus2 == 1 and self.rookBlack2Clicked_minus3 == 1:
                        cutWhitePiece_sub(4)
                if self.rb2.x > self.box5.x:
                    if self.rookBlack2Clicked_minus1 == 1 and self.rookBlack2Clicked_minus2 == 1 and self.rookBlack2Clicked_minus3 == 1 and self.rookBlack2Clicked_minus4 == 1:
                        cutWhitePiece_sub(5)
                if self.rb2.x > self.box6.x:
                    if self.rookBlack2Clicked_minus1 == 1 and self.rookBlack2Clicked_minus2 == 1 and self.rookBlack2Clicked_minus3 == 1 and self.rookBlack2Clicked_minus4 == 1 and \
                            self.rookBlack2Clicked_minus5 == 1:
                        cutWhitePiece_sub(6)
                if self.rb2.x > self.box7.x:
                    if self.rookBlack2Clicked_minus1 == 1 and self.rookBlack2Clicked_minus2 == 1 and self.rookBlack2Clicked_minus3 == 1 and self.rookBlack2Clicked_minus4 == 1 and \
                            self.rookBlack2Clicked_minus5 == 1 and self.rookBlack2Clicked_minus6 == 1:
                        cutWhitePiece_sub(7)

        # move the rook
        if self.rookBlack2Clicked == 1:

            # cut the pieces
            if self.rookBlack2Clicked_cut == 1:
                # along y-axis
                if self.rb2.y < self.box57.y:
                    removeWhitePiece_add(8)
                if self.rb2.y < self.box49.y:
                    removeWhitePiece_add(16)
                if self.rb2.y < self.box41.y:
                    removeWhitePiece_add(24)
                if self.rb2.y < self.box33.y:
                    removeWhitePiece_add(32)
                if self.rb2.y < self.box25.y:
                    removeWhitePiece_add(40)
                if self.rb2.y < self.box17.y:
                    removeWhitePiece_add(48)
                if self.rb2.y < self.box9.y:
                    removeWhitePiece_add(56)

                if self.rb2.y > self.box1.y:
                    removeWhitePiece_sub(8)
                if self.rb2.y > self.box9.y:
                    removeWhitePiece_sub(16)
                if self.rb2.y > self.box17.y:
                    removeWhitePiece_sub(24)
                if self.rb2.y > self.box25.y:
                    removeWhitePiece_sub(32)
                if self.rb2.y > self.box33.y:
                    removeWhitePiece_sub(40)
                if self.rb2.y > self.box41.y:
                    removeWhitePiece_sub(48)
                if self.rb2.y > self.box49.y:
                    removeWhitePiece_sub(56)

                # along x-axis
                if self.rb2.x < self.box8.x:
                    removeWhitePiece_add(1)
                if self.rb2.x < self.box7.x:
                    removeWhitePiece_add(2)
                if self.rb2.x < self.box6.x:
                    removeWhitePiece_add(3)
                if self.rb2.x < self.box5.x:
                    removeWhitePiece_add(4)
                if self.rb2.x < self.box4.x:
                    removeWhitePiece_add(5)
                if self.rb2.x < self.box3.x:
                    removeWhitePiece_add(6)
                if self.rb2.x < self.box2.x:
                    removeWhitePiece_add(7)

                if self.rb2.x > self.box1.x:
                    removeWhitePiece_sub(1)
                if self.rb2.x > self.box2.x:
                    removeWhitePiece_sub(2)
                if self.rb2.x > self.box3.x:
                    removeWhitePiece_sub(3)
                if self.rb2.x > self.box4.x:
                    removeWhitePiece_sub(4)
                if self.rb2.x > self.box5.x:
                    removeWhitePiece_sub(5)
                if self.rb2.x > self.box6.x:
                    removeWhitePiece_sub(6)
                if self.rb2.x > self.box7.x:
                    removeWhitePiece_sub(7)

            # along y-axis(+)
            if self.rb2.y < self.box57.y:
                if self.boxLst[self.boxLst.index(self.rb2) + 8].collidepoint(self.mouse_x, self.mouse_y):
                    self.rb2 = self.boxLst[self.boxLst.index(self.rb2) + 8]
                    self.rookBlack2Clicked = 0
                    self.turn = "white"
            if self.rb2.y < self.box49.y:
                if self.boxLst[self.boxLst.index(self.rb2) + 16].collidepoint(self.mouse_x, self.mouse_y):
                    self.rb2 = self.boxLst[self.boxLst.index(self.rb2) + 16]
                    self.rookBlack2Clicked = 0
                    self.turn = "white"
            if self.rb2.y < self.box41.y:
                if self.boxLst[self.boxLst.index(self.rb2) + 24].collidepoint(self.mouse_x, self.mouse_y):
                    self.rb2 = self.boxLst[self.boxLst.index(self.rb2) + 24]
                    self.rookBlack2Clicked = 0
                    self.turn = "white"
            if self.rb2.y < self.box33.y:
                if self.boxLst[self.boxLst.index(self.rb2) + 32].collidepoint(self.mouse_x, self.mouse_y):
                    self.rb2 = self.boxLst[self.boxLst.index(self.rb2) + 32]
                    self.rookBlack2Clicked = 0
                    self.turn = "white"
            if self.rb2.y < self.box25.y:
                if self.boxLst[self.boxLst.index(self.rb2) + 40].collidepoint(self.mouse_x, self.mouse_y):
                    self.rb2 = self.boxLst[self.boxLst.index(self.rb2) + 40]
                    self.rookBlack2Clicked = 0
                    self.turn = "white"
            if self.rb2.y < self.box17.y:
                if self.boxLst[self.boxLst.index(self.rb2) + 48].collidepoint(self.mouse_x, self.mouse_y):
                    self.rb2 = self.boxLst[self.boxLst.index(self.rb2) + 48]
                    self.rookBlack2Clicked = 0
                    self.turn = "white"
            if self.rb2.y < self.box9.y:
                if self.boxLst[self.boxLst.index(self.rb2) + 56].collidepoint(self.mouse_x, self.mouse_y):
                    self.rb2 = self.boxLst[self.boxLst.index(self.rb2) + 56]
                    self.rookBlack2Clicked = 0
                    self.turn = "white"

            # along y-axis(-)
            if self.rb2.y > self.box1.y:
                if self.boxLst[self.boxLst.index(self.rb2) - 8].collidepoint(self.mouse_x, self.mouse_y):
                    self.rb2 = self.boxLst[self.boxLst.index(self.rb2) - 8]
                    self.rookBlack2Clicked = 0
                    self.turn = "white"
            if self.rb2.y > self.box9.y:
                if self.boxLst[self.boxLst.index(self.rb2) - 16].collidepoint(self.mouse_x, self.mouse_y):
                    self.rb2 = self.boxLst[self.boxLst.index(self.rb2) - 16]
                    self.rookBlack2Clicked = 0
                    self.turn = "white"
            if self.rb2.y > self.box17.y:
                if self.boxLst[self.boxLst.index(self.rb2) - 24].collidepoint(self.mouse_x, self.mouse_y):
                    self.rb2 = self.boxLst[self.boxLst.index(self.rb2) - 24]
                    self.rookBlack2Clicked = 0
                    self.turn = "white"
            if self.rb2.y > self.box25.y:
                if self.boxLst[self.boxLst.index(self.rb2) - 32].collidepoint(self.mouse_x, self.mouse_y):
                    self.rb2 = self.boxLst[self.boxLst.index(self.rb2) - 32]
                    self.rookBlack2Clicked = 0
                    self.turn = "white"
            if self.rb2.y > self.box33.y:
                if self.boxLst[self.boxLst.index(self.rb2) - 40].collidepoint(self.mouse_x, self.mouse_y):
                    self.rb2 = self.boxLst[self.boxLst.index(self.rb2) - 40]
                    self.rookBlack2Clicked = 0
                    self.turn = "white"
            if self.rb2.y > self.box41.y:
                if self.boxLst[self.boxLst.index(self.rb2) - 48].collidepoint(self.mouse_x, self.mouse_y):
                    self.rb2 = self.boxLst[self.boxLst.index(self.rb2) - 48]
                    self.rookBlack2Clicked = 0
                    self.turn = "white"
            if self.rb2.y > self.box49.y:
                if self.boxLst[self.boxLst.index(self.rb2) - 56].collidepoint(self.mouse_x, self.mouse_y):
                    self.rb2 = self.boxLst[self.boxLst.index(self.rb2) - 56]
                    self.rookBlack2Clicked = 0
                    self.turn = "white"

            # along x-axis(+)
            if self.rb2.x < self.box8.x:
                if self.boxLst[self.boxLst.index(self.rb2) + 1].collidepoint(self.mouse_x, self.mouse_y):
                    self.rb2 = self.boxLst[self.boxLst.index(self.rb2) + 1]
                    self.rookBlack2Clicked = 0
                    self.turn = "white"
            if self.rb2.x < self.box7.x:
                if self.boxLst[self.boxLst.index(self.rb2) + 2].collidepoint(self.mouse_x, self.mouse_y):
                    self.rb2 = self.boxLst[self.boxLst.index(self.rb2) + 2]
                    self.rookBlack2Clicked = 0
                    self.turn = "white"
            if self.rb2.x < self.box6.x:
                if self.boxLst[self.boxLst.index(self.rb2) + 3].collidepoint(self.mouse_x, self.mouse_y):
                    self.rb2 = self.boxLst[self.boxLst.index(self.rb2) + 3]
                    self.rookBlack2Clicked = 0
                    self.turn = "white"
            if self.rb2.x < self.box5.x:
                if self.boxLst[self.boxLst.index(self.rb2) + 4].collidepoint(self.mouse_x, self.mouse_y):
                    self.rb2 = self.boxLst[self.boxLst.index(self.rb2) + 4]
                    self.rookBlack2Clicked = 0
                    self.turn = "white"
            if self.rb2.x < self.box4.x:
                if self.boxLst[self.boxLst.index(self.rb2) + 5].collidepoint(self.mouse_x, self.mouse_y):
                    self.rb2 = self.boxLst[self.boxLst.index(self.rb2) + 5]
                    self.rookBlack2Clicked = 0
                    self.turn = "white"
            if self.rb2.x < self.box3.x:
                if self.boxLst[self.boxLst.index(self.rb2) + 6].collidepoint(self.mouse_x, self.mouse_y):
                    self.rb2 = self.boxLst[self.boxLst.index(self.rb2) + 6]
                    self.rookBlack2Clicked = 0
                    self.turn = "white"
            if self.rb2.x < self.box2.x:
                if self.boxLst[self.boxLst.index(self.rb2) + 7].collidepoint(self.mouse_x, self.mouse_y):
                    self.rb2 = self.boxLst[self.boxLst.index(self.rb2) + 7]
                    self.rookBlack2Clicked = 0
                    self.turn = "white"

            # along x-axis(-)
            if self.rb2.x > self.box1.x:
                if self.boxLst[self.boxLst.index(self.rb2) - 1].collidepoint(self.mouse_x, self.mouse_y):
                    self.rb2 = self.boxLst[self.boxLst.index(self.rb2) - 1]
                    self.rookBlack2Clicked = 0
                    self.turn = "white"
            if self.rb2.x > self.box2.x:
                if self.boxLst[self.boxLst.index(self.rb2) - 2].collidepoint(self.mouse_x, self.mouse_y):
                    self.rb2 = self.boxLst[self.boxLst.index(self.rb2) - 2]
                    self.rookBlack2Clicked = 0
                    self.turn = "white"
            if self.rb2.x > self.box3.x:
                if self.boxLst[self.boxLst.index(self.rb2) - 3].collidepoint(self.mouse_x, self.mouse_y):
                    self.rb2 = self.boxLst[self.boxLst.index(self.rb2) - 3]
                    self.rookBlack2Clicked = 0
                    self.turn = "white"
            if self.rb2.x > self.box4.x:
                if self.boxLst[self.boxLst.index(self.rb2) - 4].collidepoint(self.mouse_x, self.mouse_y):
                    self.rb2 = self.boxLst[self.boxLst.index(self.rb2) - 4]
                    self.rookBlack2Clicked = 0
                    self.turn = "white"
            if self.rb2.x > self.box5.x:
                if self.boxLst[self.boxLst.index(self.rb2) - 5].collidepoint(self.mouse_x, self.mouse_y):
                    self.rb2 = self.boxLst[self.boxLst.index(self.rb2) - 5]
                    self.rookBlack2Clicked = 0
                    self.turn = "white"
            if self.rb2.x > self.box6.x:
                if self.boxLst[self.boxLst.index(self.rb2) - 6].collidepoint(self.mouse_x, self.mouse_y):
                    self.rb2 = self.boxLst[self.boxLst.index(self.rb2) - 6]
                    self.rookBlack2Clicked = 0
                    self.turn = "white"
            if self.rb2.x > self.box7.x:
                if self.boxLst[self.boxLst.index(self.rb2) - 7].collidepoint(self.mouse_x, self.mouse_y):
                    self.rb2 = self.boxLst[self.boxLst.index(self.rb2) - 7]
                    self.rookBlack2Clicked = 0
                    self.turn = "white"

    def bishopB1Movements(self):
        for event in pygame.event.get():
            if event.type == pygame.MOUSEBUTTONDOWN:
                self.mouse_x, self.mouse_y = pygame.mouse.get_pos()
        
        def drawRect_add(num):
            if not self.boxLst[self.boxLst.index(self.bb1) + num].colliderect(self.pw1) and not \
                    self.boxLst[self.boxLst.index(self.bb1) + num].colliderect(self.pw2) and not \
                    self.boxLst[self.boxLst.index(self.bb1) + num].colliderect(self.pw3) and not \
                    self.boxLst[self.boxLst.index(self.bb1) + num].colliderect(self.pw4) and not \
                    self.boxLst[self.boxLst.index(self.bb1) + num].colliderect(self.pw5) and not \
                    self.boxLst[self.boxLst.index(self.bb1) + num].colliderect(self.pw6) and not \
                    self.boxLst[self.boxLst.index(self.bb1) + num].colliderect(self.pw7) and not \
                    self.boxLst[self.boxLst.index(self.bb1) + num].colliderect(self.pw8) and not \
                    self.boxLst[self.boxLst.index(self.bb1) + num].colliderect(self.Kw) and not \
                    self.boxLst[self.boxLst.index(self.bb1) + num].colliderect(self.Qw) and not \
                    self.boxLst[self.boxLst.index(self.bb1) + num].colliderect(self.rw1) and not \
                    self.boxLst[self.boxLst.index(self.bb1) + num].colliderect(self.rw2) and not \
                    self.boxLst[self.boxLst.index(self.bb1) + num].colliderect(self.kw1) and not \
                    self.boxLst[self.boxLst.index(self.bb1) + num].colliderect(self.kw2) and not \
                    self.boxLst[self.boxLst.index(self.bb1) + num].colliderect(self.bw1) and not \
                    self.boxLst[self.boxLst.index(self.bb1) + num].colliderect(self.bw2) and not \
                    self.boxLst[self.boxLst.index(self.bb1) + num].colliderect(self.pb2) and not \
                    self.boxLst[self.boxLst.index(self.bb1) + num].colliderect(self.pb3) and not \
                    self.boxLst[self.boxLst.index(self.bb1) + num].colliderect(self.pb4) and not \
                    self.boxLst[self.boxLst.index(self.bb1) + num].colliderect(self.pb5) and not \
                    self.boxLst[self.boxLst.index(self.bb1) + num].colliderect(self.pb6) and not \
                    self.boxLst[self.boxLst.index(self.bb1) + num].colliderect(self.pb7) and not \
                    self.boxLst[self.boxLst.index(self.bb1) + num].colliderect(self.pb8) and not \
                    self.boxLst[self.boxLst.index(self.bb1) + num].colliderect(self.Kb) and not \
                    self.boxLst[self.boxLst.index(self.bb1) + num].colliderect(self.Qb) and not \
                    self.boxLst[self.boxLst.index(self.bb1) + num].colliderect(self.kb2) and not \
                    self.boxLst[self.boxLst.index(self.bb1) + num].colliderect(self.rb1) and not \
                    self.boxLst[self.boxLst.index(self.bb1) + num].colliderect(self.pb1) and not \
                    self.boxLst[self.boxLst.index(self.bb1) + num].colliderect(self.kb1) and not \
                    self.boxLst[self.boxLst.index(self.bb1) + num].colliderect(self.rb2) and not \
                    self.boxLst[self.boxLst.index(self.bb1) + num].colliderect(self.bb2):
                pygame.draw.rect(self.window, self.blue, self.boxLst[self.boxLst.index(self.bb1) + num], border_radius=100)
                if num == 8 + 1:
                    self.bishopBlack1Clicked_plus8_plus1 = 1
                if num == 16 + 2:
                    self.bishopBlack1Clicked_plus16_plus2 = 1
                if num == 24 + 3:
                    self.bishopBlack1Clicked_plus24_plus3 = 1
                if num == 32 + 4:
                    self.bishopBlack1Clicked_plus32_plus4 = 1
                if num == 40 + 5:
                    self.bishopBlack1Clicked_plus40_plus5 = 1
                if num == 48 + 6:
                    self.bishopBlack1Clicked_plus48_plus6 = 1
                    
                if num == 8 - 1:
                    self.bishopBlack1Clicked_plus8_minus1 = 1
                if num == 16 - 2:
                    self.bishopBlack1Clicked_plus16_minus2 = 1
                if num == 24 - 3:
                    self.bishopBlack1Clicked_plus24_minus3 = 1
                if num == 32 - 4:
                    self.bishopBlack1Clicked_plus32_minus4 = 1
                if num == 40 - 5:
                    self.bishopBlack1Clicked_plus40_minus5 = 1
                if num == 48 - 6:
                    self.bishopBlack1Clicked_plus48_minus6 = 1
                    
                if num == -8 + 1:
                    self.bishopBlack1Clicked_minus8_plus1 = 1
                if num == -16 + 2:
                    self.bishopBlack1Clicked_minus16_plus2 = 1
                if num == -24 + 3:
                    self.bishopBlack1Clicked_minus24_plus3 = 1
                if num == -32 + 4:
                    self.bishopBlack1Clicked_minus32_plus4 = 1
                if num == -40 + 5:
                    self.bishopBlack1Clicked_minus40_plus5 = 1
                if num == -48 + 6:
                    self.bishopBlack1Clicked_minus48_plus6 = 1
                    
                if num == -8 - 1:
                    self.bishopBlack1Clicked_minus8_minus1 = 1
                if num == -16 - 2:
                    self.bishopBlack1Clicked_minus16_minus2 = 1
                if num == -24 - 3:
                    self.bishopBlack1Clicked_minus24_minus3 = 1
                if num == -32 - 4:
                    self.bishopBlack1Clicked_minus32_minus4 = 1
                if num == -40 - 5:
                    self.bishopBlack1Clicked_minus40_minus5 = 1
                if num == -48 - 6:
                    self.bishopBlack1Clicked_minus48_minus6 = 1
        
        def check(num):
            if self.boxLst[self.boxLst.index(self.bb1) + num].colliderect(self.pw1) or \
                    self.boxLst[self.boxLst.index(self.bb1) + num].colliderect(self.pw2) or \
                    self.boxLst[self.boxLst.index(self.bb1) + num].colliderect(self.pw3) or \
                    self.boxLst[self.boxLst.index(self.bb1) + num].colliderect(self.pw4) or \
                    self.boxLst[self.boxLst.index(self.bb1) + num].colliderect(self.pw5) or \
                    self.boxLst[self.boxLst.index(self.bb1) + num].colliderect(self.pw6) or \
                    self.boxLst[self.boxLst.index(self.bb1) + num].colliderect(self.pw7) or \
                    self.boxLst[self.boxLst.index(self.bb1) + num].colliderect(self.pw8) or \
                    self.boxLst[self.boxLst.index(self.bb1) + num].colliderect(self.Kw) or \
                    self.boxLst[self.boxLst.index(self.bb1) + num].colliderect(self.Qw) or \
                    self.boxLst[self.boxLst.index(self.bb1) + num].colliderect(self.rw1) or \
                    self.boxLst[self.boxLst.index(self.bb1) + num].colliderect(self.rw2) or \
                    self.boxLst[self.boxLst.index(self.bb1) + num].colliderect(self.kw1) or \
                    self.boxLst[self.boxLst.index(self.bb1) + num].colliderect(self.kw2) or \
                    self.boxLst[self.boxLst.index(self.bb1) + num].colliderect(self.bw1) or \
                    self.boxLst[self.boxLst.index(self.bb1) + num].colliderect(self.bw2):
                pygame.draw.rect(self.window, self.red, self.boxLst[self.boxLst.index(self.bb1) + num], border_radius=100)
                self.bishopBlack1Clicked = 1
                self.bishopBlack2Clicked = 0
                self.rookBlack1Clicked = 0
                self.rookBlack2Clicked = 0
                self.KingBlackClicked = 0
                self.knightBlack1Clicked = 0
                self.knightBlack2Clicked = 0
                self.pawnBlack1Clicked = 0
                self.pawnBlack2Clicked = 0
                self.pawnBlack3Clicked = 0
                self.pawnBlack4Clicked = 0
                self.pawnBlack5Clicked = 0
                self.pawnBlack6Clicked = 0
                self.pawnBlack7Clicked = 0
                self.pawnBlack8Clicked = 0
                self.QueenBlackClicked = 0
                self.bishopBlack1Clicked_cut = 1
        
        def remove(num):
            if self.boxLst[self.boxLst.index(self.bb1) + num].collidepoint(self.mouse_x, self.mouse_y):
                if self.boxLst[self.boxLst.index(self.bb1) + num].colliderect(self.pw1):
                    self.pw1 = self.whiteCutPiece_1
                if self.boxLst[self.boxLst.index(self.bb1) + num].colliderect(self.pw2):
                    self.pw2 = self.whiteCutPiece_2
                if self.boxLst[self.boxLst.index(self.bb1) + num].colliderect(self.pw3):
                    self.pw3 = self.whiteCutPiece_3
                if self.boxLst[self.boxLst.index(self.bb1) + num].colliderect(self.pw4):
                    self.pw4 = self.whiteCutPiece_4
                if self.boxLst[self.boxLst.index(self.bb1) + num].colliderect(self.pw5):
                    self.pw5 = self.whiteCutPiece_5
                if self.boxLst[self.boxLst.index(self.bb1) + num].colliderect(self.pw6):
                    self.pw6 = self.whiteCutPiece_6
                if self.boxLst[self.boxLst.index(self.bb1) + num].colliderect(self.pw7):
                    self.pw7 = self.whiteCutPiece_7
                if self.boxLst[self.boxLst.index(self.bb1) + num].colliderect(self.pw8):
                    self.pw8 = self.whiteCutPiece_8
                if self.boxLst[self.boxLst.index(self.bb1) + num].colliderect(self.rw1):
                    self.rw1 = self.whiteCutPiece_9
                if self.boxLst[self.boxLst.index(self.bb1) + num].colliderect(self.rw2):
                    self.rw2 = self.whiteCutPiece_10
                if self.boxLst[self.boxLst.index(self.bb1) + num].colliderect(self.kw1):
                    self.kw1 = self.whiteCutPiece_11
                if self.boxLst[self.boxLst.index(self.bb1) + num].colliderect(self.kw2):
                    self.kw2 = self.whiteCutPiece_12
                if self.boxLst[self.boxLst.index(self.bb1) + num].colliderect(self.bw1):
                    self.bw1 = self.whiteCutPiece_13
                if self.boxLst[self.boxLst.index(self.bb1) + num].colliderect(self.bw2):
                    self.bw2 = self.whiteCutPiece_14
                if self.boxLst[self.boxLst.index(self.bb1) + num].colliderect(self.Kw):
                    self.Kw = self.whiteCutPiece_15
                    self.KingWhite_isDead = 1
                if self.boxLst[self.boxLst.index(self.bb1) + num].colliderect(self.Qw):
                    self.Qw = self.whiteCutPiece_16
                self.bb1 = self.boxLst[self.boxLst.index(self.bb1) + num]
                self.bishopBlack1Clicked = 0
                self.bishopBlack1Clicked_cut = 0
                self.turn = "white"
        
        if self.turn == "white":
            self.bishopBlack1Clicked_plus8_plus1 = 0
            self.bishopBlack1Clicked_plus16_plus2 = 0
            self.bishopBlack1Clicked_plus24_plus3 = 0
            self.bishopBlack1Clicked_plus32_plus4 = 0
            self.bishopBlack1Clicked_plus40_plus5 = 0
            self.bishopBlack1Clicked_plus48_plus6 = 0
            self.bishopBlack1Clicked_plus8_minus1 = 0
            self.bishopBlack1Clicked_plus16_minus2 = 0
            self.bishopBlack1Clicked_plus24_minus3 = 0
            self.bishopBlack1Clicked_plus32_minus4 = 0
            self.bishopBlack1Clicked_plus40_minus5 = 0
            self.bishopBlack1Clicked_plus48_minus6 = 0
            self.bishopBlack1Clicked_minus8_plus1 = 0
            self.bishopBlack1Clicked_minus16_plus2 = 0
            self.bishopBlack1Clicked_minus24_plus3 = 0
            self.bishopBlack1Clicked_minus32_plus4 = 0
            self.bishopBlack1Clicked_minus40_plus5 = 0
            self.bishopBlack1Clicked_minus48_plus6 = 0
            self.bishopBlack1Clicked_minus8_minus1 = 0
            self.bishopBlack1Clicked_minus16_minus2 = 0
            self.bishopBlack1Clicked_minus24_minus3 = 0
            self.bishopBlack1Clicked_minus32_minus4 = 0
            self.bishopBlack1Clicked_minus40_minus5 = 0
            self.bishopBlack1Clicked_minus48_minus6 = 0

        if self.turn == "black":
            if self.bb1.collidepoint(self.mouse_x, self.mouse_y):
                if self.bb1.y < self.box57.y and self.bb1.x < self.box8.x:
                    drawRect_add(8 + 1)
                    self.bishopBlack1Clicked = 1
                    self.bishopBlack2Clicked = 0
                    self.rookBlack1Clicked = 0
                    self.rookBlack2Clicked = 0
                    self.KingBlackClicked = 0
                    self.knightBlack1Clicked = 0
                    self.knightBlack2Clicked = 0
                    self.pawnBlack1Clicked = 0
                    self.pawnBlack2Clicked = 0
                    self.pawnBlack3Clicked = 0
                    self.pawnBlack4Clicked = 0
                    self.pawnBlack5Clicked = 0
                    self.pawnBlack6Clicked = 0
                    self.pawnBlack7Clicked = 0
                    self.pawnBlack8Clicked = 0
                    self.QueenBlackClicked = 0
                if self.bb1.y < self.box49.y and self.bb1.x < self.box7.x:
                    if self.bishopBlack1Clicked_plus8_plus1 == 1:
                        drawRect_add(16 + 2)
                        self.bishopBlack1Clicked = 1
                        self.bishopBlack2Clicked = 0
                        self.rookBlack1Clicked = 0
                        self.rookBlack2Clicked = 0
                        self.KingBlackClicked = 0
                        self.knightBlack1Clicked = 0
                        self.knightBlack2Clicked = 0
                        self.pawnBlack1Clicked = 0
                        self.pawnBlack2Clicked = 0
                        self.pawnBlack3Clicked = 0
                        self.pawnBlack4Clicked = 0
                        self.pawnBlack5Clicked = 0
                        self.pawnBlack6Clicked = 0
                        self.pawnBlack7Clicked = 0
                        self.pawnBlack8Clicked = 0
                        self.QueenBlackClicked = 0
                if self.bb1.y < self.box41.y and self.bb1.x < self.box6.x:
                    if self.bishopBlack1Clicked_plus8_plus1 == 1 and self.bishopBlack1Clicked_plus16_plus2 == 1:
                        drawRect_add(24 + 3)
                        self.bishopBlack1Clicked = 1
                        self.bishopBlack2Clicked = 0
                        self.rookBlack1Clicked = 0
                        self.rookBlack2Clicked = 0
                        self.KingBlackClicked = 0
                        self.knightBlack1Clicked = 0
                        self.knightBlack2Clicked = 0
                        self.pawnBlack1Clicked = 0
                        self.pawnBlack2Clicked = 0
                        self.pawnBlack3Clicked = 0
                        self.pawnBlack4Clicked = 0
                        self.pawnBlack5Clicked = 0
                        self.pawnBlack6Clicked = 0
                        self.pawnBlack7Clicked = 0
                        self.pawnBlack8Clicked = 0
                        self.QueenBlackClicked = 0
                if self.bb1.y < self.box33.y and self.bb1.x < self.box5.x:
                    if self.bishopBlack1Clicked_plus8_plus1 == 1 and self.bishopBlack1Clicked_plus16_plus2 == 1 and self.bishopBlack1Clicked_plus24_plus3 == 1:
                        drawRect_add(32 + 4)
                        self.bishopBlack1Clicked = 1
                        self.bishopBlack2Clicked = 0
                        self.rookBlack1Clicked = 0
                        self.rookBlack2Clicked = 0
                        self.KingBlackClicked = 0
                        self.knightBlack1Clicked = 0
                        self.knightBlack2Clicked = 0
                        self.pawnBlack1Clicked = 0
                        self.pawnBlack2Clicked = 0
                        self.pawnBlack3Clicked = 0
                        self.pawnBlack4Clicked = 0
                        self.pawnBlack5Clicked = 0
                        self.pawnBlack6Clicked = 0
                        self.pawnBlack7Clicked = 0
                        self.pawnBlack8Clicked = 0
                        self.QueenBlackClicked = 0
                if self.bb1.y < self.box25.y and self.bb1.x < self.box4.x:
                    if self.bishopBlack1Clicked_plus8_plus1 == 1 and self.bishopBlack1Clicked_plus16_plus2 == 1 and self.bishopBlack1Clicked_plus24_plus3 == 1 and \
                            self.bishopBlack1Clicked_plus32_plus4 == 1:
                        drawRect_add(40 + 5)
                        self.bishopBlack1Clicked = 1
                        self.bishopBlack2Clicked = 0
                        self.rookBlack1Clicked = 0
                        self.rookBlack2Clicked = 0
                        self.KingBlackClicked = 0
                        self.knightBlack1Clicked = 0
                        self.knightBlack2Clicked = 0
                        self.pawnBlack1Clicked = 0
                        self.pawnBlack2Clicked = 0
                        self.pawnBlack3Clicked = 0
                        self.pawnBlack4Clicked = 0
                        self.pawnBlack5Clicked = 0
                        self.pawnBlack6Clicked = 0
                        self.pawnBlack7Clicked = 0
                        self.pawnBlack8Clicked = 0
                        self.QueenBlackClicked = 0
                if self.bb1.y < self.box17.y and self.bb1.x < self.box3.x:
                    if self.bishopBlack1Clicked_plus8_plus1 == 1 and self.bishopBlack1Clicked_plus16_plus2 == 1 and self.bishopBlack1Clicked_plus24_plus3 == 1 and \
                            self.bishopBlack1Clicked_plus32_plus4 == 1 and self.bishopBlack1Clicked_plus40_plus5 == 1:
                        drawRect_add(48 + 6)
                        self.bishopBlack1Clicked = 1
                        self.bishopBlack2Clicked = 0
                        self.rookBlack1Clicked = 0
                        self.rookBlack2Clicked = 0
                        self.KingBlackClicked = 0
                        self.knightBlack1Clicked = 0
                        self.knightBlack2Clicked = 0
                        self.pawnBlack1Clicked = 0
                        self.pawnBlack2Clicked = 0
                        self.pawnBlack3Clicked = 0
                        self.pawnBlack4Clicked = 0
                        self.pawnBlack5Clicked = 0
                        self.pawnBlack6Clicked = 0
                        self.pawnBlack7Clicked = 0
                        self.pawnBlack8Clicked = 0
                        self.QueenBlackClicked = 0
                if self.bb1.y < self.box9.y and self.bb1.x < self.box2.x:
                    if self.bishopBlack1Clicked_plus8_plus1 == 1 and self.bishopBlack1Clicked_plus16_plus2 == 1 and self.bishopBlack1Clicked_plus24_plus3 == 1 and \
                            self.bishopBlack1Clicked_plus32_plus4 == 1 and self.bishopBlack1Clicked_plus40_plus5 == 1 and self.bishopBlack1Clicked_plus48_plus6 == 1:
                        drawRect_add(56 + 7)
                        self.bishopBlack1Clicked = 1
                        self.bishopBlack2Clicked = 0
                        self.rookBlack1Clicked = 0
                        self.rookBlack2Clicked = 0
                        self.KingBlackClicked = 0
                        self.knightBlack1Clicked = 0
                        self.knightBlack2Clicked = 0
                        self.pawnBlack1Clicked = 0
                        self.pawnBlack2Clicked = 0
                        self.pawnBlack3Clicked = 0
                        self.pawnBlack4Clicked = 0
                        self.pawnBlack5Clicked = 0
                        self.pawnBlack6Clicked = 0
                        self.pawnBlack7Clicked = 0
                        self.pawnBlack8Clicked = 0
                        self.QueenBlackClicked = 0

                if self.bb1.y < self.box57.y and self.bb1.x > self.box1.x:
                        drawRect_add(8 - 1)
                        self.bishopBlack1Clicked = 1
                        self.bishopBlack2Clicked = 0
                        self.rookBlack1Clicked = 0
                        self.rookBlack2Clicked = 0
                        self.KingBlackClicked = 0
                        self.knightBlack1Clicked = 0
                        self.knightBlack2Clicked = 0
                        self.pawnBlack1Clicked = 0
                        self.pawnBlack2Clicked = 0
                        self.pawnBlack3Clicked = 0
                        self.pawnBlack4Clicked = 0
                        self.pawnBlack5Clicked = 0
                        self.pawnBlack6Clicked = 0
                        self.pawnBlack7Clicked = 0
                        self.pawnBlack8Clicked = 0
                        self.QueenBlackClicked = 0
                if self.bb1.y < self.box49.y and self.bb1.x > self.box2.x:
                    if self.bishopBlack1Clicked_plus8_minus1 == 1:
                        drawRect_add(16 - 2)
                        self.bishopBlack1Clicked = 1
                        self.bishopBlack2Clicked = 0
                        self.rookBlack1Clicked = 0
                        self.rookBlack2Clicked = 0
                        self.KingBlackClicked = 0
                        self.knightBlack1Clicked = 0
                        self.knightBlack2Clicked = 0
                        self.pawnBlack1Clicked = 0
                        self.pawnBlack2Clicked = 0
                        self.pawnBlack3Clicked = 0
                        self.pawnBlack4Clicked = 0
                        self.pawnBlack5Clicked = 0
                        self.pawnBlack6Clicked = 0
                        self.pawnBlack7Clicked = 0
                        self.pawnBlack8Clicked = 0
                        self.QueenBlackClicked = 0
                if self.bb1.y < self.box41.y and self.bb1.x > self.box3.x:
                    if self.bishopBlack1Clicked_plus8_minus1 == 1 and self.bishopBlack1Clicked_plus16_minus2 == 1:
                        drawRect_add(24 - 3)
                        self.bishopBlack1Clicked = 1
                        self.bishopBlack2Clicked = 0
                        self.rookBlack1Clicked = 0
                        self.rookBlack2Clicked = 0
                        self.KingBlackClicked = 0
                        self.knightBlack1Clicked = 0
                        self.knightBlack2Clicked = 0
                        self.pawnBlack1Clicked = 0
                        self.pawnBlack2Clicked = 0
                        self.pawnBlack3Clicked = 0
                        self.pawnBlack4Clicked = 0
                        self.pawnBlack5Clicked = 0
                        self.pawnBlack6Clicked = 0
                        self.pawnBlack7Clicked = 0
                        self.pawnBlack8Clicked = 0
                        self.QueenBlackClicked = 0
                if self.bb1.y < self.box33.y and self.bb1.x > self.box4.x:
                    if self.bishopBlack1Clicked_plus8_minus1 == 1 and self.bishopBlack1Clicked_plus16_minus2 == 1 and self.bishopBlack1Clicked_plus24_minus3 == 1:
                        drawRect_add(32 - 4)
                        self.bishopBlack1Clicked = 1
                        self.bishopBlack2Clicked = 0
                        self.rookBlack1Clicked = 0
                        self.rookBlack2Clicked = 0
                        self.KingBlackClicked = 0
                        self.knightBlack1Clicked = 0
                        self.knightBlack2Clicked = 0
                        self.pawnBlack1Clicked = 0
                        self.pawnBlack2Clicked = 0
                        self.pawnBlack3Clicked = 0
                        self.pawnBlack4Clicked = 0
                        self.pawnBlack5Clicked = 0
                        self.pawnBlack6Clicked = 0
                        self.pawnBlack7Clicked = 0
                        self.pawnBlack8Clicked = 0
                        self.QueenBlackClicked = 0
                if self.bb1.y < self.box25.y and self.bb1.x > self.box5.x:
                    if self.bishopBlack1Clicked_plus8_minus1 == 1 and self.bishopBlack1Clicked_plus16_minus2 == 1 and self.bishopBlack1Clicked_plus24_minus3 == 1 and \
                            self.bishopBlack1Clicked_plus32_minus4 == 1:
                        drawRect_add(40 - 5)
                        self.bishopBlack1Clicked = 1
                        self.bishopBlack2Clicked = 0
                        self.rookBlack1Clicked = 0
                        self.rookBlack2Clicked = 0
                        self.KingBlackClicked = 0
                        self.knightBlack1Clicked = 0
                        self.knightBlack2Clicked = 0
                        self.pawnBlack1Clicked = 0
                        self.pawnBlack2Clicked = 0
                        self.pawnBlack3Clicked = 0
                        self.pawnBlack4Clicked = 0
                        self.pawnBlack5Clicked = 0
                        self.pawnBlack6Clicked = 0
                        self.pawnBlack7Clicked = 0
                        self.pawnBlack8Clicked = 0
                        self.QueenBlackClicked = 0
                if self.bb1.y < self.box17.y and self.bb1.x > self.box6.x:
                    if self.bishopBlack1Clicked_plus8_minus1 == 1 and self.bishopBlack1Clicked_plus16_minus2 == 1 and self.bishopBlack1Clicked_plus24_minus3 == 1 and \
                            self.bishopBlack1Clicked_plus32_minus4 == 1 and self.bishopBlack1Clicked_plus40_minus5 == 1:
                        drawRect_add(48 - 6)
                        self.bishopBlack1Clicked = 1
                        self.bishopBlack2Clicked = 0
                        self.rookBlack1Clicked = 0
                        self.rookBlack2Clicked = 0
                        self.KingBlackClicked = 0
                        self.knightBlack1Clicked = 0
                        self.knightBlack2Clicked = 0
                        self.pawnBlack1Clicked = 0
                        self.pawnBlack2Clicked = 0
                        self.pawnBlack3Clicked = 0
                        self.pawnBlack4Clicked = 0
                        self.pawnBlack5Clicked = 0
                        self.pawnBlack6Clicked = 0
                        self.pawnBlack7Clicked = 0
                        self.pawnBlack8Clicked = 0
                        self.QueenBlackClicked = 0
                if self.bb1.y < self.box9.y and self.bb1.x > self.box7.x:
                    if self.bishopBlack1Clicked_plus8_minus1 == 1 and self.bishopBlack1Clicked_plus16_minus2 == 1 and self.bishopBlack1Clicked_plus24_minus3 == 1 and \
                            self.bishopBlack1Clicked_plus32_minus4 == 1 and self.bishopBlack1Clicked_plus40_minus5 == 1 and self.bishopBlack1Clicked_plus48_minus6 == 1:
                        drawRect_add(56 - 7)
                        self.bishopBlack1Clicked = 1
                        self.bishopBlack2Clicked = 0
                        self.rookBlack1Clicked = 0
                        self.rookBlack2Clicked = 0
                        self.KingBlackClicked = 0
                        self.knightBlack1Clicked = 0
                        self.knightBlack2Clicked = 0
                        self.pawnBlack1Clicked = 0
                        self.pawnBlack2Clicked = 0
                        self.pawnBlack3Clicked = 0
                        self.pawnBlack4Clicked = 0
                        self.pawnBlack5Clicked = 0
                        self.pawnBlack6Clicked = 0
                        self.pawnBlack7Clicked = 0
                        self.pawnBlack8Clicked = 0
                        self.QueenBlackClicked = 0

                if self.bb1.y > self.box1.y and self.bb1.x < self.box8.x:
                        drawRect_add(-8 + 1)
                        self.bishopBlack1Clicked = 1
                        self.bishopBlack2Clicked = 0
                        self.rookBlack1Clicked = 0
                        self.rookBlack2Clicked = 0
                        self.KingBlackClicked = 0
                        self.knightBlack1Clicked = 0
                        self.knightBlack2Clicked = 0
                        self.pawnBlack1Clicked = 0
                        self.pawnBlack2Clicked = 0
                        self.pawnBlack3Clicked = 0
                        self.pawnBlack4Clicked = 0
                        self.pawnBlack5Clicked = 0
                        self.pawnBlack6Clicked = 0
                        self.pawnBlack7Clicked = 0
                        self.pawnBlack8Clicked = 0
                        self.QueenBlackClicked = 0
                if self.bb1.y > self.box9.y and self.bb1.x < self.box7.x:
                    if self.bishopBlack1Clicked_minus8_plus1 == 1:
                        drawRect_add(-16 + 2)
                        self.bishopBlack1Clicked = 1
                        self.bishopBlack2Clicked = 0
                        self.rookBlack1Clicked = 0
                        self.rookBlack2Clicked = 0
                        self.KingBlackClicked = 0
                        self.knightBlack1Clicked = 0
                        self.knightBlack2Clicked = 0
                        self.pawnBlack1Clicked = 0
                        self.pawnBlack2Clicked = 0
                        self.pawnBlack3Clicked = 0
                        self.pawnBlack4Clicked = 0
                        self.pawnBlack5Clicked = 0
                        self.pawnBlack6Clicked = 0
                        self.pawnBlack7Clicked = 0
                        self.pawnBlack8Clicked = 0
                        self.QueenBlackClicked = 0
                if self.bb1.y > self.box17.y and self.bb1.x < self.box6.x:
                    if self.bishopBlack1Clicked_minus8_plus1 == 1 and self.bishopBlack1Clicked_minus16_plus2 == 1:
                        drawRect_add(-24 + 3)
                        self.bishopBlack1Clicked = 1
                        self.bishopBlack2Clicked = 0
                        self.rookBlack1Clicked = 0
                        self.rookBlack2Clicked = 0
                        self.KingBlackClicked = 0
                        self.knightBlack1Clicked = 0
                        self.knightBlack2Clicked = 0
                        self.pawnBlack1Clicked = 0
                        self.pawnBlack2Clicked = 0
                        self.pawnBlack3Clicked = 0
                        self.pawnBlack4Clicked = 0
                        self.pawnBlack5Clicked = 0
                        self.pawnBlack6Clicked = 0
                        self.pawnBlack7Clicked = 0
                        self.pawnBlack8Clicked = 0
                        self.QueenBlackClicked = 0
                if self.bb1.y > self.box25.y and self.bb1.x < self.box5.x:
                    if self.bishopBlack1Clicked_minus8_plus1 == 1 and self.bishopBlack1Clicked_minus16_plus2 == 1 and self.bishopBlack1Clicked_minus24_plus3 == 1:
                        drawRect_add(-32 + 4)
                        self.bishopBlack1Clicked = 1
                        self.bishopBlack2Clicked = 0
                        self.rookBlack1Clicked = 0
                        self.rookBlack2Clicked = 0
                        self.KingBlackClicked = 0
                        self.knightBlack1Clicked = 0
                        self.knightBlack2Clicked = 0
                        self.pawnBlack1Clicked = 0
                        self.pawnBlack2Clicked = 0
                        self.pawnBlack3Clicked = 0
                        self.pawnBlack4Clicked = 0
                        self.pawnBlack5Clicked = 0
                        self.pawnBlack6Clicked = 0
                        self.pawnBlack7Clicked = 0
                        self.pawnBlack8Clicked = 0
                        self.QueenBlackClicked = 0
                if self.bb1.y > self.box33.y and self.bb1.x < self.box4.x:
                    if self.bishopBlack1Clicked_minus8_plus1 == 1 and self.bishopBlack1Clicked_minus16_plus2 == 1 and self.bishopBlack1Clicked_minus24_plus3 == 1 and \
                            self.bishopBlack1Clicked_minus32_plus4 == 1:
                        drawRect_add(-40 + 5)
                        self.bishopBlack1Clicked = 1
                        self.bishopBlack2Clicked = 0
                        self.rookBlack1Clicked = 0
                        self.rookBlack2Clicked = 0
                        self.KingBlackClicked = 0
                        self.knightBlack1Clicked = 0
                        self.knightBlack2Clicked = 0
                        self.pawnBlack1Clicked = 0
                        self.pawnBlack2Clicked = 0
                        self.pawnBlack3Clicked = 0
                        self.pawnBlack4Clicked = 0
                        self.pawnBlack5Clicked = 0
                        self.pawnBlack6Clicked = 0
                        self.pawnBlack7Clicked = 0
                        self.pawnBlack8Clicked = 0
                        self.QueenBlackClicked = 0
                if self.bb1.y > self.box41.y and self.bb1.x < self.box3.x:
                    if self.bishopBlack1Clicked_minus8_plus1 == 1 and self.bishopBlack1Clicked_minus16_plus2 == 1 and self.bishopBlack1Clicked_minus24_plus3 == 1 and \
                            self.bishopBlack1Clicked_minus32_plus4 == 1 and self.bishopBlack1Clicked_minus40_plus5 == 1:
                        drawRect_add(-48 + 6)
                        self.bishopBlack1Clicked = 1
                        self.bishopBlack2Clicked = 0
                        self.rookBlack1Clicked = 0
                        self.rookBlack2Clicked = 0
                        self.KingBlackClicked = 0
                        self.knightBlack1Clicked = 0
                        self.knightBlack2Clicked = 0
                        self.pawnBlack1Clicked = 0
                        self.pawnBlack2Clicked = 0
                        self.pawnBlack3Clicked = 0
                        self.pawnBlack4Clicked = 0
                        self.pawnBlack5Clicked = 0
                        self.pawnBlack6Clicked = 0
                        self.pawnBlack7Clicked = 0
                        self.pawnBlack8Clicked = 0
                        self.QueenBlackClicked = 0
                if self.bb1.y > self.box49.y and self.bb1.x < self.box2.x:
                    if self.bishopBlack1Clicked_minus8_plus1 == 1 and self.bishopBlack1Clicked_minus16_plus2 == 1 and self.bishopBlack1Clicked_minus24_plus3 == 1 and \
                            self.bishopBlack1Clicked_minus32_plus4 == 1 and self.bishopBlack1Clicked_minus40_plus5 == 1 and self.bishopBlack1Clicked_minus48_plus6 == 1:
                        drawRect_add(-56 + 7)
                        self.bishopBlack1Clicked = 1
                        self.bishopBlack2Clicked = 0
                        self.rookBlack1Clicked = 0
                        self.rookBlack2Clicked = 0
                        self.KingBlackClicked = 0
                        self.knightBlack1Clicked = 0
                        self.knightBlack2Clicked = 0
                        self.pawnBlack1Clicked = 0
                        self.pawnBlack2Clicked = 0
                        self.pawnBlack3Clicked = 0
                        self.pawnBlack4Clicked = 0
                        self.pawnBlack5Clicked = 0
                        self.pawnBlack6Clicked = 0
                        self.pawnBlack7Clicked = 0
                        self.pawnBlack8Clicked = 0
                        self.QueenBlackClicked = 0

                if self.bb1.y > self.box1.y and self.bb1.x > self.box1.x:
                        drawRect_add(-8 - 1)
                        self.bishopBlack1Clicked = 1
                        self.bishopBlack2Clicked = 0
                        self.rookBlack1Clicked = 0
                        self.rookBlack2Clicked = 0
                        self.KingBlackClicked = 0
                        self.knightBlack1Clicked = 0
                        self.knightBlack2Clicked = 0
                        self.pawnBlack1Clicked = 0
                        self.pawnBlack2Clicked = 0
                        self.pawnBlack3Clicked = 0
                        self.pawnBlack4Clicked = 0
                        self.pawnBlack5Clicked = 0
                        self.pawnBlack6Clicked = 0
                        self.pawnBlack7Clicked = 0
                        self.pawnBlack8Clicked = 0
                        self.QueenBlackClicked = 0
                if self.bb1.y > self.box9.y and self.bb1.x > self.box2.x:
                    if self.bishopBlack1Clicked_minus8_minus1 == 1:
                        drawRect_add(-16 - 2)
                        self.bishopBlack1Clicked = 1
                        self.bishopBlack2Clicked = 0
                        self.rookBlack1Clicked = 0
                        self.rookBlack2Clicked = 0
                        self.KingBlackClicked = 0
                        self.knightBlack1Clicked = 0
                        self.knightBlack2Clicked = 0
                        self.pawnBlack1Clicked = 0
                        self.pawnBlack2Clicked = 0
                        self.pawnBlack3Clicked = 0
                        self.pawnBlack4Clicked = 0
                        self.pawnBlack5Clicked = 0
                        self.pawnBlack6Clicked = 0
                        self.pawnBlack7Clicked = 0
                        self.pawnBlack8Clicked = 0
                        self.QueenBlackClicked = 0
                if self.bb1.y > self.box17.y and self.bb1.x > self.box3.x:
                    if self.bishopBlack1Clicked_minus8_minus1 == 1 and self.bishopBlack1Clicked_minus16_minus2 == 1:
                        drawRect_add(-24 - 3)
                        self.bishopBlack1Clicked = 1
                        self.bishopBlack2Clicked = 0
                        self.rookBlack1Clicked = 0
                        self.rookBlack2Clicked = 0
                        self.KingBlackClicked = 0
                        self.knightBlack1Clicked = 0
                        self.knightBlack2Clicked = 0
                        self.pawnBlack1Clicked = 0
                        self.pawnBlack2Clicked = 0
                        self.pawnBlack3Clicked = 0
                        self.pawnBlack4Clicked = 0
                        self.pawnBlack5Clicked = 0
                        self.pawnBlack6Clicked = 0
                        self.pawnBlack7Clicked = 0
                        self.pawnBlack8Clicked = 0
                        self.QueenBlackClicked = 0
                if self.bb1.y > self.box25.y and self.bb1.x > self.box4.x:
                    if self.bishopBlack1Clicked_minus8_minus1 == 1 and self.bishopBlack1Clicked_minus16_minus2 == 1 and self.bishopBlack1Clicked_minus24_minus3 == 1:
                        drawRect_add(-32 - 4)
                        self.bishopBlack1Clicked = 1
                        self.bishopBlack2Clicked = 0
                        self.rookBlack1Clicked = 0
                        self.rookBlack2Clicked = 0
                        self.KingBlackClicked = 0
                        self.knightBlack1Clicked = 0
                        self.knightBlack2Clicked = 0
                        self.pawnBlack1Clicked = 0
                        self.pawnBlack2Clicked = 0
                        self.pawnBlack3Clicked = 0
                        self.pawnBlack4Clicked = 0
                        self.pawnBlack5Clicked = 0
                        self.pawnBlack6Clicked = 0
                        self.pawnBlack7Clicked = 0
                        self.pawnBlack8Clicked = 0
                        self.QueenBlackClicked = 0
                if self.bb1.y > self.box33.y and self.bb1.x > self.box5.x:
                    if self.bishopBlack1Clicked_minus8_minus1 == 1 and self.bishopBlack1Clicked_minus16_minus2 == 1 and self.bishopBlack1Clicked_minus24_minus3 == 1 and \
                            self.bishopBlack1Clicked_minus32_minus4 == 1:
                        drawRect_add(-40 - 5)
                        self.bishopBlack1Clicked = 1
                        self.bishopBlack2Clicked = 0
                        self.rookBlack1Clicked = 0
                        self.rookBlack2Clicked = 0
                        self.KingBlackClicked = 0
                        self.knightBlack1Clicked = 0
                        self.knightBlack2Clicked = 0
                        self.pawnBlack1Clicked = 0
                        self.pawnBlack2Clicked = 0
                        self.pawnBlack3Clicked = 0
                        self.pawnBlack4Clicked = 0
                        self.pawnBlack5Clicked = 0
                        self.pawnBlack6Clicked = 0
                        self.pawnBlack7Clicked = 0
                        self.pawnBlack8Clicked = 0
                        self.QueenBlackClicked = 0
                if self.bb1.y > self.box41.y and self.bb1.x > self.box6.x:
                    if self.bishopBlack1Clicked_minus8_minus1 == 1 and self.bishopBlack1Clicked_minus16_minus2 == 1 and self.bishopBlack1Clicked_minus24_minus3 == 1 and \
                            self.bishopBlack1Clicked_minus32_minus4 == 1 and self.bishopBlack1Clicked_minus40_minus5 == 1:
                        drawRect_add(-48 - 6)
                        self.bishopBlack1Clicked = 1
                        self.bishopBlack2Clicked = 0
                        self.rookBlack1Clicked = 0
                        self.rookBlack2Clicked = 0
                        self.KingBlackClicked = 0
                        self.knightBlack1Clicked = 0
                        self.knightBlack2Clicked = 0
                        self.pawnBlack1Clicked = 0
                        self.pawnBlack2Clicked = 0
                        self.pawnBlack3Clicked = 0
                        self.pawnBlack4Clicked = 0
                        self.pawnBlack5Clicked = 0
                        self.pawnBlack6Clicked = 0
                        self.pawnBlack7Clicked = 0
                        self.pawnBlack8Clicked = 0
                        self.QueenBlackClicked = 0
                if self.bb1.y > self.box49.y and self.bb1.x > self.box7.x:
                    if self.bishopBlack1Clicked_minus8_minus1 == 1 and self.bishopBlack1Clicked_minus16_minus2 == 1 and self.bishopBlack1Clicked_minus24_minus3 == 1 and \
                            self.bishopBlack1Clicked_minus32_minus4 == 1 and self.bishopBlack1Clicked_minus40_minus5 == 1 and self.bishopBlack1Clicked_minus48_minus6 == 1:
                        drawRect_add(-56 - 7)
                        self.bishopBlack1Clicked = 1
                        self.bishopBlack2Clicked = 0
                        self.rookBlack1Clicked = 0
                        self.rookBlack2Clicked = 0
                        self.KingBlackClicked = 0
                        self.knightBlack1Clicked = 0
                        self.knightBlack2Clicked = 0
                        self.pawnBlack1Clicked = 0
                        self.pawnBlack2Clicked = 0
                        self.pawnBlack3Clicked = 0
                        self.pawnBlack4Clicked = 0
                        self.pawnBlack5Clicked = 0
                        self.pawnBlack6Clicked = 0
                        self.pawnBlack7Clicked = 0
                        self.pawnBlack8Clicked = 0
                        self.QueenBlackClicked = 0
                
                # check if white pieces can be cut or not 
                if self.bb1.y < self.box57.y and self.bb1.x < self.box8.x:
                    check(8 + 1)
                if self.bb1.y < self.box49.y and self.bb1.x < self.box7.x:
                    if self.bishopBlack1Clicked_plus8_plus1 == 1:
                        check(16 + 2)
                if self.bb1.y < self.box41.y and self.bb1.x < self.box6.x:
                    if self.bishopBlack1Clicked_plus8_plus1 == 1 and self.bishopBlack1Clicked_plus16_plus2 == 1:
                        check(24 + 3)
                if self.bb1.y < self.box33.y and self.bb1.x < self.box5.x:
                    if self.bishopBlack1Clicked_plus8_plus1 == 1 and self.bishopBlack1Clicked_plus16_plus2 == 1 and self.bishopBlack1Clicked_plus24_plus3 == 1:
                        check(32 + 4)
                if self.bb1.y < self.box25.y and self.bb1.x < self.box4.x:
                    if self.bishopBlack1Clicked_plus8_plus1 == 1 and self.bishopBlack1Clicked_plus16_plus2 == 1 and self.bishopBlack1Clicked_plus24_plus3 == 1 and \
                            self.bishopBlack1Clicked_plus32_plus4 == 1:
                        check(40 + 5)
                if self.bb1.y < self.box17.y and self.bb1.x < self.box3.x:
                    if self.bishopBlack1Clicked_plus8_plus1 == 1 and self.bishopBlack1Clicked_plus16_plus2 == 1 and self.bishopBlack1Clicked_plus24_plus3 == 1 and \
                            self.bishopBlack1Clicked_plus32_plus4 == 1 and self.bishopBlack1Clicked_plus40_plus5 == 1:
                        check(48 + 6)
                if self.bb1.y < self.box9.y and self.bb1.x < self.box2.x:
                    if self.bishopBlack1Clicked_plus8_plus1 == 1 and self.bishopBlack1Clicked_plus16_plus2 == 1 and self.bishopBlack1Clicked_plus24_plus3 == 1 and \
                            self.bishopBlack1Clicked_plus32_plus4 == 1 and self.bishopBlack1Clicked_plus40_plus5 == 1 and self.bishopBlack1Clicked_plus48_plus6 == 1:
                        check(56 + 7)
                    
                if self.bb1.y < self.box57.y and self.bb1.x > self.box1.x:
                    check(8 - 1)
                if self.bb1.y < self.box49.y and self.bb1.x > self.box2.x:
                    if self.bishopBlack1Clicked_plus8_minus1 == 1:
                        check(16 - 2)
                if self.bb1.y < self.box41.y and self.bb1.x > self.box3.x:
                    if self.bishopBlack1Clicked_plus8_minus1 == 1 and self.bishopBlack1Clicked_plus16_minus2 == 1:
                        check(24 - 3)
                if self.bb1.y < self.box33.y and self.bb1.x > self.box4.x:
                    if self.bishopBlack1Clicked_plus8_minus1 == 1 and self.bishopBlack1Clicked_plus16_minus2 == 1 and self.bishopBlack1Clicked_plus24_minus3 == 1:
                        check(32 - 4)
                if self.bb1.y < self.box25.y and self.bb1.x > self.box5.x:
                    if self.bishopBlack1Clicked_plus8_minus1 == 1 and self.bishopBlack1Clicked_plus16_minus2 == 1 and self.bishopBlack1Clicked_plus24_minus3 == 1 and \
                            self.bishopBlack1Clicked_plus32_minus4 == 1:
                        check(40 - 5)
                if self.bb1.y < self.box17.y and self.bb1.x > self.box6.x:
                    if self.bishopBlack1Clicked_plus8_minus1 == 1 and self.bishopBlack1Clicked_plus16_minus2 == 1 and self.bishopBlack1Clicked_plus24_minus3 == 1 and \
                            self.bishopBlack1Clicked_plus32_minus4 == 1 and self.bishopBlack1Clicked_plus40_minus5 == 1:
                        check(48 - 6)
                if self.bb1.y < self.box9.y and self.bb1.x > self.box7.x:
                    if self.bishopBlack1Clicked_plus8_minus1 == 1 and self.bishopBlack1Clicked_plus16_minus2 == 1 and self.bishopBlack1Clicked_plus24_minus3 == 1 and \
                            self.bishopBlack1Clicked_plus32_minus4 == 1 and self.bishopBlack1Clicked_plus40_minus5 == 1 and self.bishopBlack1Clicked_plus48_minus6 == 1:
                        check(56 - 7)
                    
                if self.bb1.y > self.box1.y and self.bb1.x < self.box8.x:
                    check(-8 + 1)
                if self.bb1.y > self.box9.y and self.bb1.x < self.box7.x:
                    if self.bishopBlack1Clicked_minus8_plus1 == 1:
                        check(-16 + 2)
                if self.bb1.y > self.box17.y and self.bb1.x < self.box6.x:
                    if self.bishopBlack1Clicked_minus8_plus1 == 1 and self.bishopBlack1Clicked_minus16_plus2 == 1:
                        check(-24 + 3)
                if self.bb1.y > self.box25.y and self.bb1.x < self.box5.x:
                    if self.bishopBlack1Clicked_minus8_plus1 == 1 and self.bishopBlack1Clicked_minus16_plus2 == 1 and self.bishopBlack1Clicked_minus24_plus3 == 1:
                        check(-32 + 4)
                if self.bb1.y > self.box33.y and self.bb1.x < self.box4.x:
                    if self.bishopBlack1Clicked_minus8_plus1 == 1 and self.bishopBlack1Clicked_minus16_plus2 == 1 and self.bishopBlack1Clicked_minus24_plus3 == 1 and \
                            self.bishopBlack1Clicked_minus32_plus4 == 1:
                        check(-40 + 5)
                if self.bb1.y > self.box41.y and self.bb1.x < self.box3.x:
                    if self.bishopBlack1Clicked_minus8_plus1 == 1 and self.bishopBlack1Clicked_minus16_plus2 == 1 and self.bishopBlack1Clicked_minus24_plus3 == 1 and \
                            self.bishopBlack1Clicked_minus32_plus4 == 1 and self.bishopBlack1Clicked_minus40_plus5 == 1:
                        check(-48 + 6)
                if self.bb1.y > self.box49.y and self.bb1.x < self.box2.x:
                    if self.bishopBlack1Clicked_minus8_plus1 == 1 and self.bishopBlack1Clicked_minus16_plus2 == 1 and self.bishopBlack1Clicked_minus24_plus3 == 1 and \
                            self.bishopBlack1Clicked_minus32_plus4 == 1 and self.bishopBlack1Clicked_minus40_plus5 == 1 and self.bishopBlack1Clicked_minus48_plus6 == 1:
                        check(-56 + 7)
                    
                if self.bb1.y > self.box1.y and self.bb1.x > self.box1.x:
                    check(-8 - 1)
                if self.bb1.y > self.box9.y and self.bb1.x > self.box2.x:
                    if self.bishopBlack1Clicked_minus8_minus1 == 1:
                        check(-16 - 2)
                if self.bb1.y > self.box17.y and self.bb1.x > self.box3.x:
                    if self.bishopBlack1Clicked_minus8_minus1 == 1 and self.bishopBlack1Clicked_minus16_minus2 == 1:
                        check(-24 - 3)
                if self.bb1.y > self.box25.y and self.bb1.x > self.box4.x:
                    if self.bishopBlack1Clicked_minus8_minus1 == 1 and self.bishopBlack1Clicked_minus16_minus2 == 1 and self.bishopBlack1Clicked_minus24_minus3 == 1:
                        check(-32 - 4)
                if self.bb1.y > self.box33.y and self.bb1.x > self.box5.x:
                    if self.bishopBlack1Clicked_minus8_minus1 == 1 and self.bishopBlack1Clicked_minus16_minus2 == 1 and self.bishopBlack1Clicked_minus24_minus3 == 1 and \
                            self.bishopBlack1Clicked_minus32_minus4 == 1:
                        check(-40 - 5)
                if self.bb1.y > self.box41.y and self.bb1.x > self.box6.x:
                    if self.bishopBlack1Clicked_minus8_minus1 == 1 and self.bishopBlack1Clicked_minus16_minus2 == 1 and self.bishopBlack1Clicked_minus24_minus3 == 1 and \
                            self.bishopBlack1Clicked_minus32_minus4 == 1 and self.bishopBlack1Clicked_minus40_minus5 == 1:
                        check(-48 - 6)
                if self.bb1.y > self.box49.y and self.bb1.x > self.box7.x:
                    if self.bishopBlack1Clicked_minus8_minus1 == 1 and self.bishopBlack1Clicked_minus16_minus2 == 1 and self.bishopBlack1Clicked_minus24_minus3 == 1 and \
                            self.bishopBlack1Clicked_minus32_minus4 == 1 and self.bishopBlack1Clicked_minus40_minus5 == 1 and self.bishopBlack1Clicked_minus48_minus6 == 1:
                        check(-56 - 7)
                
        # what will happen if bishop is clicked
        if self.bishopBlack1Clicked == 1:

            # remove the white pieces
            if self.bishopBlack1Clicked_cut == 1:
                if self.bb1.y < self.box57.y and self.bb1.x < self.box8.x:
                    remove(8 + 1)
                if self.bb1.y < self.box49.y and self.bb1.x < self.box7.x:
                    remove(16 + 2)
                if self.bb1.y < self.box41.y and self.bb1.x < self.box6.x:
                    remove(24 + 3)
                if self.bb1.y < self.box33.y and self.bb1.x < self.box5.x:
                    remove(32 + 4)
                if self.bb1.y < self.box25.y and self.bb1.x < self.box4.x:
                    remove(40 + 5)
                if self.bb1.y < self.box17.y and self.bb1.x < self.box3.x:
                    remove(48 + 6)
                if self.bb1.y < self.box9.y and self.bb1.x < self.box2.x:
                    remove(56 + 7)

                if self.bb1.y < self.box57.y and self.bb1.x > self.box1.x:
                    remove(8 - 1)
                if self.bb1.y < self.box49.y and self.bb1.x > self.box2.x:
                    remove(16 - 2)
                if self.bb1.y < self.box41.y and self.bb1.x > self.box3.x:
                    remove(24 - 3)
                if self.bb1.y < self.box33.y and self.bb1.x > self.box4.x:
                    remove(32 - 4)
                if self.bb1.y < self.box25.y and self.bb1.x > self.box5.x:
                    remove(40 - 5)
                if self.bb1.y < self.box17.y and self.bb1.x > self.box6.x:
                    remove(48 - 6)
                if self.bb1.y < self.box9.y and self.bb1.x > self.box7.x:
                    remove(56 - 7)

                if self.bb1.y > self.box1.y and self.bb1.x < self.box8.x:
                    remove(-8 + 1)
                if self.bb1.y > self.box9.y and self.bb1.x < self.box7.x:
                    remove(-16 + 2)
                if self.bb1.y > self.box17.y and self.bb1.x < self.box6.x:
                    remove(-24 + 3)
                if self.bb1.y > self.box25.y and self.bb1.x < self.box5.x:
                    remove(-32 + 4)
                if self.bb1.y > self.box33.y and self.bb1.x < self.box4.x:
                    remove(-40 + 5)
                if self.bb1.y > self.box41.y and self.bb1.x < self.box3.x:
                    remove(-48 + 6)
                if self.bb1.y > self.box49.y and self.bb1.x < self.box2.x:
                    remove(-56 + 7)

                if self.bb1.y > self.box1.y and self.bb1.x > self.box1.x:
                    remove(-8 - 1)
                if self.bb1.y > self.box9.y and self.bb1.x > self.box2.x:
                    remove(-16 - 2)
                if self.bb1.y > self.box17.y and self.bb1.x > self.box3.x:
                    remove(-24 - 3)
                if self.bb1.y > self.box25.y and self.bb1.x > self.box4.x:
                    remove(-32 - 4)
                if self.bb1.y > self.box33.y and self.bb1.x > self.box5.x:
                    remove(-40 - 5)
                if self.bb1.y > self.box41.y and self.bb1.x > self.box6.x:
                    remove(-48 - 6)
                if self.bb1.y > self.box49.y and self.bb1.x > self.box7.x:
                    remove(-56 - 7)

            if self.bb1.y < self.box57.y and self.bb1.x < self.box8.x:
                if self.boxLst[self.boxLst.index(self.bb1) + 8 + 1].collidepoint(self.mouse_x, self.mouse_y):
                    self.bb1 = self.boxLst[self.boxLst.index(self.bb1) + 8 + 1]
                    self.bishopBlack1Clicked = 0
                    self.turn = "white"
            if self.bb1.y < self.box49.y and self.bb1.x < self.box7.x:
                if self.boxLst[self.boxLst.index(self.bb1) + 16 + 2].collidepoint(self.mouse_x, self.mouse_y):
                    self.bb1 = self.boxLst[self.boxLst.index(self.bb1) + 16 + 2]
                    self.bishopBlack1Clicked = 0
                    self.turn = "white"
            if self.bb1.y < self.box41.y and self.bb1.x < self.box6.x:
                if self.boxLst[self.boxLst.index(self.bb1) + 24 + 3].collidepoint(self.mouse_x, self.mouse_y):
                    self.bb1 = self.boxLst[self.boxLst.index(self.bb1) + 24 + 3]
                    self.bishopBlack1Clicked = 0
                    self.turn = "white"
            if self.bb1.y < self.box33.y and self.bb1.x < self.box5.x:
                if self.boxLst[self.boxLst.index(self.bb1) + 32 + 4].collidepoint(self.mouse_x, self.mouse_y):
                    self.bb1 = self.boxLst[self.boxLst.index(self.bb1) + 32 + 4]
                    self.bishopBlack1Clicked = 0
                    self.turn = "white"
            if self.bb1.y < self.box25.y and self.bb1.x < self.box4.x:
                if self.boxLst[self.boxLst.index(self.bb1) + 40 + 5].collidepoint(self.mouse_x, self.mouse_y):
                    self.bb1 = self.boxLst[self.boxLst.index(self.bb1) + 40 + 5]
                    self.bishopBlack1Clicked = 0
                    self.turn = "white"
            if self.bb1.y < self.box17.y and self.bb1.x < self.box3.x:
                if self.boxLst[self.boxLst.index(self.bb1) + 48 + 6].collidepoint(self.mouse_x, self.mouse_y):
                    self.bb1 = self.boxLst[self.boxLst.index(self.bb1) + 48 + 6]
                    self.bishopBlack1Clicked = 0
                    self.turn = "white"
            if self.bb1.y < self.box9.y and self.bb1.x < self.box2.x:
                if self.boxLst[self.boxLst.index(self.bb1) + 56 + 7].collidepoint(self.mouse_x, self.mouse_y):
                    self.bb1 = self.boxLst[self.boxLst.index(self.bb1) + 56 + 7]
                    self.bishopBlack1Clicked = 0
                    self.turn = "white"

            if self.bb1.y < self.box57.y and self.bb1.x > self.box1.x:
                if self.boxLst[self.boxLst.index(self.bb1) + 8 - 1].collidepoint(self.mouse_x, self.mouse_y):
                    self.bb1 = self.boxLst[self.boxLst.index(self.bb1) + 8 - 1]
                    self.bishopBlack1Clicked = 0
                    self.turn = "white"
            if self.bb1.y < self.box49.y and self.bb1.x > self.box2.x:
                if self.boxLst[self.boxLst.index(self.bb1) + 16 - 2].collidepoint(self.mouse_x, self.mouse_y):
                    self.bb1 = self.boxLst[self.boxLst.index(self.bb1) + 16 - 2]
                    self.bishopBlack1Clicked = 0
                    self.turn = "white"
            if self.bb1.y < self.box41.y and self.bb1.x > self.box3.x:
                if self.boxLst[self.boxLst.index(self.bb1) + 24 - 3].collidepoint(self.mouse_x, self.mouse_y):
                    self.bb1 = self.boxLst[self.boxLst.index(self.bb1) + 24 - 3]
                    self.bishopBlack1Clicked = 0
                    self.turn = "white"
            if self.bb1.y < self.box33.y and self.bb1.x > self.box4.x:
                if self.boxLst[self.boxLst.index(self.bb1) + 32 - 4].collidepoint(self.mouse_x, self.mouse_y):
                    self.bb1 = self.boxLst[self.boxLst.index(self.bb1) + 32 - 4]
                    self.bishopBlack1Clicked = 0
                    self.turn = "white"
            if self.bb1.y < self.box25.y and self.bb1.x > self.box5.x:
                if self.boxLst[self.boxLst.index(self.bb1) + 40 - 5].collidepoint(self.mouse_x, self.mouse_y):
                    self.bb1 = self.boxLst[self.boxLst.index(self.bb1) + 40 - 5]
                    self.bishopBlack1Clicked = 0
                    self.turn = "white"
            if self.bb1.y < self.box17.y and self.bb1.x > self.box6.x:
                if self.boxLst[self.boxLst.index(self.bb1) + 48 - 6].collidepoint(self.mouse_x, self.mouse_y):
                    self.bb1 = self.boxLst[self.boxLst.index(self.bb1) + 48 - 6]
                    self.bishopBlack1Clicked = 0
                    self.turn = "white"
            if self.bb1.y < self.box9.y and self.bb1.x > self.box7.x:
                if self.boxLst[self.boxLst.index(self.bb1) + 56 - 7].collidepoint(self.mouse_x, self.mouse_y):
                    self.bb1 = self.boxLst[self.boxLst.index(self.bb1) + 56 - 7]
                    self.bishopBlack1Clicked = 0
                    self.turn = "white"

            if self.bb1.y > self.box1.y and self.bb1.x < self.box8.x:
                if self.boxLst[self.boxLst.index(self.bb1) - 8 + 1].collidepoint(self.mouse_x, self.mouse_y):
                    self.bb1 = self.boxLst[self.boxLst.index(self.bb1) - 8 + 1]
                    self.bishopBlack1Clicked = 0
                    self.turn = "white"
            if self.bb1.y > self.box9.y and self.bb1.x < self.box7.x:
                if self.boxLst[self.boxLst.index(self.bb1) - 16 + 2].collidepoint(self.mouse_x, self.mouse_y):
                    self.bb1 = self.boxLst[self.boxLst.index(self.bb1) - 16 + 2]
                    self.bishopBlack1Clicked = 0
                    self.turn = "white"
            if self.bb1.y > self.box17.y and self.bb1.x < self.box6.x:
                if self.boxLst[self.boxLst.index(self.bb1) - 24 + 3].collidepoint(self.mouse_x, self.mouse_y):
                    self.bb1 = self.boxLst[self.boxLst.index(self.bb1) - 24 + 3]
                    self.bishopBlack1Clicked = 0
                    self.turn = "white"
            if self.bb1.y > self.box25.y and self.bb1.x < self.box5.x:
                if self.boxLst[self.boxLst.index(self.bb1) - 32 + 4].collidepoint(self.mouse_x, self.mouse_y):
                    self.bb1 = self.boxLst[self.boxLst.index(self.bb1) - 32 + 4]
                    self.bishopBlack1Clicked = 0
                    self.turn = "white"
            if self.bb1.y > self.box33.y and self.bb1.x < self.box4.x:
                if self.boxLst[self.boxLst.index(self.bb1) - 40 + 5].collidepoint(self.mouse_x, self.mouse_y):
                    self.bb1 = self.boxLst[self.boxLst.index(self.bb1) - 40 + 5]
                    self.bishopBlack1Clicked = 0
                    self.turn = "white"
            if self.bb1.y > self.box41.y and self.bb1.x < self.box3.x:
                if self.boxLst[self.boxLst.index(self.bb1) - 48 + 6].collidepoint(self.mouse_x, self.mouse_y):
                    self.bb1 = self.boxLst[self.boxLst.index(self.bb1) - 48 + 6]
                    self.bishopBlack1Clicked = 0
                    self.turn = "white"
            if self.bb1.y > self.box49.y and self.bb1.x < self.box2.x:
                if self.boxLst[self.boxLst.index(self.bb1) - 56 + 7].collidepoint(self.mouse_x, self.mouse_y):
                    self.bb1 = self.boxLst[self.boxLst.index(self.bb1) - 56 + 7]
                    self.bishopBlack1Clicked = 0
                    self.turn = "white"

            if self.bb1.y > self.box1.y and self.bb1.x > self.box1.x:
                if self.boxLst[self.boxLst.index(self.bb1) - 8 - 1].collidepoint(self.mouse_x, self.mouse_y):
                    self.bb1 = self.boxLst[self.boxLst.index(self.bb1) - 8 - 1]
                    self.bishopBlack1Clicked = 0
                    self.turn = "white"
            if self.bb1.y > self.box9.y and self.bb1.x > self.box2.x:
                if self.boxLst[self.boxLst.index(self.bb1) - 16 - 2].collidepoint(self.mouse_x, self.mouse_y):
                    self.bb1 = self.boxLst[self.boxLst.index(self.bb1) - 16 - 2]
                    self.bishopBlack1Clicked = 0
                    self.turn = "white"
            if self.bb1.y > self.box17.y and self.bb1.x > self.box3.x:
                if self.boxLst[self.boxLst.index(self.bb1) - 24 - 3].collidepoint(self.mouse_x, self.mouse_y):
                    self.bb1 = self.boxLst[self.boxLst.index(self.bb1) - 24 - 3]
                    self.bishopBlack1Clicked = 0
                    self.turn = "white"
            if self.bb1.y > self.box25.y and self.bb1.x > self.box4.x:
                if self.boxLst[self.boxLst.index(self.bb1) - 32 - 4].collidepoint(self.mouse_x, self.mouse_y):
                    self.bb1 = self.boxLst[self.boxLst.index(self.bb1) - 32 - 4]
                    self.bishopBlack1Clicked = 0
                    self.turn = "white"
            if self.bb1.y > self.box33.y and self.bb1.x > self.box5.x:
                if self.boxLst[self.boxLst.index(self.bb1) - 40 - 5].collidepoint(self.mouse_x, self.mouse_y):
                    self.bb1 = self.boxLst[self.boxLst.index(self.bb1) - 40 - 5]
                    self.bishopBlack1Clicked = 0
                    self.turn = "white"
            if self.bb1.y > self.box41.y and self.bb1.x > self.box6.x:
                if self.boxLst[self.boxLst.index(self.bb1) - 48 - 6].collidepoint(self.mouse_x, self.mouse_y):
                    self.bb1 = self.boxLst[self.boxLst.index(self.bb1) - 48 - 6]
                    self.bishopBlack1Clicked = 0
                    self.turn = "white"
            if self.bb1.y > self.box49.y and self.bb1.x > self.box7.x:
                if self.boxLst[self.boxLst.index(self.bb1) - 56 - 7].collidepoint(self.mouse_x, self.mouse_y):
                    self.bb1 = self.boxLst[self.boxLst.index(self.bb1) - 56 - 7]
                    self.bishopBlack1Clicked = 0
                    self.turn = "white"

    def bishopB2Movements(self):
        for event in pygame.event.get():
            if event.type == pygame.MOUSEBUTTONDOWN:
                self.mouse_x, self.mouse_y = pygame.mouse.get_pos()

        def drawRect_add(num):
            if not self.boxLst[self.boxLst.index(self.bb2) + num].colliderect(self.pw1) and not \
                    self.boxLst[self.boxLst.index(self.bb2) + num].colliderect(self.pw2) and not \
                    self.boxLst[self.boxLst.index(self.bb2) + num].colliderect(self.pw3) and not \
                    self.boxLst[self.boxLst.index(self.bb2) + num].colliderect(self.pw4) and not \
                    self.boxLst[self.boxLst.index(self.bb2) + num].colliderect(self.pw5) and not \
                    self.boxLst[self.boxLst.index(self.bb2) + num].colliderect(self.pw6) and not \
                    self.boxLst[self.boxLst.index(self.bb2) + num].colliderect(self.pw7) and not \
                    self.boxLst[self.boxLst.index(self.bb2) + num].colliderect(self.pw8) and not \
                    self.boxLst[self.boxLst.index(self.bb2) + num].colliderect(self.Kw) and not \
                    self.boxLst[self.boxLst.index(self.bb2) + num].colliderect(self.Qw) and not \
                    self.boxLst[self.boxLst.index(self.bb2) + num].colliderect(self.rw1) and not \
                    self.boxLst[self.boxLst.index(self.bb2) + num].colliderect(self.rw2) and not \
                    self.boxLst[self.boxLst.index(self.bb2) + num].colliderect(self.kw1) and not \
                    self.boxLst[self.boxLst.index(self.bb2) + num].colliderect(self.kw2) and not \
                    self.boxLst[self.boxLst.index(self.bb2) + num].colliderect(self.bw1) and not \
                    self.boxLst[self.boxLst.index(self.bb2) + num].colliderect(self.bw2) and not \
                    self.boxLst[self.boxLst.index(self.bb2) + num].colliderect(self.pb2) and not \
                    self.boxLst[self.boxLst.index(self.bb2) + num].colliderect(self.pb3) and not \
                    self.boxLst[self.boxLst.index(self.bb2) + num].colliderect(self.pb4) and not \
                    self.boxLst[self.boxLst.index(self.bb2) + num].colliderect(self.pb5) and not \
                    self.boxLst[self.boxLst.index(self.bb2) + num].colliderect(self.pb6) and not \
                    self.boxLst[self.boxLst.index(self.bb2) + num].colliderect(self.pb7) and not \
                    self.boxLst[self.boxLst.index(self.bb2) + num].colliderect(self.pb8) and not \
                    self.boxLst[self.boxLst.index(self.bb2) + num].colliderect(self.Kb) and not \
                    self.boxLst[self.boxLst.index(self.bb2) + num].colliderect(self.Qb) and not \
                    self.boxLst[self.boxLst.index(self.bb2) + num].colliderect(self.kb2) and not \
                    self.boxLst[self.boxLst.index(self.bb2) + num].colliderect(self.rb1) and not \
                    self.boxLst[self.boxLst.index(self.bb2) + num].colliderect(self.pb1) and not \
                    self.boxLst[self.boxLst.index(self.bb2) + num].colliderect(self.kb1) and not \
                    self.boxLst[self.boxLst.index(self.bb2) + num].colliderect(self.rb2) and not \
                    self.boxLst[self.boxLst.index(self.bb2) + num].colliderect(self.bb1):
                pygame.draw.rect(self.window, self.blue, self.boxLst[self.boxLst.index(self.bb2) + num], border_radius=100)
                if num == 8 + 1:
                    self.bishopBlack2Clicked_plus8_plus1 = 1
                if num == 16 + 2:
                    self.bishopBlack2Clicked_plus16_plus2 = 1
                if num == 24 + 3:
                    self.bishopBlack2Clicked_plus24_plus3 = 1
                if num == 32 + 4:
                    self.bishopBlack2Clicked_plus32_plus4 = 1
                if num == 40 + 5:
                    self.bishopBlack2Clicked_plus40_plus5 = 1
                if num == 48 + 6:
                    self.bishopBlack2Clicked_plus48_plus6 = 1

                if num == 8 - 1:
                    self.bishopBlack2Clicked_plus8_minus1 = 1
                if num == 16 - 2:
                    self.bishopBlack2Clicked_plus16_minus2 = 1
                if num == 24 - 3:
                    self.bishopBlack2Clicked_plus24_minus3 = 1
                if num == 32 - 4:
                    self.bishopBlack2Clicked_plus32_minus4 = 1
                if num == 40 - 5:
                    self.bishopBlack2Clicked_plus40_minus5 = 1
                if num == 48 - 6:
                    self.bishopBlack2Clicked_plus48_minus6 = 1

                if num == -8 + 1:
                    self.bishopBlack2Clicked_minus8_plus1 = 1
                if num == -16 + 2:
                    self.bishopBlack2Clicked_minus16_plus2 = 1
                if num == -24 + 3:
                    self.bishopBlack2Clicked_minus24_plus3 = 1
                if num == -32 + 4:
                    self.bishopBlack2Clicked_minus32_plus4 = 1
                if num == -40 + 5:
                    self.bishopBlack2Clicked_minus40_plus5 = 1
                if num == -48 + 6:
                    self.bishopBlack2Clicked_minus48_plus6 = 1

                if num == -8 - 1:
                    self.bishopBlack2Clicked_minus8_minus1 = 1
                if num == -16 - 2:
                    self.bishopBlack2Clicked_minus16_minus2 = 1
                if num == -24 - 3:
                    self.bishopBlack2Clicked_minus24_minus3 = 1
                if num == -32 - 4:
                    self.bishopBlack2Clicked_minus32_minus4 = 1
                if num == -40 - 5:
                    self.bishopBlack2Clicked_minus40_minus5 = 1
                if num == -48 - 6:
                    self.bishopBlack2Clicked_minus48_minus6 = 1

        def check(num):
            if self.boxLst[self.boxLst.index(self.bb2) + num].colliderect(self.pw1) or \
                    self.boxLst[self.boxLst.index(self.bb2) + num].colliderect(self.pw2) or \
                    self.boxLst[self.boxLst.index(self.bb2) + num].colliderect(self.pw3) or \
                    self.boxLst[self.boxLst.index(self.bb2) + num].colliderect(self.pw4) or \
                    self.boxLst[self.boxLst.index(self.bb2) + num].colliderect(self.pw5) or \
                    self.boxLst[self.boxLst.index(self.bb2) + num].colliderect(self.pw6) or \
                    self.boxLst[self.boxLst.index(self.bb2) + num].colliderect(self.pw7) or \
                    self.boxLst[self.boxLst.index(self.bb2) + num].colliderect(self.pw8) or \
                    self.boxLst[self.boxLst.index(self.bb2) + num].colliderect(self.Kw) or \
                    self.boxLst[self.boxLst.index(self.bb2) + num].colliderect(self.Qw) or \
                    self.boxLst[self.boxLst.index(self.bb2) + num].colliderect(self.rw1) or \
                    self.boxLst[self.boxLst.index(self.bb2) + num].colliderect(self.rw2) or \
                    self.boxLst[self.boxLst.index(self.bb2) + num].colliderect(self.kw1) or \
                    self.boxLst[self.boxLst.index(self.bb2) + num].colliderect(self.kw2) or \
                    self.boxLst[self.boxLst.index(self.bb2) + num].colliderect(self.bw1) or \
                    self.boxLst[self.boxLst.index(self.bb2) + num].colliderect(self.bw2):
                pygame.draw.rect(self.window, self.red, self.boxLst[self.boxLst.index(self.bb2) + num], border_radius=100)
                self.bishopBlack2Clicked = 1
                self.bishopBlack1Clicked = 0
                self.rookBlack1Clicked = 0
                self.rookBlack2Clicked = 0
                self.KingBlackClicked = 0
                self.knightBlack1Clicked = 0
                self.knightBlack2Clicked = 0
                self.pawnBlack1Clicked = 0
                self.pawnBlack2Clicked = 0
                self.pawnBlack3Clicked = 0
                self.pawnBlack4Clicked = 0
                self.pawnBlack5Clicked = 0
                self.pawnBlack6Clicked = 0
                self.pawnBlack7Clicked = 0
                self.pawnBlack8Clicked = 0
                self.QueenBlackClicked = 0
                self.bishopBlack2Clicked_cut = 1

        def remove(num):
            if self.boxLst[self.boxLst.index(self.bb2) + num].collidepoint(self.mouse_x, self.mouse_y):
                if self.boxLst[self.boxLst.index(self.bb2) + num].colliderect(self.pw1):
                    self.pw1 = self.whiteCutPiece_1
                if self.boxLst[self.boxLst.index(self.bb2) + num].colliderect(self.pw2):
                    self.pw2 = self.whiteCutPiece_2
                if self.boxLst[self.boxLst.index(self.bb2) + num].colliderect(self.pw3):
                    self.pw3 = self.whiteCutPiece_3
                if self.boxLst[self.boxLst.index(self.bb2) + num].colliderect(self.pw4):
                    self.pw4 = self.whiteCutPiece_4
                if self.boxLst[self.boxLst.index(self.bb2) + num].colliderect(self.pw5):
                    self.pw5 = self.whiteCutPiece_5
                if self.boxLst[self.boxLst.index(self.bb2) + num].colliderect(self.pw6):
                    self.pw6 = self.whiteCutPiece_6
                if self.boxLst[self.boxLst.index(self.bb2) + num].colliderect(self.pw7):
                    self.pw7 = self.whiteCutPiece_7
                if self.boxLst[self.boxLst.index(self.bb2) + num].colliderect(self.pw8):
                    self.pw8 = self.whiteCutPiece_8
                if self.boxLst[self.boxLst.index(self.bb2) + num].colliderect(self.rw1):
                    self.rw1 = self.whiteCutPiece_9
                if self.boxLst[self.boxLst.index(self.bb2) + num].colliderect(self.rw2):
                    self.rw2 = self.whiteCutPiece_10
                if self.boxLst[self.boxLst.index(self.bb2) + num].colliderect(self.kw1):
                    self.kw1 = self.whiteCutPiece_11
                if self.boxLst[self.boxLst.index(self.bb2) + num].colliderect(self.kw2):
                    self.kw2 = self.whiteCutPiece_12
                if self.boxLst[self.boxLst.index(self.bb2) + num].colliderect(self.bw1):
                    self.bw1 = self.whiteCutPiece_13
                if self.boxLst[self.boxLst.index(self.bb2) + num].colliderect(self.bw2):
                    self.bw2 = self.whiteCutPiece_14
                if self.boxLst[self.boxLst.index(self.bb2) + num].colliderect(self.Kw):
                    self.Kw = self.whiteCutPiece_15
                    self.KingWhite_isDead = 1
                if self.boxLst[self.boxLst.index(self.bb2) + num].colliderect(self.Qw):
                    self.Qw = self.whiteCutPiece_16
                self.bb2 = self.boxLst[self.boxLst.index(self.bb2) + num]
                self.bishopBlack2Clicked = 0
                self.bishopBlack2Clicked_cut = 0
                self.turn = "white"

        if self.turn == "white":
            self.bishopBlack2Clicked_plus8_plus1 = 0
            self.bishopBlack2Clicked_plus16_plus2 = 0
            self.bishopBlack2Clicked_plus24_plus3 = 0
            self.bishopBlack2Clicked_plus32_plus4 = 0
            self.bishopBlack2Clicked_plus40_plus5 = 0
            self.bishopBlack2Clicked_plus48_plus6 = 0
            self.bishopBlack2Clicked_plus8_minus1 = 0
            self.bishopBlack2Clicked_plus16_minus2 = 0
            self.bishopBlack2Clicked_plus24_minus3 = 0
            self.bishopBlack2Clicked_plus32_minus4 = 0
            self.bishopBlack2Clicked_plus40_minus5 = 0
            self.bishopBlack2Clicked_plus48_minus6 = 0
            self.bishopBlack2Clicked_minus8_plus1 = 0
            self.bishopBlack2Clicked_minus16_plus2 = 0
            self.bishopBlack2Clicked_minus24_plus3 = 0
            self.bishopBlack2Clicked_minus32_plus4 = 0
            self.bishopBlack2Clicked_minus40_plus5 = 0
            self.bishopBlack2Clicked_minus48_plus6 = 0
            self.bishopBlack2Clicked_minus8_minus1 = 0
            self.bishopBlack2Clicked_minus16_minus2 = 0
            self.bishopBlack2Clicked_minus24_minus3 = 0
            self.bishopBlack2Clicked_minus32_minus4 = 0
            self.bishopBlack2Clicked_minus40_minus5 = 0
            self.bishopBlack2Clicked_minus48_minus6 = 0

        if self.turn == "black":
            if self.bb2.collidepoint(self.mouse_x, self.mouse_y):
                if self.bb2.y < self.box57.y and self.bb2.x < self.box8.x:
                    drawRect_add(8 + 1)
                    self.bishopBlack2Clicked = 1
                    self.bishopBlack1Clicked = 0
                    self.rookBlack1Clicked = 0
                    self.rookBlack2Clicked = 0
                    self.KingBlackClicked = 0
                    self.knightBlack1Clicked = 0
                    self.knightBlack2Clicked = 0
                    self.pawnBlack1Clicked = 0
                    self.pawnBlack2Clicked = 0
                    self.pawnBlack3Clicked = 0
                    self.pawnBlack4Clicked = 0
                    self.pawnBlack5Clicked = 0
                    self.pawnBlack6Clicked = 0
                    self.pawnBlack7Clicked = 0
                    self.pawnBlack8Clicked = 0
                    self.QueenBlackClicked = 0
                if self.bb2.y < self.box49.y and self.bb2.x < self.box7.x:
                    if self.bishopBlack2Clicked_plus8_plus1 == 1:
                        drawRect_add(16 + 2)
                        self.bishopBlack2Clicked = 1
                        self.bishopBlack1Clicked = 0
                        self.rookBlack1Clicked = 0
                        self.rookBlack2Clicked = 0
                        self.KingBlackClicked = 0
                        self.knightBlack1Clicked = 0
                        self.knightBlack2Clicked = 0
                        self.pawnBlack1Clicked = 0
                        self.pawnBlack2Clicked = 0
                        self.pawnBlack3Clicked = 0
                        self.pawnBlack4Clicked = 0
                        self.pawnBlack5Clicked = 0
                        self.pawnBlack6Clicked = 0
                        self.pawnBlack7Clicked = 0
                        self.pawnBlack8Clicked = 0
                        self.QueenBlackClicked = 0
                if self.bb2.y < self.box41.y and self.bb2.x < self.box6.x:
                    if self.bishopBlack2Clicked_plus8_plus1 == 1 and self.bishopBlack2Clicked_plus16_plus2 == 1:
                        drawRect_add(24 + 3)
                        self.bishopBlack2Clicked = 1
                        self.bishopBlack1Clicked = 0
                        self.rookBlack1Clicked = 0
                        self.rookBlack2Clicked = 0
                        self.KingBlackClicked = 0
                        self.knightBlack1Clicked = 0
                        self.knightBlack2Clicked = 0
                        self.pawnBlack1Clicked = 0
                        self.pawnBlack2Clicked = 0
                        self.pawnBlack3Clicked = 0
                        self.pawnBlack4Clicked = 0
                        self.pawnBlack5Clicked = 0
                        self.pawnBlack6Clicked = 0
                        self.pawnBlack7Clicked = 0
                        self.pawnBlack8Clicked = 0
                        self.QueenBlackClicked = 0
                if self.bb2.y < self.box33.y and self.bb2.x < self.box5.x:
                    if self.bishopBlack2Clicked_plus8_plus1 == 1 and self.bishopBlack2Clicked_plus16_plus2 == 1 and self.bishopBlack2Clicked_plus24_plus3 == 1:
                        drawRect_add(32 + 4)
                        self.bishopBlack2Clicked = 1
                        self.bishopBlack1Clicked = 0
                        self.rookBlack1Clicked = 0
                        self.rookBlack2Clicked = 0
                        self.KingBlackClicked = 0
                        self.knightBlack1Clicked = 0
                        self.knightBlack2Clicked = 0
                        self.pawnBlack1Clicked = 0
                        self.pawnBlack2Clicked = 0
                        self.pawnBlack3Clicked = 0
                        self.pawnBlack4Clicked = 0
                        self.pawnBlack5Clicked = 0
                        self.pawnBlack6Clicked = 0
                        self.pawnBlack7Clicked = 0
                        self.pawnBlack8Clicked = 0
                        self.QueenBlackClicked = 0
                if self.bb2.y < self.box25.y and self.bb2.x < self.box4.x:
                    if self.bishopBlack2Clicked_plus8_plus1 == 1 and self.bishopBlack2Clicked_plus16_plus2 == 1 and self.bishopBlack2Clicked_plus24_plus3 == 1 and \
                            self.bishopBlack2Clicked_plus32_plus4 == 1:
                        drawRect_add(40 + 5)
                        self.bishopBlack2Clicked = 1
                        self.bishopBlack1Clicked = 0
                        self.rookBlack1Clicked = 0
                        self.rookBlack2Clicked = 0
                        self.KingBlackClicked = 0
                        self.knightBlack1Clicked = 0
                        self.knightBlack2Clicked = 0
                        self.pawnBlack1Clicked = 0
                        self.pawnBlack2Clicked = 0
                        self.pawnBlack3Clicked = 0
                        self.pawnBlack4Clicked = 0
                        self.pawnBlack5Clicked = 0
                        self.pawnBlack6Clicked = 0
                        self.pawnBlack7Clicked = 0
                        self.pawnBlack8Clicked = 0
                        self.QueenBlackClicked = 0
                if self.bb2.y < self.box17.y and self.bb2.x < self.box3.x:
                    if self.bishopBlack2Clicked_plus8_plus1 == 1 and self.bishopBlack2Clicked_plus16_plus2 == 1 and self.bishopBlack2Clicked_plus24_plus3 == 1 and \
                            self.bishopBlack2Clicked_plus32_plus4 == 1 and self.bishopBlack2Clicked_plus40_plus5 == 1:
                        drawRect_add(48 + 6)
                        self.bishopBlack2Clicked = 1
                        self.bishopBlack1Clicked = 0
                        self.rookBlack1Clicked = 0
                        self.rookBlack2Clicked = 0
                        self.KingBlackClicked = 0
                        self.knightBlack1Clicked = 0
                        self.knightBlack2Clicked = 0
                        self.pawnBlack1Clicked = 0
                        self.pawnBlack2Clicked = 0
                        self.pawnBlack3Clicked = 0
                        self.pawnBlack4Clicked = 0
                        self.pawnBlack5Clicked = 0
                        self.pawnBlack6Clicked = 0
                        self.pawnBlack7Clicked = 0
                        self.pawnBlack8Clicked = 0
                        self.QueenBlackClicked = 0
                if self.bb2.y < self.box9.y and self.bb2.x < self.box2.x:
                    if self.bishopBlack2Clicked_plus8_plus1 == 1 and self.bishopBlack2Clicked_plus16_plus2 == 1 and self.bishopBlack2Clicked_plus24_plus3 == 1 and \
                            self.bishopBlack2Clicked_plus32_plus4 == 1 and self.bishopBlack2Clicked_plus40_plus5 == 1 and self.bishopBlack2Clicked_plus48_plus6 == 1:
                        drawRect_add(56 + 7)
                        self.bishopBlack2Clicked = 1
                        self.bishopBlack1Clicked = 0
                        self.rookBlack1Clicked = 0
                        self.rookBlack2Clicked = 0
                        self.KingBlackClicked = 0
                        self.knightBlack1Clicked = 0
                        self.knightBlack2Clicked = 0
                        self.pawnBlack1Clicked = 0
                        self.pawnBlack2Clicked = 0
                        self.pawnBlack3Clicked = 0
                        self.pawnBlack4Clicked = 0
                        self.pawnBlack5Clicked = 0
                        self.pawnBlack6Clicked = 0
                        self.pawnBlack7Clicked = 0
                        self.pawnBlack8Clicked = 0
                        self.QueenBlackClicked = 0

                if self.bb2.y < self.box57.y and self.bb2.x > self.box1.x:
                        drawRect_add(8 - 1)
                        self.bishopBlack2Clicked = 1
                        self.bishopBlack1Clicked = 0
                        self.rookBlack1Clicked = 0
                        self.rookBlack2Clicked = 0
                        self.KingBlackClicked = 0
                        self.knightBlack1Clicked = 0
                        self.knightBlack2Clicked = 0
                        self.pawnBlack1Clicked = 0
                        self.pawnBlack2Clicked = 0
                        self.pawnBlack3Clicked = 0
                        self.pawnBlack4Clicked = 0
                        self.pawnBlack5Clicked = 0
                        self.pawnBlack6Clicked = 0
                        self.pawnBlack7Clicked = 0
                        self.pawnBlack8Clicked = 0
                        self.QueenBlackClicked = 0
                if self.bb2.y < self.box49.y and self.bb2.x > self.box2.x:
                    if self.bishopBlack2Clicked_plus8_minus1 == 1:
                        drawRect_add(16 - 2)
                        self.bishopBlack2Clicked = 1
                        self.bishopBlack1Clicked = 0
                        self.rookBlack1Clicked = 0
                        self.rookBlack2Clicked = 0
                        self.KingBlackClicked = 0
                        self.knightBlack1Clicked = 0
                        self.knightBlack2Clicked = 0
                        self.pawnBlack1Clicked = 0
                        self.pawnBlack2Clicked = 0
                        self.pawnBlack3Clicked = 0
                        self.pawnBlack4Clicked = 0
                        self.pawnBlack5Clicked = 0
                        self.pawnBlack6Clicked = 0
                        self.pawnBlack7Clicked = 0
                        self.pawnBlack8Clicked = 0
                        self.QueenBlackClicked = 0
                if self.bb2.y < self.box41.y and self.bb2.x > self.box3.x:
                    if self.bishopBlack2Clicked_plus8_minus1 == 1 and self.bishopBlack2Clicked_plus16_minus2 == 1:
                        drawRect_add(24 - 3)
                        self.bishopBlack2Clicked = 1
                        self.bishopBlack1Clicked = 0
                        self.rookBlack1Clicked = 0
                        self.rookBlack2Clicked = 0
                        self.KingBlackClicked = 0
                        self.knightBlack1Clicked = 0
                        self.knightBlack2Clicked = 0
                        self.pawnBlack1Clicked = 0
                        self.pawnBlack2Clicked = 0
                        self.pawnBlack3Clicked = 0
                        self.pawnBlack4Clicked = 0
                        self.pawnBlack5Clicked = 0
                        self.pawnBlack6Clicked = 0
                        self.pawnBlack7Clicked = 0
                        self.pawnBlack8Clicked = 0
                        self.QueenBlackClicked = 0
                if self.bb2.y < self.box33.y and self.bb2.x > self.box4.x:
                    if self.bishopBlack2Clicked_plus8_minus1 == 1 and self.bishopBlack2Clicked_plus16_minus2 == 1 and self.bishopBlack2Clicked_plus24_minus3 == 1:
                        drawRect_add(32 - 4)
                        self.bishopBlack2Clicked = 1
                        self.bishopBlack1Clicked = 0
                        self.rookBlack1Clicked = 0
                        self.rookBlack2Clicked = 0
                        self.KingBlackClicked = 0
                        self.knightBlack1Clicked = 0
                        self.knightBlack2Clicked = 0
                        self.pawnBlack1Clicked = 0
                        self.pawnBlack2Clicked = 0
                        self.pawnBlack3Clicked = 0
                        self.pawnBlack4Clicked = 0
                        self.pawnBlack5Clicked = 0
                        self.pawnBlack6Clicked = 0
                        self.pawnBlack7Clicked = 0
                        self.pawnBlack8Clicked = 0
                        self.QueenBlackClicked = 0
                if self.bb2.y < self.box25.y and self.bb2.x > self.box5.x:
                    if self.bishopBlack2Clicked_plus8_minus1 == 1 and self.bishopBlack2Clicked_plus16_minus2 == 1 and self.bishopBlack2Clicked_plus24_minus3 == 1 and \
                            self.bishopBlack2Clicked_plus32_minus4 == 1:
                        drawRect_add(40 - 5)
                        self.bishopBlack2Clicked = 1
                        self.bishopBlack1Clicked = 0
                        self.rookBlack1Clicked = 0
                        self.rookBlack2Clicked = 0
                        self.KingBlackClicked = 0
                        self.knightBlack1Clicked = 0
                        self.knightBlack2Clicked = 0
                        self.pawnBlack1Clicked = 0
                        self.pawnBlack2Clicked = 0
                        self.pawnBlack3Clicked = 0
                        self.pawnBlack4Clicked = 0
                        self.pawnBlack5Clicked = 0
                        self.pawnBlack6Clicked = 0
                        self.pawnBlack7Clicked = 0
                        self.pawnBlack8Clicked = 0
                        self.QueenBlackClicked = 0
                if self.bb2.y < self.box17.y and self.bb2.x > self.box6.x:
                    if self.bishopBlack2Clicked_plus8_minus1 == 1 and self.bishopBlack2Clicked_plus16_minus2 == 1 and self.bishopBlack2Clicked_plus24_minus3 == 1 and \
                            self.bishopBlack2Clicked_plus32_minus4 == 1 and self.bishopBlack2Clicked_plus40_minus5 == 1:
                        drawRect_add(48 - 6)
                        self.bishopBlack2Clicked = 1
                        self.bishopBlack1Clicked = 0
                        self.rookBlack1Clicked = 0
                        self.rookBlack2Clicked = 0
                        self.KingBlackClicked = 0
                        self.knightBlack1Clicked = 0
                        self.knightBlack2Clicked = 0
                        self.pawnBlack1Clicked = 0
                        self.pawnBlack2Clicked = 0
                        self.pawnBlack3Clicked = 0
                        self.pawnBlack4Clicked = 0
                        self.pawnBlack5Clicked = 0
                        self.pawnBlack6Clicked = 0
                        self.pawnBlack7Clicked = 0
                        self.pawnBlack8Clicked = 0
                        self.QueenBlackClicked = 0
                if self.bb2.y < self.box9.y and self.bb2.x > self.box7.x:
                    if self.bishopBlack2Clicked_plus8_minus1 == 1 and self.bishopBlack2Clicked_plus16_minus2 == 1 and self.bishopBlack2Clicked_plus24_minus3 == 1 and \
                            self.bishopBlack2Clicked_plus32_minus4 == 1 and self.bishopBlack2Clicked_plus40_minus5 == 1 and self.bishopBlack2Clicked_plus48_minus6 == 1:
                        drawRect_add(56 - 7)
                        self.bishopBlack2Clicked = 1
                        self.bishopBlack1Clicked = 0
                        self.rookBlack1Clicked = 0
                        self.rookBlack2Clicked = 0
                        self.KingBlackClicked = 0
                        self.knightBlack1Clicked = 0
                        self.knightBlack2Clicked = 0
                        self.pawnBlack1Clicked = 0
                        self.pawnBlack2Clicked = 0
                        self.pawnBlack3Clicked = 0
                        self.pawnBlack4Clicked = 0
                        self.pawnBlack5Clicked = 0
                        self.pawnBlack6Clicked = 0
                        self.pawnBlack7Clicked = 0
                        self.pawnBlack8Clicked = 0
                        self.QueenBlackClicked = 0

                if self.bb2.y > self.box1.y and self.bb2.x < self.box8.x:
                        drawRect_add(-8 + 1)
                        self.bishopBlack2Clicked = 1
                        self.bishopBlack1Clicked = 0
                        self.rookBlack1Clicked = 0
                        self.rookBlack2Clicked = 0
                        self.KingBlackClicked = 0
                        self.knightBlack1Clicked = 0
                        self.knightBlack2Clicked = 0
                        self.pawnBlack1Clicked = 0
                        self.pawnBlack2Clicked = 0
                        self.pawnBlack3Clicked = 0
                        self.pawnBlack4Clicked = 0
                        self.pawnBlack5Clicked = 0
                        self.pawnBlack6Clicked = 0
                        self.pawnBlack7Clicked = 0
                        self.pawnBlack8Clicked = 0
                        self.QueenBlackClicked = 0
                if self.bb2.y > self.box9.y and self.bb2.x < self.box7.x:
                    if self.bishopBlack2Clicked_minus8_plus1 == 1:
                        drawRect_add(-16 + 2)
                        self.bishopBlack2Clicked = 1
                        self.bishopBlack1Clicked = 0
                        self.rookBlack1Clicked = 0
                        self.rookBlack2Clicked = 0
                        self.KingBlackClicked = 0
                        self.knightBlack1Clicked = 0
                        self.knightBlack2Clicked = 0
                        self.pawnBlack1Clicked = 0
                        self.pawnBlack2Clicked = 0
                        self.pawnBlack3Clicked = 0
                        self.pawnBlack4Clicked = 0
                        self.pawnBlack5Clicked = 0
                        self.pawnBlack6Clicked = 0
                        self.pawnBlack7Clicked = 0
                        self.pawnBlack8Clicked = 0
                        self.QueenBlackClicked = 0
                if self.bb2.y > self.box17.y and self.bb2.x < self.box6.x:
                    if self.bishopBlack2Clicked_minus8_plus1 == 1 and self.bishopBlack2Clicked_minus16_plus2 == 1:
                        drawRect_add(-24 + 3)
                        self.bishopBlack2Clicked = 1
                        self.bishopBlack1Clicked = 0
                        self.rookBlack1Clicked = 0
                        self.rookBlack2Clicked = 0
                        self.KingBlackClicked = 0
                        self.knightBlack1Clicked = 0
                        self.knightBlack2Clicked = 0
                        self.pawnBlack1Clicked = 0
                        self.pawnBlack2Clicked = 0
                        self.pawnBlack3Clicked = 0
                        self.pawnBlack4Clicked = 0
                        self.pawnBlack5Clicked = 0
                        self.pawnBlack6Clicked = 0
                        self.pawnBlack7Clicked = 0
                        self.pawnBlack8Clicked = 0
                        self.QueenBlackClicked = 0
                if self.bb2.y > self.box25.y and self.bb2.x < self.box5.x:
                    if self.bishopBlack2Clicked_minus8_plus1 == 1 and self.bishopBlack2Clicked_minus16_plus2 == 1 and self.bishopBlack2Clicked_minus24_plus3 == 1:
                        drawRect_add(-32 + 4)
                        self.bishopBlack2Clicked = 1
                        self.bishopBlack1Clicked = 0
                        self.rookBlack1Clicked = 0
                        self.rookBlack2Clicked = 0
                        self.KingBlackClicked = 0
                        self.knightBlack1Clicked = 0
                        self.knightBlack2Clicked = 0
                        self.pawnBlack1Clicked = 0
                        self.pawnBlack2Clicked = 0
                        self.pawnBlack3Clicked = 0
                        self.pawnBlack4Clicked = 0
                        self.pawnBlack5Clicked = 0
                        self.pawnBlack6Clicked = 0
                        self.pawnBlack7Clicked = 0
                        self.pawnBlack8Clicked = 0
                        self.QueenBlackClicked = 0
                if self.bb2.y > self.box33.y and self.bb2.x < self.box4.x:
                    if self.bishopBlack2Clicked_minus8_plus1 == 1 and self.bishopBlack2Clicked_minus16_plus2 == 1 and self.bishopBlack2Clicked_minus24_plus3 == 1 and \
                            self.bishopBlack2Clicked_minus32_plus4 == 1:
                        drawRect_add(-40 + 5)
                        self.bishopBlack2Clicked = 1
                        self.bishopBlack1Clicked = 0
                        self.rookBlack1Clicked = 0
                        self.rookBlack2Clicked = 0
                        self.KingBlackClicked = 0
                        self.knightBlack1Clicked = 0
                        self.knightBlack2Clicked = 0
                        self.pawnBlack1Clicked = 0
                        self.pawnBlack2Clicked = 0
                        self.pawnBlack3Clicked = 0
                        self.pawnBlack4Clicked = 0
                        self.pawnBlack5Clicked = 0
                        self.pawnBlack6Clicked = 0
                        self.pawnBlack7Clicked = 0
                        self.pawnBlack8Clicked = 0
                        self.QueenBlackClicked = 0
                if self.bb2.y > self.box41.y and self.bb2.x < self.box3.x:
                    if self.bishopBlack2Clicked_minus8_plus1 == 1 and self.bishopBlack2Clicked_minus16_plus2 == 1 and self.bishopBlack2Clicked_minus24_plus3 == 1 and \
                            self.bishopBlack2Clicked_minus32_plus4 == 1 and self.bishopBlack2Clicked_minus40_plus5 == 1:
                        drawRect_add(-48 + 6)
                        self.bishopBlack2Clicked = 1
                        self.bishopBlack1Clicked = 0
                        self.rookBlack1Clicked = 0
                        self.rookBlack2Clicked = 0
                        self.KingBlackClicked = 0
                        self.knightBlack1Clicked = 0
                        self.knightBlack2Clicked = 0
                        self.pawnBlack1Clicked = 0
                        self.pawnBlack2Clicked = 0
                        self.pawnBlack3Clicked = 0
                        self.pawnBlack4Clicked = 0
                        self.pawnBlack5Clicked = 0
                        self.pawnBlack6Clicked = 0
                        self.pawnBlack7Clicked = 0
                        self.pawnBlack8Clicked = 0
                        self.QueenBlackClicked = 0
                if self.bb2.y > self.box49.y and self.bb2.x < self.box2.x:
                    if self.bishopBlack2Clicked_minus8_plus1 == 1 and self.bishopBlack2Clicked_minus16_plus2 == 1 and self.bishopBlack2Clicked_minus24_plus3 == 1 and \
                            self.bishopBlack2Clicked_minus32_plus4 == 1 and self.bishopBlack2Clicked_minus40_plus5 == 1 and self.bishopBlack2Clicked_minus48_plus6 == 1:
                        drawRect_add(-56 + 7)
                        self.bishopBlack2Clicked = 1
                        self.bishopBlack1Clicked = 0
                        self.rookBlack1Clicked = 0
                        self.rookBlack2Clicked = 0
                        self.KingBlackClicked = 0
                        self.knightBlack1Clicked = 0
                        self.knightBlack2Clicked = 0
                        self.pawnBlack1Clicked = 0
                        self.pawnBlack2Clicked = 0
                        self.pawnBlack3Clicked = 0
                        self.pawnBlack4Clicked = 0
                        self.pawnBlack5Clicked = 0
                        self.pawnBlack6Clicked = 0
                        self.pawnBlack7Clicked = 0
                        self.pawnBlack8Clicked = 0
                        self.QueenBlackClicked = 0

                if self.bb2.y > self.box1.y and self.bb2.x > self.box1.x:
                        drawRect_add(-8 - 1)
                        self.bishopBlack2Clicked = 1
                        self.bishopBlack1Clicked = 0
                        self.rookBlack1Clicked = 0
                        self.rookBlack2Clicked = 0
                        self.KingBlackClicked = 0
                        self.knightBlack1Clicked = 0
                        self.knightBlack2Clicked = 0
                        self.pawnBlack1Clicked = 0
                        self.pawnBlack2Clicked = 0
                        self.pawnBlack3Clicked = 0
                        self.pawnBlack4Clicked = 0
                        self.pawnBlack5Clicked = 0
                        self.pawnBlack6Clicked = 0
                        self.pawnBlack7Clicked = 0
                        self.pawnBlack8Clicked = 0
                        self.QueenBlackClicked = 0
                if self.bb2.y > self.box9.y and self.bb2.x > self.box2.x:
                    if self.bishopBlack2Clicked_minus8_minus1 == 1:
                        drawRect_add(-16 - 2)
                        self.bishopBlack2Clicked = 1
                        self.bishopBlack1Clicked = 0
                        self.rookBlack1Clicked = 0
                        self.rookBlack2Clicked = 0
                        self.KingBlackClicked = 0
                        self.knightBlack1Clicked = 0
                        self.knightBlack2Clicked = 0
                        self.pawnBlack1Clicked = 0
                        self.pawnBlack2Clicked = 0
                        self.pawnBlack3Clicked = 0
                        self.pawnBlack4Clicked = 0
                        self.pawnBlack5Clicked = 0
                        self.pawnBlack6Clicked = 0
                        self.pawnBlack7Clicked = 0
                        self.pawnBlack8Clicked = 0
                        self.QueenBlackClicked = 0
                if self.bb2.y > self.box17.y and self.bb2.x > self.box3.x:
                    if self.bishopBlack2Clicked_minus8_minus1 == 1 and self.bishopBlack2Clicked_minus16_minus2 == 1:
                        drawRect_add(-24 - 3)
                        self.bishopBlack2Clicked = 1
                        self.bishopBlack1Clicked = 0
                        self.rookBlack1Clicked = 0
                        self.rookBlack2Clicked = 0
                        self.KingBlackClicked = 0
                        self.knightBlack1Clicked = 0
                        self.knightBlack2Clicked = 0
                        self.pawnBlack1Clicked = 0
                        self.pawnBlack2Clicked = 0
                        self.pawnBlack3Clicked = 0
                        self.pawnBlack4Clicked = 0
                        self.pawnBlack5Clicked = 0
                        self.pawnBlack6Clicked = 0
                        self.pawnBlack7Clicked = 0
                        self.pawnBlack8Clicked = 0
                        self.QueenBlackClicked = 0
                if self.bb2.y > self.box25.y and self.bb2.x > self.box4.x:
                    if self.bishopBlack2Clicked_minus8_minus1 == 1 and self.bishopBlack2Clicked_minus16_minus2 == 1 and self.bishopBlack2Clicked_minus24_minus3 == 1:
                        drawRect_add(-32 - 4)
                        self.bishopBlack2Clicked = 1
                        self.bishopBlack1Clicked = 0
                        self.rookBlack1Clicked = 0
                        self.rookBlack2Clicked = 0
                        self.KingBlackClicked = 0
                        self.knightBlack1Clicked = 0
                        self.knightBlack2Clicked = 0
                        self.pawnBlack1Clicked = 0
                        self.pawnBlack2Clicked = 0
                        self.pawnBlack3Clicked = 0
                        self.pawnBlack4Clicked = 0
                        self.pawnBlack5Clicked = 0
                        self.pawnBlack6Clicked = 0
                        self.pawnBlack7Clicked = 0
                        self.pawnBlack8Clicked = 0
                        self.QueenBlackClicked = 0
                if self.bb2.y > self.box33.y and self.bb2.x > self.box5.x:
                    if self.bishopBlack2Clicked_minus8_minus1 == 1 and self.bishopBlack2Clicked_minus16_minus2 == 1 and self.bishopBlack2Clicked_minus24_minus3 == 1 and \
                            self.bishopBlack2Clicked_minus32_minus4 == 1:
                        drawRect_add(-40 - 5)
                        self.bishopBlack2Clicked = 1
                        self.bishopBlack1Clicked = 0
                        self.rookBlack1Clicked = 0
                        self.rookBlack2Clicked = 0
                        self.KingBlackClicked = 0
                        self.knightBlack1Clicked = 0
                        self.knightBlack2Clicked = 0
                        self.pawnBlack1Clicked = 0
                        self.pawnBlack2Clicked = 0
                        self.pawnBlack3Clicked = 0
                        self.pawnBlack4Clicked = 0
                        self.pawnBlack5Clicked = 0
                        self.pawnBlack6Clicked = 0
                        self.pawnBlack7Clicked = 0
                        self.pawnBlack8Clicked = 0
                        self.QueenBlackClicked = 0
                if self.bb2.y > self.box41.y and self.bb2.x > self.box6.x:
                    if self.bishopBlack2Clicked_minus8_minus1 == 1 and self.bishopBlack2Clicked_minus16_minus2 == 1 and self.bishopBlack2Clicked_minus24_minus3 == 1 and \
                            self.bishopBlack2Clicked_minus32_minus4 == 1 and self.bishopBlack2Clicked_minus40_minus5 == 1:
                        drawRect_add(-48 - 6)
                        self.bishopBlack2Clicked = 1
                        self.bishopBlack1Clicked = 0
                        self.rookBlack1Clicked = 0
                        self.rookBlack2Clicked = 0
                        self.KingBlackClicked = 0
                        self.knightBlack1Clicked = 0
                        self.knightBlack2Clicked = 0
                        self.pawnBlack1Clicked = 0
                        self.pawnBlack2Clicked = 0
                        self.pawnBlack3Clicked = 0
                        self.pawnBlack4Clicked = 0
                        self.pawnBlack5Clicked = 0
                        self.pawnBlack6Clicked = 0
                        self.pawnBlack7Clicked = 0
                        self.pawnBlack8Clicked = 0
                        self.QueenBlackClicked = 0
                if self.bb2.y > self.box49.y and self.bb2.x > self.box7.x:
                    if self.bishopBlack2Clicked_minus8_minus1 == 1 and self.bishopBlack2Clicked_minus16_minus2 == 1 and self.bishopBlack2Clicked_minus24_minus3 == 1 and \
                            self.bishopBlack2Clicked_minus32_minus4 == 1 and self.bishopBlack2Clicked_minus40_minus5 == 1 and self.bishopBlack2Clicked_minus48_minus6 == 1:
                        drawRect_add(-56 - 7)
                        self.bishopBlack2Clicked = 1
                        self.bishopBlack1Clicked = 0
                        self.rookBlack1Clicked = 0
                        self.rookBlack2Clicked = 0
                        self.KingBlackClicked = 0
                        self.knightBlack1Clicked = 0
                        self.knightBlack2Clicked = 0
                        self.pawnBlack1Clicked = 0
                        self.pawnBlack2Clicked = 0
                        self.pawnBlack3Clicked = 0
                        self.pawnBlack4Clicked = 0
                        self.pawnBlack5Clicked = 0
                        self.pawnBlack6Clicked = 0
                        self.pawnBlack7Clicked = 0
                        self.pawnBlack8Clicked = 0
                        self.QueenBlackClicked = 0

                # check if white pieces can be cut or not
                if self.bb2.y < self.box57.y and self.bb2.x < self.box8.x:
                    check(8 + 1)
                if self.bb2.y < self.box49.y and self.bb2.x < self.box7.x:
                    if self.bishopBlack2Clicked_plus8_plus1 == 1:
                        check(16 + 2)
                if self.bb2.y < self.box41.y and self.bb2.x < self.box6.x:
                    if self.bishopBlack2Clicked_plus8_plus1 == 1 and self.bishopBlack2Clicked_plus16_plus2 == 1:
                        check(24 + 3)
                if self.bb2.y < self.box33.y and self.bb2.x < self.box5.x:
                    if self.bishopBlack2Clicked_plus8_plus1 == 1 and self.bishopBlack2Clicked_plus16_plus2 == 1 and self.bishopBlack2Clicked_plus24_plus3 == 1:
                        check(32 + 4)
                if self.bb2.y < self.box25.y and self.bb2.x < self.box4.x:
                    if self.bishopBlack2Clicked_plus8_plus1 == 1 and self.bishopBlack2Clicked_plus16_plus2 == 1 and self.bishopBlack2Clicked_plus24_plus3 == 1 and \
                            self.bishopBlack2Clicked_plus32_plus4 == 1:
                        check(40 + 5)
                if self.bb2.y < self.box17.y and self.bb2.x < self.box3.x:
                    if self.bishopBlack2Clicked_plus8_plus1 == 1 and self.bishopBlack2Clicked_plus16_plus2 == 1 and self.bishopBlack2Clicked_plus24_plus3 == 1 and \
                            self.bishopBlack2Clicked_plus32_plus4 == 1 and self.bishopBlack2Clicked_plus40_plus5 == 1:
                        check(48 + 6)
                if self.bb2.y < self.box9.y and self.bb2.x < self.box2.x:
                    if self.bishopBlack2Clicked_plus8_plus1 == 1 and self.bishopBlack2Clicked_plus16_plus2 == 1 and self.bishopBlack2Clicked_plus24_plus3 == 1 and \
                            self.bishopBlack2Clicked_plus32_plus4 == 1 and self.bishopBlack2Clicked_plus40_plus5 == 1 and self.bishopBlack2Clicked_plus48_plus6 == 1:
                        check(56 + 7)

                if self.bb2.y < self.box57.y and self.bb2.x > self.box1.x:
                    check(8 - 1)
                if self.bb2.y < self.box49.y and self.bb2.x > self.box2.x:
                    if self.bishopBlack2Clicked_plus8_minus1 == 1:
                        check(16 - 2)
                if self.bb2.y < self.box41.y and self.bb2.x > self.box3.x:
                    if self.bishopBlack2Clicked_plus8_minus1 == 1 and self.bishopBlack2Clicked_plus16_minus2 == 1:
                        check(24 - 3)
                if self.bb2.y < self.box33.y and self.bb2.x > self.box4.x:
                    if self.bishopBlack2Clicked_plus8_minus1 == 1 and self.bishopBlack2Clicked_plus16_minus2 == 1 and self.bishopBlack2Clicked_plus24_minus3 == 1:
                        check(32 - 4)
                if self.bb2.y < self.box25.y and self.bb2.x > self.box5.x:
                    if self.bishopBlack2Clicked_plus8_minus1 == 1 and self.bishopBlack2Clicked_plus16_minus2 == 1 and self.bishopBlack2Clicked_plus24_minus3 == 1 and \
                            self.bishopBlack2Clicked_plus32_minus4 == 1:
                        check(40 - 5)
                if self.bb2.y < self.box17.y and self.bb2.x > self.box6.x:
                    if self.bishopBlack2Clicked_plus8_minus1 == 1 and self.bishopBlack2Clicked_plus16_minus2 == 1 and self.bishopBlack2Clicked_plus24_minus3 == 1 and \
                            self.bishopBlack2Clicked_plus32_minus4 == 1 and self.bishopBlack2Clicked_plus40_minus5 == 1:
                        check(48 - 6)
                if self.bb2.y < self.box9.y and self.bb2.x > self.box7.x:
                    if self.bishopBlack2Clicked_plus8_minus1 == 1 and self.bishopBlack2Clicked_plus16_minus2 == 1 and self.bishopBlack2Clicked_plus24_minus3 == 1 and \
                            self.bishopBlack2Clicked_plus32_minus4 == 1 and self.bishopBlack2Clicked_plus40_minus5 == 1 and self.bishopBlack2Clicked_plus48_minus6 == 1:
                        check(56 - 7)

                if self.bb2.y > self.box1.y and self.bb2.x < self.box8.x:
                    check(-8 + 1)
                if self.bb2.y > self.box9.y and self.bb2.x < self.box7.x:
                    if self.bishopBlack2Clicked_minus8_plus1 == 1:
                        check(-16 + 2)
                if self.bb2.y > self.box17.y and self.bb2.x < self.box6.x:
                    if self.bishopBlack2Clicked_minus8_plus1 == 1 and self.bishopBlack2Clicked_minus16_plus2 == 1:
                        check(-24 + 3)
                if self.bb2.y > self.box25.y and self.bb2.x < self.box5.x:
                    if self.bishopBlack2Clicked_minus8_plus1 == 1 and self.bishopBlack2Clicked_minus16_plus2 == 1 and self.bishopBlack2Clicked_minus24_plus3 == 1:
                        check(-32 + 4)
                if self.bb2.y > self.box33.y and self.bb2.x < self.box4.x:
                    if self.bishopBlack2Clicked_minus8_plus1 == 1 and self.bishopBlack2Clicked_minus16_plus2 == 1 and self.bishopBlack2Clicked_minus24_plus3 == 1 and \
                            self.bishopBlack2Clicked_minus32_plus4 == 1:
                        check(-40 + 5)
                if self.bb2.y > self.box41.y and self.bb2.x < self.box3.x:
                    if self.bishopBlack2Clicked_minus8_plus1 == 1 and self.bishopBlack2Clicked_minus16_plus2 == 1 and self.bishopBlack2Clicked_minus24_plus3 == 1 and \
                            self.bishopBlack2Clicked_minus32_plus4 == 1 and self.bishopBlack2Clicked_minus40_plus5 == 1:
                        check(-48 + 6)
                if self.bb2.y > self.box49.y and self.bb2.x < self.box2.x:
                    if self.bishopBlack2Clicked_minus8_plus1 == 1 and self.bishopBlack2Clicked_minus16_plus2 == 1 and self.bishopBlack2Clicked_minus24_plus3 == 1 and \
                            self.bishopBlack2Clicked_minus32_plus4 == 1 and self.bishopBlack2Clicked_minus40_plus5 == 1 and self.bishopBlack2Clicked_minus48_plus6 == 1:
                        check(-56 + 7)

                if self.bb2.y > self.box1.y and self.bb2.x > self.box1.x:
                    check(-8 - 1)
                if self.bb2.y > self.box9.y and self.bb2.x > self.box2.x:
                    if self.bishopBlack2Clicked_minus8_minus1 == 1:
                        check(-16 - 2)
                if self.bb2.y > self.box17.y and self.bb2.x > self.box3.x:
                    if self.bishopBlack2Clicked_minus8_minus1 == 1 and self.bishopBlack2Clicked_minus16_minus2 == 1:
                        check(-24 - 3)
                if self.bb2.y > self.box25.y and self.bb2.x > self.box4.x:
                    if self.bishopBlack2Clicked_minus8_minus1 == 1 and self.bishopBlack2Clicked_minus16_minus2 == 1 and self.bishopBlack2Clicked_minus24_minus3 == 1:
                        check(-32 - 4)
                if self.bb2.y > self.box33.y and self.bb2.x > self.box5.x:
                    if self.bishopBlack2Clicked_minus8_minus1 == 1 and self.bishopBlack2Clicked_minus16_minus2 == 1 and self.bishopBlack2Clicked_minus24_minus3 == 1 and \
                            self.bishopBlack2Clicked_minus32_minus4 == 1:
                        check(-40 - 5)
                if self.bb2.y > self.box41.y and self.bb2.x > self.box6.x:
                    if self.bishopBlack2Clicked_minus8_minus1 == 1 and self.bishopBlack2Clicked_minus16_minus2 == 1 and self.bishopBlack2Clicked_minus24_minus3 == 1 and \
                            self.bishopBlack2Clicked_minus32_minus4 == 1 and self.bishopBlack2Clicked_minus40_minus5 == 1:
                        check(-48 - 6)
                if self.bb2.y > self.box49.y and self.bb2.x > self.box7.x:
                    if self.bishopBlack2Clicked_minus8_minus1 == 1 and self.bishopBlack2Clicked_minus16_minus2 == 1 and self.bishopBlack2Clicked_minus24_minus3 == 1 and \
                            self.bishopBlack2Clicked_minus32_minus4 == 1 and self.bishopBlack2Clicked_minus40_minus5 == 1 and self.bishopBlack2Clicked_minus48_minus6 == 1:
                        check(-56 - 7)

        # what will happen if bishop is clicked
        if self.bishopBlack2Clicked == 1:

            # remove the white pieces
            if self.bishopBlack2Clicked_cut == 1:
                if self.bb2.y < self.box57.y and self.bb2.x < self.box8.x:
                    remove(8 + 1)
                if self.bb2.y < self.box49.y and self.bb2.x < self.box7.x:
                    remove(16 + 2)
                if self.bb2.y < self.box41.y and self.bb2.x < self.box6.x:
                    remove(24 + 3)
                if self.bb2.y < self.box33.y and self.bb2.x < self.box5.x:
                    remove(32 + 4)
                if self.bb2.y < self.box25.y and self.bb2.x < self.box4.x:
                    remove(40 + 5)
                if self.bb2.y < self.box17.y and self.bb2.x < self.box3.x:
                    remove(48 + 6)
                if self.bb2.y < self.box9.y and self.bb2.x < self.box2.x:
                    remove(56 + 7)

                if self.bb2.y < self.box57.y and self.bb2.x > self.box1.x:
                    remove(8 - 1)
                if self.bb2.y < self.box49.y and self.bb2.x > self.box2.x:
                    remove(16 - 2)
                if self.bb2.y < self.box41.y and self.bb2.x > self.box3.x:
                    remove(24 - 3)
                if self.bb2.y < self.box33.y and self.bb2.x > self.box4.x:
                    remove(32 - 4)
                if self.bb2.y < self.box25.y and self.bb2.x > self.box5.x:
                    remove(40 - 5)
                if self.bb2.y < self.box17.y and self.bb2.x > self.box6.x:
                    remove(48 - 6)
                if self.bb2.y < self.box9.y and self.bb2.x > self.box7.x:
                    remove(56 - 7)

                if self.bb2.y > self.box1.y and self.bb2.x < self.box8.x:
                    remove(-8 + 1)
                if self.bb2.y > self.box9.y and self.bb2.x < self.box7.x:
                    remove(-16 + 2)
                if self.bb2.y > self.box17.y and self.bb2.x < self.box6.x:
                    remove(-24 + 3)
                if self.bb2.y > self.box25.y and self.bb2.x < self.box5.x:
                    remove(-32 + 4)
                if self.bb2.y > self.box33.y and self.bb2.x < self.box4.x:
                    remove(-40 + 5)
                if self.bb2.y > self.box41.y and self.bb2.x < self.box3.x:
                    remove(-48 + 6)
                if self.bb2.y > self.box49.y and self.bb2.x < self.box2.x:
                    remove(-56 + 7)

                if self.bb2.y > self.box1.y and self.bb2.x > self.box1.x:
                    remove(-8 - 1)
                if self.bb2.y > self.box9.y and self.bb2.x > self.box2.x:
                    remove(-16 - 2)
                if self.bb2.y > self.box17.y and self.bb2.x > self.box3.x:
                    remove(-24 - 3)
                if self.bb2.y > self.box25.y and self.bb2.x > self.box4.x:
                    remove(-32 - 4)
                if self.bb2.y > self.box33.y and self.bb2.x > self.box5.x:
                    remove(-40 - 5)
                if self.bb2.y > self.box41.y and self.bb2.x > self.box6.x:
                    remove(-48 - 6)
                if self.bb2.y > self.box49.y and self.bb2.x > self.box7.x:
                    remove(-56 - 7)

            if self.bb2.y < self.box57.y and self.bb2.x < self.box8.x:
                if self.boxLst[self.boxLst.index(self.bb2) + 8 + 1].collidepoint(self.mouse_x, self.mouse_y):
                    self.bb2 = self.boxLst[self.boxLst.index(self.bb2) + 8 + 1]
                    self.bishopBlack2Clicked = 0
                    self.turn = "white"
            if self.bb2.y < self.box49.y and self.bb2.x < self.box7.x:
                if self.boxLst[self.boxLst.index(self.bb2) + 16 + 2].collidepoint(self.mouse_x, self.mouse_y):
                    self.bb2 = self.boxLst[self.boxLst.index(self.bb2) + 16 + 2]
                    self.bishopBlack2Clicked = 0
                    self.turn = "white"
            if self.bb2.y < self.box41.y and self.bb2.x < self.box6.x:
                if self.boxLst[self.boxLst.index(self.bb2) + 24 + 3].collidepoint(self.mouse_x, self.mouse_y):
                    self.bb2 = self.boxLst[self.boxLst.index(self.bb2) + 24 + 3]
                    self.bishopBlack2Clicked = 0
                    self.turn = "white"
            if self.bb2.y < self.box33.y and self.bb2.x < self.box5.x:
                if self.boxLst[self.boxLst.index(self.bb2) + 32 + 4].collidepoint(self.mouse_x, self.mouse_y):
                    self.bb2 = self.boxLst[self.boxLst.index(self.bb2) + 32 + 4]
                    self.bishopBlack2Clicked = 0
                    self.turn = "white"
            if self.bb2.y < self.box25.y and self.bb2.x < self.box4.x:
                if self.boxLst[self.boxLst.index(self.bb2) + 40 + 5].collidepoint(self.mouse_x, self.mouse_y):
                    self.bb2 = self.boxLst[self.boxLst.index(self.bb2) + 40 + 5]
                    self.bishopBlack2Clicked = 0
                    self.turn = "white"
            if self.bb2.y < self.box17.y and self.bb2.x < self.box3.x:
                if self.boxLst[self.boxLst.index(self.bb2) + 48 + 6].collidepoint(self.mouse_x, self.mouse_y):
                    self.bb2 = self.boxLst[self.boxLst.index(self.bb2) + 48 + 6]
                    self.bishopBlack2Clicked = 0
                    self.turn = "white"
            if self.bb2.y < self.box9.y and self.bb2.x < self.box2.x:
                if self.boxLst[self.boxLst.index(self.bb2) + 56 + 7].collidepoint(self.mouse_x, self.mouse_y):
                    self.bb2 = self.boxLst[self.boxLst.index(self.bb2) + 56 + 7]
                    self.bishopBlack2Clicked = 0
                    self.turn = "white"

            if self.bb2.y < self.box57.y and self.bb2.x > self.box1.x:
                if self.boxLst[self.boxLst.index(self.bb2) + 8 - 1].collidepoint(self.mouse_x, self.mouse_y):
                    self.bb2 = self.boxLst[self.boxLst.index(self.bb2) + 8 - 1]
                    self.bishopBlack2Clicked = 0
                    self.turn = "white"
            if self.bb2.y < self.box49.y and self.bb2.x > self.box2.x:
                if self.boxLst[self.boxLst.index(self.bb2) + 16 - 2].collidepoint(self.mouse_x, self.mouse_y):
                    self.bb2 = self.boxLst[self.boxLst.index(self.bb2) + 16 - 2]
                    self.bishopBlack2Clicked = 0
                    self.turn = "white"
            if self.bb2.y < self.box41.y and self.bb2.x > self.box3.x:
                if self.boxLst[self.boxLst.index(self.bb2) + 24 - 3].collidepoint(self.mouse_x, self.mouse_y):
                    self.bb2 = self.boxLst[self.boxLst.index(self.bb2) + 24 - 3]
                    self.bishopBlack2Clicked = 0
                    self.turn = "white"
            if self.bb2.y < self.box33.y and self.bb2.x > self.box4.x:
                if self.boxLst[self.boxLst.index(self.bb2) + 32 - 4].collidepoint(self.mouse_x, self.mouse_y):
                    self.bb2 = self.boxLst[self.boxLst.index(self.bb2) + 32 - 4]
                    self.bishopBlack2Clicked = 0
                    self.turn = "white"
            if self.bb2.y < self.box25.y and self.bb2.x > self.box5.x:
                if self.boxLst[self.boxLst.index(self.bb2) + 40 - 5].collidepoint(self.mouse_x, self.mouse_y):
                    self.bb2 = self.boxLst[self.boxLst.index(self.bb2) + 40 - 5]
                    self.bishopBlack2Clicked = 0
                    self.turn = "white"
            if self.bb2.y < self.box17.y and self.bb2.x > self.box6.x:
                if self.boxLst[self.boxLst.index(self.bb2) + 48 - 6].collidepoint(self.mouse_x, self.mouse_y):
                    self.bb2 = self.boxLst[self.boxLst.index(self.bb2) + 48 - 6]
                    self.bishopBlack2Clicked = 0
                    self.turn = "white"
            if self.bb2.y < self.box9.y and self.bb2.x > self.box7.x:
                if self.boxLst[self.boxLst.index(self.bb2) + 56 - 7].collidepoint(self.mouse_x, self.mouse_y):
                    self.bb2 = self.boxLst[self.boxLst.index(self.bb2) + 56 - 7]
                    self.bishopBlack2Clicked = 0
                    self.turn = "white"

            if self.bb2.y > self.box1.y and self.bb2.x < self.box8.x:
                if self.boxLst[self.boxLst.index(self.bb2) - 8 + 1].collidepoint(self.mouse_x, self.mouse_y):
                    self.bb2 = self.boxLst[self.boxLst.index(self.bb2) - 8 + 1]
                    self.bishopBlack2Clicked = 0
                    self.turn = "white"
            if self.bb2.y > self.box9.y and self.bb2.x < self.box7.x:
                if self.boxLst[self.boxLst.index(self.bb2) - 16 + 2].collidepoint(self.mouse_x, self.mouse_y):
                    self.bb2 = self.boxLst[self.boxLst.index(self.bb2) - 16 + 2]
                    self.bishopBlack2Clicked = 0
                    self.turn = "white"
            if self.bb2.y > self.box17.y and self.bb2.x < self.box6.x:
                if self.boxLst[self.boxLst.index(self.bb2) - 24 + 3].collidepoint(self.mouse_x, self.mouse_y):
                    self.bb2 = self.boxLst[self.boxLst.index(self.bb2) - 24 + 3]
                    self.bishopBlack2Clicked = 0
                    self.turn = "white"
            if self.bb2.y > self.box25.y and self.bb2.x < self.box5.x:
                if self.boxLst[self.boxLst.index(self.bb2) - 32 + 4].collidepoint(self.mouse_x, self.mouse_y):
                    self.bb2 = self.boxLst[self.boxLst.index(self.bb2) - 32 + 4]
                    self.bishopBlack2Clicked = 0
                    self.turn = "white"
            if self.bb2.y > self.box33.y and self.bb2.x < self.box4.x:
                if self.boxLst[self.boxLst.index(self.bb2) - 40 + 5].collidepoint(self.mouse_x, self.mouse_y):
                    self.bb2 = self.boxLst[self.boxLst.index(self.bb2) - 40 + 5]
                    self.bishopBlack2Clicked = 0
                    self.turn = "white"
            if self.bb2.y > self.box41.y and self.bb2.x < self.box3.x:
                if self.boxLst[self.boxLst.index(self.bb2) - 48 + 6].collidepoint(self.mouse_x, self.mouse_y):
                    self.bb2 = self.boxLst[self.boxLst.index(self.bb2) - 48 + 6]
                    self.bishopBlack2Clicked = 0
                    self.turn = "white"
            if self.bb2.y > self.box49.y and self.bb2.x < self.box2.x:
                if self.boxLst[self.boxLst.index(self.bb2) - 56 + 7].collidepoint(self.mouse_x, self.mouse_y):
                    self.bb2 = self.boxLst[self.boxLst.index(self.bb2) - 56 + 7]
                    self.bishopBlack2Clicked = 0
                    self.turn = "white"

            if self.bb2.y > self.box1.y and self.bb2.x > self.box1.x:
                if self.boxLst[self.boxLst.index(self.bb2) - 8 - 1].collidepoint(self.mouse_x, self.mouse_y):
                    self.bb2 = self.boxLst[self.boxLst.index(self.bb2) - 8 - 1]
                    self.bishopBlack2Clicked = 0
                    self.turn = "white"
            if self.bb2.y > self.box9.y and self.bb2.x > self.box2.x:
                if self.boxLst[self.boxLst.index(self.bb2) - 16 - 2].collidepoint(self.mouse_x, self.mouse_y):
                    self.bb2 = self.boxLst[self.boxLst.index(self.bb2) - 16 - 2]
                    self.bishopBlack2Clicked = 0
                    self.turn = "white"
            if self.bb2.y > self.box17.y and self.bb2.x > self.box3.x:
                if self.boxLst[self.boxLst.index(self.bb2) - 24 - 3].collidepoint(self.mouse_x, self.mouse_y):
                    self.bb2 = self.boxLst[self.boxLst.index(self.bb2) - 24 - 3]
                    self.bishopBlack2Clicked = 0
                    self.turn = "white"
            if self.bb2.y > self.box25.y and self.bb2.x > self.box4.x:
                if self.boxLst[self.boxLst.index(self.bb2) - 32 - 4].collidepoint(self.mouse_x, self.mouse_y):
                    self.bb2 = self.boxLst[self.boxLst.index(self.bb2) - 32 - 4]
                    self.bishopBlack2Clicked = 0
                    self.turn = "white"
            if self.bb2.y > self.box33.y and self.bb2.x > self.box5.x:
                if self.boxLst[self.boxLst.index(self.bb2) - 40 - 5].collidepoint(self.mouse_x, self.mouse_y):
                    self.bb2 = self.boxLst[self.boxLst.index(self.bb2) - 40 - 5]
                    self.bishopBlack2Clicked = 0
                    self.turn = "white"
            if self.bb2.y > self.box41.y and self.bb2.x > self.box6.x:
                if self.boxLst[self.boxLst.index(self.bb2) - 48 - 6].collidepoint(self.mouse_x, self.mouse_y):
                    self.bb2 = self.boxLst[self.boxLst.index(self.bb2) - 48 - 6]
                    self.bishopBlack2Clicked = 0
                    self.turn = "white"
            if self.bb2.y > self.box49.y and self.bb2.x > self.box7.x:
                if self.boxLst[self.boxLst.index(self.bb2) - 56 - 7].collidepoint(self.mouse_x, self.mouse_y):
                    self.bb2 = self.boxLst[self.boxLst.index(self.bb2) - 56 - 7]
                    self.bishopBlack2Clicked = 0
                    self.turn = "white"

    def queenBMovements(self):
        for event in pygame.event.get():
            if event.type == pygame.MOUSEBUTTONDOWN:
                self.mouse_x, self.mouse_y = pygame.mouse.get_pos()

        # queen
        def drawRectRook_add(num):
            if not self.boxLst[self.boxLst.index(self.Qb) + num].colliderect(self.pw1) and not \
                    self.boxLst[self.boxLst.index(self.Qb) + num].colliderect(self.pw2) and not \
                    self.boxLst[self.boxLst.index(self.Qb) + num].colliderect(self.pw3) and not \
                    self.boxLst[self.boxLst.index(self.Qb) + num].colliderect(self.pw4) and not \
                    self.boxLst[self.boxLst.index(self.Qb) + num].colliderect(self.pw5) and not \
                    self.boxLst[self.boxLst.index(self.Qb) + num].colliderect(self.pw6) and not \
                    self.boxLst[self.boxLst.index(self.Qb) + num].colliderect(self.pw7) and not \
                    self.boxLst[self.boxLst.index(self.Qb) + num].colliderect(self.pw8) and not \
                    self.boxLst[self.boxLst.index(self.Qb) + num].colliderect(self.Kw) and not \
                    self.boxLst[self.boxLst.index(self.Qb) + num].colliderect(self.Qw) and not \
                    self.boxLst[self.boxLst.index(self.Qb) + num].colliderect(self.rw1) and not \
                    self.boxLst[self.boxLst.index(self.Qb) + num].colliderect(self.rw2) and not \
                    self.boxLst[self.boxLst.index(self.Qb) + num].colliderect(self.kw1) and not \
                    self.boxLst[self.boxLst.index(self.Qb) + num].colliderect(self.kw2) and not \
                    self.boxLst[self.boxLst.index(self.Qb) + num].colliderect(self.bw1) and not \
                    self.boxLst[self.boxLst.index(self.Qb) + num].colliderect(self.bw2) and not \
                    self.boxLst[self.boxLst.index(self.Qb) + num].colliderect(self.pb2) and not \
                    self.boxLst[self.boxLst.index(self.Qb) + num].colliderect(self.pb3) and not \
                    self.boxLst[self.boxLst.index(self.Qb) + num].colliderect(self.pb4) and not \
                    self.boxLst[self.boxLst.index(self.Qb) + num].colliderect(self.pb5) and not \
                    self.boxLst[self.boxLst.index(self.Qb) + num].colliderect(self.pb6) and not \
                    self.boxLst[self.boxLst.index(self.Qb) + num].colliderect(self.pb7) and not \
                    self.boxLst[self.boxLst.index(self.Qb) + num].colliderect(self.pb8) and not \
                    self.boxLst[self.boxLst.index(self.Qb) + num].colliderect(self.Kb) and not \
                    self.boxLst[self.boxLst.index(self.Qb) + num].colliderect(self.rb1) and not \
                    self.boxLst[self.boxLst.index(self.Qb) + num].colliderect(self.kb2) and not \
                    self.boxLst[self.boxLst.index(self.Qb) + num].colliderect(self.rb2) and not \
                    self.boxLst[self.boxLst.index(self.Qb) + num].colliderect(self.pb1) and not \
                    self.boxLst[self.boxLst.index(self.Qb) + num].colliderect(self.kb1) and not \
                    self.boxLst[self.boxLst.index(self.Qb) + num].colliderect(self.bb1) and not \
                    self.boxLst[self.boxLst.index(self.Qb) + num].colliderect(self.bb2):
                pygame.draw.rect(self.window, self.blue, self.boxLst[self.boxLst.index(self.Qb) + num], border_radius=100)

                if num == 8:
                    self.QueenBlackClicked_plus8 = 1
                if num == 16:
                    self.QueenBlackClicked_plus16 = 1
                if num == 24:
                    self.QueenBlackClicked_plus24 = 1
                if num == 32:
                    self.QueenBlackClicked_plus32 = 1
                if num == 40:
                    self.QueenBlackClicked_plus40 = 1
                if num == 48:
                    self.QueenBlackClicked_plus48 = 1
                if num == 1:
                    self.QueenBlackClicked_plus1 = 1
                if num == 2:
                    self.QueenBlackClicked_plus2 = 1
                if num == 3:
                    self.QueenBlackClicked_plus3 = 1
                if num == 4:
                    self.QueenBlackClicked_plus4 = 1
                if num == 5:
                    self.QueenBlackClicked_plus5 = 1
                if num == 6:
                    self.QueenBlackClicked_plus6 = 1

        def drawRect_sub(num):
            if not self.boxLst[self.boxLst.index(self.Qb) - num].colliderect(self.pw1) and not \
                    self.boxLst[self.boxLst.index(self.Qb) - num].colliderect(self.pw2) and not \
                    self.boxLst[self.boxLst.index(self.Qb) - num].colliderect(self.pw3) and not \
                    self.boxLst[self.boxLst.index(self.Qb) - num].colliderect(self.pw4) and not \
                    self.boxLst[self.boxLst.index(self.Qb) - num].colliderect(self.pw5) and not \
                    self.boxLst[self.boxLst.index(self.Qb) - num].colliderect(self.pw6) and not \
                    self.boxLst[self.boxLst.index(self.Qb) - num].colliderect(self.pw7) and not \
                    self.boxLst[self.boxLst.index(self.Qb) - num].colliderect(self.pw8) and not \
                    self.boxLst[self.boxLst.index(self.Qb) - num].colliderect(self.Kw) and not \
                    self.boxLst[self.boxLst.index(self.Qb) - num].colliderect(self.Qw) and not \
                    self.boxLst[self.boxLst.index(self.Qb) - num].colliderect(self.rw1) and not \
                    self.boxLst[self.boxLst.index(self.Qb) - num].colliderect(self.rw2) and not \
                    self.boxLst[self.boxLst.index(self.Qb) - num].colliderect(self.kw1) and not \
                    self.boxLst[self.boxLst.index(self.Qb) - num].colliderect(self.kw2) and not \
                    self.boxLst[self.boxLst.index(self.Qb) - num].colliderect(self.bw1) and not \
                    self.boxLst[self.boxLst.index(self.Qb) - num].colliderect(self.bw2) and not \
                    self.boxLst[self.boxLst.index(self.Qb) - num].colliderect(self.pb2) and not \
                    self.boxLst[self.boxLst.index(self.Qb) - num].colliderect(self.pb3) and not \
                    self.boxLst[self.boxLst.index(self.Qb) - num].colliderect(self.pb4) and not \
                    self.boxLst[self.boxLst.index(self.Qb) - num].colliderect(self.pb5) and not \
                    self.boxLst[self.boxLst.index(self.Qb) - num].colliderect(self.pb6) and not \
                    self.boxLst[self.boxLst.index(self.Qb) - num].colliderect(self.pb7) and not \
                    self.boxLst[self.boxLst.index(self.Qb) - num].colliderect(self.pb8) and not \
                    self.boxLst[self.boxLst.index(self.Qb) - num].colliderect(self.Kb) and not \
                    self.boxLst[self.boxLst.index(self.Qb) - num].colliderect(self.rb1) and not \
                    self.boxLst[self.boxLst.index(self.Qb) - num].colliderect(self.kb2) and not \
                    self.boxLst[self.boxLst.index(self.Qb) - num].colliderect(self.rb2) and not \
                    self.boxLst[self.boxLst.index(self.Qb) - num].colliderect(self.pb1) and not \
                    self.boxLst[self.boxLst.index(self.Qb) - num].colliderect(self.kb1) and not \
                    self.boxLst[self.boxLst.index(self.Qb) - num].colliderect(self.bb1) and not \
                    self.boxLst[self.boxLst.index(self.Qb) - num].colliderect(self.bb2):
                pygame.draw.rect(self.window, self.blue, self.boxLst[self.boxLst.index(self.Qb) - num], border_radius=100)

                if num == 8:
                    self.QueenBlackClicked_minus8 = 1
                if num == 16:
                    self.QueenBlackClicked_minus16 = 1
                if num == 24:
                    self.QueenBlackClicked_minus24 = 1
                if num == 32:
                    self.QueenBlackClicked_minus32 = 1
                if num == 40:
                    self.QueenBlackClicked_minus40 = 1
                if num == 48:
                    self.QueenBlackClicked_minus48 = 1
                if num == 1:
                    self.QueenBlackClicked_minus1 = 1
                if num == 2:
                    self.QueenBlackClicked_minus2 = 1
                if num == 3:
                    self.QueenBlackClicked_minus3 = 1
                if num == 4:
                    self.QueenBlackClicked_minus4 = 1
                if num == 5:
                    self.QueenBlackClicked_minus5 = 1
                if num == 6:
                    self.QueenBlackClicked_minus6 = 1

        def cutWhitePiece_add(num):
            if self.boxLst[self.boxLst.index(self.Qb) + num].colliderect(self.pw1) or \
                    self.boxLst[self.boxLst.index(self.Qb) + num].colliderect(self.pw2) or \
                    self.boxLst[self.boxLst.index(self.Qb) + num].colliderect(self.pw3) or \
                    self.boxLst[self.boxLst.index(self.Qb) + num].colliderect(self.pw4) or \
                    self.boxLst[self.boxLst.index(self.Qb) + num].colliderect(self.pw5) or \
                    self.boxLst[self.boxLst.index(self.Qb) + num].colliderect(self.pw6) or \
                    self.boxLst[self.boxLst.index(self.Qb) + num].colliderect(self.pw7) or \
                    self.boxLst[self.boxLst.index(self.Qb) + num].colliderect(self.pw8) or \
                    self.boxLst[self.boxLst.index(self.Qb) + num].colliderect(self.Kw) or \
                    self.boxLst[self.boxLst.index(self.Qb) + num].colliderect(self.Qw) or \
                    self.boxLst[self.boxLst.index(self.Qb) + num].colliderect(self.rw1) or \
                    self.boxLst[self.boxLst.index(self.Qb) + num].colliderect(self.rw2) or \
                    self.boxLst[self.boxLst.index(self.Qb) + num].colliderect(self.kw1) or \
                    self.boxLst[self.boxLst.index(self.Qb) + num].colliderect(self.kw2) or \
                    self.boxLst[self.boxLst.index(self.Qb) + num].colliderect(self.bw1) or \
                    self.boxLst[self.boxLst.index(self.Qb) + num].colliderect(self.bw2):
                pygame.draw.rect(self.window, self.red, self.boxLst[self.boxLst.index(self.Qb) + num], border_radius=100)
                self.QueenBlackClicked = 1
                self.rookBlack2Clicked = 0
                self.rookBlack1Clicked = 0
                self.pawnBlack1Clicked = 0
                self.pawnBlack2Clicked = 0
                self.pawnBlack3Clicked = 0
                self.pawnBlack4Clicked = 0
                self.pawnBlack5Clicked = 0
                self.pawnBlack6Clicked = 0
                self.pawnBlack7Clicked = 0
                self.pawnBlack8Clicked = 0
                self.KingBlackClicked = 0
                self.knightBlack1Clicked = 0
                self.knightBlack2Clicked = 0
                self.bishopBlack1Clicked = 0
                self.bishopBlack2Clicked = 0
                self.QueenBlackClicked_cut = 1

        def cutWhitePiece_sub(num):
            if self.boxLst[self.boxLst.index(self.Qb) - num].colliderect(self.pw1) or \
                    self.boxLst[self.boxLst.index(self.Qb) - num].colliderect(self.pw2) or \
                    self.boxLst[self.boxLst.index(self.Qb) - num].colliderect(self.pw3) or \
                    self.boxLst[self.boxLst.index(self.Qb) - num].colliderect(self.pw4) or \
                    self.boxLst[self.boxLst.index(self.Qb) - num].colliderect(self.pw5) or \
                    self.boxLst[self.boxLst.index(self.Qb) - num].colliderect(self.pw6) or \
                    self.boxLst[self.boxLst.index(self.Qb) - num].colliderect(self.pw7) or \
                    self.boxLst[self.boxLst.index(self.Qb) - num].colliderect(self.pw8) or \
                    self.boxLst[self.boxLst.index(self.Qb) - num].colliderect(self.Kw) or \
                    self.boxLst[self.boxLst.index(self.Qb) - num].colliderect(self.Qw) or \
                    self.boxLst[self.boxLst.index(self.Qb) - num].colliderect(self.rw1) or \
                    self.boxLst[self.boxLst.index(self.Qb) - num].colliderect(self.rw2) or \
                    self.boxLst[self.boxLst.index(self.Qb) - num].colliderect(self.kw1) or \
                    self.boxLst[self.boxLst.index(self.Qb) - num].colliderect(self.kw2) or \
                    self.boxLst[self.boxLst.index(self.Qb) - num].colliderect(self.bw1) or \
                    self.boxLst[self.boxLst.index(self.Qb) - num].colliderect(self.bw2):
                pygame.draw.rect(self.window, self.red, self.boxLst[self.boxLst.index(self.Qb) - num], border_radius=100)
                self.QueenBlackClicked = 1
                self.rookBlack2Clicked = 0
                self.rookBlack1Clicked = 0
                self.pawnBlack1Clicked = 0
                self.pawnBlack2Clicked = 0
                self.pawnBlack3Clicked = 0
                self.pawnBlack4Clicked = 0
                self.pawnBlack5Clicked = 0
                self.pawnBlack6Clicked = 0
                self.pawnBlack7Clicked = 0
                self.pawnBlack8Clicked = 0
                self.KingBlackClicked = 0
                self.knightBlack1Clicked = 0
                self.knightBlack2Clicked = 0
                self.bishopBlack1Clicked = 0
                self.bishopBlack2Clicked = 0
                self.QueenBlackClicked_cut = 1

        def removeWhitePiece_add(num):
            if self.boxLst[self.boxLst.index(self.Qb) + num].collidepoint(self.mouse_x, self.mouse_y):
                if self.boxLst[self.boxLst.index(self.Qb) + num].colliderect(self.pw1):
                    self.pw1 = self.whiteCutPiece_1
                if self.boxLst[self.boxLst.index(self.Qb) + num].colliderect(self.pw2):
                    self.pw2 = self.whiteCutPiece_2
                if self.boxLst[self.boxLst.index(self.Qb) + num].colliderect(self.pw3):
                    self.pw3 = self.whiteCutPiece_3
                if self.boxLst[self.boxLst.index(self.Qb) + num].colliderect(self.pw4):
                    self.pw4 = self.whiteCutPiece_4
                if self.boxLst[self.boxLst.index(self.Qb) + num].colliderect(self.pw5):
                    self.pw5 = self.whiteCutPiece_5
                if self.boxLst[self.boxLst.index(self.Qb) + num].colliderect(self.pw6):
                    self.pw6 = self.whiteCutPiece_6
                if self.boxLst[self.boxLst.index(self.Qb) + num].colliderect(self.pw7):
                    self.pw7 = self.whiteCutPiece_7
                if self.boxLst[self.boxLst.index(self.Qb) + num].colliderect(self.pw8):
                    self.pw8 = self.whiteCutPiece_8
                if self.boxLst[self.boxLst.index(self.Qb) + num].colliderect(self.rw1):
                    self.rw1 = self.whiteCutPiece_9
                if self.boxLst[self.boxLst.index(self.Qb) + num].colliderect(self.rw2):
                    self.rw2 = self.whiteCutPiece_10
                if self.boxLst[self.boxLst.index(self.Qb) + num].colliderect(self.kw1):
                    self.kw1 = self.whiteCutPiece_11
                if self.boxLst[self.boxLst.index(self.Qb) + num].colliderect(self.kw2):
                    self.kw2 = self.whiteCutPiece_12
                if self.boxLst[self.boxLst.index(self.Qb) + num].colliderect(self.bw1):
                    self.bw1 = self.whiteCutPiece_13
                if self.boxLst[self.boxLst.index(self.Qb) + num].colliderect(self.bw2):
                    self.bw2 = self.whiteCutPiece_14
                if self.boxLst[self.boxLst.index(self.Qb) + num].colliderect(self.Kw):
                    self.Kw = self.whiteCutPiece_15
                    self.KingWhite_isDead = 1
                if self.boxLst[self.boxLst.index(self.Qb) + num].colliderect(self.Qw):
                    self.Qw = self.whiteCutPiece_16
                self.Qb = self.boxLst[self.boxLst.index(self.Qb) + num]
                self.QueenBlackClicked = 0
                self.QueenBlackClicked_cut = 0
                self.turn = "white"

        def removeWhitePiece_sub(num):
            if self.boxLst[self.boxLst.index(self.Qb) - num].collidepoint(self.mouse_x, self.mouse_y):
                if self.boxLst[self.boxLst.index(self.Qb) - num].colliderect(self.pw1):
                    self.pw1 = self.whiteCutPiece_1
                if self.boxLst[self.boxLst.index(self.Qb) - num].colliderect(self.pw2):
                    self.pw2 = self.whiteCutPiece_2
                if self.boxLst[self.boxLst.index(self.Qb) - num].colliderect(self.pw3):
                    self.pw3 = self.whiteCutPiece_3
                if self.boxLst[self.boxLst.index(self.Qb) - num].colliderect(self.pw4):
                    self.pw4 = self.whiteCutPiece_4
                if self.boxLst[self.boxLst.index(self.Qb) - num].colliderect(self.pw5):
                    self.pw5 = self.whiteCutPiece_5
                if self.boxLst[self.boxLst.index(self.Qb) - num].colliderect(self.pw6):
                    self.pw6 = self.whiteCutPiece_6
                if self.boxLst[self.boxLst.index(self.Qb) - num].colliderect(self.pw7):
                    self.pw7 = self.whiteCutPiece_7
                if self.boxLst[self.boxLst.index(self.Qb) - num].colliderect(self.pw8):
                    self.pw8 = self.whiteCutPiece_8
                if self.boxLst[self.boxLst.index(self.Qb) - num].colliderect(self.rw1):
                    self.rw1 = self.whiteCutPiece_9
                if self.boxLst[self.boxLst.index(self.Qb) - num].colliderect(self.rw2):
                    self.rw2 = self.whiteCutPiece_10
                if self.boxLst[self.boxLst.index(self.Qb) - num].colliderect(self.kw1):
                    self.kw1 = self.whiteCutPiece_11
                if self.boxLst[self.boxLst.index(self.Qb) - num].colliderect(self.kw2):
                    self.kw2 = self.whiteCutPiece_12
                if self.boxLst[self.boxLst.index(self.Qb) - num].colliderect(self.bw1):
                    self.bw1 = self.whiteCutPiece_13
                if self.boxLst[self.boxLst.index(self.Qb) - num].colliderect(self.bw2):
                    self.bw2 = self.whiteCutPiece_14
                if self.boxLst[self.boxLst.index(self.Qb) - num].colliderect(self.Kw):
                    self.Kw = self.whiteCutPiece_15
                    self.KingWhite_isDead = 1
                if self.boxLst[self.boxLst.index(self.Qb) - num].colliderect(self.Qw):
                    self.Qw = self.whiteCutPiece_16
                self.Qb = self.boxLst[self.boxLst.index(self.Qb) - num]
                self.QueenBlackClicked = 0
                self.QueenBlackClicked_cut = 0
                self.turn = "white"

        def drawRectBishop_add(num):
            if not self.boxLst[self.boxLst.index(self.Qb) + num].colliderect(self.pw1) and not \
                    self.boxLst[self.boxLst.index(self.Qb) + num].colliderect(self.pw2) and not \
                    self.boxLst[self.boxLst.index(self.Qb) + num].colliderect(self.pw3) and not \
                    self.boxLst[self.boxLst.index(self.Qb) + num].colliderect(self.pw4) and not \
                    self.boxLst[self.boxLst.index(self.Qb) + num].colliderect(self.pw5) and not \
                    self.boxLst[self.boxLst.index(self.Qb) + num].colliderect(self.pw6) and not \
                    self.boxLst[self.boxLst.index(self.Qb) + num].colliderect(self.pw7) and not \
                    self.boxLst[self.boxLst.index(self.Qb) + num].colliderect(self.pw8) and not \
                    self.boxLst[self.boxLst.index(self.Qb) + num].colliderect(self.Kw) and not \
                    self.boxLst[self.boxLst.index(self.Qb) + num].colliderect(self.Qw) and not \
                    self.boxLst[self.boxLst.index(self.Qb) + num].colliderect(self.rw1) and not \
                    self.boxLst[self.boxLst.index(self.Qb) + num].colliderect(self.rw2) and not \
                    self.boxLst[self.boxLst.index(self.Qb) + num].colliderect(self.kw1) and not \
                    self.boxLst[self.boxLst.index(self.Qb) + num].colliderect(self.kw2) and not \
                    self.boxLst[self.boxLst.index(self.Qb) + num].colliderect(self.bw1) and not \
                    self.boxLst[self.boxLst.index(self.Qb) + num].colliderect(self.bw2) and not \
                    self.boxLst[self.boxLst.index(self.Qb) + num].colliderect(self.pb2) and not \
                    self.boxLst[self.boxLst.index(self.Qb) + num].colliderect(self.pb3) and not \
                    self.boxLst[self.boxLst.index(self.Qb) + num].colliderect(self.pb4) and not \
                    self.boxLst[self.boxLst.index(self.Qb) + num].colliderect(self.pb5) and not \
                    self.boxLst[self.boxLst.index(self.Qb) + num].colliderect(self.pb6) and not \
                    self.boxLst[self.boxLst.index(self.Qb) + num].colliderect(self.pb7) and not \
                    self.boxLst[self.boxLst.index(self.Qb) + num].colliderect(self.pb8) and not \
                    self.boxLst[self.boxLst.index(self.Qb) + num].colliderect(self.Kb) and not \
                    self.boxLst[self.boxLst.index(self.Qb) + num].colliderect(self.rb1) and not \
                    self.boxLst[self.boxLst.index(self.Qb) + num].colliderect(self.kb2) and not \
                    self.boxLst[self.boxLst.index(self.Qb) + num].colliderect(self.bb1) and not \
                    self.boxLst[self.boxLst.index(self.Qb) + num].colliderect(self.pb1) and not \
                    self.boxLst[self.boxLst.index(self.Qb) + num].colliderect(self.kb1) and not \
                    self.boxLst[self.boxLst.index(self.Qb) + num].colliderect(self.rb2) and not \
                    self.boxLst[self.boxLst.index(self.Qb) + num].colliderect(self.bb2):
                pygame.draw.rect(self.window, self.blue, self.boxLst[self.boxLst.index(self.Qb) + num], border_radius=100)
                if num == 8 + 1:
                    self.QueenBlackClicked_plus8_plus1 = 1
                if num == 16 + 2:
                    self.QueenBlackClicked_plus16_plus2 = 1
                if num == 24 + 3:
                    self.QueenBlackClicked_plus24_plus3 = 1
                if num == 32 + 4:
                    self.QueenBlackClicked_plus32_plus4 = 1
                if num == 40 + 5:
                    self.QueenBlackClicked_plus40_plus5 = 1
                if num == 48 + 6:
                    self.QueenBlackClicked_plus48_plus6 = 1

                if num == 8 - 1:
                    self.QueenBlackClicked_plus8_minus1 = 1
                if num == 16 - 2:
                    self.QueenBlackClicked_plus16_minus2 = 1
                if num == 24 - 3:
                    self.QueenBlackClicked_plus24_minus3 = 1
                if num == 32 - 4:
                    self.QueenBlackClicked_plus32_minus4 = 1
                if num == 40 - 5:
                    self.QueenBlackClicked_plus40_minus5 = 1
                if num == 48 - 6:
                    self.QueenBlackClicked_plus48_minus6 = 1

                if num == -8 + 1:
                    self.QueenBlackClicked_minus8_plus1 = 1
                if num == -16 + 2:
                    self.QueenBlackClicked_minus16_plus2 = 1
                if num == -24 + 3:
                    self.QueenBlackClicked_minus24_plus3 = 1
                if num == -32 + 4:
                    self.QueenBlackClicked_minus32_plus4 = 1
                if num == -40 + 5:
                    self.QueenBlackClicked_minus40_plus5 = 1
                if num == -48 + 6:
                    self.QueenBlackClicked_minus48_plus6 = 1

                if num == -8 - 1:
                    self.QueenBlackClicked_minus8_minus1 = 1
                if num == -16 - 2:
                    self.QueenBlackClicked_minus16_minus2 = 1
                if num == -24 - 3:
                    self.QueenBlackClicked_minus24_minus3 = 1
                if num == -32 - 4:
                    self.QueenBlackClicked_minus32_minus4 = 1
                if num == -40 - 5:
                    self.QueenBlackClicked_minus40_minus5 = 1
                if num == -48 - 6:
                    self.QueenBlackClicked_minus48_minus6 = 1

        def check(num):
            if self.boxLst[self.boxLst.index(self.Qb) + num].colliderect(self.pw1) or \
                    self.boxLst[self.boxLst.index(self.Qb) + num].colliderect(self.pw2) or \
                    self.boxLst[self.boxLst.index(self.Qb) + num].colliderect(self.pw3) or \
                    self.boxLst[self.boxLst.index(self.Qb) + num].colliderect(self.pw4) or \
                    self.boxLst[self.boxLst.index(self.Qb) + num].colliderect(self.pw5) or \
                    self.boxLst[self.boxLst.index(self.Qb) + num].colliderect(self.pw6) or \
                    self.boxLst[self.boxLst.index(self.Qb) + num].colliderect(self.pw7) or \
                    self.boxLst[self.boxLst.index(self.Qb) + num].colliderect(self.pw8) or \
                    self.boxLst[self.boxLst.index(self.Qb) + num].colliderect(self.Kw) or \
                    self.boxLst[self.boxLst.index(self.Qb) + num].colliderect(self.Qw) or \
                    self.boxLst[self.boxLst.index(self.Qb) + num].colliderect(self.rw1) or \
                    self.boxLst[self.boxLst.index(self.Qb) + num].colliderect(self.rw2) or \
                    self.boxLst[self.boxLst.index(self.Qb) + num].colliderect(self.kw1) or \
                    self.boxLst[self.boxLst.index(self.Qb) + num].colliderect(self.kw2) or \
                    self.boxLst[self.boxLst.index(self.Qb) + num].colliderect(self.bw1) or \
                    self.boxLst[self.boxLst.index(self.Qb) + num].colliderect(self.bw2):
                pygame.draw.rect(self.window, self.red, self.boxLst[self.boxLst.index(self.Qb) + num], border_radius=100)
                self.QueenBlackClicked = 1
                self.bishopBlack2Clicked = 0
                self.bishopBlack1Clicked = 0
                self.rookBlack2Clicked = 0
                self.rookBlack1Clicked = 0
                self.KingBlackClicked = 0
                self.knightBlack1Clicked = 0
                self.knightBlack2Clicked = 0
                self.pawnBlack1Clicked = 0
                self.pawnBlack2Clicked = 0
                self.pawnBlack3Clicked = 0
                self.pawnBlack4Clicked = 0
                self.pawnBlack5Clicked = 0
                self.pawnBlack6Clicked = 0
                self.pawnBlack7Clicked = 0
                self.pawnBlack8Clicked = 0
                self.QueenBlackClicked_cut = 1

        def remove(num):
            if self.boxLst[self.boxLst.index(self.Qb) + num].collidepoint(self.mouse_x, self.mouse_y):
                if self.boxLst[self.boxLst.index(self.Qb) + num].colliderect(self.pw1):
                    self.pw1 = self.whiteCutPiece_1
                if self.boxLst[self.boxLst.index(self.Qb) + num].colliderect(self.pw2):
                    self.pw2 = self.whiteCutPiece_2
                if self.boxLst[self.boxLst.index(self.Qb) + num].colliderect(self.pw3):
                    self.pw3 = self.whiteCutPiece_3
                if self.boxLst[self.boxLst.index(self.Qb) + num].colliderect(self.pw4):
                    self.pw4 = self.whiteCutPiece_4
                if self.boxLst[self.boxLst.index(self.Qb) + num].colliderect(self.pw5):
                    self.pw5 = self.whiteCutPiece_5
                if self.boxLst[self.boxLst.index(self.Qb) + num].colliderect(self.pw6):
                    self.pw6 = self.whiteCutPiece_6
                if self.boxLst[self.boxLst.index(self.Qb) + num].colliderect(self.pw7):
                    self.pw7 = self.whiteCutPiece_7
                if self.boxLst[self.boxLst.index(self.Qb) + num].colliderect(self.pw8):
                    self.pw8 = self.whiteCutPiece_8
                if self.boxLst[self.boxLst.index(self.Qb) + num].colliderect(self.rw1):
                    self.rw1 = self.whiteCutPiece_9
                if self.boxLst[self.boxLst.index(self.Qb) + num].colliderect(self.rw2):
                    self.rw2 = self.whiteCutPiece_10
                if self.boxLst[self.boxLst.index(self.Qb) + num].colliderect(self.kw1):
                    self.kw1 = self.whiteCutPiece_11
                if self.boxLst[self.boxLst.index(self.Qb) + num].colliderect(self.kw2):
                    self.kw2 = self.whiteCutPiece_12
                if self.boxLst[self.boxLst.index(self.Qb) + num].colliderect(self.bw1):
                    self.bw1 = self.whiteCutPiece_13
                if self.boxLst[self.boxLst.index(self.Qb) + num].colliderect(self.bw2):
                    self.bw2 = self.whiteCutPiece_14
                if self.boxLst[self.boxLst.index(self.Qb) + num].colliderect(self.Kw):
                    self.Kw = self.whiteCutPiece_15
                    self.KingWhite_isDead = 1
                if self.boxLst[self.boxLst.index(self.Qb) + num].colliderect(self.Qw):
                    self.Qw = self.whiteCutPiece_16
                self.Qb = self.boxLst[self.boxLst.index(self.Qb) + num]
                self.QueenBlackClicked = 0
                self.QueenBlackClicked_cut = 0
                self.turn = "white"

        if self.turn == "white":
            self.QueenBlackClicked_plus8_plus1 = 0
            self.QueenBlackClicked_plus16_plus2 = 0
            self.QueenBlackClicked_plus24_plus3 = 0
            self.QueenBlackClicked_plus32_plus4 = 0
            self.QueenBlackClicked_plus40_plus5 = 0
            self.QueenBlackClicked_plus48_plus6 = 0
            self.QueenBlackClicked_plus8_minus1 = 0
            self.QueenBlackClicked_plus16_minus2 = 0
            self.QueenBlackClicked_plus24_minus3 = 0
            self.QueenBlackClicked_plus32_minus4 = 0
            self.QueenBlackClicked_plus40_minus5 = 0
            self.QueenBlackClicked_plus48_minus6 = 0
            self.QueenBlackClicked_minus8_plus1 = 0
            self.QueenBlackClicked_minus16_plus2 = 0
            self.QueenBlackClicked_minus24_plus3 = 0
            self.QueenBlackClicked_minus32_plus4 = 0
            self.QueenBlackClicked_minus40_plus5 = 0
            self.QueenBlackClicked_minus48_plus6 = 0
            self.QueenBlackClicked_minus8_minus1 = 0
            self.QueenBlackClicked_minus16_minus2 = 0
            self.QueenBlackClicked_minus24_minus3 = 0
            self.QueenBlackClicked_minus32_minus4 = 0
            self.QueenBlackClicked_minus40_minus5 = 0
            self.bishopBlack1Clicked_minus48_minus6 = 0

            self.QueenBlackClicked_plus8 = 0
            self.QueenBlackClicked_plus16 = 0
            self.QueenBlackClicked_plus24 = 0
            self.QueenBlackClicked_plus32 = 0
            self.QueenBlackClicked_plus40 = 0
            self.QueenBlackClicked_plus48 = 0
            self.QueenBlackClicked_plus1 = 0
            self.QueenBlackClicked_plus2 = 0
            self.QueenBlackClicked_plus3 = 0
            self.QueenBlackClicked_plus4 = 0
            self.QueenBlackClicked_plus5 = 0
            self.QueenBlackClicked_plus6 = 0
            self.QueenBlackClicked_minus8 = 0
            self.QueenBlackClicked_minus16 = 0
            self.QueenBlackClicked_minus24 = 0
            self.QueenBlackClicked_minus32 = 0
            self.QueenBlackClicked_minus40 = 0
            self.QueenBlackClicked_minus48 = 0
            self.QueenBlackClicked_minus1 = 0
            self.QueenBlackClicked_minus2 = 0
            self.QueenBlackClicked_minus3 = 0
            self.QueenBlackClicked_minus4 = 0
            self.QueenBlackClicked_minus5 = 0
            self.QueenBlackClicked_minus6 = 0

        if self.turn == "black":
            if self.Qb.collidepoint(self.mouse_x, self.mouse_y):
                # along y-axis
                if self.Qb.y < self.box57.y:
                    drawRectRook_add(8)
                    self.QueenBlackClicked = 1
                    self.rookBlack2Clicked = 0
                    self.rookBlack1Clicked = 0
                    self.pawnBlack1Clicked = 0
                    self.pawnBlack2Clicked = 0
                    self.pawnBlack3Clicked = 0
                    self.pawnBlack4Clicked = 0
                    self.pawnBlack5Clicked = 0
                    self.pawnBlack6Clicked = 0
                    self.pawnBlack7Clicked = 0
                    self.pawnBlack8Clicked = 0
                    self.KingBlackClicked = 0
                    self.knightBlack1Clicked = 0
                    self.knightBlack2Clicked = 0
                    self.bishopBlack1Clicked = 0
                    self.bishopBlack2Clicked = 0
                if self.Qb.y < self.box49.y:
                    if self.QueenBlackClicked_plus8 == 1:
                        drawRectRook_add(16)
                        self.QueenBlackClicked = 1
                        self.rookBlack2Clicked = 0
                        self.rookBlack1Clicked = 0
                        self.pawnBlack1Clicked = 0
                        self.pawnBlack2Clicked = 0
                        self.pawnBlack3Clicked = 0
                        self.pawnBlack4Clicked = 0
                        self.pawnBlack5Clicked = 0
                        self.pawnBlack6Clicked = 0
                        self.pawnBlack7Clicked = 0
                        self.pawnBlack8Clicked = 0
                        self.KingBlackClicked = 0
                        self.knightBlack1Clicked = 0
                        self.knightBlack2Clicked = 0
                        self.bishopBlack1Clicked = 0
                        self.bishopBlack2Clicked = 0
                if self.Qb.y < self.box41.y:
                    if self.QueenBlackClicked_plus8 == 1 and self.QueenBlackClicked_plus16 == 1:
                        drawRectRook_add(24)
                        self.QueenBlackClicked = 1
                        self.rookBlack2Clicked = 0
                        self.rookBlack1Clicked = 0
                        self.pawnBlack1Clicked = 0
                        self.pawnBlack2Clicked = 0
                        self.pawnBlack3Clicked = 0
                        self.pawnBlack4Clicked = 0
                        self.pawnBlack5Clicked = 0
                        self.pawnBlack6Clicked = 0
                        self.pawnBlack7Clicked = 0
                        self.pawnBlack8Clicked = 0
                        self.KingBlackClicked = 0
                        self.knightBlack1Clicked = 0
                        self.knightBlack2Clicked = 0
                        self.bishopBlack1Clicked = 0
                        self.bishopBlack2Clicked = 0
                if self.Qb.y < self.box33.y:
                    if self.QueenBlackClicked_plus8 == 1 and self.QueenBlackClicked_plus16 == 1 and self.QueenBlackClicked_plus24 == 1:
                        drawRectRook_add(32)
                        self.QueenBlackClicked = 1
                        self.rookBlack2Clicked = 0
                        self.rookBlack1Clicked = 0
                        self.pawnBlack1Clicked = 0
                        self.pawnBlack2Clicked = 0
                        self.pawnBlack3Clicked = 0
                        self.pawnBlack4Clicked = 0
                        self.pawnBlack5Clicked = 0
                        self.pawnBlack6Clicked = 0
                        self.pawnBlack7Clicked = 0
                        self.pawnBlack8Clicked = 0
                        self.KingBlackClicked = 0
                        self.knightBlack1Clicked = 0
                        self.knightBlack2Clicked = 0
                        self.bishopBlack1Clicked = 0
                        self.bishopBlack2Clicked = 0
                if self.Qb.y < self.box25.y:
                    if self.QueenBlackClicked_plus8 == 1 and self.QueenBlackClicked_plus16 == 1 and self.QueenBlackClicked_plus24 == 1 and self.QueenBlackClicked_plus32 == 1:
                        drawRectRook_add(40)
                        self.QueenBlackClicked = 1
                        self.rookBlack2Clicked = 0
                        self.rookBlack1Clicked = 0
                        self.pawnBlack1Clicked = 0
                        self.pawnBlack2Clicked = 0
                        self.pawnBlack3Clicked = 0
                        self.pawnBlack4Clicked = 0
                        self.pawnBlack5Clicked = 0
                        self.pawnBlack6Clicked = 0
                        self.pawnBlack7Clicked = 0
                        self.pawnBlack8Clicked = 0
                        self.KingBlackClicked = 0
                        self.knightBlack1Clicked = 0
                        self.knightBlack2Clicked = 0
                        self.bishopBlack1Clicked = 0
                        self.bishopBlack2Clicked = 0
                if self.Qb.y < self.box17.y:
                    if self.QueenBlackClicked_plus8 == 1 and self.QueenBlackClicked_plus16 == 1 and self.QueenBlackClicked_plus24 == 1 and self.QueenBlackClicked_plus32 == 1 and \
                            self.QueenBlackClicked_plus40 == 1:
                        drawRectRook_add(48)
                        self.QueenBlackClicked = 1
                        self.rookBlack2Clicked = 0
                        self.rookBlack1Clicked = 0
                        self.pawnBlack1Clicked = 0
                        self.pawnBlack2Clicked = 0
                        self.pawnBlack3Clicked = 0
                        self.pawnBlack4Clicked = 0
                        self.pawnBlack5Clicked = 0
                        self.pawnBlack6Clicked = 0
                        self.pawnBlack7Clicked = 0
                        self.pawnBlack8Clicked = 0
                        self.KingBlackClicked = 0
                        self.knightBlack1Clicked = 0
                        self.knightBlack2Clicked = 0
                        self.bishopBlack1Clicked = 0
                        self.bishopBlack2Clicked = 0
                if self.Qb.y < self.box9.y:
                    if self.QueenBlackClicked_plus8 == 1 and self.QueenBlackClicked_plus16 == 1 and self.QueenBlackClicked_plus24 == 1 and self.QueenBlackClicked_plus32 == 1 and \
                            self.QueenBlackClicked_plus40 == 1 and self.QueenBlackClicked_plus48 == 1:
                        drawRectRook_add(56)
                        self.QueenBlackClicked = 1
                        self.rookBlack2Clicked = 0
                        self.rookBlack1Clicked = 0
                        self.pawnBlack1Clicked = 0
                        self.pawnBlack2Clicked = 0
                        self.pawnBlack3Clicked = 0
                        self.pawnBlack4Clicked = 0
                        self.pawnBlack5Clicked = 0
                        self.pawnBlack6Clicked = 0
                        self.pawnBlack7Clicked = 0
                        self.pawnBlack8Clicked = 0
                        self.KingBlackClicked = 0
                        self.knightBlack1Clicked = 0
                        self.knightBlack2Clicked = 0
                        self.bishopBlack1Clicked = 0
                        self.bishopBlack2Clicked = 0

                if self.Qb.y > self.box1.y:
                    drawRect_sub(8)
                    self.QueenBlackClicked = 1
                    self.rookBlack2Clicked = 0
                    self.rookBlack1Clicked = 0
                    self.pawnBlack1Clicked = 0
                    self.pawnBlack2Clicked = 0
                    self.pawnBlack3Clicked = 0
                    self.pawnBlack4Clicked = 0
                    self.pawnBlack5Clicked = 0
                    self.pawnBlack6Clicked = 0
                    self.pawnBlack7Clicked = 0
                    self.pawnBlack8Clicked = 0
                    self.KingBlackClicked = 0
                    self.knightBlack1Clicked = 0
                    self.knightBlack2Clicked = 0
                    self.bishopBlack1Clicked = 0
                    self.bishopBlack2Clicked = 0
                if self.Qb.y > self.box9.y:
                    if self.QueenBlackClicked_minus8 == 1:
                        drawRect_sub(16)
                        self.QueenBlackClicked = 1
                        self.rookBlack2Clicked = 0
                        self.rookBlack1Clicked = 0
                        self.pawnBlack1Clicked = 0
                        self.pawnBlack2Clicked = 0
                        self.pawnBlack3Clicked = 0
                        self.pawnBlack4Clicked = 0
                        self.pawnBlack5Clicked = 0
                        self.pawnBlack6Clicked = 0
                        self.pawnBlack7Clicked = 0
                        self.pawnBlack8Clicked = 0
                        self.KingBlackClicked = 0
                        self.knightBlack1Clicked = 0
                        self.knightBlack2Clicked = 0
                        self.bishopBlack1Clicked = 0
                        self.bishopBlack2Clicked = 0
                if self.Qb.y > self.box17.y:
                    if self.QueenBlackClicked_minus8 == 1 and self.QueenBlackClicked_minus16 == 1:
                        drawRect_sub(24)
                        self.QueenBlackClicked = 1
                        self.rookBlack2Clicked = 0
                        self.rookBlack1Clicked = 0
                        self.pawnBlack1Clicked = 0
                        self.pawnBlack2Clicked = 0
                        self.pawnBlack3Clicked = 0
                        self.pawnBlack4Clicked = 0
                        self.pawnBlack5Clicked = 0
                        self.pawnBlack6Clicked = 0
                        self.pawnBlack7Clicked = 0
                        self.pawnBlack8Clicked = 0
                        self.KingBlackClicked = 0
                        self.knightBlack1Clicked = 0
                        self.knightBlack2Clicked = 0
                        self.bishopBlack1Clicked = 0
                        self.bishopBlack2Clicked = 0
                if self.Qb.y > self.box25.y:
                    if self.QueenBlackClicked_minus8 == 1 and self.QueenBlackClicked_minus16 == 1 and self.QueenBlackClicked_minus24 == 1:
                        drawRect_sub(32)
                        self.QueenBlackClicked = 1
                        self.rookBlack2Clicked = 0
                        self.rookBlack1Clicked = 0
                        self.pawnBlack1Clicked = 0
                        self.pawnBlack2Clicked = 0
                        self.pawnBlack3Clicked = 0
                        self.pawnBlack4Clicked = 0
                        self.pawnBlack5Clicked = 0
                        self.pawnBlack6Clicked = 0
                        self.pawnBlack7Clicked = 0
                        self.pawnBlack8Clicked = 0
                        self.KingBlackClicked = 0
                        self.knightBlack1Clicked = 0
                        self.knightBlack2Clicked = 0
                        self.bishopBlack1Clicked = 0
                        self.bishopBlack2Clicked = 0
                if self.Qb.y > self.box33.y:
                    if self.QueenBlackClicked_minus8 == 1 and self.QueenBlackClicked_minus16 == 1 and self.QueenBlackClicked_minus24 == 1 and self.QueenBlackClicked_minus32 == 1:
                        drawRect_sub(40)
                        self.QueenBlackClicked = 1
                        self.rookBlack2Clicked = 0
                        self.rookBlack1Clicked = 0
                        self.pawnBlack1Clicked = 0
                        self.pawnBlack2Clicked = 0
                        self.pawnBlack3Clicked = 0
                        self.pawnBlack4Clicked = 0
                        self.pawnBlack5Clicked = 0
                        self.pawnBlack6Clicked = 0
                        self.pawnBlack7Clicked = 0
                        self.pawnBlack8Clicked = 0
                        self.KingBlackClicked = 0
                        self.knightBlack1Clicked = 0
                        self.knightBlack2Clicked = 0
                        self.bishopBlack1Clicked = 0
                        self.bishopBlack2Clicked = 0
                if self.Qb.y > self.box41.y:
                    if self.QueenBlackClicked_minus8 == 1 and self.QueenBlackClicked_minus16 == 1 and self.QueenBlackClicked_minus24 == 1 and self.QueenBlackClicked_minus32 == 1 and \
                            self.QueenBlackClicked_minus40:
                        drawRect_sub(48)
                        self.QueenBlackClicked = 1
                        self.rookBlack2Clicked = 0
                        self.rookBlack1Clicked = 0
                        self.pawnBlack1Clicked = 0
                        self.pawnBlack2Clicked = 0
                        self.pawnBlack3Clicked = 0
                        self.pawnBlack4Clicked = 0
                        self.pawnBlack5Clicked = 0
                        self.pawnBlack6Clicked = 0
                        self.pawnBlack7Clicked = 0
                        self.pawnBlack8Clicked = 0
                        self.KingBlackClicked = 0
                        self.knightBlack1Clicked = 0
                        self.knightBlack2Clicked = 0
                        self.bishopBlack1Clicked = 0
                        self.bishopBlack2Clicked = 0
                if self.Qb.y > self.box49.y:
                    if self.QueenBlackClicked_minus8 == 1 and self.QueenBlackClicked_minus16 == 1 and self.QueenBlackClicked_minus24 == 1 and self.QueenBlackClicked_minus32 == 1 and \
                            self.QueenBlackClicked_minus40 and self.QueenBlackClicked_minus48:
                        drawRect_sub(56)
                        self.QueenBlackClicked = 1
                        self.rookBlack2Clicked = 0
                        self.rookBlack1Clicked = 0
                        self.pawnBlack1Clicked = 0
                        self.pawnBlack2Clicked = 0
                        self.pawnBlack3Clicked = 0
                        self.pawnBlack4Clicked = 0
                        self.pawnBlack5Clicked = 0
                        self.pawnBlack6Clicked = 0
                        self.pawnBlack7Clicked = 0
                        self.pawnBlack8Clicked = 0
                        self.KingBlackClicked = 0
                        self.knightBlack1Clicked = 0
                        self.knightBlack2Clicked = 0
                        self.bishopBlack1Clicked = 0
                        self.bishopBlack2Clicked = 0

                # along x-axis
                if self.Qb.x < self.box8.x:
                    drawRectRook_add(1)
                    self.QueenBlackClicked = 1
                    self.rookBlack2Clicked = 0
                    self.rookBlack1Clicked = 0
                    self.pawnBlack1Clicked = 0
                    self.pawnBlack2Clicked = 0
                    self.pawnBlack3Clicked = 0
                    self.pawnBlack4Clicked = 0
                    self.pawnBlack5Clicked = 0
                    self.pawnBlack6Clicked = 0
                    self.pawnBlack7Clicked = 0
                    self.pawnBlack8Clicked = 0
                    self.KingBlackClicked = 0
                    self.knightBlack1Clicked = 0
                    self.knightBlack2Clicked = 0
                    self.bishopBlack1Clicked = 0
                    self.bishopBlack2Clicked = 0
                if self.Qb.x < self.box7.x:
                    if self.QueenBlackClicked_plus1 == 1:
                        drawRectRook_add(2)
                        self.QueenBlackClicked = 1
                        self.rookBlack2Clicked = 0
                        self.rookBlack1Clicked = 0
                        self.pawnBlack1Clicked = 0
                        self.pawnBlack2Clicked = 0
                        self.pawnBlack3Clicked = 0
                        self.pawnBlack4Clicked = 0
                        self.pawnBlack5Clicked = 0
                        self.pawnBlack6Clicked = 0
                        self.pawnBlack7Clicked = 0
                        self.pawnBlack8Clicked = 0
                        self.KingBlackClicked = 0
                        self.knightBlack1Clicked = 0
                        self.knightBlack2Clicked = 0
                        self.bishopBlack1Clicked = 0
                        self.bishopBlack2Clicked = 0
                if self.Qb.x < self.box6.x:
                    if self.QueenBlackClicked_plus1 == 1 and self.QueenBlackClicked_plus2 == 1:
                        drawRectRook_add(3)
                        self.QueenBlackClicked = 1
                        self.rookBlack2Clicked = 0
                        self.rookBlack1Clicked = 0
                        self.pawnBlack1Clicked = 0
                        self.pawnBlack2Clicked = 0
                        self.pawnBlack3Clicked = 0
                        self.pawnBlack4Clicked = 0
                        self.pawnBlack5Clicked = 0
                        self.pawnBlack6Clicked = 0
                        self.pawnBlack7Clicked = 0
                        self.pawnBlack8Clicked = 0
                        self.KingBlackClicked = 0
                        self.knightBlack1Clicked = 0
                        self.knightBlack2Clicked = 0
                        self.bishopBlack1Clicked = 0
                        self.bishopBlack2Clicked = 0
                if self.Qb.x < self.box5.x:
                    if self.QueenBlackClicked_plus1 == 1 and self.QueenBlackClicked_plus2 == 1 and self.QueenBlackClicked_plus3 == 1:
                        drawRectRook_add(4)
                        self.QueenBlackClicked = 1
                        self.rookBlack2Clicked = 0
                        self.rookBlack1Clicked = 0
                        self.pawnBlack1Clicked = 0
                        self.pawnBlack2Clicked = 0
                        self.pawnBlack3Clicked = 0
                        self.pawnBlack4Clicked = 0
                        self.pawnBlack5Clicked = 0
                        self.pawnBlack6Clicked = 0
                        self.pawnBlack7Clicked = 0
                        self.pawnBlack8Clicked = 0
                        self.KingBlackClicked = 0
                        self.knightBlack1Clicked = 0
                        self.knightBlack2Clicked = 0
                        self.bishopBlack1Clicked = 0
                        self.bishopBlack2Clicked = 0
                if self.Qb.x < self.box4.x:
                    if self.QueenBlackClicked_plus1 == 1 and self.QueenBlackClicked_plus2 == 1 and self.QueenBlackClicked_plus3 == 1 and self.QueenBlackClicked_plus4 == 1:
                        drawRectRook_add(5)
                        self.QueenBlackClicked = 1
                        self.rookBlack2Clicked = 0
                        self.rookBlack1Clicked = 0
                        self.pawnBlack1Clicked = 0
                        self.pawnBlack2Clicked = 0
                        self.pawnBlack3Clicked = 0
                        self.pawnBlack4Clicked = 0
                        self.pawnBlack5Clicked = 0
                        self.pawnBlack6Clicked = 0
                        self.pawnBlack7Clicked = 0
                        self.pawnBlack8Clicked = 0
                        self.KingBlackClicked = 0
                        self.knightBlack1Clicked = 0
                        self.knightBlack2Clicked = 0
                        self.bishopBlack1Clicked = 0
                        self.bishopBlack2Clicked = 0
                if self.Qb.x < self.box3.x:
                    if self.QueenBlackClicked_plus1 == 1 and self.QueenBlackClicked_plus2 == 1 and self.QueenBlackClicked_plus3 == 1 and self.QueenBlackClicked_plus4 == 1 and \
                            self.QueenBlackClicked_plus5 == 1:
                        drawRectRook_add(6)
                        self.QueenBlackClicked = 1
                        self.rookBlack2Clicked = 0
                        self.rookBlack1Clicked = 0
                        self.pawnBlack1Clicked = 0
                        self.pawnBlack2Clicked = 0
                        self.pawnBlack3Clicked = 0
                        self.pawnBlack4Clicked = 0
                        self.pawnBlack5Clicked = 0
                        self.pawnBlack6Clicked = 0
                        self.pawnBlack7Clicked = 0
                        self.pawnBlack8Clicked = 0
                        self.KingBlackClicked = 0
                        self.knightBlack1Clicked = 0
                        self.knightBlack2Clicked = 0
                        self.bishopBlack1Clicked = 0
                        self.bishopBlack2Clicked = 0
                if self.Qb.x < self.box2.x:
                    if self.QueenBlackClicked_plus1 == 1 and self.QueenBlackClicked_plus2 == 1 and self.QueenBlackClicked_plus3 == 1 and self.QueenBlackClicked_plus4 == 1 and \
                            self.QueenBlackClicked_plus5 == 1 and self.QueenBlackClicked_plus6 == 1:
                        drawRectRook_add(7)
                        self.QueenBlackClicked = 1
                        self.rookBlack2Clicked = 0
                        self.rookBlack1Clicked = 0
                        self.pawnBlack1Clicked = 0
                        self.pawnBlack2Clicked = 0
                        self.pawnBlack3Clicked = 0
                        self.pawnBlack4Clicked = 0
                        self.pawnBlack5Clicked = 0
                        self.pawnBlack6Clicked = 0
                        self.pawnBlack7Clicked = 0
                        self.pawnBlack8Clicked = 0
                        self.KingBlackClicked = 0
                        self.knightBlack1Clicked = 0
                        self.knightBlack2Clicked = 0
                        self.bishopBlack1Clicked = 0
                        self.bishopBlack2Clicked = 0

                if self.Qb.x > self.box1.x:
                    drawRect_sub(1)
                    self.QueenBlackClicked = 1
                    self.rookBlack2Clicked = 0
                    self.rookBlack1Clicked = 0
                    self.pawnBlack1Clicked = 0
                    self.pawnBlack2Clicked = 0
                    self.pawnBlack3Clicked = 0
                    self.pawnBlack4Clicked = 0
                    self.pawnBlack5Clicked = 0
                    self.pawnBlack6Clicked = 0
                    self.pawnBlack7Clicked = 0
                    self.pawnBlack8Clicked = 0
                    self.KingBlackClicked = 0
                    self.knightBlack1Clicked = 0
                    self.knightBlack2Clicked = 0
                    self.bishopBlack1Clicked = 0
                    self.bishopBlack2Clicked = 0
                if self.Qb.x > self.box2.x:
                    if self.QueenBlackClicked_minus1 == 1:
                        drawRect_sub(2)
                        self.QueenBlackClicked = 1
                        self.rookBlack2Clicked = 0
                        self.rookBlack1Clicked = 0
                        self.pawnBlack1Clicked = 0
                        self.pawnBlack2Clicked = 0
                        self.pawnBlack3Clicked = 0
                        self.pawnBlack4Clicked = 0
                        self.pawnBlack5Clicked = 0
                        self.pawnBlack6Clicked = 0
                        self.pawnBlack7Clicked = 0
                        self.pawnBlack8Clicked = 0
                        self.KingBlackClicked = 0
                        self.knightBlack1Clicked = 0
                        self.knightBlack2Clicked = 0
                        self.bishopBlack1Clicked = 0
                        self.bishopBlack2Clicked = 0
                if self.Qb.x > self.box3.x:
                    if self.QueenBlackClicked_minus1 == 1 and self.QueenBlackClicked_minus2 == 1:
                        drawRect_sub(3)
                        self.QueenBlackClicked = 1
                        self.rookBlack2Clicked = 0
                        self.rookBlack1Clicked = 0
                        self.pawnBlack1Clicked = 0
                        self.pawnBlack2Clicked = 0
                        self.pawnBlack3Clicked = 0
                        self.pawnBlack4Clicked = 0
                        self.pawnBlack5Clicked = 0
                        self.pawnBlack6Clicked = 0
                        self.pawnBlack7Clicked = 0
                        self.pawnBlack8Clicked = 0
                        self.KingBlackClicked = 0
                        self.knightBlack1Clicked = 0
                        self.knightBlack2Clicked = 0
                        self.bishopBlack1Clicked = 0
                        self.bishopBlack2Clicked = 0
                if self.Qb.x > self.box4.x:
                    if self.QueenBlackClicked_minus1 == 1 and self.QueenBlackClicked_minus2 == 1 and self.QueenBlackClicked_minus3 == 1:
                        drawRect_sub(4)
                        self.QueenBlackClicked = 1
                        self.rookBlack2Clicked = 0
                        self.rookBlack1Clicked = 0
                        self.pawnBlack1Clicked = 0
                        self.pawnBlack2Clicked = 0
                        self.pawnBlack3Clicked = 0
                        self.pawnBlack4Clicked = 0
                        self.pawnBlack5Clicked = 0
                        self.pawnBlack6Clicked = 0
                        self.pawnBlack7Clicked = 0
                        self.pawnBlack8Clicked = 0
                        self.KingBlackClicked = 0
                        self.knightBlack1Clicked = 0
                        self.knightBlack2Clicked = 0
                        self.bishopBlack1Clicked = 0
                        self.bishopBlack2Clicked = 0
                if self.Qb.x > self.box5.x:
                    if self.QueenBlackClicked_minus1 == 1 and self.QueenBlackClicked_minus2 == 1 and self.QueenBlackClicked_minus3 == 1 and self.QueenBlackClicked_minus4 == 1:
                        drawRect_sub(5)
                        self.QueenBlackClicked = 1
                        self.rookBlack2Clicked = 0
                        self.rookBlack1Clicked = 0
                        self.pawnBlack1Clicked = 0
                        self.pawnBlack2Clicked = 0
                        self.pawnBlack3Clicked = 0
                        self.pawnBlack4Clicked = 0
                        self.pawnBlack5Clicked = 0
                        self.pawnBlack6Clicked = 0
                        self.pawnBlack7Clicked = 0
                        self.pawnBlack8Clicked = 0
                        self.KingBlackClicked = 0
                        self.knightBlack1Clicked = 0
                        self.knightBlack2Clicked = 0
                        self.bishopBlack1Clicked = 0
                        self.bishopBlack2Clicked = 0
                if self.Qb.x > self.box6.x:
                    if self.QueenBlackClicked_minus1 == 1 and self.QueenBlackClicked_minus2 == 1 and self.QueenBlackClicked_minus3 == 1 and self.QueenBlackClicked_minus4 == 1 and \
                            self.QueenBlackClicked_minus5 == 1:
                        drawRect_sub(6)
                        self.QueenBlackClicked = 1
                        self.rookBlack2Clicked = 0
                        self.rookBlack1Clicked = 0
                        self.pawnBlack1Clicked = 0
                        self.pawnBlack2Clicked = 0
                        self.pawnBlack3Clicked = 0
                        self.pawnBlack4Clicked = 0
                        self.pawnBlack5Clicked = 0
                        self.pawnBlack6Clicked = 0
                        self.pawnBlack7Clicked = 0
                        self.pawnBlack8Clicked = 0
                        self.KingBlackClicked = 0
                        self.knightBlack1Clicked = 0
                        self.knightBlack2Clicked = 0
                        self.bishopBlack1Clicked = 0
                        self.bishopBlack2Clicked = 0
                if self.Qb.x > self.box7.x:
                    if self.QueenBlackClicked_minus1 == 1 and self.QueenBlackClicked_minus2 == 1 and self.QueenBlackClicked_minus3 == 1 and self.QueenBlackClicked_minus4 == 1 and \
                            self.QueenBlackClicked_minus5 == 1 and self.QueenBlackClicked_minus6 == 1:
                        drawRect_sub(7)
                        self.QueenBlackClicked = 1
                        self.rookBlack2Clicked = 0
                        self.rookBlack1Clicked = 0
                        self.pawnBlack1Clicked = 0
                        self.pawnBlack2Clicked = 0
                        self.pawnBlack3Clicked = 0
                        self.pawnBlack4Clicked = 0
                        self.pawnBlack5Clicked = 0
                        self.pawnBlack6Clicked = 0
                        self.pawnBlack7Clicked = 0
                        self.pawnBlack8Clicked = 0
                        self.KingBlackClicked = 0
                        self.knightBlack1Clicked = 0
                        self.knightBlack2Clicked = 0
                        self.bishopBlack1Clicked = 0
                        self.bishopBlack2Clicked = 0

                # check if white pieces can be cut or not
                if self.Qb.y < self.box57.y:
                    cutWhitePiece_add(8)
                if self.Qb.y < self.box49.y:
                    if self.QueenBlackClicked_plus8 == 1:
                        cutWhitePiece_add(16)
                if self.Qb.y < self.box41.y:
                    if self.QueenBlackClicked_plus8 == 1 and self.QueenBlackClicked_plus16 == 1:
                        cutWhitePiece_add(24)
                if self.Qb.y < self.box33.y:
                    if self.QueenBlackClicked_plus8 == 1 and self.QueenBlackClicked_plus16 == 1 and self.QueenBlackClicked_plus24 == 1:
                        cutWhitePiece_add(32)
                if self.Qb.y < self.box25.y:
                    if self.QueenBlackClicked_plus8 == 1 and self.QueenBlackClicked_plus16 == 1 and self.QueenBlackClicked_plus24 == 1 and self.QueenBlackClicked_plus32 == 1:
                        cutWhitePiece_add(40)
                if self.Qb.y < self.box17.y:
                    if self.QueenBlackClicked_plus8 == 1 and self.QueenBlackClicked_plus16 == 1 and self.QueenBlackClicked_plus24 == 1 and self.QueenBlackClicked_plus32 == 1 and \
                            self.QueenBlackClicked_plus40 == 1:
                        cutWhitePiece_add(48)
                if self.Qb.y < self.box9.y:
                    if self.QueenBlackClicked_plus8 == 1 and self.QueenBlackClicked_plus16 == 1 and self.QueenBlackClicked_plus24 == 1 and self.QueenBlackClicked_plus32 == 1 and \
                            self.QueenBlackClicked_plus40 == 1 and self.QueenBlackClicked_plus48 == 1:
                        cutWhitePiece_add(56)

                if self.Qb.y > self.box1.y:
                    cutWhitePiece_sub(8)
                if self.Qb.y > self.box9.y:
                    if self.QueenBlackClicked_minus8 == 1:
                        cutWhitePiece_sub(16)
                if self.Qb.y > self.box17.y:
                    if self.QueenBlackClicked_minus8 == 1 and self.QueenBlackClicked_minus16 == 1:
                        cutWhitePiece_sub(24)
                if self.Qb.y > self.box25.y:
                    if self.QueenBlackClicked_minus8 == 1 and self.QueenBlackClicked_minus16 == 1 and self.QueenBlackClicked_minus24 == 1:
                        cutWhitePiece_sub(32)
                if self.Qb.y > self.box33.y:
                    if self.QueenBlackClicked_minus8 == 1 and self.QueenBlackClicked_minus16 == 1 and self.QueenBlackClicked_minus24 == 1 and self.QueenBlackClicked_minus32 == 1:
                        cutWhitePiece_sub(40)
                if self.Qb.y > self.box41.y:
                    if self.QueenBlackClicked_minus8 == 1 and self.QueenBlackClicked_minus16 == 1 and self.QueenBlackClicked_minus24 == 1 and self.QueenBlackClicked_minus32 == 1 and \
                            self.QueenBlackClicked_minus40 == 1:
                        cutWhitePiece_sub(48)
                if self.Qb.y > self.box49.y:
                    if self.QueenBlackClicked_minus8 == 1 and self.QueenBlackClicked_minus16 == 1 and self.QueenBlackClicked_minus24 == 1 and self.QueenBlackClicked_minus32 == 1 and \
                            self.QueenBlackClicked_minus40 == 1 and self.QueenBlackClicked_minus48 == 1:
                        cutWhitePiece_sub(56)

                if self.Qb.x < self.box8.x:
                    cutWhitePiece_add(1)
                if self.Qb.x < self.box7.x:
                    if self.QueenBlackClicked_plus1 == 1:
                        cutWhitePiece_add(2)
                if self.Qb.x < self.box6.x:
                    if self.QueenBlackClicked_plus1 == 1 and self.QueenBlackClicked_plus2 == 1:
                        cutWhitePiece_add(3)
                if self.Qb.x < self.box5.x:
                    if self.QueenBlackClicked_plus1 == 1 and self.QueenBlackClicked_plus2 == 1 and self.QueenBlackClicked_plus3 == 1:
                        cutWhitePiece_add(4)
                if self.Qb.x < self.box4.x:
                    if self.QueenBlackClicked_plus1 == 1 and self.QueenBlackClicked_plus2 == 1 and self.QueenBlackClicked_plus3 == 1 and self.QueenBlackClicked_plus4 == 1:
                        cutWhitePiece_add(5)
                if self.Qb.x < self.box3.x:
                    if self.QueenBlackClicked_plus1 == 1 and self.QueenBlackClicked_plus2 == 1 and self.QueenBlackClicked_plus3 == 1 and self.QueenBlackClicked_plus4 == 1 and \
                            self.QueenBlackClicked_plus5 == 1:
                        cutWhitePiece_add(6)
                if self.Qb.x < self.box2.x:
                    if self.QueenBlackClicked_plus1 == 1 and self.QueenBlackClicked_plus2 == 1 and self.QueenBlackClicked_plus3 == 1 and self.QueenBlackClicked_plus4 == 1 and \
                            self.QueenBlackClicked_plus5 == 1 and self.QueenBlackClicked_plus6 == 1:
                        cutWhitePiece_add(7)

                if self.Qb.x > self.box1.x:
                    cutWhitePiece_sub(1)
                if self.Qb.x > self.box2.x:
                    if self.QueenBlackClicked_minus1 == 1:
                        cutWhitePiece_sub(2)
                if self.Qb.x > self.box3.x:
                    if self.QueenBlackClicked_minus1 == 1 and self.QueenBlackClicked_minus2 == 1:
                        cutWhitePiece_sub(3)
                if self.Qb.x > self.box4.x:
                    if self.QueenBlackClicked_minus1 == 1 and self.QueenBlackClicked_minus2 == 1 and self.QueenBlackClicked_minus3 == 1:
                        cutWhitePiece_sub(4)
                if self.Qb.x > self.box5.x:
                    if self.QueenBlackClicked_minus1 == 1 and self.QueenBlackClicked_minus2 == 1 and self.QueenBlackClicked_minus3 == 1 and self.QueenBlackClicked_minus4 == 1:
                        cutWhitePiece_sub(5)
                if self.Qb.x > self.box6.x:
                    if self.QueenBlackClicked_minus1 == 1 and self.QueenBlackClicked_minus2 == 1 and self.QueenBlackClicked_minus3 == 1 and self.QueenBlackClicked_minus4 == 1 and \
                            self.QueenBlackClicked_minus5 == 1:
                        cutWhitePiece_sub(6)
                if self.Qb.x > self.box7.x:
                    if self.QueenBlackClicked_minus1 == 1 and self.QueenBlackClicked_minus2 == 1 and self.QueenBlackClicked_minus3 == 1 and self.QueenBlackClicked_minus4 == 1 and \
                            self.QueenBlackClicked_minus5 == 1 and self.QueenBlackClicked_minus6 == 1:
                        cutWhitePiece_sub(7)

                if self.Qb.y < self.box57.y and self.Qb.x < self.box8.x:
                    drawRectBishop_add(8 + 1)
                    self.QueenBlackClicked = 1
                    self.bishopBlack2Clicked = 0
                    self.bishopBlack1Clicked = 0
                    self.rookBlack2Clicked = 0
                    self.rookBlack1Clicked = 0
                    self.KingBlackClicked = 0
                    self.knightBlack1Clicked = 0
                    self.knightBlack2Clicked = 0
                    self.pawnBlack1Clicked = 0
                    self.pawnBlack2Clicked = 0
                    self.pawnBlack3Clicked = 0
                    self.pawnBlack4Clicked = 0
                    self.pawnBlack5Clicked = 0
                    self.pawnBlack6Clicked = 0
                    self.pawnBlack7Clicked = 0
                    self.pawnBlack8Clicked = 0
                if self.Qb.y < self.box49.y and self.Qb.x < self.box7.x:
                    if self.QueenBlackClicked_plus8_plus1 == 1:
                        drawRectBishop_add(16 + 2)
                        self.QueenBlackClicked = 1
                        self.bishopBlack2Clicked = 0
                        self.bishopBlack1Clicked = 0
                        self.rookBlack2Clicked = 0
                        self.rookBlack1Clicked = 0
                        self.KingBlackClicked = 0
                        self.knightBlack1Clicked = 0
                        self.knightBlack2Clicked = 0
                        self.pawnBlack1Clicked = 0
                        self.pawnBlack2Clicked = 0
                        self.pawnBlack3Clicked = 0
                        self.pawnBlack4Clicked = 0
                        self.pawnBlack5Clicked = 0
                        self.pawnBlack6Clicked = 0
                        self.pawnBlack7Clicked = 0
                        self.pawnBlack8Clicked = 0
                if self.Qb.y < self.box41.y and self.Qb.x < self.box6.x:
                    if self.QueenBlackClicked_plus8_plus1 == 1 and self.QueenBlackClicked_plus16_plus2 == 1:
                        drawRectBishop_add(24 + 3)
                        self.QueenBlackClicked = 1
                        self.bishopBlack2Clicked = 0
                        self.bishopBlack1Clicked = 0
                        self.rookBlack2Clicked = 0
                        self.rookBlack1Clicked = 0
                        self.KingBlackClicked = 0
                        self.knightBlack1Clicked = 0
                        self.knightBlack2Clicked = 0
                        self.pawnBlack1Clicked = 0
                        self.pawnBlack2Clicked = 0
                        self.pawnBlack3Clicked = 0
                        self.pawnBlack4Clicked = 0
                        self.pawnBlack5Clicked = 0
                        self.pawnBlack6Clicked = 0
                        self.pawnBlack7Clicked = 0
                        self.pawnBlack8Clicked = 0
                if self.Qb.y < self.box33.y and self.Qb.x < self.box5.x:
                    if self.QueenBlackClicked_plus8_plus1 == 1 and self.QueenBlackClicked_plus16_plus2 == 1 and self.QueenBlackClicked_plus24_plus3 == 1:
                        drawRectBishop_add(32 + 4)
                        self.QueenBlackClicked = 1
                        self.bishopBlack2Clicked = 0
                        self.bishopBlack1Clicked = 0
                        self.rookBlack2Clicked = 0
                        self.rookBlack1Clicked = 0
                        self.KingBlackClicked = 0
                        self.knightBlack1Clicked = 0
                        self.knightBlack2Clicked = 0
                        self.pawnBlack1Clicked = 0
                        self.pawnBlack2Clicked = 0
                        self.pawnBlack3Clicked = 0
                        self.pawnBlack4Clicked = 0
                        self.pawnBlack5Clicked = 0
                        self.pawnBlack6Clicked = 0
                        self.pawnBlack7Clicked = 0
                        self.pawnBlack8Clicked = 0
                if self.Qb.y < self.box25.y and self.Qb.x < self.box4.x:
                    if self.QueenBlackClicked_plus8_plus1 == 1 and self.QueenBlackClicked_plus16_plus2 == 1 and self.QueenBlackClicked_plus24_plus3 == 1 and \
                            self.QueenBlackClicked_plus32_plus4 == 1:
                        drawRectBishop_add(40 + 5)
                        self.QueenBlackClicked = 1
                        self.bishopBlack2Clicked = 0
                        self.bishopBlack1Clicked = 0
                        self.rookBlack2Clicked = 0
                        self.rookBlack1Clicked = 0
                        self.KingBlackClicked = 0
                        self.knightBlack1Clicked = 0
                        self.knightBlack2Clicked = 0
                        self.pawnBlack1Clicked = 0
                        self.pawnBlack2Clicked = 0
                        self.pawnBlack3Clicked = 0
                        self.pawnBlack4Clicked = 0
                        self.pawnBlack5Clicked = 0
                        self.pawnBlack6Clicked = 0
                        self.pawnBlack7Clicked = 0
                        self.pawnBlack8Clicked = 0
                if self.Qb.y < self.box17.y and self.Qb.x < self.box3.x:
                    if self.QueenBlackClicked_plus8_plus1 == 1 and self.QueenBlackClicked_plus16_plus2 == 1 and self.QueenBlackClicked_plus24_plus3 == 1 and \
                            self.QueenBlackClicked_plus32_plus4 == 1 and self.QueenBlackClicked_plus40_plus5 == 1:
                        drawRectBishop_add(48 + 6)
                        self.QueenBlackClicked = 1
                        self.bishopBlack2Clicked = 0
                        self.bishopBlack1Clicked = 0
                        self.rookBlack2Clicked = 0
                        self.rookBlack1Clicked = 0
                        self.KingBlackClicked = 0
                        self.knightBlack1Clicked = 0
                        self.knightBlack2Clicked = 0
                        self.pawnBlack1Clicked = 0
                        self.pawnBlack2Clicked = 0
                        self.pawnBlack3Clicked = 0
                        self.pawnBlack4Clicked = 0
                        self.pawnBlack5Clicked = 0
                        self.pawnBlack6Clicked = 0
                        self.pawnBlack7Clicked = 0
                        self.pawnBlack8Clicked = 0
                if self.Qb.y < self.box9.y and self.Qb.x < self.box2.x:
                    if self.QueenBlackClicked_plus8_plus1 == 1 and self.QueenBlackClicked_plus16_plus2 == 1 and self.QueenBlackClicked_plus24_plus3 == 1 and \
                            self.QueenBlackClicked_plus32_plus4 == 1 and self.QueenBlackClicked_plus40_plus5 == 1 and self.QueenBlackClicked_plus48_plus6 == 1:
                        drawRectBishop_add(56 + 7)
                        self.QueenBlackClicked = 1
                        self.bishopBlack2Clicked = 0
                        self.bishopBlack1Clicked = 0
                        self.rookBlack2Clicked = 0
                        self.rookBlack1Clicked = 0
                        self.KingBlackClicked = 0
                        self.knightBlack1Clicked = 0
                        self.knightBlack2Clicked = 0
                        self.pawnBlack1Clicked = 0
                        self.pawnBlack2Clicked = 0
                        self.pawnBlack3Clicked = 0
                        self.pawnBlack4Clicked = 0
                        self.pawnBlack5Clicked = 0
                        self.pawnBlack6Clicked = 0
                        self.pawnBlack7Clicked = 0
                        self.pawnBlack8Clicked = 0

                if self.Qb.y < self.box57.y and self.Qb.x > self.box1.x:
                    drawRectBishop_add(8 - 1)
                    self.QueenBlackClicked = 1
                    self.bishopBlack2Clicked = 0
                    self.bishopBlack1Clicked = 0
                    self.rookBlack2Clicked = 0
                    self.rookBlack1Clicked = 0
                    self.KingBlackClicked = 0
                    self.knightBlack1Clicked = 0
                    self.knightBlack2Clicked = 0
                    self.pawnBlack1Clicked = 0
                    self.pawnBlack2Clicked = 0
                    self.pawnBlack3Clicked = 0
                    self.pawnBlack4Clicked = 0
                    self.pawnBlack5Clicked = 0
                    self.pawnBlack6Clicked = 0
                    self.pawnBlack7Clicked = 0
                    self.pawnBlack8Clicked = 0
                if self.Qb.y < self.box49.y and self.Qb.x > self.box2.x:
                    if self.QueenBlackClicked_plus8_minus1 == 1:
                        drawRectBishop_add(16 - 2)
                        self.QueenBlackClicked = 1
                        self.bishopBlack2Clicked = 0
                        self.bishopBlack1Clicked = 0
                        self.rookBlack2Clicked = 0
                        self.rookBlack1Clicked = 0
                        self.KingBlackClicked = 0
                        self.knightBlack1Clicked = 0
                        self.knightBlack2Clicked = 0
                        self.pawnBlack1Clicked = 0
                        self.pawnBlack2Clicked = 0
                        self.pawnBlack3Clicked = 0
                        self.pawnBlack4Clicked = 0
                        self.pawnBlack5Clicked = 0
                        self.pawnBlack6Clicked = 0
                        self.pawnBlack7Clicked = 0
                        self.pawnBlack8Clicked = 0
                if self.Qb.y < self.box41.y and self.Qb.x > self.box3.x:
                    if self.QueenBlackClicked_plus8_minus1 == 1 and self.QueenBlackClicked_plus16_minus2 == 1:
                        drawRectBishop_add(24 - 3)
                        self.QueenBlackClicked = 1
                        self.bishopBlack2Clicked = 0
                        self.bishopBlack1Clicked = 0
                        self.rookBlack2Clicked = 0
                        self.rookBlack1Clicked = 0
                        self.KingBlackClicked = 0
                        self.knightBlack1Clicked = 0
                        self.knightBlack2Clicked = 0
                        self.pawnBlack1Clicked = 0
                        self.pawnBlack2Clicked = 0
                        self.pawnBlack3Clicked = 0
                        self.pawnBlack4Clicked = 0
                        self.pawnBlack5Clicked = 0
                        self.pawnBlack6Clicked = 0
                        self.pawnBlack7Clicked = 0
                        self.pawnBlack8Clicked = 0
                if self.Qb.y < self.box33.y and self.Qb.x > self.box4.x:
                    if self.QueenBlackClicked_plus8_minus1 == 1 and self.QueenBlackClicked_plus16_minus2 == 1 and self.QueenBlackClicked_plus24_minus3 == 1:
                        drawRectBishop_add(32 - 4)
                        self.QueenBlackClicked = 1
                        self.bishopBlack2Clicked = 0
                        self.bishopBlack1Clicked = 0
                        self.rookBlack2Clicked = 0
                        self.rookBlack1Clicked = 0
                        self.KingBlackClicked = 0
                        self.knightBlack1Clicked = 0
                        self.knightBlack2Clicked = 0
                        self.pawnBlack1Clicked = 0
                        self.pawnBlack2Clicked = 0
                        self.pawnBlack3Clicked = 0
                        self.pawnBlack4Clicked = 0
                        self.pawnBlack5Clicked = 0
                        self.pawnBlack6Clicked = 0
                        self.pawnBlack7Clicked = 0
                        self.pawnBlack8Clicked = 0
                if self.Qb.y < self.box25.y and self.Qb.x > self.box5.x:
                    if self.QueenBlackClicked_plus8_minus1 == 1 and self.QueenBlackClicked_plus16_minus2 == 1 and self.QueenBlackClicked_plus24_minus3 == 1 and \
                            self.QueenBlackClicked_plus32_minus4 == 1:
                        drawRectBishop_add(40 - 5)
                        self.QueenBlackClicked = 1
                        self.bishopBlack2Clicked = 0
                        self.bishopBlack1Clicked = 0
                        self.rookBlack2Clicked = 0
                        self.rookBlack1Clicked = 0
                        self.KingBlackClicked = 0
                        self.knightBlack1Clicked = 0
                        self.knightBlack2Clicked = 0
                        self.pawnBlack1Clicked = 0
                        self.pawnBlack2Clicked = 0
                        self.pawnBlack3Clicked = 0
                        self.pawnBlack4Clicked = 0
                        self.pawnBlack5Clicked = 0
                        self.pawnBlack6Clicked = 0
                        self.pawnBlack7Clicked = 0
                        self.pawnBlack8Clicked = 0
                if self.Qb.y < self.box17.y and self.Qb.x > self.box6.x:
                    if self.QueenBlackClicked_plus8_minus1 == 1 and self.QueenBlackClicked_plus16_minus2 == 1 and self.QueenBlackClicked_plus24_minus3 == 1 and \
                            self.QueenBlackClicked_plus32_minus4 == 1 and self.QueenBlackClicked_plus40_minus5 == 1:
                        drawRectBishop_add(48 - 6)
                        self.QueenBlackClicked = 1
                        self.bishopBlack2Clicked = 0
                        self.bishopBlack1Clicked = 0
                        self.rookBlack2Clicked = 0
                        self.rookBlack1Clicked = 0
                        self.KingBlackClicked = 0
                        self.knightBlack1Clicked = 0
                        self.knightBlack2Clicked = 0
                        self.pawnBlack1Clicked = 0
                        self.pawnBlack2Clicked = 0
                        self.pawnBlack3Clicked = 0
                        self.pawnBlack4Clicked = 0
                        self.pawnBlack5Clicked = 0
                        self.pawnBlack6Clicked = 0
                        self.pawnBlack7Clicked = 0
                        self.pawnBlack8Clicked = 0
                if self.Qb.y < self.box9.y and self.Qb.x > self.box7.x:
                    if self.QueenBlackClicked_plus8_minus1 == 1 and self.QueenBlackClicked_plus16_minus2 == 1 and self.QueenBlackClicked_plus24_minus3 == 1 and \
                            self.QueenBlackClicked_plus32_minus4 == 1 and self.QueenBlackClicked_plus40_minus5 == 1 and self.QueenBlackClicked_plus48_minus6 == 1:
                        drawRectBishop_add(56 - 7)
                        self.QueenBlackClicked = 1
                        self.bishopBlack2Clicked = 0
                        self.bishopBlack1Clicked = 0
                        self.rookBlack2Clicked = 0
                        self.rookBlack1Clicked = 0
                        self.KingBlackClicked = 0
                        self.knightBlack1Clicked = 0
                        self.knightBlack2Clicked = 0
                        self.pawnBlack1Clicked = 0
                        self.pawnBlack2Clicked = 0
                        self.pawnBlack3Clicked = 0
                        self.pawnBlack4Clicked = 0
                        self.pawnBlack5Clicked = 0
                        self.pawnBlack6Clicked = 0
                        self.pawnBlack7Clicked = 0
                        self.pawnBlack8Clicked = 0

                if self.Qb.y > self.box1.y and self.Qb.x < self.box8.x:
                    drawRectBishop_add(-8 + 1)
                    self.QueenBlackClicked = 1
                    self.bishopBlack2Clicked = 0
                    self.bishopBlack1Clicked = 0
                    self.rookBlack2Clicked = 0
                    self.rookBlack1Clicked = 0
                    self.KingBlackClicked = 0
                    self.knightBlack1Clicked = 0
                    self.knightBlack2Clicked = 0
                    self.pawnBlack1Clicked = 0
                    self.pawnBlack2Clicked = 0
                    self.pawnBlack3Clicked = 0
                    self.pawnBlack4Clicked = 0
                    self.pawnBlack5Clicked = 0
                    self.pawnBlack6Clicked = 0
                    self.pawnBlack7Clicked = 0
                    self.pawnBlack8Clicked = 0
                if self.Qb.y > self.box9.y and self.Qb.x < self.box7.x:
                    if self.QueenBlackClicked_minus8_plus1 == 1:
                        drawRectBishop_add(-16 + 2)
                        self.QueenBlackClicked = 1
                        self.bishopBlack2Clicked = 0
                        self.bishopBlack1Clicked = 0
                        self.rookBlack2Clicked = 0
                        self.rookBlack1Clicked = 0
                        self.KingBlackClicked = 0
                        self.knightBlack1Clicked = 0
                        self.knightBlack2Clicked = 0
                        self.pawnBlack1Clicked = 0
                        self.pawnBlack2Clicked = 0
                        self.pawnBlack3Clicked = 0
                        self.pawnBlack4Clicked = 0
                        self.pawnBlack5Clicked = 0
                        self.pawnBlack6Clicked = 0
                        self.pawnBlack7Clicked = 0
                        self.pawnBlack8Clicked = 0
                if self.Qb.y > self.box17.y and self.Qb.x < self.box6.x:
                    if self.QueenBlackClicked_minus8_plus1 == 1 and self.QueenBlackClicked_minus16_plus2 == 1:
                        drawRectBishop_add(-24 + 3)
                        self.QueenBlackClicked = 1
                        self.bishopBlack2Clicked = 0
                        self.bishopBlack1Clicked = 0
                        self.rookBlack2Clicked = 0
                        self.rookBlack1Clicked = 0
                        self.KingBlackClicked = 0
                        self.knightBlack1Clicked = 0
                        self.knightBlack2Clicked = 0
                        self.pawnBlack1Clicked = 0
                        self.pawnBlack2Clicked = 0
                        self.pawnBlack3Clicked = 0
                        self.pawnBlack4Clicked = 0
                        self.pawnBlack5Clicked = 0
                        self.pawnBlack6Clicked = 0
                        self.pawnBlack7Clicked = 0
                        self.pawnBlack8Clicked = 0
                if self.Qb.y > self.box25.y and self.Qb.x < self.box5.x:
                    if self.QueenBlackClicked_minus8_plus1 == 1 and self.QueenBlackClicked_minus16_plus2 == 1 and self.QueenBlackClicked_minus24_plus3 == 1:
                        drawRectBishop_add(-32 + 4)
                        self.QueenBlackClicked = 1
                        self.bishopBlack2Clicked = 0
                        self.bishopBlack1Clicked = 0
                        self.rookBlack2Clicked = 0
                        self.rookBlack1Clicked = 0
                        self.KingBlackClicked = 0
                        self.knightBlack1Clicked = 0
                        self.knightBlack2Clicked = 0
                        self.pawnBlack1Clicked = 0
                        self.pawnBlack2Clicked = 0
                        self.pawnBlack3Clicked = 0
                        self.pawnBlack4Clicked = 0
                        self.pawnBlack5Clicked = 0
                        self.pawnBlack6Clicked = 0
                        self.pawnBlack7Clicked = 0
                        self.pawnBlack8Clicked = 0
                if self.Qb.y > self.box33.y and self.Qb.x < self.box4.x:
                    if self.QueenBlackClicked_minus8_plus1 == 1 and self.QueenBlackClicked_minus16_plus2 == 1 and self.QueenBlackClicked_minus24_plus3 == 1 and \
                            self.QueenBlackClicked_minus32_plus4 == 1:
                        drawRectBishop_add(-40 + 5)
                        self.QueenBlackClicked = 1
                        self.bishopBlack2Clicked = 0
                        self.bishopBlack1Clicked = 0
                        self.rookBlack2Clicked = 0
                        self.rookBlack1Clicked = 0
                        self.KingBlackClicked = 0
                        self.knightBlack1Clicked = 0
                        self.knightBlack2Clicked = 0
                        self.pawnBlack1Clicked = 0
                        self.pawnBlack2Clicked = 0
                        self.pawnBlack3Clicked = 0
                        self.pawnBlack4Clicked = 0
                        self.pawnBlack5Clicked = 0
                        self.pawnBlack6Clicked = 0
                        self.pawnBlack7Clicked = 0
                        self.pawnBlack8Clicked = 0
                if self.Qb.y > self.box41.y and self.Qb.x < self.box3.x:
                    if self.QueenBlackClicked_minus8_plus1 == 1 and self.QueenBlackClicked_minus16_plus2 == 1 and self.QueenBlackClicked_minus24_plus3 == 1 and \
                            self.QueenBlackClicked_minus32_plus4 == 1 and self.QueenBlackClicked_minus40_plus5 == 1:
                        drawRectBishop_add(-48 + 6)
                        self.QueenBlackClicked = 1
                        self.bishopBlack2Clicked = 0
                        self.bishopBlack1Clicked = 0
                        self.rookBlack2Clicked = 0
                        self.rookBlack1Clicked = 0
                        self.KingBlackClicked = 0
                        self.knightBlack1Clicked = 0
                        self.knightBlack2Clicked = 0
                        self.pawnBlack1Clicked = 0
                        self.pawnBlack2Clicked = 0
                        self.pawnBlack3Clicked = 0
                        self.pawnBlack4Clicked = 0
                        self.pawnBlack5Clicked = 0
                        self.pawnBlack6Clicked = 0
                        self.pawnBlack7Clicked = 0
                        self.pawnBlack8Clicked = 0
                if self.Qb.y > self.box49.y and self.Qb.x < self.box2.x:
                    if self.QueenBlackClicked_minus8_plus1 == 1 and self.QueenBlackClicked_minus16_plus2 == 1 and self.QueenBlackClicked_minus24_plus3 == 1 and \
                            self.QueenBlackClicked_minus32_plus4 == 1 and self.QueenBlackClicked_minus40_plus5 == 1 and self.QueenBlackClicked_minus48_plus6 == 1:
                        drawRectBishop_add(-56 + 7)
                        self.QueenBlackClicked = 1
                        self.bishopBlack2Clicked = 0
                        self.bishopBlack1Clicked = 0
                        self.rookBlack2Clicked = 0
                        self.rookBlack1Clicked = 0
                        self.KingBlackClicked = 0
                        self.knightBlack1Clicked = 0
                        self.knightBlack2Clicked = 0
                        self.pawnBlack1Clicked = 0
                        self.pawnBlack2Clicked = 0
                        self.pawnBlack3Clicked = 0
                        self.pawnBlack4Clicked = 0
                        self.pawnBlack5Clicked = 0
                        self.pawnBlack6Clicked = 0
                        self.pawnBlack7Clicked = 0
                        self.pawnBlack8Clicked = 0

                if self.Qb.y > self.box1.y and self.Qb.x > self.box1.x:
                    drawRectBishop_add(-8 - 1)
                    self.QueenBlackClicked = 1
                    self.bishopBlack2Clicked = 0
                    self.bishopBlack1Clicked = 0
                    self.rookBlack2Clicked = 0
                    self.rookBlack1Clicked = 0
                    self.KingBlackClicked = 0
                    self.knightBlack1Clicked = 0
                    self.knightBlack2Clicked = 0
                    self.pawnBlack1Clicked = 0
                    self.pawnBlack2Clicked = 0
                    self.pawnBlack3Clicked = 0
                    self.pawnBlack4Clicked = 0
                    self.pawnBlack5Clicked = 0
                    self.pawnBlack6Clicked = 0
                    self.pawnBlack7Clicked = 0
                    self.pawnBlack8Clicked = 0
                if self.Qb.y > self.box9.y and self.Qb.x > self.box2.x:
                    if self.QueenBlackClicked_minus8_minus1 == 1:
                        drawRectBishop_add(-16 - 2)
                        self.QueenBlackClicked = 1
                        self.bishopBlack2Clicked = 0
                        self.bishopBlack1Clicked = 0
                        self.rookBlack2Clicked = 0
                        self.rookBlack1Clicked = 0
                        self.KingBlackClicked = 0
                        self.knightBlack1Clicked = 0
                        self.knightBlack2Clicked = 0
                        self.pawnBlack1Clicked = 0
                        self.pawnBlack2Clicked = 0
                        self.pawnBlack3Clicked = 0
                        self.pawnBlack4Clicked = 0
                        self.pawnBlack5Clicked = 0
                        self.pawnBlack6Clicked = 0
                        self.pawnBlack7Clicked = 0
                        self.pawnBlack8Clicked = 0
                if self.Qb.y > self.box17.y and self.Qb.x > self.box3.x:
                    if self.QueenBlackClicked_minus8_minus1 == 1 and self.QueenBlackClicked_minus16_minus2 == 1:
                        drawRectBishop_add(-24 - 3)
                        self.QueenBlackClicked = 1
                        self.bishopBlack2Clicked = 0
                        self.bishopBlack1Clicked = 0
                        self.rookBlack2Clicked = 0
                        self.rookBlack1Clicked = 0
                        self.KingBlackClicked = 0
                        self.knightBlack1Clicked = 0
                        self.knightBlack2Clicked = 0
                        self.pawnBlack1Clicked = 0
                        self.pawnBlack2Clicked = 0
                        self.pawnBlack3Clicked = 0
                        self.pawnBlack4Clicked = 0
                        self.pawnBlack5Clicked = 0
                        self.pawnBlack6Clicked = 0
                        self.pawnBlack7Clicked = 0
                        self.pawnBlack8Clicked = 0
                if self.Qb.y > self.box25.y and self.Qb.x > self.box4.x:
                    if self.QueenBlackClicked_minus8_minus1 == 1 and self.QueenBlackClicked_minus16_minus2 == 1 and self.QueenBlackClicked_minus24_minus3 == 1:
                        drawRectBishop_add(-32 - 4)
                        self.QueenBlackClicked = 1
                        self.bishopBlack2Clicked = 0
                        self.bishopBlack1Clicked = 0
                        self.rookBlack2Clicked = 0
                        self.rookBlack1Clicked = 0
                        self.KingBlackClicked = 0
                        self.knightBlack1Clicked = 0
                        self.knightBlack2Clicked = 0
                        self.pawnBlack1Clicked = 0
                        self.pawnBlack2Clicked = 0
                        self.pawnBlack3Clicked = 0
                        self.pawnBlack4Clicked = 0
                        self.pawnBlack5Clicked = 0
                        self.pawnBlack6Clicked = 0
                        self.pawnBlack7Clicked = 0
                        self.pawnBlack8Clicked = 0
                if self.Qb.y > self.box33.y and self.Qb.x > self.box5.x:
                    if self.QueenBlackClicked_minus8_minus1 == 1 and self.QueenBlackClicked_minus16_minus2 == 1 and self.QueenBlackClicked_minus24_minus3 == 1 and \
                            self.QueenBlackClicked_minus32_minus4 == 1:
                        drawRectBishop_add(-40 - 5)
                        self.QueenBlackClicked = 1
                        self.bishopBlack2Clicked = 0
                        self.bishopBlack1Clicked = 0
                        self.rookBlack2Clicked = 0
                        self.rookBlack1Clicked = 0
                        self.KingBlackClicked = 0
                        self.knightBlack1Clicked = 0
                        self.knightBlack2Clicked = 0
                        self.pawnBlack1Clicked = 0
                        self.pawnBlack2Clicked = 0
                        self.pawnBlack3Clicked = 0
                        self.pawnBlack4Clicked = 0
                        self.pawnBlack5Clicked = 0
                        self.pawnBlack6Clicked = 0
                        self.pawnBlack7Clicked = 0
                        self.pawnBlack8Clicked = 0
                if self.Qb.y > self.box41.y and self.Qb.x > self.box6.x:
                    if self.QueenBlackClicked_minus8_minus1 == 1 and self.QueenBlackClicked_minus16_minus2 == 1 and self.QueenBlackClicked_minus24_minus3 == 1 and \
                            self.QueenBlackClicked_minus32_minus4 == 1 and self.QueenBlackClicked_minus40_minus5 == 1:
                        drawRectBishop_add(-48 - 6)
                        self.QueenBlackClicked = 1
                        self.bishopBlack2Clicked = 0
                        self.bishopBlack1Clicked = 0
                        self.rookBlack2Clicked = 0
                        self.rookBlack1Clicked = 0
                        self.KingBlackClicked = 0
                        self.knightBlack1Clicked = 0
                        self.knightBlack2Clicked = 0
                        self.pawnBlack1Clicked = 0
                        self.pawnBlack2Clicked = 0
                        self.pawnBlack3Clicked = 0
                        self.pawnBlack4Clicked = 0
                        self.pawnBlack5Clicked = 0
                        self.pawnBlack6Clicked = 0
                        self.pawnBlack7Clicked = 0
                        self.pawnBlack8Clicked = 0
                if self.Qb.y > self.box49.y and self.Qb.x > self.box7.x:
                    if self.QueenBlackClicked_minus8_minus1 == 1 and self.QueenBlackClicked_minus16_minus2 == 1 and self.QueenBlackClicked_minus24_minus3 == 1 and \
                            self.QueenBlackClicked_minus32_minus4 == 1 and self.QueenBlackClicked_minus40_minus5 == 1 and self.QueenBlackClicked_minus48_minus6 == 1:
                        drawRectBishop_add(-56 - 7)
                        self.QueenBlackClicked = 1
                        self.bishopBlack2Clicked = 0
                        self.bishopBlack1Clicked = 0
                        self.rookBlack2Clicked = 0
                        self.rookBlack1Clicked = 0
                        self.KingBlackClicked = 0
                        self.knightBlack1Clicked = 0
                        self.knightBlack2Clicked = 0
                        self.pawnBlack1Clicked = 0
                        self.pawnBlack2Clicked = 0
                        self.pawnBlack3Clicked = 0
                        self.pawnBlack4Clicked = 0
                        self.pawnBlack5Clicked = 0
                        self.pawnBlack6Clicked = 0
                        self.pawnBlack7Clicked = 0
                        self.pawnBlack8Clicked = 0

                # check if white pieces can be cut or not
                if self.Qb.y < self.box57.y and self.Qb.x < self.box8.x:
                    check(8 + 1)
                if self.Qb.y < self.box49.y and self.Qb.x < self.box7.x:
                    if self.QueenBlackClicked_plus8_plus1 == 1:
                        check(16 + 2)
                if self.Qb.y < self.box41.y and self.Qb.x < self.box6.x:
                    if self.QueenBlackClicked_plus8_plus1 == 1 and self.QueenBlackClicked_plus16_plus2 == 1:
                        check(24 + 3)
                if self.Qb.y < self.box33.y and self.Qb.x < self.box5.x:
                    if self.QueenBlackClicked_plus8_plus1 == 1 and self.QueenBlackClicked_plus16_plus2 == 1 and self.QueenBlackClicked_plus24_plus3 == 1:
                        check(32 + 4)
                if self.Qb.y < self.box25.y and self.Qb.x < self.box4.x:
                    if self.QueenBlackClicked_plus8_plus1 == 1 and self.QueenBlackClicked_plus16_plus2 == 1 and self.QueenBlackClicked_plus24_plus3 == 1 and \
                            self.QueenBlackClicked_plus32_plus4 == 1:
                        check(40 + 5)
                if self.Qb.y < self.box17.y and self.Qb.x < self.box3.x:
                    if self.QueenBlackClicked_plus8_plus1 == 1 and self.QueenBlackClicked_plus16_plus2 == 1 and self.QueenBlackClicked_plus24_plus3 == 1 and \
                            self.QueenBlackClicked_plus32_plus4 == 1 and self.QueenBlackClicked_plus40_plus5 == 1:
                        check(48 + 6)
                if self.Qb.y < self.box9.y and self.Qb.x < self.box2.x:
                    if self.QueenBlackClicked_plus8_plus1 == 1 and self.QueenBlackClicked_plus16_plus2 == 1 and self.QueenBlackClicked_plus24_plus3 == 1 and \
                            self.QueenBlackClicked_plus32_plus4 == 1 and self.QueenBlackClicked_plus40_plus5 == 1 and self.QueenBlackClicked_plus48_plus6 == 1:
                        check(56 + 7)

                if self.Qb.y < self.box57.y and self.Qb.x > self.box1.x:
                    check(8 - 1)
                if self.Qb.y < self.box49.y and self.Qb.x > self.box2.x:
                    if self.QueenBlackClicked_plus8_minus1 == 1:
                        check(16 - 2)
                if self.Qb.y < self.box41.y and self.Qb.x > self.box3.x:
                    if self.QueenBlackClicked_plus8_minus1 == 1 and self.QueenBlackClicked_plus16_minus2 == 1:
                        check(24 - 3)
                if self.Qb.y < self.box33.y and self.Qb.x > self.box4.x:
                    if self.QueenBlackClicked_plus8_minus1 == 1 and self.QueenBlackClicked_plus16_minus2 == 1 and self.QueenBlackClicked_plus24_minus3 == 1:
                        check(32 - 4)
                if self.Qb.y < self.box25.y and self.Qb.x > self.box5.x:
                    if self.QueenBlackClicked_plus8_minus1 == 1 and self.QueenBlackClicked_plus16_minus2 == 1 and self.QueenBlackClicked_plus24_minus3 == 1 and \
                            self.QueenBlackClicked_plus32_minus4 == 1:
                        check(40 - 5)
                if self.Qb.y < self.box17.y and self.Qb.x > self.box6.x:
                    if self.QueenBlackClicked_plus8_minus1 == 1 and self.QueenBlackClicked_plus16_minus2 == 1 and self.QueenBlackClicked_plus24_minus3 == 1 and \
                            self.QueenBlackClicked_plus32_minus4 == 1 and self.QueenBlackClicked_plus40_minus5 == 1:
                        check(48 - 6)
                if self.Qb.y < self.box9.y and self.Qb.x > self.box7.x:
                    if self.QueenBlackClicked_plus8_minus1 == 1 and self.QueenBlackClicked_plus16_minus2 == 1 and self.QueenBlackClicked_plus24_minus3 == 1 and \
                            self.QueenBlackClicked_plus32_minus4 == 1 and self.QueenBlackClicked_plus40_minus5 == 1 and self.QueenBlackClicked_plus48_minus6 == 1:
                        check(56 - 7)

                if self.Qb.y > self.box1.y and self.Qb.x < self.box8.x:
                    check(-8 + 1)
                if self.Qb.y > self.box9.y and self.Qb.x < self.box7.x:
                    if self.QueenBlackClicked_minus8_plus1 == 1:
                        check(-16 + 2)
                if self.Qb.y > self.box17.y and self.Qb.x < self.box6.x:
                    if self.QueenBlackClicked_minus8_plus1 == 1 and self.QueenBlackClicked_minus16_plus2 == 1:
                        check(-24 + 3)
                if self.Qb.y > self.box25.y and self.Qb.x < self.box5.x:
                    if self.QueenBlackClicked_minus8_plus1 == 1 and self.QueenBlackClicked_minus16_plus2 == 1 and self.QueenBlackClicked_minus24_plus3 == 1:
                        check(-32 + 4)
                if self.Qb.y > self.box33.y and self.Qb.x < self.box4.x:
                    if self.QueenBlackClicked_minus8_plus1 == 1 and self.QueenBlackClicked_minus16_plus2 == 1 and self.QueenBlackClicked_minus24_plus3 == 1 and \
                            self.QueenBlackClicked_minus32_plus4 == 1:
                        check(-40 + 5)
                if self.Qb.y > self.box41.y and self.Qb.x < self.box3.x:
                    if self.QueenBlackClicked_minus8_plus1 == 1 and self.QueenBlackClicked_minus16_plus2 == 1 and self.QueenBlackClicked_minus24_plus3 == 1 and \
                            self.QueenBlackClicked_minus32_plus4 == 1 and self.QueenBlackClicked_minus40_plus5 == 1:
                        check(-48 + 6)
                if self.Qb.y > self.box49.y and self.Qb.x < self.box2.x:
                    if self.QueenBlackClicked_minus8_plus1 == 1 and self.QueenBlackClicked_minus16_plus2 == 1 and self.QueenBlackClicked_minus24_plus3 == 1 and \
                            self.QueenBlackClicked_minus32_plus4 == 1 and self.QueenBlackClicked_minus40_plus5 == 1 and self.QueenBlackClicked_minus48_plus6 == 1:
                        check(-56 + 7)

                if self.Qb.y > self.box1.y and self.Qb.x > self.box1.x:
                    check(-8 - 1)
                if self.Qb.y > self.box9.y and self.Qb.x > self.box2.x:
                    if self.QueenBlackClicked_minus8_minus1 == 1:
                        check(-16 - 2)
                if self.Qb.y > self.box17.y and self.Qb.x > self.box3.x:
                    if self.QueenBlackClicked_minus8_minus1 == 1 and self.QueenBlackClicked_minus16_minus2 == 1:
                        check(-24 - 3)
                if self.Qb.y > self.box25.y and self.Qb.x > self.box4.x:
                    if self.QueenBlackClicked_minus8_minus1 == 1 and self.QueenBlackClicked_minus16_minus2 == 1 and self.QueenBlackClicked_minus24_minus3 == 1:
                        check(-32 - 4)
                if self.Qb.y > self.box33.y and self.Qb.x > self.box5.x:
                    if self.QueenBlackClicked_minus8_minus1 == 1 and self.QueenBlackClicked_minus16_minus2 == 1 and self.QueenBlackClicked_minus24_minus3 == 1 and \
                            self.QueenBlackClicked_minus32_minus4 == 1:
                        check(-40 - 5)
                if self.Qb.y > self.box41.y and self.Qb.x > self.box6.x:
                    if self.QueenBlackClicked_minus8_minus1 == 1 and self.QueenBlackClicked_minus16_minus2 == 1 and self.QueenBlackClicked_minus24_minus3 == 1 and \
                            self.QueenBlackClicked_minus32_minus4 == 1 and self.QueenBlackClicked_minus40_minus5 == 1:
                        check(-48 - 6)
                if self.Qb.y > self.box49.y and self.Qb.x > self.box7.x:
                    if self.QueenBlackClicked_minus8_minus1 == 1 and self.QueenBlackClicked_minus16_minus2 == 1 and self.QueenBlackClicked_minus24_minus3 == 1 and \
                            self.QueenBlackClicked_minus32_minus4 == 1 and self.QueenBlackClicked_minus40_minus5 == 1 and self.QueenBlackClicked_minus48_minus6 == 1:
                        check(-56 - 7)

        # move the queen
        if self.QueenBlackClicked == 1:
            # cut the pieces
            if self.QueenBlackClicked_cut == 1:
                # along y-axis
                if self.Qb.y < self.box57.y:
                    removeWhitePiece_add(8)
                if self.Qb.y < self.box49.y:
                    removeWhitePiece_add(16)
                if self.Qb.y < self.box41.y:
                    removeWhitePiece_add(24)
                if self.Qb.y < self.box33.y:
                    removeWhitePiece_add(32)
                if self.Qb.y < self.box25.y:
                    removeWhitePiece_add(40)
                if self.Qb.y < self.box17.y:
                    removeWhitePiece_add(48)
                if self.Qb.y < self.box9.y:
                    removeWhitePiece_add(56)

                if self.Qb.y > self.box1.y:
                    removeWhitePiece_sub(8)
                if self.Qb.y > self.box9.y:
                    removeWhitePiece_sub(16)
                if self.Qb.y > self.box17.y:
                    removeWhitePiece_sub(24)
                if self.Qb.y > self.box25.y:
                    removeWhitePiece_sub(32)
                if self.Qb.y > self.box33.y:
                    removeWhitePiece_sub(40)
                if self.Qb.y > self.box41.y:
                    removeWhitePiece_sub(48)
                if self.Qb.y > self.box49.y:
                    removeWhitePiece_sub(56)

                # along x-axis
                if self.Qb.x < self.box8.x:
                    removeWhitePiece_add(1)
                if self.Qb.x < self.box7.x:
                    removeWhitePiece_add(2)
                if self.Qb.x < self.box6.x:
                    removeWhitePiece_add(3)
                if self.Qb.x < self.box5.x:
                    removeWhitePiece_add(4)
                if self.Qb.x < self.box4.x:
                    removeWhitePiece_add(5)
                if self.Qb.x < self.box3.x:
                    removeWhitePiece_add(6)
                if self.Qb.x < self.box2.x:
                    removeWhitePiece_add(7)

                if self.Qb.x > self.box1.x:
                    removeWhitePiece_sub(1)
                if self.Qb.x > self.box2.x:
                    removeWhitePiece_sub(2)
                if self.Qb.x > self.box3.x:
                    removeWhitePiece_sub(3)
                if self.Qb.x > self.box4.x:
                    removeWhitePiece_sub(4)
                if self.Qb.x > self.box5.x:
                    removeWhitePiece_sub(5)
                if self.Qb.x > self.box6.x:
                    removeWhitePiece_sub(6)
                if self.Qb.x > self.box7.x:
                    removeWhitePiece_sub(7)

                if self.Qb.y < self.box57.y and self.Qb.x < self.box8.x:
                    remove(8 + 1)
                if self.Qb.y < self.box49.y and self.Qb.x < self.box7.x:
                    remove(16 + 2)
                if self.Qb.y < self.box41.y and self.Qb.x < self.box6.x:
                    remove(24 + 3)
                if self.Qb.y < self.box33.y and self.Qb.x < self.box5.x:
                    remove(32 + 4)
                if self.Qb.y < self.box25.y and self.Qb.x < self.box4.x:
                    remove(40 + 5)
                if self.Qb.y < self.box17.y and self.Qb.x < self.box3.x:
                    remove(48 + 6)
                if self.Qb.y < self.box9.y and self.Qb.x < self.box2.x:
                    remove(56 + 7)

                if self.Qb.y < self.box57.y and self.Qb.x > self.box1.x:
                    remove(8 - 1)
                if self.Qb.y < self.box49.y and self.Qb.x > self.box2.x:
                    remove(16 - 2)
                if self.Qb.y < self.box41.y and self.Qb.x > self.box3.x:
                    remove(24 - 3)
                if self.Qb.y < self.box33.y and self.Qb.x > self.box4.x:
                    remove(32 - 4)
                if self.Qb.y < self.box25.y and self.Qb.x > self.box5.x:
                    remove(40 - 5)
                if self.Qb.y < self.box17.y and self.Qb.x > self.box6.x:
                    remove(48 - 6)
                if self.Qb.y < self.box9.y and self.Qb.x > self.box7.x:
                    remove(56 - 7)

                if self.Qb.y > self.box1.y and self.Qb.x < self.box8.x:
                    remove(-8 + 1)
                if self.Qb.y > self.box9.y and self.Qb.x < self.box7.x:
                    remove(-16 + 2)
                if self.Qb.y > self.box17.y and self.Qb.x < self.box6.x:
                    remove(-24 + 3)
                if self.Qb.y > self.box25.y and self.Qb.x < self.box5.x:
                    remove(-32 + 4)
                if self.Qb.y > self.box33.y and self.Qb.x < self.box4.x:
                    remove(-40 + 5)
                if self.Qb.y > self.box41.y and self.Qb.x < self.box3.x:
                    remove(-48 + 6)
                if self.Qb.y > self.box49.y and self.Qb.x < self.box2.x:
                    remove(-56 + 7)

                if self.Qb.y > self.box1.y and self.Qb.x > self.box1.x:
                    remove(-8 - 1)
                if self.Qb.y > self.box9.y and self.Qb.x > self.box2.x:
                    remove(-16 - 2)
                if self.Qb.y > self.box17.y and self.Qb.x > self.box3.x:
                    remove(-24 - 3)
                if self.Qb.y > self.box25.y and self.Qb.x > self.box4.x:
                    remove(-32 - 4)
                if self.Qb.y > self.box33.y and self.Qb.x > self.box5.x:
                    remove(-40 - 5)
                if self.Qb.y > self.box41.y and self.Qb.x > self.box6.x:
                    remove(-48 - 6)
                if self.Qb.y > self.box49.y and self.Qb.x > self.box7.x:
                    remove(-56 - 7)

            if self.Qb.y < self.box57.y and self.Qb.x < self.box8.x:
                if self.boxLst[self.boxLst.index(self.Qb) + 8 + 1].collidepoint(self.mouse_x, self.mouse_y):
                    self.Qb = self.boxLst[self.boxLst.index(self.Qb) + 8 + 1]
                    self.QueenBlackClicked = 0
                    self.turn = "white"
            if self.Qb.y < self.box49.y and self.Qb.x < self.box7.x:
                if self.boxLst[self.boxLst.index(self.Qb) + 16 + 2].collidepoint(self.mouse_x, self.mouse_y):
                    self.Qb = self.boxLst[self.boxLst.index(self.Qb) + 16 + 2]
                    self.QueenBlackClicked = 0
                    self.turn = "white"
            if self.Qb.y < self.box41.y and self.Qb.x < self.box6.x:
                if self.boxLst[self.boxLst.index(self.Qb) + 24 + 3].collidepoint(self.mouse_x, self.mouse_y):
                    self.Qb = self.boxLst[self.boxLst.index(self.Qb) + 24 + 3]
                    self.QueenBlackClicked = 0
                    self.turn = "white"
            if self.Qb.y < self.box33.y and self.Qb.x < self.box5.x:
                if self.boxLst[self.boxLst.index(self.Qb) + 32 + 4].collidepoint(self.mouse_x, self.mouse_y):
                    self.Qb = self.boxLst[self.boxLst.index(self.Qb) + 32 + 4]
                    self.QueenBlackClicked = 0
                    self.turn = "white"
            if self.Qb.y < self.box25.y and self.Qb.x < self.box4.x:
                if self.boxLst[self.boxLst.index(self.Qb) + 40 + 5].collidepoint(self.mouse_x, self.mouse_y):
                    self.Qb = self.boxLst[self.boxLst.index(self.Qb) + 40 + 5]
                    self.QueenBlackClicked = 0
                    self.turn = "white"
            if self.Qb.y < self.box17.y and self.Qb.x < self.box3.x:
                if self.boxLst[self.boxLst.index(self.Qb) + 48 + 6].collidepoint(self.mouse_x, self.mouse_y):
                    self.Qb = self.boxLst[self.boxLst.index(self.Qb) + 48 + 6]
                    self.QueenBlackClicked = 0
                    self.turn = "white"
            if self.Qb.y < self.box9.y and self.Qb.x < self.box2.x:
                if self.boxLst[self.boxLst.index(self.Qb) + 56 + 7].collidepoint(self.mouse_x, self.mouse_y):
                    self.Qb = self.boxLst[self.boxLst.index(self.Qb) + 56 + 7]
                    self.QueenBlackClicked = 0
                    self.turn = "white"

            if self.Qb.y < self.box57.y and self.Qb.x > self.box1.x:
                if self.boxLst[self.boxLst.index(self.Qb) + 8 - 1].collidepoint(self.mouse_x, self.mouse_y):
                    self.Qb = self.boxLst[self.boxLst.index(self.Qb) + 8 - 1]
                    self.QueenBlackClicked = 0
                    self.turn = "white"
            if self.Qb.y < self.box49.y and self.Qb.x > self.box2.x:
                if self.boxLst[self.boxLst.index(self.Qb) + 16 - 2].collidepoint(self.mouse_x, self.mouse_y):
                    self.Qb = self.boxLst[self.boxLst.index(self.Qb) + 16 - 2]
                    self.QueenBlackClicked = 0
                    self.turn = "white"
            if self.Qb.y < self.box41.y and self.Qb.x > self.box3.x:
                if self.boxLst[self.boxLst.index(self.Qb) + 24 - 3].collidepoint(self.mouse_x, self.mouse_y):
                    self.Qb = self.boxLst[self.boxLst.index(self.Qb) + 24 - 3]
                    self.QueenBlackClicked = 0
                    self.turn = "white"
            if self.Qb.y < self.box33.y and self.Qb.x > self.box4.x:
                if self.boxLst[self.boxLst.index(self.Qb) + 32 - 4].collidepoint(self.mouse_x, self.mouse_y):
                    self.Qb = self.boxLst[self.boxLst.index(self.Qb) + 32 - 4]
                    self.QueenBlackClicked = 0
                    self.turn = "white"
            if self.Qb.y < self.box25.y and self.Qb.x > self.box5.x:
                if self.boxLst[self.boxLst.index(self.Qb) + 40 - 5].collidepoint(self.mouse_x, self.mouse_y):
                    self.Qb = self.boxLst[self.boxLst.index(self.Qb) + 40 - 5]
                    self.QueenBlackClicked = 0
                    self.turn = "white"
            if self.Qb.y < self.box17.y and self.Qb.x > self.box6.x:
                if self.boxLst[self.boxLst.index(self.Qb) + 48 - 6].collidepoint(self.mouse_x, self.mouse_y):
                    self.Qb = self.boxLst[self.boxLst.index(self.Qb) + 48 - 6]
                    self.QueenBlackClicked = 0
                    self.turn = "white"
            if self.Qb.y < self.box9.y and self.Qb.x > self.box7.x:
                if self.boxLst[self.boxLst.index(self.Qb) + 56 - 7].collidepoint(self.mouse_x, self.mouse_y):
                    self.Qb = self.boxLst[self.boxLst.index(self.Qb) + 56 - 7]
                    self.QueenBlackClicked = 0
                    self.turn = "white"

            if self.Qb.y > self.box1.y and self.Qb.x < self.box8.x:
                if self.boxLst[self.boxLst.index(self.Qb) - 8 + 1].collidepoint(self.mouse_x, self.mouse_y):
                    self.Qb = self.boxLst[self.boxLst.index(self.Qb) - 8 + 1]
                    self.QueenBlackClicked = 0
                    self.turn = "white"
            if self.Qb.y > self.box9.y and self.Qb.x < self.box7.x:
                if self.boxLst[self.boxLst.index(self.Qb) - 16 + 2].collidepoint(self.mouse_x, self.mouse_y):
                    self.Qb = self.boxLst[self.boxLst.index(self.Qb) - 16 + 2]
                    self.QueenBlackClicked = 0
                    self.turn = "white"
            if self.Qb.y > self.box17.y and self.Qb.x < self.box6.x:
                if self.boxLst[self.boxLst.index(self.Qb) - 24 + 3].collidepoint(self.mouse_x, self.mouse_y):
                    self.Qb = self.boxLst[self.boxLst.index(self.Qb) - 24 + 3]
                    self.QueenBlackClicked = 0
                    self.turn = "white"
            if self.Qb.y > self.box25.y and self.Qb.x < self.box5.x:
                if self.boxLst[self.boxLst.index(self.Qb) - 32 + 4].collidepoint(self.mouse_x, self.mouse_y):
                    self.Qb = self.boxLst[self.boxLst.index(self.Qb) - 32 + 4]
                    self.QueenBlackClicked = 0
                    self.turn = "white"
            if self.Qb.y > self.box33.y and self.Qb.x < self.box4.x:
                if self.boxLst[self.boxLst.index(self.Qb) - 40 + 5].collidepoint(self.mouse_x, self.mouse_y):
                    self.Qb = self.boxLst[self.boxLst.index(self.Qb) - 40 + 5]
                    self.QueenBlackClicked = 0
                    self.turn = "white"
            if self.Qb.y > self.box41.y and self.Qb.x < self.box3.x:
                if self.boxLst[self.boxLst.index(self.Qb) - 48 + 6].collidepoint(self.mouse_x, self.mouse_y):
                    self.Qb = self.boxLst[self.boxLst.index(self.Qb) - 48 + 6]
                    self.QueenBlackClicked = 0
                    self.turn = "white"
            if self.Qb.y > self.box49.y and self.Qb.x < self.box2.x:
                if self.boxLst[self.boxLst.index(self.Qb) - 56 + 7].collidepoint(self.mouse_x, self.mouse_y):
                    self.Qb = self.boxLst[self.boxLst.index(self.Qb) - 56 + 7]
                    self.QueenBlackClicked = 0
                    self.turn = "white"

            if self.Qb.y > self.box1.y and self.Qb.x > self.box1.x:
                if self.boxLst[self.boxLst.index(self.Qb) - 8 - 1].collidepoint(self.mouse_x, self.mouse_y):
                    self.Qb = self.boxLst[self.boxLst.index(self.Qb) - 8 - 1]
                    self.QueenBlackClicked = 0
                    self.turn = "white"
            if self.Qb.y > self.box9.y and self.Qb.x > self.box2.x:
                if self.boxLst[self.boxLst.index(self.Qb) - 16 - 2].collidepoint(self.mouse_x, self.mouse_y):
                    self.Qb = self.boxLst[self.boxLst.index(self.Qb) - 16 - 2]
                    self.QueenBlackClicked = 0
                    self.turn = "white"
            if self.Qb.y > self.box17.y and self.Qb.x > self.box3.x:
                if self.boxLst[self.boxLst.index(self.Qb) - 24 - 3].collidepoint(self.mouse_x, self.mouse_y):
                    self.Qb = self.boxLst[self.boxLst.index(self.Qb) - 24 - 3]
                    self.QueenBlackClicked = 0
                    self.turn = "white"
            if self.Qb.y > self.box25.y and self.Qb.x > self.box4.x:
                if self.boxLst[self.boxLst.index(self.Qb) - 32 - 4].collidepoint(self.mouse_x, self.mouse_y):
                    self.Qb = self.boxLst[self.boxLst.index(self.Qb) - 32 - 4]
                    self.QueenBlackClicked = 0
                    self.turn = "white"
            if self.Qb.y > self.box33.y and self.Qb.x > self.box5.x:
                if self.boxLst[self.boxLst.index(self.Qb) - 40 - 5].collidepoint(self.mouse_x, self.mouse_y):
                    self.Qb = self.boxLst[self.boxLst.index(self.Qb) - 40 - 5]
                    self.QueenBlackClicked = 0
                    self.turn = "white"
            if self.Qb.y > self.box41.y and self.Qb.x > self.box6.x:
                if self.boxLst[self.boxLst.index(self.Qb) - 48 - 6].collidepoint(self.mouse_x, self.mouse_y):
                    self.Qb = self.boxLst[self.boxLst.index(self.Qb) - 48 - 6]
                    self.QueenBlackClicked = 0
                    self.turn = "white"
            if self.Qb.y > self.box49.y and self.Qb.x > self.box7.x:
                if self.boxLst[self.boxLst.index(self.Qb) - 56 - 7].collidepoint(self.mouse_x, self.mouse_y):
                    self.Qb = self.boxLst[self.boxLst.index(self.Qb) - 56 - 7]
                    self.QueenBlackClicked = 0
                    self.turn = "white"

            # along y-axis(+)
            if self.Qb.y < self.box57.y:
                if self.boxLst[self.boxLst.index(self.Qb) + 8].collidepoint(self.mouse_x, self.mouse_y):
                    self.Qb = self.boxLst[self.boxLst.index(self.Qb) + 8]
                    self.QueenBlackClicked = 0
                    self.turn = "white"
            if self.Qb.y < self.box49.y:
                if self.boxLst[self.boxLst.index(self.Qb) + 16].collidepoint(self.mouse_x, self.mouse_y):
                    self.Qb = self.boxLst[self.boxLst.index(self.Qb) + 16]
                    self.QueenBlackClicked = 0
                    self.turn = "white"
            if self.Qb.y < self.box41.y:
                if self.boxLst[self.boxLst.index(self.Qb) + 24].collidepoint(self.mouse_x, self.mouse_y):
                    self.Qb = self.boxLst[self.boxLst.index(self.Qb) + 24]
                    self.QueenBlackClicked = 0
                    self.turn = "white"
            if self.Qb.y < self.box33.y:
                if self.boxLst[self.boxLst.index(self.Qb) + 32].collidepoint(self.mouse_x, self.mouse_y):
                    self.Qb = self.boxLst[self.boxLst.index(self.Qb) + 32]
                    self.QueenBlackClicked = 0
                    self.turn = "white"
            if self.Qb.y < self.box25.y:
                if self.boxLst[self.boxLst.index(self.Qb) + 40].collidepoint(self.mouse_x, self.mouse_y):
                    self.Qb = self.boxLst[self.boxLst.index(self.Qb) + 40]
                    self.QueenBlackClicked = 0
                    self.turn = "white"
            if self.Qb.y < self.box17.y:
                if self.boxLst[self.boxLst.index(self.Qb) + 48].collidepoint(self.mouse_x, self.mouse_y):
                    self.Qb = self.boxLst[self.boxLst.index(self.Qb) + 48]
                    self.QueenBlackClicked = 0
                    self.turn = "white"
            if self.Qb.y < self.box9.y:
                if self.boxLst[self.boxLst.index(self.Qb) + 56].collidepoint(self.mouse_x, self.mouse_y):
                    self.Qb = self.boxLst[self.boxLst.index(self.Qb) + 56]
                    self.QueenBlackClicked = 0
                    self.turn = "white"

            # along y-axis(-)
            if self.Qb.y > self.box1.y:
                if self.boxLst[self.boxLst.index(self.Qb) - 8].collidepoint(self.mouse_x, self.mouse_y):
                    self.Qb = self.boxLst[self.boxLst.index(self.Qb) - 8]
                    self.QueenBlackClicked = 0
                    self.turn = "white"
            if self.Qb.y > self.box9.y:
                if self.boxLst[self.boxLst.index(self.Qb) - 16].collidepoint(self.mouse_x, self.mouse_y):
                    self.Qb = self.boxLst[self.boxLst.index(self.Qb) - 16]
                    self.QueenBlackClicked = 0
                    self.turn = "white"
            if self.Qb.y > self.box17.y:
                if self.boxLst[self.boxLst.index(self.Qb) - 24].collidepoint(self.mouse_x, self.mouse_y):
                    self.Qb = self.boxLst[self.boxLst.index(self.Qb) - 24]
                    self.QueenBlackClicked = 0
                    self.turn = "white"
            if self.Qb.y > self.box25.y:
                if self.boxLst[self.boxLst.index(self.Qb) - 32].collidepoint(self.mouse_x, self.mouse_y):
                    self.Qb = self.boxLst[self.boxLst.index(self.Qb) - 32]
                    self.QueenBlackClicked = 0
                    self.turn = "white"
            if self.Qb.y > self.box33.y:
                if self.boxLst[self.boxLst.index(self.Qb) - 40].collidepoint(self.mouse_x, self.mouse_y):
                    self.Qb = self.boxLst[self.boxLst.index(self.Qb) - 40]
                    self.QueenBlackClicked = 0
                    self.turn = "white"
            if self.Qb.y > self.box41.y:
                if self.boxLst[self.boxLst.index(self.Qb) - 48].collidepoint(self.mouse_x, self.mouse_y):
                    self.Qb = self.boxLst[self.boxLst.index(self.Qb) - 48]
                    self.QueenBlackClicked = 0
                    self.turn = "white"
            if self.Qb.y > self.box49.y:
                if self.boxLst[self.boxLst.index(self.Qb) - 56].collidepoint(self.mouse_x, self.mouse_y):
                    self.Qb = self.boxLst[self.boxLst.index(self.Qb) - 56]
                    self.QueenBlackClicked = 0
                    self.turn = "white"

            # along x-axis(+)
            if self.Qb.x < self.box8.x:
                if self.boxLst[self.boxLst.index(self.Qb) + 1].collidepoint(self.mouse_x, self.mouse_y):
                    self.Qb = self.boxLst[self.boxLst.index(self.Qb) + 1]
                    self.QueenBlackClicked = 0
                    self.turn = "white"
            if self.Qb.x < self.box7.x:
                if self.boxLst[self.boxLst.index(self.Qb) + 2].collidepoint(self.mouse_x, self.mouse_y):
                    self.Qb = self.boxLst[self.boxLst.index(self.Qb) + 2]
                    self.QueenBlackClicked = 0
                    self.turn = "white"
            if self.Qb.x < self.box6.x:
                if self.boxLst[self.boxLst.index(self.Qb) + 3].collidepoint(self.mouse_x, self.mouse_y):
                    self.Qb = self.boxLst[self.boxLst.index(self.Qb) + 3]
                    self.QueenBlackClicked = 0
                    self.turn = "white"
            if self.Qb.x < self.box5.x:
                if self.boxLst[self.boxLst.index(self.Qb) + 4].collidepoint(self.mouse_x, self.mouse_y):
                    self.Qb = self.boxLst[self.boxLst.index(self.Qb) + 4]
                    self.QueenBlackClicked = 0
                    self.turn = "white"
            if self.Qb.x < self.box4.x:
                if self.boxLst[self.boxLst.index(self.Qb) + 5].collidepoint(self.mouse_x, self.mouse_y):
                    self.Qb = self.boxLst[self.boxLst.index(self.Qb) + 5]
                    self.QueenBlackClicked = 0
                    self.turn = "white"
            if self.Qb.x < self.box3.x:
                if self.boxLst[self.boxLst.index(self.Qb) + 6].collidepoint(self.mouse_x, self.mouse_y):
                    self.Qb = self.boxLst[self.boxLst.index(self.Qb) + 6]
                    self.QueenBlackClicked = 0
                    self.turn = "white"
            if self.Qb.x < self.box2.x:
                if self.boxLst[self.boxLst.index(self.Qb) + 7].collidepoint(self.mouse_x, self.mouse_y):
                    self.Qb = self.boxLst[self.boxLst.index(self.Qb) + 7]
                    self.QueenBlackClicked = 0
                    self.turn = "white"

            # along x-axis(-)
            if self.Qb.x > self.box1.x:
                if self.boxLst[self.boxLst.index(self.Qb) - 1].collidepoint(self.mouse_x, self.mouse_y):
                    self.Qb = self.boxLst[self.boxLst.index(self.Qb) - 1]
                    self.QueenBlackClicked = 0
                    self.turn = "white"
            if self.Qb.x > self.box2.x:
                if self.boxLst[self.boxLst.index(self.Qb) - 2].collidepoint(self.mouse_x, self.mouse_y):
                    self.Qb = self.boxLst[self.boxLst.index(self.Qb) - 2]
                    self.QueenBlackClicked = 0
                    self.turn = "white"
            if self.Qb.x > self.box3.x:
                if self.boxLst[self.boxLst.index(self.Qb) - 3].collidepoint(self.mouse_x, self.mouse_y):
                    self.Qb = self.boxLst[self.boxLst.index(self.Qb) - 3]
                    self.QueenBlackClicked = 0
                    self.turn = "white"
            if self.Qb.x > self.box4.x:
                if self.boxLst[self.boxLst.index(self.Qb) - 4].collidepoint(self.mouse_x, self.mouse_y):
                    self.Qb = self.boxLst[self.boxLst.index(self.Qb) - 4]
                    self.QueenBlackClicked = 0
                    self.turn = "white"
            if self.Qb.x > self.box5.x:
                if self.boxLst[self.boxLst.index(self.Qb) - 5].collidepoint(self.mouse_x, self.mouse_y):
                    self.Qb = self.boxLst[self.boxLst.index(self.Qb) - 5]
                    self.QueenBlackClicked = 0
                    self.turn = "white"
            if self.Qb.x > self.box6.x:
                if self.boxLst[self.boxLst.index(self.Qb) - 6].collidepoint(self.mouse_x, self.mouse_y):
                    self.Qb = self.boxLst[self.boxLst.index(self.Qb) - 6]
                    self.QueenBlackClicked = 0
                    self.turn = "white"
            if self.Qb.x > self.box7.x:
                if self.boxLst[self.boxLst.index(self.Qb) - 7].collidepoint(self.mouse_x, self.mouse_y):
                    self.Qb = self.boxLst[self.boxLst.index(self.Qb) - 7]
                    self.QueenBlackClicked = 0
                    self.turn = "white"
    # white pieces
    def pawnWMovements(self):
        for event in pygame.event.get():
            if event.type == pygame.MOUSEBUTTONDOWN:
                self.mouse_x, self.mouse_y = pygame.mouse.get_pos()

        if self.turn == "black":
            self.pawnWhite1Clicked_plus8 = 0
            self.pawnWhite2Clicked_plus8 = 0
            self.pawnWhite3Clicked_plus8 = 0
            self.pawnWhite4Clicked_plus8 = 0
            self.pawnWhite5Clicked_plus8 = 0
            self.pawnWhite6Clicked_plus8 = 0
            self.pawnWhite7Clicked_plus8 = 0
            self.pawnWhite8Clicked_plus8 = 0
        if self.turn == "white":
            if self.pw1.collidepoint(self.mouse_x, self.mouse_y):
                if self.pw1.y > self.box1.y:
                    if not self.boxLst[self.boxLst.index(self.pw1) - 8].colliderect(self.pw2) and not \
                            self.boxLst[self.boxLst.index(self.pw1) - 8].colliderect(self.pw3) and not \
                            self.boxLst[self.boxLst.index(self.pw1) - 8].colliderect(self.pw4) and not \
                            self.boxLst[self.boxLst.index(self.pw1) - 8].colliderect(self.pw5) and not \
                            self.boxLst[self.boxLst.index(self.pw1) - 8].colliderect(self.pw6) and not \
                            self.boxLst[self.boxLst.index(self.pw1) - 8].colliderect(self.pw7) and not \
                            self.boxLst[self.boxLst.index(self.pw1) - 8].colliderect(self.pw8) and not \
                            self.boxLst[self.boxLst.index(self.pw1) - 8].colliderect(self.Kw) and not \
                            self.boxLst[self.boxLst.index(self.pw1) - 8].colliderect(self.Qw) and not \
                            self.boxLst[self.boxLst.index(self.pw1) - 8].colliderect(self.rw1) and not \
                            self.boxLst[self.boxLst.index(self.pw1) - 8].colliderect(self.rw2) and not \
                            self.boxLst[self.boxLst.index(self.pw1) - 8].colliderect(self.kw1) and not \
                            self.boxLst[self.boxLst.index(self.pw1) - 8].colliderect(self.kw2) and not \
                            self.boxLst[self.boxLst.index(self.pw1) - 8].colliderect(self.bw1) and not \
                            self.boxLst[self.boxLst.index(self.pw1) - 8].colliderect(self.bw2) and not \
                            self.boxLst[self.boxLst.index(self.pw1) - 8].colliderect(self.pb1) and not \
                            self.boxLst[self.boxLst.index(self.pw1) - 8].colliderect(self.pb2) and not \
                            self.boxLst[self.boxLst.index(self.pw1) - 8].colliderect(self.pb3) and not \
                            self.boxLst[self.boxLst.index(self.pw1) - 8].colliderect(self.pb4) and not \
                            self.boxLst[self.boxLst.index(self.pw1) - 8].colliderect(self.pb5) and not \
                            self.boxLst[self.boxLst.index(self.pw1) - 8].colliderect(self.pb6) and not \
                            self.boxLst[self.boxLst.index(self.pw1) - 8].colliderect(self.pb7) and not \
                            self.boxLst[self.boxLst.index(self.pw1) - 8].colliderect(self.pb8) and not \
                            self.boxLst[self.boxLst.index(self.pw1) - 8].colliderect(self.Kb) and not \
                            self.boxLst[self.boxLst.index(self.pw1) - 8].colliderect(self.Qb) and not \
                            self.boxLst[self.boxLst.index(self.pw1) - 8].colliderect(self.rb1) and not \
                            self.boxLst[self.boxLst.index(self.pw1) - 8].colliderect(self.rb2) and not \
                            self.boxLst[self.boxLst.index(self.pw1) - 8].colliderect(self.kb1) and not \
                            self.boxLst[self.boxLst.index(self.pw1) - 8].colliderect(self.kb2) and not \
                            self.boxLst[self.boxLst.index(self.pw1) - 8].colliderect(self.bb1) and not \
                            self.boxLst[self.boxLst.index(self.pw1) - 8].colliderect(self.bb2):
                        pygame.draw.rect(self.window, self.blue, self.boxLst[self.boxLst.index(self.pw1) - 8], border_radius=100)
                        self.pawnWhite1Clicked = 1
                        self.pawnWhite1Clicked_plus8 = 1
                        self.pawnWhite2Clicked = 0
                        self.pawnWhite3Clicked = 0
                        self.pawnWhite4Clicked = 0
                        self.pawnWhite5Clicked = 0
                        self.pawnWhite6Clicked = 0
                        self.pawnWhite7Clicked = 0
                        self.pawnWhite8Clicked = 0
                        self.KingWhiteClicked = 0
                        self.knightWhite1Clicked = 0
                        self.knightWhite2Clicked = 0
                        self.rookWhite1Clicked = 0
                        self.rookWhite2Clicked = 0
                        self.bishopWhite1Clicked = 0
                        self.bishopWhite2Clicked = 0
                        self.QueenWhiteClicked = 0
                    if self.pw1.y > self.box41.y:
                        if self.pawnWhite1Clicked_plus8 == 1:
                            if not self.boxLst[self.boxLst.index(self.pw1) - 16].colliderect(self.pw2) and not \
                                    self.boxLst[self.boxLst.index(self.pw1) - 16].colliderect(self.pw3) and not \
                                    self.boxLst[self.boxLst.index(self.pw1) - 16].colliderect(self.pw4) and not \
                                    self.boxLst[self.boxLst.index(self.pw1) - 16].colliderect(self.pw5) and not \
                                    self.boxLst[self.boxLst.index(self.pw1) - 16].colliderect(self.pw6) and not \
                                    self.boxLst[self.boxLst.index(self.pw1) - 16].colliderect(self.pw7) and not \
                                    self.boxLst[self.boxLst.index(self.pw1) - 16].colliderect(self.pw8) and not \
                                    self.boxLst[self.boxLst.index(self.pw1) - 16].colliderect(self.Kw) and not \
                                    self.boxLst[self.boxLst.index(self.pw1) - 16].colliderect(self.Qw) and not \
                                    self.boxLst[self.boxLst.index(self.pw1) - 16].colliderect(self.rw1) and not \
                                    self.boxLst[self.boxLst.index(self.pw1) - 16].colliderect(self.rw2) and not \
                                    self.boxLst[self.boxLst.index(self.pw1) - 16].colliderect(self.kw1) and not \
                                    self.boxLst[self.boxLst.index(self.pw1) - 16].colliderect(self.kw2) and not \
                                    self.boxLst[self.boxLst.index(self.pw1) - 16].colliderect(self.bw1) and not \
                                    self.boxLst[self.boxLst.index(self.pw1) - 16].colliderect(self.bw2) and not \
                                    self.boxLst[self.boxLst.index(self.pw1) - 16].colliderect(self.pb1) and not \
                                    self.boxLst[self.boxLst.index(self.pw1) - 16].colliderect(self.pb2) and not \
                                    self.boxLst[self.boxLst.index(self.pw1) - 16].colliderect(self.pb3) and not \
                                    self.boxLst[self.boxLst.index(self.pw1) - 16].colliderect(self.pb4) and not \
                                    self.boxLst[self.boxLst.index(self.pw1) - 16].colliderect(self.pb5) and not \
                                    self.boxLst[self.boxLst.index(self.pw1) - 16].colliderect(self.pb6) and not \
                                    self.boxLst[self.boxLst.index(self.pw1) - 16].colliderect(self.pb7) and not \
                                    self.boxLst[self.boxLst.index(self.pw1) - 16].colliderect(self.pb8) and not \
                                    self.boxLst[self.boxLst.index(self.pw1) - 16].colliderect(self.Kb) and not \
                                    self.boxLst[self.boxLst.index(self.pw1) - 16].colliderect(self.Qb) and not \
                                    self.boxLst[self.boxLst.index(self.pw1) - 16].colliderect(self.rb1) and not \
                                    self.boxLst[self.boxLst.index(self.pw1) - 16].colliderect(self.rb2) and not \
                                    self.boxLst[self.boxLst.index(self.pw1) - 16].colliderect(self.kb1) and not \
                                    self.boxLst[self.boxLst.index(self.pw1) - 16].colliderect(self.kb2) and not \
                                    self.boxLst[self.boxLst.index(self.pw1) - 16].colliderect(self.bb1) and not \
                                    self.boxLst[self.boxLst.index(self.pw1) - 16].colliderect(self.bb2):
                                pygame.draw.rect(self.window, self.blue, self.boxLst[self.boxLst.index(self.pw1) - 16], border_radius=100)
                                self.pawnWhite1Clicked = 1
                                self.pawnWhite2Clicked = 0
                                self.pawnWhite3Clicked = 0
                                self.pawnWhite4Clicked = 0
                                self.pawnWhite5Clicked = 0
                                self.pawnWhite6Clicked = 0
                                self.pawnWhite7Clicked = 0
                                self.pawnWhite8Clicked = 0
                                self.KingWhiteClicked = 0
                                self.knightWhite1Clicked = 0
                                self.knightWhite2Clicked = 0
                                self.rookWhite1Clicked = 0
                                self.rookWhite2Clicked = 0
                                self.bishopWhite1Clicked = 0
                                self.bishopWhite2Clicked = 0
                                self.QueenWhiteClicked = 0
                                self.pawnWhite1Clicked_twoStep = 1
                            elif self.boxLst[self.boxLst.index(self.pw1) - 16].colliderect(self.pw2) or \
                                    self.boxLst[self.boxLst.index(self.pw1) - 16].colliderect(self.pw3) or \
                                    self.boxLst[self.boxLst.index(self.pw1) - 16].colliderect(self.pw4) or \
                                    self.boxLst[self.boxLst.index(self.pw1) - 16].colliderect(self.pw5) or \
                                    self.boxLst[self.boxLst.index(self.pw1) - 16].colliderect(self.pw6) or \
                                    self.boxLst[self.boxLst.index(self.pw1) - 16].colliderect(self.pw7) or \
                                    self.boxLst[self.boxLst.index(self.pw1) - 16].colliderect(self.pw8) or \
                                    self.boxLst[self.boxLst.index(self.pw1) - 16].colliderect(self.Kw) or \
                                    self.boxLst[self.boxLst.index(self.pw1) - 16].colliderect(self.Qw) or \
                                    self.boxLst[self.boxLst.index(self.pw1) - 16].colliderect(self.rw1) or \
                                    self.boxLst[self.boxLst.index(self.pw1) - 16].colliderect(self.rw2) or \
                                    self.boxLst[self.boxLst.index(self.pw1) - 16].colliderect(self.kw1) or \
                                    self.boxLst[self.boxLst.index(self.pw1) - 16].colliderect(self.kw2) or \
                                    self.boxLst[self.boxLst.index(self.pw1) - 16].colliderect(self.bw1) or \
                                    self.boxLst[self.boxLst.index(self.pw1) - 16].colliderect(self.bw2) or \
                                    self.boxLst[self.boxLst.index(self.pw1) - 16].colliderect(self.pb1) or \
                                    self.boxLst[self.boxLst.index(self.pw1) - 16].colliderect(self.pb2) or \
                                    self.boxLst[self.boxLst.index(self.pw1) - 16].colliderect(self.pb3) or \
                                    self.boxLst[self.boxLst.index(self.pw1) - 16].colliderect(self.pb4) or \
                                    self.boxLst[self.boxLst.index(self.pw1) - 16].colliderect(self.pb5) or \
                                    self.boxLst[self.boxLst.index(self.pw1) - 16].colliderect(self.pb6) or \
                                    self.boxLst[self.boxLst.index(self.pw1) - 16].colliderect(self.pb7) or \
                                    self.boxLst[self.boxLst.index(self.pw1) - 16].colliderect(self.pb8) or \
                                    self.boxLst[self.boxLst.index(self.pw1) - 16].colliderect(self.Kb) or \
                                    self.boxLst[self.boxLst.index(self.pw1) - 16].colliderect(self.Qb) or \
                                    self.boxLst[self.boxLst.index(self.pw1) - 16].colliderect(self.rb1) or \
                                    self.boxLst[self.boxLst.index(self.pw1) - 16].colliderect(self.rb2) or \
                                    self.boxLst[self.boxLst.index(self.pw1) - 16].colliderect(self.kb1) or \
                                    self.boxLst[self.boxLst.index(self.pw1) - 16].colliderect(self.kb2) or \
                                    self.boxLst[self.boxLst.index(self.pw1) - 16].colliderect(self.bb1) or \
                                    self.boxLst[self.boxLst.index(self.pw1) - 16].colliderect(self.bb2):
                                self.pawnWhite1Clicked_twoStep = 0
                if self.pw1.y > self.box1.y:
                    if self.boxLst[self.boxLst.index(self.pw1) - 8].colliderect(self.pw2) or \
                            self.boxLst[self.boxLst.index(self.pw1) - 8].colliderect(self.pw3) or \
                            self.boxLst[self.boxLst.index(self.pw1) - 8].colliderect(self.pw4) or \
                            self.boxLst[self.boxLst.index(self.pw1) - 8].colliderect(self.pw5) or \
                            self.boxLst[self.boxLst.index(self.pw1) - 8].colliderect(self.pw6) or \
                            self.boxLst[self.boxLst.index(self.pw1) - 8].colliderect(self.pw7) or \
                            self.boxLst[self.boxLst.index(self.pw1) - 8].colliderect(self.pw8) or \
                            self.boxLst[self.boxLst.index(self.pw1) - 8].colliderect(self.Kw) or \
                            self.boxLst[self.boxLst.index(self.pw1) - 8].colliderect(self.Qw) or \
                            self.boxLst[self.boxLst.index(self.pw1) - 8].colliderect(self.pb1) or \
                            self.boxLst[self.boxLst.index(self.pw1) - 8].colliderect(self.rw1) or \
                            self.boxLst[self.boxLst.index(self.pw1) - 8].colliderect(self.rw2) or \
                            self.boxLst[self.boxLst.index(self.pw1) - 8].colliderect(self.kw1) or \
                            self.boxLst[self.boxLst.index(self.pw1) - 8].colliderect(self.kw2) or \
                            self.boxLst[self.boxLst.index(self.pw1) - 8].colliderect(self.bw1) or \
                            self.boxLst[self.boxLst.index(self.pw1) - 8].colliderect(self.bw2) or \
                            self.boxLst[self.boxLst.index(self.pw1) - 8].colliderect(self.pb2) or \
                            self.boxLst[self.boxLst.index(self.pw1) - 8].colliderect(self.pb3) or \
                            self.boxLst[self.boxLst.index(self.pw1) - 8].colliderect(self.pb4) or \
                            self.boxLst[self.boxLst.index(self.pw1) - 8].colliderect(self.pb5) or \
                            self.boxLst[self.boxLst.index(self.pw1) - 8].colliderect(self.pb6) or \
                            self.boxLst[self.boxLst.index(self.pw1) - 8].colliderect(self.pb7) or \
                            self.boxLst[self.boxLst.index(self.pw1) - 8].colliderect(self.pb8) or \
                            self.boxLst[self.boxLst.index(self.pw1) - 8].colliderect(self.Kb) or \
                            self.boxLst[self.boxLst.index(self.pw1) - 8].colliderect(self.Qb) or \
                            self.boxLst[self.boxLst.index(self.pw1) - 8].colliderect(self.rb1) or \
                            self.boxLst[self.boxLst.index(self.pw1) - 8].colliderect(self.rb2) or \
                            self.boxLst[self.boxLst.index(self.pw1) - 8].colliderect(self.kb1) or \
                            self.boxLst[self.boxLst.index(self.pw1) - 8].colliderect(self.kb2) or \
                            self.boxLst[self.boxLst.index(self.pw1) - 8].colliderect(self.bb1) or \
                            self.boxLst[self.boxLst.index(self.pw1) - 8].colliderect(self.bb2):
                        self.pawnWhite1Clicked = 0
                if self.pw1.x < self.box8.x and self.pw1.y > self.box1.y:
                    if self.boxLst[self.boxLst.index(self.pw1) - 8 + 1].colliderect(self.pb1) or \
                            self.boxLst[self.boxLst.index(self.pw1) - 8 + 1].colliderect(self.pb2) or \
                            self.boxLst[self.boxLst.index(self.pw1) - 8 + 1].colliderect(self.pb3) or \
                            self.boxLst[self.boxLst.index(self.pw1) - 8 + 1].colliderect(self.pb4) or \
                            self.boxLst[self.boxLst.index(self.pw1) - 8 + 1].colliderect(self.pb5) or \
                            self.boxLst[self.boxLst.index(self.pw1) - 8 + 1].colliderect(self.pb6) or \
                            self.boxLst[self.boxLst.index(self.pw1) - 8 + 1].colliderect(self.pb7) or \
                            self.boxLst[self.boxLst.index(self.pw1) - 8 + 1].colliderect(self.pb8) or \
                            self.boxLst[self.boxLst.index(self.pw1) - 8 + 1].colliderect(self.Kb) or \
                            self.boxLst[self.boxLst.index(self.pw1) - 8 + 1].colliderect(self.Qb) or \
                            self.boxLst[self.boxLst.index(self.pw1) - 8 + 1].colliderect(self.rb1) or \
                            self.boxLst[self.boxLst.index(self.pw1) - 8 + 1].colliderect(self.rb2) or \
                            self.boxLst[self.boxLst.index(self.pw1) - 8 + 1].colliderect(self.kb1) or \
                            self.boxLst[self.boxLst.index(self.pw1) - 8 + 1].colliderect(self.kb2) or \
                            self.boxLst[self.boxLst.index(self.pw1) - 8 + 1].colliderect(self.bb1) or \
                            self.boxLst[self.boxLst.index(self.pw1) - 8 + 1].colliderect(self.bb2):
                        pygame.draw.rect(self.window, self.red, self.boxLst[self.boxLst.index(self.pw1) - 8 + 1], border_radius=100)
                        self.pawnWhite1Clicked = 1
                        self.pawnWhite2Clicked = 0
                        self.pawnWhite3Clicked = 0
                        self.pawnWhite4Clicked = 0
                        self.pawnWhite5Clicked = 0
                        self.pawnWhite6Clicked = 0
                        self.pawnWhite7Clicked = 0
                        self.pawnWhite8Clicked = 0
                        self.KingWhiteClicked = 0
                        self.knightWhite1Clicked = 0
                        self.knightWhite2Clicked = 0
                        self.rookWhite1Clicked = 0
                        self.rookWhite2Clicked = 0
                        self.bishopWhite1Clicked = 0
                        self.bishopWhite2Clicked = 0
                        self.QueenWhiteClicked = 0
                        self.pawnWhite1Clicked_cut = 1
                if self.pw1.x  > self.box1.x and self.pw1.y > self.box1.y:
                    if self.boxLst[self.boxLst.index(self.pw1) - 8 - 1].colliderect(self.pb1) or \
                            self.boxLst[self.boxLst.index(self.pw1) - 8 - 1].colliderect(self.pb2) or \
                            self.boxLst[self.boxLst.index(self.pw1) - 8 - 1].colliderect(self.pb3) or \
                            self.boxLst[self.boxLst.index(self.pw1) - 8 - 1].colliderect(self.pb4) or \
                            self.boxLst[self.boxLst.index(self.pw1) - 8 - 1].colliderect(self.pb5) or \
                            self.boxLst[self.boxLst.index(self.pw1) - 8 - 1].colliderect(self.pb6) or \
                            self.boxLst[self.boxLst.index(self.pw1) - 8 - 1].colliderect(self.pb7) or \
                            self.boxLst[self.boxLst.index(self.pw1) - 8 - 1].colliderect(self.pb8) or \
                            self.boxLst[self.boxLst.index(self.pw1) - 8 - 1].colliderect(self.Kb) or \
                            self.boxLst[self.boxLst.index(self.pw1) - 8 - 1].colliderect(self.Qb) or \
                            self.boxLst[self.boxLst.index(self.pw1) - 8 - 1].colliderect(self.rb1) or \
                            self.boxLst[self.boxLst.index(self.pw1) - 8 - 1].colliderect(self.rb2) or \
                            self.boxLst[self.boxLst.index(self.pw1) - 8 - 1].colliderect(self.kb1) or \
                            self.boxLst[self.boxLst.index(self.pw1) - 8 - 1].colliderect(self.kb2) or \
                            self.boxLst[self.boxLst.index(self.pw1) - 8 - 1].colliderect(self.bb1) or \
                            self.boxLst[self.boxLst.index(self.pw1) - 8 - 1].colliderect(self.bb2):
                        pygame.draw.rect(self.window, self.red, self.boxLst[self.boxLst.index(self.pw1) - 8 - 1], border_radius=100)
                        self.pawnWhite1Clicked = 1
                        self.pawnWhite2Clicked = 0
                        self.pawnWhite3Clicked = 0
                        self.pawnWhite4Clicked = 0
                        self.pawnWhite5Clicked = 0
                        self.pawnWhite6Clicked = 0
                        self.pawnWhite7Clicked = 0
                        self.pawnWhite8Clicked = 0
                        self.KingWhiteClicked = 0
                        self.knightWhite1Clicked = 0
                        self.knightWhite2Clicked = 0
                        self.rookWhite1Clicked = 0
                        self.rookWhite2Clicked = 0
                        self.bishopWhite1Clicked = 0
                        self.bishopWhite2Clicked = 0
                        self.QueenWhiteClicked = 0
                        self.pawnWhite1Clicked_cut = 1

            elif self.pw2.collidepoint(self.mouse_x, self.mouse_y):
                if self.pw2.y > self.box1.y:
                    if not self.boxLst[self.boxLst.index(self.pw2) - 8].colliderect(self.pw1) and not \
                            self.boxLst[self.boxLst.index(self.pw2) - 8].colliderect(self.pb2) and not \
                            self.boxLst[self.boxLst.index(self.pw2) - 8].colliderect(self.pw3) and not \
                            self.boxLst[self.boxLst.index(self.pw2) - 8].colliderect(self.pw4) and not \
                            self.boxLst[self.boxLst.index(self.pw2) - 8].colliderect(self.pw5) and not \
                            self.boxLst[self.boxLst.index(self.pw2) - 8].colliderect(self.pw6) and not \
                            self.boxLst[self.boxLst.index(self.pw2) - 8].colliderect(self.pw7) and not \
                            self.boxLst[self.boxLst.index(self.pw2) - 8].colliderect(self.pw8) and not \
                            self.boxLst[self.boxLst.index(self.pw2) - 8].colliderect(self.Kw) and not \
                            self.boxLst[self.boxLst.index(self.pw2) - 8].colliderect(self.Qw) and not \
                            self.boxLst[self.boxLst.index(self.pw2) - 8].colliderect(self.rw1) and not \
                            self.boxLst[self.boxLst.index(self.pw2) - 8].colliderect(self.rw2) and not \
                            self.boxLst[self.boxLst.index(self.pw2) - 8].colliderect(self.kw1) and not \
                            self.boxLst[self.boxLst.index(self.pw2) - 8].colliderect(self.kw2) and not \
                            self.boxLst[self.boxLst.index(self.pw2) - 8].colliderect(self.bw1) and not \
                            self.boxLst[self.boxLst.index(self.pw2) - 8].colliderect(self.bw2) and not \
                            self.boxLst[self.boxLst.index(self.pw2) - 8].colliderect(self.pw1) and not \
                            self.boxLst[self.boxLst.index(self.pw2) - 8].colliderect(self.pb3) and not \
                            self.boxLst[self.boxLst.index(self.pw2) - 8].colliderect(self.pb4) and not \
                            self.boxLst[self.boxLst.index(self.pw2) - 8].colliderect(self.pb5) and not \
                            self.boxLst[self.boxLst.index(self.pw2) - 8].colliderect(self.pb6) and not \
                            self.boxLst[self.boxLst.index(self.pw2) - 8].colliderect(self.pb7) and not \
                            self.boxLst[self.boxLst.index(self.pw2) - 8].colliderect(self.pb8) and not \
                            self.boxLst[self.boxLst.index(self.pw2) - 8].colliderect(self.Kb) and not \
                            self.boxLst[self.boxLst.index(self.pw2) - 8].colliderect(self.Qb) and not \
                            self.boxLst[self.boxLst.index(self.pw2) - 8].colliderect(self.rb1) and not \
                            self.boxLst[self.boxLst.index(self.pw2) - 8].colliderect(self.rb2) and not \
                            self.boxLst[self.boxLst.index(self.pw2) - 8].colliderect(self.kb1) and not \
                            self.boxLst[self.boxLst.index(self.pw2) - 8].colliderect(self.kb2) and not \
                            self.boxLst[self.boxLst.index(self.pw2) - 8].colliderect(self.bb1) and not \
                            self.boxLst[self.boxLst.index(self.pw2) - 8].colliderect(self.bb2):
                        pygame.draw.rect(self.window, self.blue, self.boxLst[self.boxLst.index(self.pw2) - 8], border_radius=100)
                        self.pawnWhite2Clicked = 1
                        self.pawnWhite2Clicked_plus8 = 1
                        self.pawnWhite1Clicked = 0
                        self.pawnWhite3Clicked = 0
                        self.pawnWhite4Clicked = 0
                        self.pawnWhite5Clicked = 0
                        self.pawnWhite6Clicked = 0
                        self.pawnWhite7Clicked = 0
                        self.pawnWhite8Clicked = 0
                        self.KingWhiteClicked = 0
                        self.knightWhite1Clicked = 0
                        self.knightWhite2Clicked = 0
                        self.rookWhite1Clicked = 0
                        self.rookWhite2Clicked = 0
                        self.bishopWhite1Clicked = 0
                        self.bishopWhite2Clicked = 0
                        self.QueenWhiteClicked = 0
                    if self.pw2.y > self.box41.y:
                        if self.pawnWhite2Clicked_plus8 == 1:
                            if not self.boxLst[self.boxLst.index(self.pw2) - 16].colliderect(self.pw1) and not \
                                    self.boxLst[self.boxLst.index(self.pw2) - 16].colliderect(self.pb2) and not \
                                    self.boxLst[self.boxLst.index(self.pw2) - 16].colliderect(self.pw3) and not \
                                    self.boxLst[self.boxLst.index(self.pw2) - 16].colliderect(self.pw4) and not \
                                    self.boxLst[self.boxLst.index(self.pw2) - 16].colliderect(self.pw5) and not \
                                    self.boxLst[self.boxLst.index(self.pw2) - 16].colliderect(self.pw6) and not \
                                    self.boxLst[self.boxLst.index(self.pw2) - 16].colliderect(self.pw7) and not \
                                    self.boxLst[self.boxLst.index(self.pw2) - 16].colliderect(self.pw8) and not \
                                    self.boxLst[self.boxLst.index(self.pw2) - 16].colliderect(self.Kw) and not \
                                    self.boxLst[self.boxLst.index(self.pw2) - 16].colliderect(self.Qw) and not \
                                    self.boxLst[self.boxLst.index(self.pw2) - 16].colliderect(self.rw1) and not \
                                    self.boxLst[self.boxLst.index(self.pw2) - 16].colliderect(self.rw2) and not \
                                    self.boxLst[self.boxLst.index(self.pw2) - 16].colliderect(self.kw1) and not \
                                    self.boxLst[self.boxLst.index(self.pw2) - 16].colliderect(self.kw2) and not \
                                    self.boxLst[self.boxLst.index(self.pw2) - 16].colliderect(self.bw1) and not \
                                    self.boxLst[self.boxLst.index(self.pw2) - 16].colliderect(self.bw2) and not \
                                    self.boxLst[self.boxLst.index(self.pw2) - 16].colliderect(self.pw1) and not \
                                    self.boxLst[self.boxLst.index(self.pw2) - 16].colliderect(self.pb3) and not \
                                    self.boxLst[self.boxLst.index(self.pw2) - 16].colliderect(self.pb4) and not \
                                    self.boxLst[self.boxLst.index(self.pw2) - 16].colliderect(self.pb5) and not \
                                    self.boxLst[self.boxLst.index(self.pw2) - 16].colliderect(self.pb6) and not \
                                    self.boxLst[self.boxLst.index(self.pw2) - 16].colliderect(self.pb7) and not \
                                    self.boxLst[self.boxLst.index(self.pw2) - 16].colliderect(self.pb8) and not \
                                    self.boxLst[self.boxLst.index(self.pw2) - 16].colliderect(self.Kb) and not \
                                    self.boxLst[self.boxLst.index(self.pw2) - 16].colliderect(self.Qb) and not \
                                    self.boxLst[self.boxLst.index(self.pw2) - 16].colliderect(self.rb1) and not \
                                    self.boxLst[self.boxLst.index(self.pw2) - 16].colliderect(self.rb2) and not \
                                    self.boxLst[self.boxLst.index(self.pw2) - 16].colliderect(self.kb1) and not \
                                    self.boxLst[self.boxLst.index(self.pw2) - 16].colliderect(self.kb2) and not \
                                    self.boxLst[self.boxLst.index(self.pw2) - 16].colliderect(self.bb1) and not \
                                    self.boxLst[self.boxLst.index(self.pw2) - 16].colliderect(self.bb2):
                                pygame.draw.rect(self.window, self.blue, self.boxLst[self.boxLst.index(self.pw2) - 16], border_radius=100)
                                self.pawnWhite2Clicked = 1
                                self.pawnWhite1Clicked = 0
                                self.pawnWhite3Clicked = 0
                                self.pawnWhite4Clicked = 0
                                self.pawnWhite5Clicked = 0
                                self.pawnWhite6Clicked = 0
                                self.pawnWhite7Clicked = 0
                                self.pawnWhite8Clicked = 0
                                self.KingWhiteClicked = 0
                                self.knightWhite1Clicked = 0
                                self.knightWhite2Clicked = 0
                                self.rookWhite1Clicked = 0
                                self.rookWhite2Clicked = 0
                                self.bishopWhite1Clicked = 0
                                self.bishopWhite2Clicked = 0
                                self.QueenWhiteClicked = 0
                                self.pawnWhite2Clicked_twoStep = 1
                            elif self.boxLst[self.boxLst.index(self.pw2) - 16].colliderect(self.pw1) or \
                                    self.boxLst[self.boxLst.index(self.pw2) - 16].colliderect(self.pb2) or \
                                    self.boxLst[self.boxLst.index(self.pw2) - 16].colliderect(self.pw3) or \
                                    self.boxLst[self.boxLst.index(self.pw2) - 16].colliderect(self.pw4) or \
                                    self.boxLst[self.boxLst.index(self.pw2) - 16].colliderect(self.pw5) or \
                                    self.boxLst[self.boxLst.index(self.pw2) - 16].colliderect(self.pw6) or \
                                    self.boxLst[self.boxLst.index(self.pw2) - 16].colliderect(self.pw7) or \
                                    self.boxLst[self.boxLst.index(self.pw2) - 16].colliderect(self.pw8) or \
                                    self.boxLst[self.boxLst.index(self.pw2) - 16].colliderect(self.Kw) or \
                                    self.boxLst[self.boxLst.index(self.pw2) - 16].colliderect(self.Qw) or \
                                    self.boxLst[self.boxLst.index(self.pw2) - 16].colliderect(self.rw1) or \
                                    self.boxLst[self.boxLst.index(self.pw2) - 16].colliderect(self.rw2) or \
                                    self.boxLst[self.boxLst.index(self.pw2) - 16].colliderect(self.kw1) or \
                                    self.boxLst[self.boxLst.index(self.pw2) - 16].colliderect(self.kw2) or \
                                    self.boxLst[self.boxLst.index(self.pw2) - 16].colliderect(self.bw1) or \
                                    self.boxLst[self.boxLst.index(self.pw2) - 16].colliderect(self.bw2) or \
                                    self.boxLst[self.boxLst.index(self.pw2) - 16].colliderect(self.pw1) or \
                                    self.boxLst[self.boxLst.index(self.pw2) - 16].colliderect(self.pb3) or \
                                    self.boxLst[self.boxLst.index(self.pw2) - 16].colliderect(self.pb4) or \
                                    self.boxLst[self.boxLst.index(self.pw2) - 16].colliderect(self.pb5) or \
                                    self.boxLst[self.boxLst.index(self.pw2) - 16].colliderect(self.pb6) or \
                                    self.boxLst[self.boxLst.index(self.pw2) - 16].colliderect(self.pb7) or \
                                    self.boxLst[self.boxLst.index(self.pw2) - 16].colliderect(self.pb8) or \
                                    self.boxLst[self.boxLst.index(self.pw2) - 16].colliderect(self.Kb) or \
                                    self.boxLst[self.boxLst.index(self.pw2) - 16].colliderect(self.Qb) or \
                                    self.boxLst[self.boxLst.index(self.pw2) - 16].colliderect(self.rb1) or \
                                    self.boxLst[self.boxLst.index(self.pw2) - 16].colliderect(self.rb2) or \
                                    self.boxLst[self.boxLst.index(self.pw2) - 16].colliderect(self.kb1) or \
                                    self.boxLst[self.boxLst.index(self.pw2) - 16].colliderect(self.kb2) or \
                                    self.boxLst[self.boxLst.index(self.pw2) - 16].colliderect(self.bb1) or \
                                    self.boxLst[self.boxLst.index(self.pw2) - 16].colliderect(self.bb2):
                                self.pawnWhite2Clicked_twoStep = 0
                if self.pw2.y > self.box1.y:
                    if self.boxLst[self.boxLst.index(self.pw2) - 8].colliderect(self.pw1) or \
                            self.boxLst[self.boxLst.index(self.pw2) - 8].colliderect(self.pb2) or \
                            self.boxLst[self.boxLst.index(self.pw2) - 8].colliderect(self.pw3) or \
                            self.boxLst[self.boxLst.index(self.pw2) - 8].colliderect(self.pw4) or \
                            self.boxLst[self.boxLst.index(self.pw2) - 8].colliderect(self.pw5) or \
                            self.boxLst[self.boxLst.index(self.pw2) - 8].colliderect(self.pw6) or \
                            self.boxLst[self.boxLst.index(self.pw2) - 8].colliderect(self.pw7) or \
                            self.boxLst[self.boxLst.index(self.pw2) - 8].colliderect(self.pw8) or \
                            self.boxLst[self.boxLst.index(self.pw2) - 8].colliderect(self.Kw) or \
                            self.boxLst[self.boxLst.index(self.pw2) - 8].colliderect(self.Qw) or \
                            self.boxLst[self.boxLst.index(self.pw2) - 8].colliderect(self.rw1) or \
                            self.boxLst[self.boxLst.index(self.pw2) - 8].colliderect(self.rw2) or \
                            self.boxLst[self.boxLst.index(self.pw2) - 8].colliderect(self.kw1) or \
                            self.boxLst[self.boxLst.index(self.pw2) - 8].colliderect(self.kw2) or \
                            self.boxLst[self.boxLst.index(self.pw2) - 8].colliderect(self.bw1) or \
                            self.boxLst[self.boxLst.index(self.pw2) - 8].colliderect(self.bw2) or \
                            self.boxLst[self.boxLst.index(self.pw2) - 8].colliderect(self.pw1) or \
                            self.boxLst[self.boxLst.index(self.pw2) - 8].colliderect(self.pb3) or \
                            self.boxLst[self.boxLst.index(self.pw2) - 8].colliderect(self.pb4) or \
                            self.boxLst[self.boxLst.index(self.pw2) - 8].colliderect(self.pb5) or \
                            self.boxLst[self.boxLst.index(self.pw2) - 8].colliderect(self.pb6) or \
                            self.boxLst[self.boxLst.index(self.pw2) - 8].colliderect(self.pb7) or \
                            self.boxLst[self.boxLst.index(self.pw2) - 8].colliderect(self.pb8) or \
                            self.boxLst[self.boxLst.index(self.pw2) - 8].colliderect(self.Kb) or \
                            self.boxLst[self.boxLst.index(self.pw2) - 8].colliderect(self.Qb) or \
                            self.boxLst[self.boxLst.index(self.pw2) - 8].colliderect(self.rb1) or \
                            self.boxLst[self.boxLst.index(self.pw2) - 8].colliderect(self.rb2) or \
                            self.boxLst[self.boxLst.index(self.pw2) - 8].colliderect(self.kb1) or \
                            self.boxLst[self.boxLst.index(self.pw2) - 8].colliderect(self.kb2) or \
                            self.boxLst[self.boxLst.index(self.pw2) - 8].colliderect(self.bb1) or \
                            self.boxLst[self.boxLst.index(self.pw2) - 8].colliderect(self.bb2):
                        self.pawnWhite2Clicked = 0
                if self.pw2.x < self.box8.x and self.pw2.y > self.box1.y:
                    if self.boxLst[self.boxLst.index(self.pw2) - 8 + 1].colliderect(self.pb1) or \
                            self.boxLst[self.boxLst.index(self.pw2) - 8 + 1].colliderect(self.pb2) or \
                            self.boxLst[self.boxLst.index(self.pw2) - 8 + 1].colliderect(self.pb3) or \
                            self.boxLst[self.boxLst.index(self.pw2) - 8 + 1].colliderect(self.pb4) or \
                            self.boxLst[self.boxLst.index(self.pw2) - 8 + 1].colliderect(self.pb5) or \
                            self.boxLst[self.boxLst.index(self.pw2) - 8 + 1].colliderect(self.pb6) or \
                            self.boxLst[self.boxLst.index(self.pw2) - 8 + 1].colliderect(self.pb7) or \
                            self.boxLst[self.boxLst.index(self.pw2) - 8 + 1].colliderect(self.pb8) or \
                            self.boxLst[self.boxLst.index(self.pw2) - 8 + 1].colliderect(self.Kb) or \
                            self.boxLst[self.boxLst.index(self.pw2) - 8 + 1].colliderect(self.Qb) or \
                            self.boxLst[self.boxLst.index(self.pw2) - 8 + 1].colliderect(self.rb1) or \
                            self.boxLst[self.boxLst.index(self.pw2) - 8 + 1].colliderect(self.rb2) or \
                            self.boxLst[self.boxLst.index(self.pw2) - 8 + 1].colliderect(self.kb1) or \
                            self.boxLst[self.boxLst.index(self.pw2) - 8 + 1].colliderect(self.kb2) or \
                            self.boxLst[self.boxLst.index(self.pw2) - 8 + 1].colliderect(self.bb1) or \
                            self.boxLst[self.boxLst.index(self.pw2) - 8 + 1].colliderect(self.bb2):
                        pygame.draw.rect(self.window, self.red, self.boxLst[self.boxLst.index(self.pw2) - 8 + 1], border_radius=100)
                        self.pawnWhite2Clicked = 1
                        self.pawnWhite1Clicked = 0
                        self.pawnWhite3Clicked = 0
                        self.pawnWhite4Clicked = 0
                        self.pawnWhite5Clicked = 0
                        self.pawnWhite6Clicked = 0
                        self.pawnWhite7Clicked = 0
                        self.pawnWhite8Clicked = 0
                        self.KingWhiteClicked = 0
                        self.knightWhite1Clicked = 0
                        self.knightWhite2Clicked = 0
                        self.rookWhite1Clicked = 0
                        self.rookWhite2Clicked = 0
                        self.bishopWhite1Clicked = 0
                        self.bishopWhite2Clicked = 0
                        self.QueenWhiteClicked = 0
                        self.pawnWhite2Clicked_cut = 1
                if self.pw2.x  > self.box1.x and self.pw2.y > self.box1.y:
                    if self.boxLst[self.boxLst.index(self.pw2) - 8 - 1].colliderect(self.pb1) or \
                            self.boxLst[self.boxLst.index(self.pw2) - 8 - 1].colliderect(self.pb2) or \
                            self.boxLst[self.boxLst.index(self.pw2) - 8 - 1].colliderect(self.pb3) or \
                            self.boxLst[self.boxLst.index(self.pw2) - 8 - 1].colliderect(self.pb4) or \
                            self.boxLst[self.boxLst.index(self.pw2) - 8 - 1].colliderect(self.pb5) or \
                            self.boxLst[self.boxLst.index(self.pw2) - 8 - 1].colliderect(self.pb6) or \
                            self.boxLst[self.boxLst.index(self.pw2) - 8 - 1].colliderect(self.pb7) or \
                            self.boxLst[self.boxLst.index(self.pw2) - 8 - 1].colliderect(self.pb8) or \
                            self.boxLst[self.boxLst.index(self.pw2) - 8 - 1].colliderect(self.Kb) or \
                            self.boxLst[self.boxLst.index(self.pw2) - 8 - 1].colliderect(self.Qb) or \
                            self.boxLst[self.boxLst.index(self.pw2) - 8 - 1].colliderect(self.rb1) or \
                            self.boxLst[self.boxLst.index(self.pw2) - 8 - 1].colliderect(self.rb2) or \
                            self.boxLst[self.boxLst.index(self.pw2) - 8 - 1].colliderect(self.kb1) or \
                            self.boxLst[self.boxLst.index(self.pw2) - 8 - 1].colliderect(self.kb2) or \
                            self.boxLst[self.boxLst.index(self.pw2) - 8 - 1].colliderect(self.bb1) or \
                            self.boxLst[self.boxLst.index(self.pw2) - 8 - 1].colliderect(self.bb2):
                        pygame.draw.rect(self.window, self.red, self.boxLst[self.boxLst.index(self.pw2) - 8 - 1], border_radius=100)
                        self.pawnWhite2Clicked = 1
                        self.pawnWhite1Clicked = 0
                        self.pawnWhite3Clicked = 0
                        self.pawnWhite4Clicked = 0
                        self.pawnWhite5Clicked = 0
                        self.pawnWhite6Clicked = 0
                        self.pawnWhite7Clicked = 0
                        self.pawnWhite8Clicked = 0
                        self.KingWhiteClicked = 0
                        self.knightWhite1Clicked = 0
                        self.knightWhite2Clicked = 0
                        self.rookWhite1Clicked = 0
                        self.rookWhite2Clicked = 0
                        self.bishopWhite1Clicked = 0
                        self.bishopWhite2Clicked = 0
                        self.QueenWhiteClicked = 0
                        self.pawnWhite2Clicked_cut = 1

            elif self.pw3.collidepoint(self.mouse_x, self.mouse_y):
                if self.pw3.y > self.box1.y:
                    if not self.boxLst[self.boxLst.index(self.pw3) - 8].colliderect(self.pw1) and not \
                            self.boxLst[self.boxLst.index(self.pw3) - 8].colliderect(self.pw2) and not \
                            self.boxLst[self.boxLst.index(self.pw3) - 8].colliderect(self.pb3) and not \
                            self.boxLst[self.boxLst.index(self.pw3) - 8].colliderect(self.pw4) and not \
                            self.boxLst[self.boxLst.index(self.pw3) - 8].colliderect(self.pw5) and not \
                            self.boxLst[self.boxLst.index(self.pw3) - 8].colliderect(self.pw6) and not \
                            self.boxLst[self.boxLst.index(self.pw3) - 8].colliderect(self.pw7) and not \
                            self.boxLst[self.boxLst.index(self.pw3) - 8].colliderect(self.pw8) and not \
                            self.boxLst[self.boxLst.index(self.pw3) - 8].colliderect(self.Kw) and not \
                            self.boxLst[self.boxLst.index(self.pw3) - 8].colliderect(self.Qw) and not \
                            self.boxLst[self.boxLst.index(self.pw3) - 8].colliderect(self.rw1) and not \
                            self.boxLst[self.boxLst.index(self.pw3) - 8].colliderect(self.rw2) and not \
                            self.boxLst[self.boxLst.index(self.pw3) - 8].colliderect(self.kw1) and not \
                            self.boxLst[self.boxLst.index(self.pw3) - 8].colliderect(self.kw2) and not \
                            self.boxLst[self.boxLst.index(self.pw3) - 8].colliderect(self.bw1) and not \
                            self.boxLst[self.boxLst.index(self.pw3) - 8].colliderect(self.bw2) and not \
                            self.boxLst[self.boxLst.index(self.pw3) - 8].colliderect(self.pw2) and not \
                            self.boxLst[self.boxLst.index(self.pw3) - 8].colliderect(self.pw1) and not \
                            self.boxLst[self.boxLst.index(self.pw3) - 8].colliderect(self.pb4) and not \
                            self.boxLst[self.boxLst.index(self.pw3) - 8].colliderect(self.pb5) and not \
                            self.boxLst[self.boxLst.index(self.pw3) - 8].colliderect(self.pb6) and not \
                            self.boxLst[self.boxLst.index(self.pw3) - 8].colliderect(self.pb7) and not \
                            self.boxLst[self.boxLst.index(self.pw3) - 8].colliderect(self.pb8) and not \
                            self.boxLst[self.boxLst.index(self.pw3) - 8].colliderect(self.Kb) and not \
                            self.boxLst[self.boxLst.index(self.pw3) - 8].colliderect(self.Qb) and not \
                            self.boxLst[self.boxLst.index(self.pw3) - 8].colliderect(self.rb1) and not \
                            self.boxLst[self.boxLst.index(self.pw3) - 8].colliderect(self.rb2) and not \
                            self.boxLst[self.boxLst.index(self.pw3) - 8].colliderect(self.kb1) and not \
                            self.boxLst[self.boxLst.index(self.pw3) - 8].colliderect(self.kb2) and not \
                            self.boxLst[self.boxLst.index(self.pw3) - 8].colliderect(self.bb1) and not \
                            self.boxLst[self.boxLst.index(self.pw3) - 8].colliderect(self.bb2):
                        pygame.draw.rect(self.window, self.blue, self.boxLst[self.boxLst.index(self.pw3) - 8], border_radius=100)
                        self.pawnWhite3Clicked = 1
                        self.pawnWhite3Clicked_plus8 = 1
                        self.pawnWhite2Clicked = 0
                        self.pawnWhite1Clicked = 0
                        self.pawnWhite4Clicked = 0
                        self.pawnWhite5Clicked = 0
                        self.pawnWhite6Clicked = 0
                        self.pawnWhite7Clicked = 0
                        self.pawnWhite8Clicked = 0
                        self.KingWhiteClicked = 0
                        self.knightWhite1Clicked = 0
                        self.knightWhite2Clicked = 0
                        self.rookWhite1Clicked = 0
                        self.rookWhite2Clicked = 0
                        self.bishopWhite1Clicked = 0
                        self.bishopWhite2Clicked = 0
                        self.QueenWhiteClicked = 0
                    if self.pw3.y > self.box41.y:
                        if self.pawnWhite3Clicked_plus8 == 1:
                            if not self.boxLst[self.boxLst.index(self.pw3) - 16].colliderect(self.pw1) and not \
                                    self.boxLst[self.boxLst.index(self.pw3) - 16].colliderect(self.pw2) and not \
                                    self.boxLst[self.boxLst.index(self.pw3) - 16].colliderect(self.pb3) and not \
                                    self.boxLst[self.boxLst.index(self.pw3) - 16].colliderect(self.pw4) and not \
                                    self.boxLst[self.boxLst.index(self.pw3) - 16].colliderect(self.pw5) and not \
                                    self.boxLst[self.boxLst.index(self.pw3) - 16].colliderect(self.pw6) and not \
                                    self.boxLst[self.boxLst.index(self.pw3) - 16].colliderect(self.pw7) and not \
                                    self.boxLst[self.boxLst.index(self.pw3) - 16].colliderect(self.pw8) and not \
                                    self.boxLst[self.boxLst.index(self.pw3) - 16].colliderect(self.Kw) and not \
                                    self.boxLst[self.boxLst.index(self.pw3) - 16].colliderect(self.Qw) and not \
                                    self.boxLst[self.boxLst.index(self.pw3) - 16].colliderect(self.rw1) and not \
                                    self.boxLst[self.boxLst.index(self.pw3) - 16].colliderect(self.rw2) and not \
                                    self.boxLst[self.boxLst.index(self.pw3) - 16].colliderect(self.kw1) and not \
                                    self.boxLst[self.boxLst.index(self.pw3) - 16].colliderect(self.kw2) and not \
                                    self.boxLst[self.boxLst.index(self.pw3) - 16].colliderect(self.bw1) and not \
                                    self.boxLst[self.boxLst.index(self.pw3) - 16].colliderect(self.bw2) and not \
                                    self.boxLst[self.boxLst.index(self.pw3) - 16].colliderect(self.pw2) and not \
                                    self.boxLst[self.boxLst.index(self.pw3) - 16].colliderect(self.pw1) and not \
                                    self.boxLst[self.boxLst.index(self.pw3) - 16].colliderect(self.pb4) and not \
                                    self.boxLst[self.boxLst.index(self.pw3) - 16].colliderect(self.pb5) and not \
                                    self.boxLst[self.boxLst.index(self.pw3) - 16].colliderect(self.pb6) and not \
                                    self.boxLst[self.boxLst.index(self.pw3) - 16].colliderect(self.pb7) and not \
                                    self.boxLst[self.boxLst.index(self.pw3) - 16].colliderect(self.pb8) and not \
                                    self.boxLst[self.boxLst.index(self.pw3) - 16].colliderect(self.Kb) and not \
                                    self.boxLst[self.boxLst.index(self.pw3) - 16].colliderect(self.Qb) and not \
                                    self.boxLst[self.boxLst.index(self.pw3) - 16].colliderect(self.rb1) and not \
                                    self.boxLst[self.boxLst.index(self.pw3) - 16].colliderect(self.rb2) and not \
                                    self.boxLst[self.boxLst.index(self.pw3) - 16].colliderect(self.kb1) and not \
                                    self.boxLst[self.boxLst.index(self.pw3) - 16].colliderect(self.kb2) and not \
                                    self.boxLst[self.boxLst.index(self.pw3) - 16].colliderect(self.bb1) and not \
                                    self.boxLst[self.boxLst.index(self.pw3) - 16].colliderect(self.bb2):
                                pygame.draw.rect(self.window, self.blue, self.boxLst[self.boxLst.index(self.pw3) - 16], border_radius=100)
                                self.pawnWhite3Clicked = 1
                                self.pawnWhite2Clicked = 0
                                self.pawnWhite1Clicked = 0
                                self.pawnWhite4Clicked = 0
                                self.pawnWhite5Clicked = 0
                                self.pawnWhite6Clicked = 0
                                self.pawnWhite7Clicked = 0
                                self.pawnWhite8Clicked = 0
                                self.KingWhiteClicked = 0
                                self.knightWhite1Clicked = 0
                                self.knightWhite2Clicked = 0
                                self.rookWhite1Clicked = 0
                                self.rookWhite2Clicked = 0
                                self.bishopWhite1Clicked = 0
                                self.bishopWhite2Clicked = 0
                                self.QueenWhiteClicked = 0
                                self.pawnWhite3Clicked_twoStep = 1
                            elif self.boxLst[self.boxLst.index(self.pw3) - 16].colliderect(self.pw1) or \
                                    self.boxLst[self.boxLst.index(self.pw3) - 16].colliderect(self.pw2) or \
                                    self.boxLst[self.boxLst.index(self.pw3) - 16].colliderect(self.pb3) or \
                                    self.boxLst[self.boxLst.index(self.pw3) - 16].colliderect(self.pw4) or \
                                    self.boxLst[self.boxLst.index(self.pw3) - 16].colliderect(self.pw5) or \
                                    self.boxLst[self.boxLst.index(self.pw3) - 16].colliderect(self.pw6) or \
                                    self.boxLst[self.boxLst.index(self.pw3) - 16].colliderect(self.pw7) or \
                                    self.boxLst[self.boxLst.index(self.pw3) - 16].colliderect(self.pw8) or \
                                    self.boxLst[self.boxLst.index(self.pw3) - 16].colliderect(self.Kw) or \
                                    self.boxLst[self.boxLst.index(self.pw3) - 16].colliderect(self.Qw) or \
                                    self.boxLst[self.boxLst.index(self.pw3) - 16].colliderect(self.rw1) or \
                                    self.boxLst[self.boxLst.index(self.pw3) - 16].colliderect(self.rw2) or \
                                    self.boxLst[self.boxLst.index(self.pw3) - 16].colliderect(self.kw1) or \
                                    self.boxLst[self.boxLst.index(self.pw3) - 16].colliderect(self.kw2) or \
                                    self.boxLst[self.boxLst.index(self.pw3) - 16].colliderect(self.bw1) or \
                                    self.boxLst[self.boxLst.index(self.pw3) - 16].colliderect(self.bw2) or \
                                    self.boxLst[self.boxLst.index(self.pw3) - 16].colliderect(self.pw2) or \
                                    self.boxLst[self.boxLst.index(self.pw3) - 16].colliderect(self.pw1) or \
                                    self.boxLst[self.boxLst.index(self.pw3) - 16].colliderect(self.pb4) or \
                                    self.boxLst[self.boxLst.index(self.pw3) - 16].colliderect(self.pb5) or \
                                    self.boxLst[self.boxLst.index(self.pw3) - 16].colliderect(self.pb6) or \
                                    self.boxLst[self.boxLst.index(self.pw3) - 16].colliderect(self.pb7) or \
                                    self.boxLst[self.boxLst.index(self.pw3) - 16].colliderect(self.pb8) or \
                                    self.boxLst[self.boxLst.index(self.pw3) - 16].colliderect(self.Kb) or \
                                    self.boxLst[self.boxLst.index(self.pw3) - 16].colliderect(self.Qb) or \
                                    self.boxLst[self.boxLst.index(self.pw3) - 16].colliderect(self.rb1) or \
                                    self.boxLst[self.boxLst.index(self.pw3) - 16].colliderect(self.rb2) or \
                                    self.boxLst[self.boxLst.index(self.pw3) - 16].colliderect(self.kb1) or \
                                    self.boxLst[self.boxLst.index(self.pw3) - 16].colliderect(self.kb2) or \
                                    self.boxLst[self.boxLst.index(self.pw3) - 16].colliderect(self.bb1) or \
                                    self.boxLst[self.boxLst.index(self.pw3) - 16].colliderect(self.bb2):
                                self.pawnWhite3Clicked_twoStep = 0
                if self.pw3.y > self.box1.y:
                    if self.boxLst[self.boxLst.index(self.pw3) - 8].colliderect(self.pw1) or \
                            self.boxLst[self.boxLst.index(self.pw3) - 8].colliderect(self.pw2) or \
                            self.boxLst[self.boxLst.index(self.pw3) - 8].colliderect(self.pb3) or \
                            self.boxLst[self.boxLst.index(self.pw3) - 8].colliderect(self.pw4) or \
                            self.boxLst[self.boxLst.index(self.pw3) - 8].colliderect(self.pw5) or \
                            self.boxLst[self.boxLst.index(self.pw3) - 8].colliderect(self.pw6) or \
                            self.boxLst[self.boxLst.index(self.pw3) - 8].colliderect(self.pw7) or \
                            self.boxLst[self.boxLst.index(self.pw3) - 8].colliderect(self.pw8) or \
                            self.boxLst[self.boxLst.index(self.pw3) - 8].colliderect(self.Kw) or \
                            self.boxLst[self.boxLst.index(self.pw3) - 8].colliderect(self.Qw) or \
                            self.boxLst[self.boxLst.index(self.pw3) - 8].colliderect(self.rw1) or \
                            self.boxLst[self.boxLst.index(self.pw3) - 8].colliderect(self.rw2) or \
                            self.boxLst[self.boxLst.index(self.pw3) - 8].colliderect(self.kw1) or \
                            self.boxLst[self.boxLst.index(self.pw3) - 8].colliderect(self.kw2) or \
                            self.boxLst[self.boxLst.index(self.pw3) - 8].colliderect(self.bw1) or \
                            self.boxLst[self.boxLst.index(self.pw3) - 8].colliderect(self.bw2) or \
                            self.boxLst[self.boxLst.index(self.pw3) - 8].colliderect(self.pw2) or \
                            self.boxLst[self.boxLst.index(self.pw3) - 8].colliderect(self.pw1) or \
                            self.boxLst[self.boxLst.index(self.pw3) - 8].colliderect(self.pb4) or \
                            self.boxLst[self.boxLst.index(self.pw3) - 8].colliderect(self.pb5) or \
                            self.boxLst[self.boxLst.index(self.pw3) - 8].colliderect(self.pb6) or \
                            self.boxLst[self.boxLst.index(self.pw3) - 8].colliderect(self.pb7) or \
                            self.boxLst[self.boxLst.index(self.pw3) - 8].colliderect(self.pb8) or \
                            self.boxLst[self.boxLst.index(self.pw3) - 8].colliderect(self.Kb) or \
                            self.boxLst[self.boxLst.index(self.pw3) - 8].colliderect(self.Qb) or \
                            self.boxLst[self.boxLst.index(self.pw3) - 8].colliderect(self.rb1) or \
                            self.boxLst[self.boxLst.index(self.pw3) - 8].colliderect(self.rb2) or \
                            self.boxLst[self.boxLst.index(self.pw3) - 8].colliderect(self.kb1) or \
                            self.boxLst[self.boxLst.index(self.pw3) - 8].colliderect(self.kb2) or \
                            self.boxLst[self.boxLst.index(self.pw3) - 8].colliderect(self.bb1) or \
                            self.boxLst[self.boxLst.index(self.pw3) - 8].colliderect(self.bb2):
                        self.pawnWhite3Clicked = 0
                if self.pw3.x < self.box8.x and self.pw3.y > self.box1.y:
                    if self.boxLst[self.boxLst.index(self.pw3) - 8 + 1].colliderect(self.pb1) or \
                            self.boxLst[self.boxLst.index(self.pw3) - 8 + 1].colliderect(self.pb2) or \
                            self.boxLst[self.boxLst.index(self.pw3) - 8 + 1].colliderect(self.pb3) or \
                            self.boxLst[self.boxLst.index(self.pw3) - 8 + 1].colliderect(self.pb4) or \
                            self.boxLst[self.boxLst.index(self.pw3) - 8 + 1].colliderect(self.pb5) or \
                            self.boxLst[self.boxLst.index(self.pw3) - 8 + 1].colliderect(self.pb6) or \
                            self.boxLst[self.boxLst.index(self.pw3) - 8 + 1].colliderect(self.pb7) or \
                            self.boxLst[self.boxLst.index(self.pw3) - 8 + 1].colliderect(self.pb8) or \
                            self.boxLst[self.boxLst.index(self.pw3) - 8 + 1].colliderect(self.Kb) or \
                            self.boxLst[self.boxLst.index(self.pw3) - 8 + 1].colliderect(self.Qb) or \
                            self.boxLst[self.boxLst.index(self.pw3) - 8 + 1].colliderect(self.rb1) or \
                            self.boxLst[self.boxLst.index(self.pw3) - 8 + 1].colliderect(self.rb2) or \
                            self.boxLst[self.boxLst.index(self.pw3) - 8 + 1].colliderect(self.kb1) or \
                            self.boxLst[self.boxLst.index(self.pw3) - 8 + 1].colliderect(self.kb2) or \
                            self.boxLst[self.boxLst.index(self.pw3) - 8 + 1].colliderect(self.bb1) or \
                            self.boxLst[self.boxLst.index(self.pw3) - 8 + 1].colliderect(self.bb2):
                        pygame.draw.rect(self.window, self.red, self.boxLst[self.boxLst.index(self.pw3) - 8 + 1], border_radius=100)
                        self.pawnWhite3Clicked = 1
                        self.pawnWhite2Clicked = 0
                        self.pawnWhite1Clicked = 0
                        self.pawnWhite4Clicked = 0
                        self.pawnWhite5Clicked = 0
                        self.pawnWhite6Clicked = 0
                        self.pawnWhite7Clicked = 0
                        self.pawnWhite8Clicked = 0
                        self.KingWhiteClicked = 0
                        self.knightWhite1Clicked = 0
                        self.knightWhite2Clicked = 0
                        self.rookWhite1Clicked = 0
                        self.rookWhite2Clicked = 0
                        self.bishopWhite1Clicked = 0
                        self.bishopWhite2Clicked = 0
                        self.QueenWhiteClicked = 0
                        self.pawnWhite3Clicked_cut = 1
                if self.pw3.x  > self.box1.x and self.pw3.y > self.box1.y:
                    if self.boxLst[self.boxLst.index(self.pw3) - 8 - 1].colliderect(self.pb1) or \
                            self.boxLst[self.boxLst.index(self.pw3) - 8 - 1].colliderect(self.pb2) or \
                            self.boxLst[self.boxLst.index(self.pw3) - 8 - 1].colliderect(self.pb3) or \
                            self.boxLst[self.boxLst.index(self.pw3) - 8 - 1].colliderect(self.pb4) or \
                            self.boxLst[self.boxLst.index(self.pw3) - 8 - 1].colliderect(self.pb5) or \
                            self.boxLst[self.boxLst.index(self.pw3) - 8 - 1].colliderect(self.pb6) or \
                            self.boxLst[self.boxLst.index(self.pw3) - 8 - 1].colliderect(self.pb7) or \
                            self.boxLst[self.boxLst.index(self.pw3) - 8 - 1].colliderect(self.pb8) or \
                            self.boxLst[self.boxLst.index(self.pw3) - 8 - 1].colliderect(self.Kb) or \
                            self.boxLst[self.boxLst.index(self.pw3) - 8 - 1].colliderect(self.Qb) or \
                            self.boxLst[self.boxLst.index(self.pw3) - 8 - 1].colliderect(self.rb1) or \
                            self.boxLst[self.boxLst.index(self.pw3) - 8 - 1].colliderect(self.rb2) or \
                            self.boxLst[self.boxLst.index(self.pw3) - 8 - 1].colliderect(self.kb1) or \
                            self.boxLst[self.boxLst.index(self.pw3) - 8 - 1].colliderect(self.kb2) or \
                            self.boxLst[self.boxLst.index(self.pw3) - 8 - 1].colliderect(self.bb1) or \
                            self.boxLst[self.boxLst.index(self.pw3) - 8 - 1].colliderect(self.bb2):
                        pygame.draw.rect(self.window, self.red, self.boxLst[self.boxLst.index(self.pw3) - 8 - 1], border_radius=100)
                        self.pawnWhite3Clicked = 1
                        self.pawnWhite2Clicked = 0
                        self.pawnWhite1Clicked = 0
                        self.pawnWhite4Clicked = 0
                        self.pawnWhite5Clicked = 0
                        self.pawnWhite6Clicked = 0
                        self.pawnWhite7Clicked = 0
                        self.pawnWhite8Clicked = 0
                        self.KingWhiteClicked = 0
                        self.knightWhite1Clicked = 0
                        self.knightWhite2Clicked = 0
                        self.rookWhite1Clicked = 0
                        self.rookWhite2Clicked = 0
                        self.bishopWhite1Clicked = 0
                        self.bishopWhite2Clicked = 0
                        self.QueenWhiteClicked = 0
                        self.pawnWhite3Clicked_cut = 1

            elif self.pw4.collidepoint(self.mouse_x, self.mouse_y):
                if self.pw4.y > self.box1.y:
                    if not self.boxLst[self.boxLst.index(self.pw4) - 8].colliderect(self.pw1) and not \
                            self.boxLst[self.boxLst.index(self.pw4) - 8].colliderect(self.pw2) and not \
                            self.boxLst[self.boxLst.index(self.pw4) - 8].colliderect(self.pw3) and not \
                            self.boxLst[self.boxLst.index(self.pw4) - 8].colliderect(self.pb4) and not \
                            self.boxLst[self.boxLst.index(self.pw4) - 8].colliderect(self.pw5) and not \
                            self.boxLst[self.boxLst.index(self.pw4) - 8].colliderect(self.pw6) and not \
                            self.boxLst[self.boxLst.index(self.pw4) - 8].colliderect(self.pw7) and not \
                            self.boxLst[self.boxLst.index(self.pw4) - 8].colliderect(self.pw8) and not \
                            self.boxLst[self.boxLst.index(self.pw4) - 8].colliderect(self.Kw) and not \
                            self.boxLst[self.boxLst.index(self.pw4) - 8].colliderect(self.Qw) and not \
                            self.boxLst[self.boxLst.index(self.pw4) - 8].colliderect(self.rw1) and not \
                            self.boxLst[self.boxLst.index(self.pw4) - 8].colliderect(self.rw2) and not \
                            self.boxLst[self.boxLst.index(self.pw4) - 8].colliderect(self.kw1) and not \
                            self.boxLst[self.boxLst.index(self.pw4) - 8].colliderect(self.kw2) and not \
                            self.boxLst[self.boxLst.index(self.pw4) - 8].colliderect(self.bw1) and not \
                            self.boxLst[self.boxLst.index(self.pw4) - 8].colliderect(self.bw2) and not \
                            self.boxLst[self.boxLst.index(self.pw4) - 8].colliderect(self.pw2) and not \
                            self.boxLst[self.boxLst.index(self.pw4) - 8].colliderect(self.pw3) and not \
                            self.boxLst[self.boxLst.index(self.pw4) - 8].colliderect(self.pw1) and not \
                            self.boxLst[self.boxLst.index(self.pw4) - 8].colliderect(self.pb5) and not \
                            self.boxLst[self.boxLst.index(self.pw4) - 8].colliderect(self.pb6) and not \
                            self.boxLst[self.boxLst.index(self.pw4) - 8].colliderect(self.pb7) and not \
                            self.boxLst[self.boxLst.index(self.pw4) - 8].colliderect(self.pb8) and not \
                            self.boxLst[self.boxLst.index(self.pw4) - 8].colliderect(self.Kb) and not \
                            self.boxLst[self.boxLst.index(self.pw4) - 8].colliderect(self.Qb) and not \
                            self.boxLst[self.boxLst.index(self.pw4) - 8].colliderect(self.rb1) and not \
                            self.boxLst[self.boxLst.index(self.pw4) - 8].colliderect(self.rb2) and not \
                            self.boxLst[self.boxLst.index(self.pw4) - 8].colliderect(self.kb1) and not \
                            self.boxLst[self.boxLst.index(self.pw4) - 8].colliderect(self.kb2) and not \
                            self.boxLst[self.boxLst.index(self.pw4) - 8].colliderect(self.bb1) and not \
                            self.boxLst[self.boxLst.index(self.pw4) - 8].colliderect(self.bb2):
                        pygame.draw.rect(self.window, self.blue, self.boxLst[self.boxLst.index(self.pw4) - 8], border_radius=100)
                        self.pawnWhite4Clicked = 1
                        self.pawnWhite4Clicked_plus8 = 1
                        self.pawnWhite2Clicked = 0
                        self.pawnWhite3Clicked = 0
                        self.pawnWhite1Clicked = 0
                        self.pawnWhite5Clicked = 0
                        self.pawnWhite6Clicked = 0
                        self.pawnWhite7Clicked = 0
                        self.pawnWhite8Clicked = 0
                        self.KingWhiteClicked = 0
                        self.knightWhite1Clicked = 0
                        self.knightWhite2Clicked = 0
                        self.rookWhite1Clicked = 0
                        self.rookWhite2Clicked = 0
                        self.bishopWhite1Clicked = 0
                        self.bishopWhite2Clicked = 0
                        self.QueenWhiteClicked = 0
                    if self.pw4.y > self.box41.y:
                        if self.pawnWhite4Clicked_plus8 == 1:
                            if not self.boxLst[self.boxLst.index(self.pw4) - 16].colliderect(self.pw1) and not \
                                    self.boxLst[self.boxLst.index(self.pw4) - 16].colliderect(self.pw2) and not \
                                    self.boxLst[self.boxLst.index(self.pw4) - 16].colliderect(self.pw3) and not \
                                    self.boxLst[self.boxLst.index(self.pw4) - 16].colliderect(self.pb4) and not \
                                    self.boxLst[self.boxLst.index(self.pw4) - 16].colliderect(self.pw5) and not \
                                    self.boxLst[self.boxLst.index(self.pw4) - 16].colliderect(self.pw6) and not \
                                    self.boxLst[self.boxLst.index(self.pw4) - 16].colliderect(self.pw7) and not \
                                    self.boxLst[self.boxLst.index(self.pw4) - 16].colliderect(self.pw8) and not \
                                    self.boxLst[self.boxLst.index(self.pw4) - 16].colliderect(self.Kw) and not \
                                    self.boxLst[self.boxLst.index(self.pw4) - 16].colliderect(self.Qw) and not \
                                    self.boxLst[self.boxLst.index(self.pw4) - 16].colliderect(self.rw1) and not \
                                    self.boxLst[self.boxLst.index(self.pw4) - 16].colliderect(self.rw2) and not \
                                    self.boxLst[self.boxLst.index(self.pw4) - 16].colliderect(self.kw1) and not \
                                    self.boxLst[self.boxLst.index(self.pw4) - 16].colliderect(self.kw2) and not \
                                    self.boxLst[self.boxLst.index(self.pw4) - 16].colliderect(self.bw1) and not \
                                    self.boxLst[self.boxLst.index(self.pw4) - 16].colliderect(self.bw2) and not \
                                    self.boxLst[self.boxLst.index(self.pw4) - 16].colliderect(self.pw2) and not \
                                    self.boxLst[self.boxLst.index(self.pw4) - 16].colliderect(self.pw3) and not \
                                    self.boxLst[self.boxLst.index(self.pw4) - 16].colliderect(self.pw1) and not \
                                    self.boxLst[self.boxLst.index(self.pw4) - 16].colliderect(self.pb5) and not \
                                    self.boxLst[self.boxLst.index(self.pw4) - 16].colliderect(self.pb6) and not \
                                    self.boxLst[self.boxLst.index(self.pw4) - 16].colliderect(self.pb7) and not \
                                    self.boxLst[self.boxLst.index(self.pw4) - 16].colliderect(self.pb8) and not \
                                    self.boxLst[self.boxLst.index(self.pw4) - 16].colliderect(self.Kb) and not \
                                    self.boxLst[self.boxLst.index(self.pw4) - 16].colliderect(self.Qb) and not \
                                    self.boxLst[self.boxLst.index(self.pw4) - 16].colliderect(self.rb1) and not \
                                    self.boxLst[self.boxLst.index(self.pw4) - 16].colliderect(self.rb2) and not \
                                    self.boxLst[self.boxLst.index(self.pw4) - 16].colliderect(self.kb1) and not \
                                    self.boxLst[self.boxLst.index(self.pw4) - 16].colliderect(self.kb2) and not \
                                    self.boxLst[self.boxLst.index(self.pw4) - 16].colliderect(self.bb1) and not \
                                    self.boxLst[self.boxLst.index(self.pw4) - 16].colliderect(self.bb2):
                                pygame.draw.rect(self.window, self.blue, self.boxLst[self.boxLst.index(self.pw4) - 16], border_radius=100)
                                self.pawnWhite4Clicked = 1
                                self.pawnWhite2Clicked = 0
                                self.pawnWhite3Clicked = 0
                                self.pawnWhite1Clicked = 0
                                self.pawnWhite5Clicked = 0
                                self.pawnWhite6Clicked = 0
                                self.pawnWhite7Clicked = 0
                                self.pawnWhite8Clicked = 0
                                self.KingWhiteClicked = 0
                                self.knightWhite1Clicked = 0
                                self.knightWhite2Clicked = 0
                                self.rookWhite1Clicked = 0
                                self.rookWhite2Clicked = 0
                                self.bishopWhite1Clicked = 0
                                self.bishopWhite2Clicked = 0
                                self.QueenWhiteClicked = 0
                                self.pawnWhite4Clicked_twoStep = 1
                            elif self.boxLst[self.boxLst.index(self.pw4) - 16].colliderect(self.pw1) or \
                                    self.boxLst[self.boxLst.index(self.pw4) - 16].colliderect(self.pw2) or \
                                    self.boxLst[self.boxLst.index(self.pw4) - 16].colliderect(self.pw3) or \
                                    self.boxLst[self.boxLst.index(self.pw4) - 16].colliderect(self.pb4) or \
                                    self.boxLst[self.boxLst.index(self.pw4) - 16].colliderect(self.pw5) or \
                                    self.boxLst[self.boxLst.index(self.pw4) - 16].colliderect(self.pw6) or \
                                    self.boxLst[self.boxLst.index(self.pw4) - 16].colliderect(self.pw7) or \
                                    self.boxLst[self.boxLst.index(self.pw4) - 16].colliderect(self.pw8) or \
                                    self.boxLst[self.boxLst.index(self.pw4) - 16].colliderect(self.Kw) or \
                                    self.boxLst[self.boxLst.index(self.pw4) - 16].colliderect(self.Qw) or \
                                    self.boxLst[self.boxLst.index(self.pw4) - 16].colliderect(self.rw1) or \
                                    self.boxLst[self.boxLst.index(self.pw4) - 16].colliderect(self.rw2) or \
                                    self.boxLst[self.boxLst.index(self.pw4) - 16].colliderect(self.kw1) or \
                                    self.boxLst[self.boxLst.index(self.pw4) - 16].colliderect(self.kw2) or \
                                    self.boxLst[self.boxLst.index(self.pw4) - 16].colliderect(self.bw1) or \
                                    self.boxLst[self.boxLst.index(self.pw4) - 16].colliderect(self.bw2) or \
                                    self.boxLst[self.boxLst.index(self.pw4) - 16].colliderect(self.pw2) or \
                                    self.boxLst[self.boxLst.index(self.pw4) - 16].colliderect(self.pw3) or \
                                    self.boxLst[self.boxLst.index(self.pw4) - 16].colliderect(self.pw1) or \
                                    self.boxLst[self.boxLst.index(self.pw4) - 16].colliderect(self.pb5) or \
                                    self.boxLst[self.boxLst.index(self.pw4) - 16].colliderect(self.pb6) or \
                                    self.boxLst[self.boxLst.index(self.pw4) - 16].colliderect(self.pb7) or \
                                    self.boxLst[self.boxLst.index(self.pw4) - 16].colliderect(self.pb8) or \
                                    self.boxLst[self.boxLst.index(self.pw4) - 16].colliderect(self.Kb) or \
                                    self.boxLst[self.boxLst.index(self.pw4) - 16].colliderect(self.Qb) or \
                                    self.boxLst[self.boxLst.index(self.pw4) - 16].colliderect(self.rb1) or \
                                    self.boxLst[self.boxLst.index(self.pw4) - 16].colliderect(self.rb2) or \
                                    self.boxLst[self.boxLst.index(self.pw4) - 16].colliderect(self.kb1) or \
                                    self.boxLst[self.boxLst.index(self.pw4) - 16].colliderect(self.kb2) or \
                                    self.boxLst[self.boxLst.index(self.pw4) - 16].colliderect(self.bb1) or \
                                    self.boxLst[self.boxLst.index(self.pw4) - 16].colliderect(self.bb2):
                                self.pawnWhite4Clicked_twoStep = 0
                if self.pw4.y > self.box1.y:
                    if self.boxLst[self.boxLst.index(self.pw4) - 8].colliderect(self.pw1) or \
                            self.boxLst[self.boxLst.index(self.pw4) - 8].colliderect(self.pw2) or \
                            self.boxLst[self.boxLst.index(self.pw4) - 8].colliderect(self.pw3) or \
                            self.boxLst[self.boxLst.index(self.pw4) - 8].colliderect(self.pb4) or \
                            self.boxLst[self.boxLst.index(self.pw4) - 8].colliderect(self.pw5) or \
                            self.boxLst[self.boxLst.index(self.pw4) - 8].colliderect(self.pw6) or \
                            self.boxLst[self.boxLst.index(self.pw4) - 8].colliderect(self.pw7) or \
                            self.boxLst[self.boxLst.index(self.pw4) - 8].colliderect(self.pw8) or \
                            self.boxLst[self.boxLst.index(self.pw4) - 8].colliderect(self.Kw) or \
                            self.boxLst[self.boxLst.index(self.pw4) - 8].colliderect(self.Qw) or \
                            self.boxLst[self.boxLst.index(self.pw4) - 8].colliderect(self.rw1) or \
                            self.boxLst[self.boxLst.index(self.pw4) - 8].colliderect(self.rw2) or \
                            self.boxLst[self.boxLst.index(self.pw4) - 8].colliderect(self.kw1) or \
                            self.boxLst[self.boxLst.index(self.pw4) - 8].colliderect(self.kw2) or \
                            self.boxLst[self.boxLst.index(self.pw4) - 8].colliderect(self.bw1) or \
                            self.boxLst[self.boxLst.index(self.pw4) - 8].colliderect(self.bw2) or \
                            self.boxLst[self.boxLst.index(self.pw4) - 8].colliderect(self.pw2) or \
                            self.boxLst[self.boxLst.index(self.pw4) - 8].colliderect(self.pw3) or \
                            self.boxLst[self.boxLst.index(self.pw4) - 8].colliderect(self.pw1) or \
                            self.boxLst[self.boxLst.index(self.pw4) - 8].colliderect(self.pb5) or \
                            self.boxLst[self.boxLst.index(self.pw4) - 8].colliderect(self.pb6) or \
                            self.boxLst[self.boxLst.index(self.pw4) - 8].colliderect(self.pb7) or \
                            self.boxLst[self.boxLst.index(self.pw4) - 8].colliderect(self.pb8) or \
                            self.boxLst[self.boxLst.index(self.pw4) - 8].colliderect(self.Kb) or \
                            self.boxLst[self.boxLst.index(self.pw4) - 8].colliderect(self.Qb) or \
                            self.boxLst[self.boxLst.index(self.pw4) - 8].colliderect(self.rb1) or \
                            self.boxLst[self.boxLst.index(self.pw4) - 8].colliderect(self.rb2) or \
                            self.boxLst[self.boxLst.index(self.pw4) - 8].colliderect(self.kb1) or \
                            self.boxLst[self.boxLst.index(self.pw4) - 8].colliderect(self.kb2) or \
                            self.boxLst[self.boxLst.index(self.pw4) - 8].colliderect(self.bb1) or \
                            self.boxLst[self.boxLst.index(self.pw4) - 8].colliderect(self.bb2):
                        self.pawnWhite4Clicked = 0
                if self.pw4.x < self.box8.x and self.pw4.y > self.box1.y:
                    if self.boxLst[self.boxLst.index(self.pw4) - 8 + 1].colliderect(self.pb1) or \
                            self.boxLst[self.boxLst.index(self.pw4) - 8 + 1].colliderect(self.pb2) or \
                            self.boxLst[self.boxLst.index(self.pw4) - 8 + 1].colliderect(self.pw3) or \
                            self.boxLst[self.boxLst.index(self.pw4) - 8 + 1].colliderect(self.pb4) or \
                            self.boxLst[self.boxLst.index(self.pw4) - 8 + 1].colliderect(self.pb5) or \
                            self.boxLst[self.boxLst.index(self.pw4) - 8 + 1].colliderect(self.pb6) or \
                            self.boxLst[self.boxLst.index(self.pw4) - 8 + 1].colliderect(self.pb7) or \
                            self.boxLst[self.boxLst.index(self.pw4) - 8 + 1].colliderect(self.pb8) or \
                            self.boxLst[self.boxLst.index(self.pw4) - 8 + 1].colliderect(self.Kb) or \
                            self.boxLst[self.boxLst.index(self.pw4) - 8 + 1].colliderect(self.Qb) or \
                            self.boxLst[self.boxLst.index(self.pw4) - 8 + 1].colliderect(self.rb1) or \
                            self.boxLst[self.boxLst.index(self.pw4) - 8 + 1].colliderect(self.rb2) or \
                            self.boxLst[self.boxLst.index(self.pw4) - 8 + 1].colliderect(self.kb1) or \
                            self.boxLst[self.boxLst.index(self.pw4) - 8 + 1].colliderect(self.kb2) or \
                            self.boxLst[self.boxLst.index(self.pw4) - 8 + 1].colliderect(self.bb1) or \
                            self.boxLst[self.boxLst.index(self.pw4) - 8 + 1].colliderect(self.bb2):
                        pygame.draw.rect(self.window, self.red, self.boxLst[self.boxLst.index(self.pw4) - 8 + 1], border_radius=100)
                        self.pawnWhite4Clicked = 1
                        self.pawnWhite2Clicked = 0
                        self.pawnWhite3Clicked = 0
                        self.pawnWhite1Clicked = 0
                        self.pawnWhite5Clicked = 0
                        self.pawnWhite6Clicked = 0
                        self.pawnWhite7Clicked = 0
                        self.pawnWhite8Clicked = 0
                        self.KingWhiteClicked = 0
                        self.knightWhite1Clicked = 0
                        self.knightWhite2Clicked = 0
                        self.rookWhite1Clicked = 0
                        self.rookWhite2Clicked = 0
                        self.bishopWhite1Clicked = 0
                        self.bishopWhite2Clicked = 0
                        self.QueenWhiteClicked = 0
                        self.pawnWhite4Clicked_cut = 1
                if self.pw4.x  > self.box1.x and self.pw4.y > self.box1.y:
                    if self.boxLst[self.boxLst.index(self.pw4) - 8 - 1].colliderect(self.pb1) or \
                            self.boxLst[self.boxLst.index(self.pw4) - 8 - 1].colliderect(self.pb2) or \
                            self.boxLst[self.boxLst.index(self.pw4) - 8 - 1].colliderect(self.pw3) or \
                            self.boxLst[self.boxLst.index(self.pw4) - 8 - 1].colliderect(self.pb4) or \
                            self.boxLst[self.boxLst.index(self.pw4) - 8 - 1].colliderect(self.pb5) or \
                            self.boxLst[self.boxLst.index(self.pw4) - 8 - 1].colliderect(self.pb6) or \
                            self.boxLst[self.boxLst.index(self.pw4) - 8 - 1].colliderect(self.pb7) or \
                            self.boxLst[self.boxLst.index(self.pw4) - 8 - 1].colliderect(self.pb8) or \
                            self.boxLst[self.boxLst.index(self.pw4) - 8 - 1].colliderect(self.Kb) or \
                            self.boxLst[self.boxLst.index(self.pw4) - 8 - 1].colliderect(self.Qb) or \
                            self.boxLst[self.boxLst.index(self.pw4) - 8 - 1].colliderect(self.rb1) or \
                            self.boxLst[self.boxLst.index(self.pw4) - 8 - 1].colliderect(self.rb2) or \
                            self.boxLst[self.boxLst.index(self.pw4) - 8 - 1].colliderect(self.kb1) or \
                            self.boxLst[self.boxLst.index(self.pw4) - 8 - 1].colliderect(self.kb2) or \
                            self.boxLst[self.boxLst.index(self.pw4) - 8 - 1].colliderect(self.bb1) or \
                            self.boxLst[self.boxLst.index(self.pw4) - 8 - 1].colliderect(self.bb2):
                        pygame.draw.rect(self.window, self.red, self.boxLst[self.boxLst.index(self.pw4) - 8 - 1], border_radius=100)
                        self.pawnWhite4Clicked = 1
                        self.pawnWhite2Clicked = 0
                        self.pawnWhite3Clicked = 0
                        self.pawnWhite1Clicked = 0
                        self.pawnWhite5Clicked = 0
                        self.pawnWhite6Clicked = 0
                        self.pawnWhite7Clicked = 0
                        self.pawnWhite8Clicked = 0
                        self.KingWhiteClicked = 0
                        self.knightWhite1Clicked = 0
                        self.knightWhite2Clicked = 0
                        self.rookWhite1Clicked = 0
                        self.rookWhite2Clicked = 0
                        self.bishopWhite1Clicked = 0
                        self.bishopWhite2Clicked = 0
                        self.QueenWhiteClicked = 0
                        self.pawnWhite4Clicked_cut = 1

            elif self.pw5.collidepoint(self.mouse_x, self.mouse_y):
                if self.pw5.y > self.box1.y:
                    if not self.boxLst[self.boxLst.index(self.pw5) - 8].colliderect(self.pw1) and not \
                            self.boxLst[self.boxLst.index(self.pw5) - 8].colliderect(self.pw2) and not \
                            self.boxLst[self.boxLst.index(self.pw5) - 8].colliderect(self.pw3) and not \
                            self.boxLst[self.boxLst.index(self.pw5) - 8].colliderect(self.pw4) and not \
                            self.boxLst[self.boxLst.index(self.pw5) - 8].colliderect(self.pb5) and not \
                            self.boxLst[self.boxLst.index(self.pw5) - 8].colliderect(self.pw6) and not \
                            self.boxLst[self.boxLst.index(self.pw5) - 8].colliderect(self.pw7) and not \
                            self.boxLst[self.boxLst.index(self.pw5) - 8].colliderect(self.pw8) and not \
                            self.boxLst[self.boxLst.index(self.pw5) - 8].colliderect(self.Kw) and not \
                            self.boxLst[self.boxLst.index(self.pw5) - 8].colliderect(self.Qw) and not \
                            self.boxLst[self.boxLst.index(self.pw5) - 8].colliderect(self.rw1) and not \
                            self.boxLst[self.boxLst.index(self.pw5) - 8].colliderect(self.rw2) and not \
                            self.boxLst[self.boxLst.index(self.pw5) - 8].colliderect(self.kw1) and not \
                            self.boxLst[self.boxLst.index(self.pw5) - 8].colliderect(self.kw2) and not \
                            self.boxLst[self.boxLst.index(self.pw5) - 8].colliderect(self.bw1) and not \
                            self.boxLst[self.boxLst.index(self.pw5) - 8].colliderect(self.bw2) and not \
                            self.boxLst[self.boxLst.index(self.pw5) - 8].colliderect(self.pw2) and not \
                            self.boxLst[self.boxLst.index(self.pw5) - 8].colliderect(self.pw3) and not \
                            self.boxLst[self.boxLst.index(self.pw5) - 8].colliderect(self.pw4) and not \
                            self.boxLst[self.boxLst.index(self.pw5) - 8].colliderect(self.pw1) and not \
                            self.boxLst[self.boxLst.index(self.pw5) - 8].colliderect(self.pb6) and not \
                            self.boxLst[self.boxLst.index(self.pw5) - 8].colliderect(self.pb7) and not \
                            self.boxLst[self.boxLst.index(self.pw5) - 8].colliderect(self.pb8) and not \
                            self.boxLst[self.boxLst.index(self.pw5) - 8].colliderect(self.Kb) and not \
                            self.boxLst[self.boxLst.index(self.pw5) - 8].colliderect(self.Qb) and not \
                            self.boxLst[self.boxLst.index(self.pw5) - 8].colliderect(self.rb1) and not \
                            self.boxLst[self.boxLst.index(self.pw5) - 8].colliderect(self.rb2) and not \
                            self.boxLst[self.boxLst.index(self.pw5) - 8].colliderect(self.kb1) and not \
                            self.boxLst[self.boxLst.index(self.pw5) - 8].colliderect(self.kb2) and not \
                            self.boxLst[self.boxLst.index(self.pw5) - 8].colliderect(self.bb1) and not \
                            self.boxLst[self.boxLst.index(self.pw5) - 8].colliderect(self.bb2):
                        pygame.draw.rect(self.window, self.blue, self.boxLst[self.boxLst.index(self.pw5) - 8], border_radius=100)
                        self.pawnWhite5Clicked = 1
                        self.pawnWhite5Clicked_plus8 = 1
                        self.pawnWhite2Clicked = 0
                        self.pawnWhite3Clicked = 0
                        self.pawnWhite4Clicked = 0
                        self.pawnWhite1Clicked = 0
                        self.pawnWhite6Clicked = 0
                        self.pawnWhite7Clicked = 0
                        self.pawnWhite8Clicked = 0
                        self.KingWhiteClicked = 0
                        self.knightWhite1Clicked = 0
                        self.knightWhite2Clicked = 0
                        self.rookWhite1Clicked = 0
                        self.rookWhite2Clicked = 0
                        self.bishopWhite1Clicked = 0
                        self.bishopWhite2Clicked = 0
                        self.QueenWhiteClicked = 0
                    if self.pw5.y > self.box41.y:
                        if self.pawnWhite5Clicked_plus8 == 1:
                            if not self.boxLst[self.boxLst.index(self.pw5) - 16].colliderect(self.pw1) and not \
                                    self.boxLst[self.boxLst.index(self.pw5) - 16].colliderect(self.pw2) and not \
                                    self.boxLst[self.boxLst.index(self.pw5) - 16].colliderect(self.pw3) and not \
                                    self.boxLst[self.boxLst.index(self.pw5) - 16].colliderect(self.pw4) and not \
                                    self.boxLst[self.boxLst.index(self.pw5) - 16].colliderect(self.pb5) and not \
                                    self.boxLst[self.boxLst.index(self.pw5) - 16].colliderect(self.pw6) and not \
                                    self.boxLst[self.boxLst.index(self.pw5) - 16].colliderect(self.pw7) and not \
                                    self.boxLst[self.boxLst.index(self.pw5) - 16].colliderect(self.pw8) and not \
                                    self.boxLst[self.boxLst.index(self.pw5) - 16].colliderect(self.Kw) and not \
                                    self.boxLst[self.boxLst.index(self.pw5) - 16].colliderect(self.Qw) and not \
                                    self.boxLst[self.boxLst.index(self.pw5) - 16].colliderect(self.rw1) and not \
                                    self.boxLst[self.boxLst.index(self.pw5) - 16].colliderect(self.rw2) and not \
                                    self.boxLst[self.boxLst.index(self.pw5) - 16].colliderect(self.kw1) and not \
                                    self.boxLst[self.boxLst.index(self.pw5) - 16].colliderect(self.kw2) and not \
                                    self.boxLst[self.boxLst.index(self.pw5) - 16].colliderect(self.bw1) and not \
                                    self.boxLst[self.boxLst.index(self.pw5) - 16].colliderect(self.bw2) and not \
                                    self.boxLst[self.boxLst.index(self.pw5) - 16].colliderect(self.pw2) and not \
                                    self.boxLst[self.boxLst.index(self.pw5) - 16].colliderect(self.pw3) and not \
                                    self.boxLst[self.boxLst.index(self.pw5) - 16].colliderect(self.pw4) and not \
                                    self.boxLst[self.boxLst.index(self.pw5) - 16].colliderect(self.pw1) and not \
                                    self.boxLst[self.boxLst.index(self.pw5) - 16].colliderect(self.pb6) and not \
                                    self.boxLst[self.boxLst.index(self.pw5) - 16].colliderect(self.pb7) and not \
                                    self.boxLst[self.boxLst.index(self.pw5) - 16].colliderect(self.pb8) and not \
                                    self.boxLst[self.boxLst.index(self.pw5) - 16].colliderect(self.Kb) and not \
                                    self.boxLst[self.boxLst.index(self.pw5) - 16].colliderect(self.Qb) and not \
                                    self.boxLst[self.boxLst.index(self.pw5) - 16].colliderect(self.rb1) and not \
                                    self.boxLst[self.boxLst.index(self.pw5) - 16].colliderect(self.rb2) and not \
                                    self.boxLst[self.boxLst.index(self.pw5) - 16].colliderect(self.kb1) and not \
                                    self.boxLst[self.boxLst.index(self.pw5) - 16].colliderect(self.kb2) and not \
                                    self.boxLst[self.boxLst.index(self.pw5) - 16].colliderect(self.bb1) and not \
                                    self.boxLst[self.boxLst.index(self.pw5) - 16].colliderect(self.bb2):
                                pygame.draw.rect(self.window, self.blue, self.boxLst[self.boxLst.index(self.pw5) - 16], border_radius=100)
                                self.pawnWhite5Clicked = 1
                                self.pawnWhite2Clicked = 0
                                self.pawnWhite3Clicked = 0
                                self.pawnWhite4Clicked = 0
                                self.pawnWhite1Clicked = 0
                                self.pawnWhite6Clicked = 0
                                self.pawnWhite7Clicked = 0
                                self.pawnWhite8Clicked = 0
                                self.KingWhiteClicked = 0
                                self.knightWhite1Clicked = 0
                                self.knightWhite2Clicked = 0
                                self.rookWhite1Clicked = 0
                                self.rookWhite2Clicked = 0
                                self.bishopWhite1Clicked = 0
                                self.bishopWhite2Clicked = 0
                                self.QueenWhiteClicked = 0
                                self.pawnWhite5Clicked_twoStep = 1
                            elif self.boxLst[self.boxLst.index(self.pw5) - 16].colliderect(self.pw1) or \
                                    self.boxLst[self.boxLst.index(self.pw5) - 16].colliderect(self.pw2) or \
                                    self.boxLst[self.boxLst.index(self.pw5) - 16].colliderect(self.pw3) or \
                                    self.boxLst[self.boxLst.index(self.pw5) - 16].colliderect(self.pw4) or \
                                    self.boxLst[self.boxLst.index(self.pw5) - 16].colliderect(self.pb5) or \
                                    self.boxLst[self.boxLst.index(self.pw5) - 16].colliderect(self.pw6) or \
                                    self.boxLst[self.boxLst.index(self.pw5) - 16].colliderect(self.pw7) or \
                                    self.boxLst[self.boxLst.index(self.pw5) - 16].colliderect(self.pw8) or \
                                    self.boxLst[self.boxLst.index(self.pw5) - 16].colliderect(self.Kw) or \
                                    self.boxLst[self.boxLst.index(self.pw5) - 16].colliderect(self.Qw) or \
                                    self.boxLst[self.boxLst.index(self.pw5) - 16].colliderect(self.rw1) or \
                                    self.boxLst[self.boxLst.index(self.pw5) - 16].colliderect(self.rw2) or \
                                    self.boxLst[self.boxLst.index(self.pw5) - 16].colliderect(self.kw1) or \
                                    self.boxLst[self.boxLst.index(self.pw5) - 16].colliderect(self.kw2) or \
                                    self.boxLst[self.boxLst.index(self.pw5) - 16].colliderect(self.bw1) or \
                                    self.boxLst[self.boxLst.index(self.pw5) - 16].colliderect(self.bw2) or \
                                    self.boxLst[self.boxLst.index(self.pw5) - 16].colliderect(self.pw2) or \
                                    self.boxLst[self.boxLst.index(self.pw5) - 16].colliderect(self.pw3) or \
                                    self.boxLst[self.boxLst.index(self.pw5) - 16].colliderect(self.pw4) or \
                                    self.boxLst[self.boxLst.index(self.pw5) - 16].colliderect(self.pw1) or \
                                    self.boxLst[self.boxLst.index(self.pw5) - 16].colliderect(self.pb6) or \
                                    self.boxLst[self.boxLst.index(self.pw5) - 16].colliderect(self.pb7) or \
                                    self.boxLst[self.boxLst.index(self.pw5) - 16].colliderect(self.pb8) or \
                                    self.boxLst[self.boxLst.index(self.pw5) - 16].colliderect(self.Kb) or \
                                    self.boxLst[self.boxLst.index(self.pw5) - 16].colliderect(self.Qb) or \
                                    self.boxLst[self.boxLst.index(self.pw5) - 16].colliderect(self.rb1) or \
                                    self.boxLst[self.boxLst.index(self.pw5) - 16].colliderect(self.rb2) or \
                                    self.boxLst[self.boxLst.index(self.pw5) - 16].colliderect(self.kb1) or \
                                    self.boxLst[self.boxLst.index(self.pw5) - 16].colliderect(self.kb2) or \
                                    self.boxLst[self.boxLst.index(self.pw5) - 16].colliderect(self.bb1) or \
                                    self.boxLst[self.boxLst.index(self.pw5) - 16].colliderect(self.bb2):
                                self.pawnWhite5Clicked_twoStep = 0
                if self.pw5.y > self.box1.y:
                    if self.boxLst[self.boxLst.index(self.pw5) - 8].colliderect(self.pw1) or \
                            self.boxLst[self.boxLst.index(self.pw5) - 8].colliderect(self.pw2) or \
                            self.boxLst[self.boxLst.index(self.pw5) - 8].colliderect(self.pw3) or \
                            self.boxLst[self.boxLst.index(self.pw5) - 8].colliderect(self.pw4) or \
                            self.boxLst[self.boxLst.index(self.pw5) - 8].colliderect(self.pb5) or \
                            self.boxLst[self.boxLst.index(self.pw5) - 8].colliderect(self.pw6) or \
                            self.boxLst[self.boxLst.index(self.pw5) - 8].colliderect(self.pw7) or \
                            self.boxLst[self.boxLst.index(self.pw5) - 8].colliderect(self.pw8) or \
                            self.boxLst[self.boxLst.index(self.pw5) - 8].colliderect(self.Kw) or \
                            self.boxLst[self.boxLst.index(self.pw5) - 8].colliderect(self.Qw) or \
                            self.boxLst[self.boxLst.index(self.pw5) - 8].colliderect(self.rw1) or \
                            self.boxLst[self.boxLst.index(self.pw5) - 8].colliderect(self.rw2) or \
                            self.boxLst[self.boxLst.index(self.pw5) - 8].colliderect(self.kw1) or \
                            self.boxLst[self.boxLst.index(self.pw5) - 8].colliderect(self.kw2) or \
                            self.boxLst[self.boxLst.index(self.pw5) - 8].colliderect(self.bw1) or \
                            self.boxLst[self.boxLst.index(self.pw5) - 8].colliderect(self.bw2) or \
                            self.boxLst[self.boxLst.index(self.pw5) - 8].colliderect(self.pw2) or \
                            self.boxLst[self.boxLst.index(self.pw5) - 8].colliderect(self.pw3) or \
                            self.boxLst[self.boxLst.index(self.pw5) - 8].colliderect(self.pw4) or \
                            self.boxLst[self.boxLst.index(self.pw5) - 8].colliderect(self.pw1) or \
                            self.boxLst[self.boxLst.index(self.pw5) - 8].colliderect(self.pb6) or \
                            self.boxLst[self.boxLst.index(self.pw5) - 8].colliderect(self.pb7) or \
                            self.boxLst[self.boxLst.index(self.pw5) - 8].colliderect(self.pb8) or \
                            self.boxLst[self.boxLst.index(self.pw5) - 8].colliderect(self.Kb) or \
                            self.boxLst[self.boxLst.index(self.pw5) - 8].colliderect(self.Qb) or \
                            self.boxLst[self.boxLst.index(self.pw5) - 8].colliderect(self.rb1) or \
                            self.boxLst[self.boxLst.index(self.pw5) - 8].colliderect(self.rb2) or \
                            self.boxLst[self.boxLst.index(self.pw5) - 8].colliderect(self.kb1) or \
                            self.boxLst[self.boxLst.index(self.pw5) - 8].colliderect(self.kb2) or \
                            self.boxLst[self.boxLst.index(self.pw5) - 8].colliderect(self.bb1) or \
                            self.boxLst[self.boxLst.index(self.pw5) - 8].colliderect(self.bb2):
                        self.pawnWhite5Clicked = 0
                if self.pw5.x < self.box8.x and self.pw5.y > self.box1.y:
                    if self.boxLst[self.boxLst.index(self.pw5) - 8 + 1].colliderect(self.pb1) or \
                            self.boxLst[self.boxLst.index(self.pw5) - 8 + 1].colliderect(self.pb2) or \
                            self.boxLst[self.boxLst.index(self.pw5) - 8 + 1].colliderect(self.pb3) or \
                            self.boxLst[self.boxLst.index(self.pw5) - 8 + 1].colliderect(self.pb4) or \
                            self.boxLst[self.boxLst.index(self.pw5) - 8 + 1].colliderect(self.pb5) or \
                            self.boxLst[self.boxLst.index(self.pw5) - 8 + 1].colliderect(self.pb6) or \
                            self.boxLst[self.boxLst.index(self.pw5) - 8 + 1].colliderect(self.pb7) or \
                            self.boxLst[self.boxLst.index(self.pw5) - 8 + 1].colliderect(self.pb8) or \
                            self.boxLst[self.boxLst.index(self.pw5) - 8 + 1].colliderect(self.Kb) or \
                            self.boxLst[self.boxLst.index(self.pw5) - 8 + 1].colliderect(self.Qb) or \
                            self.boxLst[self.boxLst.index(self.pw5) - 8 + 1].colliderect(self.rb1) or \
                            self.boxLst[self.boxLst.index(self.pw5) - 8 + 1].colliderect(self.rb2) or \
                            self.boxLst[self.boxLst.index(self.pw5) - 8 + 1].colliderect(self.kb1) or \
                            self.boxLst[self.boxLst.index(self.pw5) - 8 + 1].colliderect(self.kb2) or \
                            self.boxLst[self.boxLst.index(self.pw5) - 8 + 1].colliderect(self.bb1) or \
                            self.boxLst[self.boxLst.index(self.pw5) - 8 + 1].colliderect(self.bb2):
                        pygame.draw.rect(self.window, self.red, self.boxLst[self.boxLst.index(self.pw5) - 8 + 1], border_radius=100)
                        self.pawnWhite5Clicked = 1
                        self.pawnWhite2Clicked = 0
                        self.pawnWhite3Clicked = 0
                        self.pawnWhite4Clicked = 0
                        self.pawnWhite1Clicked = 0
                        self.pawnWhite6Clicked = 0
                        self.pawnWhite7Clicked = 0
                        self.pawnWhite8Clicked = 0
                        self.KingWhiteClicked = 0
                        self.knightWhite1Clicked = 0
                        self.knightWhite2Clicked = 0
                        self.rookWhite1Clicked = 0
                        self.rookWhite2Clicked = 0
                        self.bishopWhite1Clicked = 0
                        self.bishopWhite2Clicked = 0
                        self.QueenWhiteClicked = 0
                        self.pawnWhite5Clicked_cut = 1
                if self.pw5.x  > self.box1.x and self.pw5.y > self.box1.y:
                    if self.boxLst[self.boxLst.index(self.pw5) - 8 - 1].colliderect(self.pb1) or \
                            self.boxLst[self.boxLst.index(self.pw5) - 8 - 1].colliderect(self.pb2) or \
                            self.boxLst[self.boxLst.index(self.pw5) - 8 - 1].colliderect(self.pb3) or \
                            self.boxLst[self.boxLst.index(self.pw5) - 8 - 1].colliderect(self.pb4) or \
                            self.boxLst[self.boxLst.index(self.pw5) - 8 - 1].colliderect(self.pb5) or \
                            self.boxLst[self.boxLst.index(self.pw5) - 8 - 1].colliderect(self.pb6) or \
                            self.boxLst[self.boxLst.index(self.pw5) - 8 - 1].colliderect(self.pb7) or \
                            self.boxLst[self.boxLst.index(self.pw5) - 8 - 1].colliderect(self.pb8) or \
                            self.boxLst[self.boxLst.index(self.pw5) - 8 - 1].colliderect(self.Kb) or \
                            self.boxLst[self.boxLst.index(self.pw5) - 8 - 1].colliderect(self.Qb) or \
                            self.boxLst[self.boxLst.index(self.pw5) - 8 - 1].colliderect(self.rb1) or \
                            self.boxLst[self.boxLst.index(self.pw5) - 8 - 1].colliderect(self.rb2) or \
                            self.boxLst[self.boxLst.index(self.pw5) - 8 - 1].colliderect(self.kb1) or \
                            self.boxLst[self.boxLst.index(self.pw5) - 8 - 1].colliderect(self.kb2) or \
                            self.boxLst[self.boxLst.index(self.pw5) - 8 - 1].colliderect(self.bb1) or \
                            self.boxLst[self.boxLst.index(self.pw5) - 8 - 1].colliderect(self.bb2):
                        pygame.draw.rect(self.window, self.red, self.boxLst[self.boxLst.index(self.pw5) - 8 - 1], border_radius=100)
                        self.pawnWhite5Clicked = 1
                        self.pawnWhite2Clicked = 0
                        self.pawnWhite3Clicked = 0
                        self.pawnWhite4Clicked = 0
                        self.pawnWhite1Clicked = 0
                        self.pawnWhite6Clicked = 0
                        self.pawnWhite7Clicked = 0
                        self.pawnWhite8Clicked = 0
                        self.KingWhiteClicked = 0
                        self.knightWhite1Clicked = 0
                        self.knightWhite2Clicked = 0
                        self.rookWhite1Clicked = 0
                        self.rookWhite2Clicked = 0
                        self.bishopWhite1Clicked = 0
                        self.bishopWhite2Clicked = 0
                        self.QueenWhiteClicked = 0
                        self.pawnWhite5Clicked_cut = 1

            elif self.pw6.collidepoint(self.mouse_x, self.mouse_y):
                if self.pw6.y > self.box1.y:
                    if not self.boxLst[self.boxLst.index(self.pw6) - 8].colliderect(self.pw1) and not \
                            self.boxLst[self.boxLst.index(self.pw6) - 8].colliderect(self.pw2) and not \
                            self.boxLst[self.boxLst.index(self.pw6) - 8].colliderect(self.pw3) and not \
                            self.boxLst[self.boxLst.index(self.pw6) - 8].colliderect(self.pw4) and not \
                            self.boxLst[self.boxLst.index(self.pw6) - 8].colliderect(self.pw5) and not \
                            self.boxLst[self.boxLst.index(self.pw6) - 8].colliderect(self.pb6) and not \
                            self.boxLst[self.boxLst.index(self.pw6) - 8].colliderect(self.pw7) and not \
                            self.boxLst[self.boxLst.index(self.pw6) - 8].colliderect(self.pw8) and not \
                            self.boxLst[self.boxLst.index(self.pw6) - 8].colliderect(self.Kw) and not \
                            self.boxLst[self.boxLst.index(self.pw6) - 8].colliderect(self.Qw) and not \
                            self.boxLst[self.boxLst.index(self.pw6) - 8].colliderect(self.rw1) and not \
                            self.boxLst[self.boxLst.index(self.pw6) - 8].colliderect(self.rw2) and not \
                            self.boxLst[self.boxLst.index(self.pw6) - 8].colliderect(self.kw1) and not \
                            self.boxLst[self.boxLst.index(self.pw6) - 8].colliderect(self.kw2) and not \
                            self.boxLst[self.boxLst.index(self.pw6) - 8].colliderect(self.bw1) and not \
                            self.boxLst[self.boxLst.index(self.pw6) - 8].colliderect(self.bw2) and not \
                            self.boxLst[self.boxLst.index(self.pw6) - 8].colliderect(self.pw2) and not \
                            self.boxLst[self.boxLst.index(self.pw6) - 8].colliderect(self.pw3) and not \
                            self.boxLst[self.boxLst.index(self.pw6) - 8].colliderect(self.pw4) and not \
                            self.boxLst[self.boxLst.index(self.pw6) - 8].colliderect(self.pw5) and not \
                            self.boxLst[self.boxLst.index(self.pw6) - 8].colliderect(self.pw1) and not \
                            self.boxLst[self.boxLst.index(self.pw6) - 8].colliderect(self.pb7) and not \
                            self.boxLst[self.boxLst.index(self.pw6) - 8].colliderect(self.pb8) and not \
                            self.boxLst[self.boxLst.index(self.pw6) - 8].colliderect(self.Kb) and not \
                            self.boxLst[self.boxLst.index(self.pw6) - 8].colliderect(self.Qb) and not \
                            self.boxLst[self.boxLst.index(self.pw6) - 8].colliderect(self.rb1) and not \
                            self.boxLst[self.boxLst.index(self.pw6) - 8].colliderect(self.rb2) and not \
                            self.boxLst[self.boxLst.index(self.pw6) - 8].colliderect(self.kb1) and not \
                            self.boxLst[self.boxLst.index(self.pw6) - 8].colliderect(self.kb2) and not \
                            self.boxLst[self.boxLst.index(self.pw6) - 8].colliderect(self.bb1) and not \
                            self.boxLst[self.boxLst.index(self.pw6) - 8].colliderect(self.bb2):
                        pygame.draw.rect(self.window, self.blue, self.boxLst[self.boxLst.index(self.pw6) - 8], border_radius=100)
                        self.pawnWhite6Clicked = 1
                        self.pawnWhite6Clicked_plus8 = 1
                        self.pawnWhite2Clicked = 0
                        self.pawnWhite3Clicked = 0
                        self.pawnWhite4Clicked = 0
                        self.pawnWhite5Clicked = 0
                        self.pawnWhite1Clicked = 0
                        self.pawnWhite7Clicked = 0
                        self.pawnWhite8Clicked = 0
                        self.KingWhiteClicked = 0
                        self.knightWhite1Clicked = 0
                        self.knightWhite2Clicked = 0
                        self.rookWhite1Clicked = 0
                        self.rookWhite2Clicked = 0
                        self.bishopWhite1Clicked = 0
                        self.bishopWhite2Clicked = 0
                        self.QueenWhiteClicked = 0
                    if self.pw6.y > self.box41.y:
                        if self.pawnWhite6Clicked_plus8 == 1:
                            if not self.boxLst[self.boxLst.index(self.pw6) - 16].colliderect(self.pw1) and not \
                                    self.boxLst[self.boxLst.index(self.pw6) - 16].colliderect(self.pw2) and not \
                                    self.boxLst[self.boxLst.index(self.pw6) - 16].colliderect(self.pw3) and not \
                                    self.boxLst[self.boxLst.index(self.pw6) - 16].colliderect(self.pw4) and not \
                                    self.boxLst[self.boxLst.index(self.pw6) - 16].colliderect(self.pw5) and not \
                                    self.boxLst[self.boxLst.index(self.pw6) - 16].colliderect(self.pb6) and not \
                                    self.boxLst[self.boxLst.index(self.pw6) - 16].colliderect(self.pw7) and not \
                                    self.boxLst[self.boxLst.index(self.pw6) - 16].colliderect(self.pw8) and not \
                                    self.boxLst[self.boxLst.index(self.pw6) - 16].colliderect(self.Kw) and not \
                                    self.boxLst[self.boxLst.index(self.pw6) - 16].colliderect(self.Qw) and not \
                                    self.boxLst[self.boxLst.index(self.pw6) - 16].colliderect(self.rw1) and not \
                                    self.boxLst[self.boxLst.index(self.pw6) - 16].colliderect(self.rw2) and not \
                                    self.boxLst[self.boxLst.index(self.pw6) - 16].colliderect(self.kw1) and not \
                                    self.boxLst[self.boxLst.index(self.pw6) - 16].colliderect(self.kw2) and not \
                                    self.boxLst[self.boxLst.index(self.pw6) - 16].colliderect(self.bw1) and not \
                                    self.boxLst[self.boxLst.index(self.pw6) - 16].colliderect(self.bw2) and not \
                                    self.boxLst[self.boxLst.index(self.pw6) - 16].colliderect(self.pw2) and not \
                                    self.boxLst[self.boxLst.index(self.pw6) - 16].colliderect(self.pw3) and not \
                                    self.boxLst[self.boxLst.index(self.pw6) - 16].colliderect(self.pw4) and not \
                                    self.boxLst[self.boxLst.index(self.pw6) - 16].colliderect(self.pw5) and not \
                                    self.boxLst[self.boxLst.index(self.pw6) - 16].colliderect(self.pw1) and not \
                                    self.boxLst[self.boxLst.index(self.pw6) - 16].colliderect(self.pb7) and not \
                                    self.boxLst[self.boxLst.index(self.pw6) - 16].colliderect(self.pb8) and not \
                                    self.boxLst[self.boxLst.index(self.pw6) - 16].colliderect(self.Kb) and not \
                                    self.boxLst[self.boxLst.index(self.pw6) - 16].colliderect(self.Qb) and not \
                                    self.boxLst[self.boxLst.index(self.pw6) - 16].colliderect(self.rb1) and not \
                                    self.boxLst[self.boxLst.index(self.pw6) - 16].colliderect(self.rb2) and not \
                                    self.boxLst[self.boxLst.index(self.pw6) - 16].colliderect(self.kb1) and not \
                                    self.boxLst[self.boxLst.index(self.pw6) - 16].colliderect(self.kb2) and not \
                                    self.boxLst[self.boxLst.index(self.pw6) - 16].colliderect(self.bb1) and not \
                                    self.boxLst[self.boxLst.index(self.pw6) - 16].colliderect(self.bb2):
                                pygame.draw.rect(self.window, self.blue, self.boxLst[self.boxLst.index(self.pw6) - 16], border_radius=100)
                                self.pawnWhite6Clicked = 1
                                self.pawnWhite2Clicked = 0
                                self.pawnWhite3Clicked = 0
                                self.pawnWhite4Clicked = 0
                                self.pawnWhite5Clicked = 0
                                self.pawnWhite1Clicked = 0
                                self.pawnWhite7Clicked = 0
                                self.pawnWhite8Clicked = 0
                                self.KingWhiteClicked = 0
                                self.knightWhite1Clicked = 0
                                self.knightWhite2Clicked = 0
                                self.rookWhite1Clicked = 0
                                self.rookWhite2Clicked = 0
                                self.bishopWhite1Clicked = 0
                                self.bishopWhite2Clicked = 0
                                self.QueenWhiteClicked = 0
                                self.pawnWhite6Clicked_twoStep = 1
                            elif self.boxLst[self.boxLst.index(self.pw6) - 16].colliderect(self.pw1) or \
                                    self.boxLst[self.boxLst.index(self.pw6) - 16].colliderect(self.pw2) or \
                                    self.boxLst[self.boxLst.index(self.pw6) - 16].colliderect(self.pw3) or \
                                    self.boxLst[self.boxLst.index(self.pw6) - 16].colliderect(self.pw4) or \
                                    self.boxLst[self.boxLst.index(self.pw6) - 16].colliderect(self.pw5) or \
                                    self.boxLst[self.boxLst.index(self.pw6) - 16].colliderect(self.pb6) or \
                                    self.boxLst[self.boxLst.index(self.pw6) - 16].colliderect(self.pw7) or \
                                    self.boxLst[self.boxLst.index(self.pw6) - 16].colliderect(self.pw8) or \
                                    self.boxLst[self.boxLst.index(self.pw6) - 16].colliderect(self.Kw) or \
                                    self.boxLst[self.boxLst.index(self.pw6) - 16].colliderect(self.Qw) or \
                                    self.boxLst[self.boxLst.index(self.pw6) - 16].colliderect(self.rw1) or \
                                    self.boxLst[self.boxLst.index(self.pw6) - 16].colliderect(self.rw2) or \
                                    self.boxLst[self.boxLst.index(self.pw6) - 16].colliderect(self.kw1) or \
                                    self.boxLst[self.boxLst.index(self.pw6) - 16].colliderect(self.kw2) or \
                                    self.boxLst[self.boxLst.index(self.pw6) - 16].colliderect(self.bw1) or \
                                    self.boxLst[self.boxLst.index(self.pw6) - 16].colliderect(self.bw2) or \
                                    self.boxLst[self.boxLst.index(self.pw6) - 16].colliderect(self.pw2) or \
                                    self.boxLst[self.boxLst.index(self.pw6) - 16].colliderect(self.pw3) or \
                                    self.boxLst[self.boxLst.index(self.pw6) - 16].colliderect(self.pw4) or \
                                    self.boxLst[self.boxLst.index(self.pw6) - 16].colliderect(self.pw5) or \
                                    self.boxLst[self.boxLst.index(self.pw6) - 16].colliderect(self.pw1) or \
                                    self.boxLst[self.boxLst.index(self.pw6) - 16].colliderect(self.pb7) or \
                                    self.boxLst[self.boxLst.index(self.pw6) - 16].colliderect(self.pb8) or \
                                    self.boxLst[self.boxLst.index(self.pw6) - 16].colliderect(self.Kb) or \
                                    self.boxLst[self.boxLst.index(self.pw6) - 16].colliderect(self.Qb) or \
                                    self.boxLst[self.boxLst.index(self.pw6) - 16].colliderect(self.rb1) or \
                                    self.boxLst[self.boxLst.index(self.pw6) - 16].colliderect(self.rb2) or \
                                    self.boxLst[self.boxLst.index(self.pw6) - 16].colliderect(self.kb1) or \
                                    self.boxLst[self.boxLst.index(self.pw6) - 16].colliderect(self.kb2) or \
                                    self.boxLst[self.boxLst.index(self.pw6) - 16].colliderect(self.bb1) or \
                                    self.boxLst[self.boxLst.index(self.pw6) - 16].colliderect(self.bb2):
                                self.pawnWhite6Clicked_twoStep = 0
                if self.pw6.y > self.box1.y:
                    if self.boxLst[self.boxLst.index(self.pw6) - 8].colliderect(self.pw1) or \
                            self.boxLst[self.boxLst.index(self.pw6) - 8].colliderect(self.pw2) or \
                            self.boxLst[self.boxLst.index(self.pw6) - 8].colliderect(self.pw3) or \
                            self.boxLst[self.boxLst.index(self.pw6) - 8].colliderect(self.pw4) or \
                            self.boxLst[self.boxLst.index(self.pw6) - 8].colliderect(self.pw5) or \
                            self.boxLst[self.boxLst.index(self.pw6) - 8].colliderect(self.pb6) or \
                            self.boxLst[self.boxLst.index(self.pw6) - 8].colliderect(self.pw7) or \
                            self.boxLst[self.boxLst.index(self.pw6) - 8].colliderect(self.pw8) or \
                            self.boxLst[self.boxLst.index(self.pw6) - 8].colliderect(self.Kw) or \
                            self.boxLst[self.boxLst.index(self.pw6) - 8].colliderect(self.Qw) or \
                            self.boxLst[self.boxLst.index(self.pw6) - 8].colliderect(self.rw1) or \
                            self.boxLst[self.boxLst.index(self.pw6) - 8].colliderect(self.rw2) or \
                            self.boxLst[self.boxLst.index(self.pw6) - 8].colliderect(self.kw1) or \
                            self.boxLst[self.boxLst.index(self.pw6) - 8].colliderect(self.kw2) or \
                            self.boxLst[self.boxLst.index(self.pw6) - 8].colliderect(self.bw1) or \
                            self.boxLst[self.boxLst.index(self.pw6) - 8].colliderect(self.bw2) or \
                            self.boxLst[self.boxLst.index(self.pw6) - 8].colliderect(self.pw2) or \
                            self.boxLst[self.boxLst.index(self.pw6) - 8].colliderect(self.pw3) or \
                            self.boxLst[self.boxLst.index(self.pw6) - 8].colliderect(self.pw4) or \
                            self.boxLst[self.boxLst.index(self.pw6) - 8].colliderect(self.pw5) or \
                            self.boxLst[self.boxLst.index(self.pw6) - 8].colliderect(self.pw1) or \
                            self.boxLst[self.boxLst.index(self.pw6) - 8].colliderect(self.pb7) or \
                            self.boxLst[self.boxLst.index(self.pw6) - 8].colliderect(self.pb8) or \
                            self.boxLst[self.boxLst.index(self.pw6) - 8].colliderect(self.Kb) or \
                            self.boxLst[self.boxLst.index(self.pw6) - 8].colliderect(self.Qb) or \
                            self.boxLst[self.boxLst.index(self.pw6) - 8].colliderect(self.rb1) or \
                            self.boxLst[self.boxLst.index(self.pw6) - 8].colliderect(self.rb2) or \
                            self.boxLst[self.boxLst.index(self.pw6) - 8].colliderect(self.kb1) or \
                            self.boxLst[self.boxLst.index(self.pw6) - 8].colliderect(self.kb2) or \
                            self.boxLst[self.boxLst.index(self.pw6) - 8].colliderect(self.bb1) or \
                            self.boxLst[self.boxLst.index(self.pw6) - 8].colliderect(self.bb2):
                        self.pawnWhite6Clicked = 0
                if self.pw6.x < self.box8.x and self.pw6.y > self.box1.y:
                    if self.boxLst[self.boxLst.index(self.pw6) - 8 + 1].colliderect(self.pb1) or \
                            self.boxLst[self.boxLst.index(self.pw6) - 8 + 1].colliderect(self.pb2) or \
                            self.boxLst[self.boxLst.index(self.pw6) - 8 + 1].colliderect(self.pb3) or \
                            self.boxLst[self.boxLst.index(self.pw6) - 8 + 1].colliderect(self.pb4) or \
                            self.boxLst[self.boxLst.index(self.pw6) - 8 + 1].colliderect(self.pb5) or \
                            self.boxLst[self.boxLst.index(self.pw6) - 8 + 1].colliderect(self.pb6) or \
                            self.boxLst[self.boxLst.index(self.pw6) - 8 + 1].colliderect(self.pb7) or \
                            self.boxLst[self.boxLst.index(self.pw6) - 8 + 1].colliderect(self.pb8) or \
                            self.boxLst[self.boxLst.index(self.pw6) - 8 + 1].colliderect(self.Kb) or \
                            self.boxLst[self.boxLst.index(self.pw6) - 8 + 1].colliderect(self.Qb) or \
                            self.boxLst[self.boxLst.index(self.pw6) - 8 + 1].colliderect(self.rb1) or \
                            self.boxLst[self.boxLst.index(self.pw6) - 8 + 1].colliderect(self.rb2) or \
                            self.boxLst[self.boxLst.index(self.pw6) - 8 + 1].colliderect(self.kb1) or \
                            self.boxLst[self.boxLst.index(self.pw6) - 8 + 1].colliderect(self.kb2) or \
                            self.boxLst[self.boxLst.index(self.pw6) - 8 + 1].colliderect(self.bb1) or \
                            self.boxLst[self.boxLst.index(self.pw6) - 8 + 1].colliderect(self.bb2):
                        pygame.draw.rect(self.window, self.red, self.boxLst[self.boxLst.index(self.pw6) - 8 + 1], border_radius=100)
                        self.pawnWhite6Clicked = 1
                        self.pawnWhite2Clicked = 0
                        self.pawnWhite3Clicked = 0
                        self.pawnWhite4Clicked = 0
                        self.pawnWhite5Clicked = 0
                        self.pawnWhite1Clicked = 0
                        self.pawnWhite7Clicked = 0
                        self.pawnWhite8Clicked = 0
                        self.KingWhiteClicked = 0
                        self.knightWhite1Clicked = 0
                        self.knightWhite2Clicked = 0
                        self.rookWhite1Clicked = 0
                        self.rookWhite2Clicked = 0
                        self.bishopWhite1Clicked = 0
                        self.bishopWhite2Clicked = 0
                        self.QueenWhiteClicked = 0
                        self.pawnWhite6Clicked_cut = 1
                if self.pw6.x  > self.box1.x and self.pw6.y > self.box1.y:
                    if self.boxLst[self.boxLst.index(self.pw6) - 8 - 1].colliderect(self.pb1) or \
                            self.boxLst[self.boxLst.index(self.pw6) - 8 - 1].colliderect(self.pb2) or \
                            self.boxLst[self.boxLst.index(self.pw6) - 8 - 1].colliderect(self.pb3) or \
                            self.boxLst[self.boxLst.index(self.pw6) - 8 - 1].colliderect(self.pb4) or \
                            self.boxLst[self.boxLst.index(self.pw6) - 8 - 1].colliderect(self.pb5) or \
                            self.boxLst[self.boxLst.index(self.pw6) - 8 - 1].colliderect(self.pb6) or \
                            self.boxLst[self.boxLst.index(self.pw6) - 8 - 1].colliderect(self.pb7) or \
                            self.boxLst[self.boxLst.index(self.pw6) - 8 - 1].colliderect(self.pb8) or \
                            self.boxLst[self.boxLst.index(self.pw6) - 8 - 1].colliderect(self.Kb) or \
                            self.boxLst[self.boxLst.index(self.pw6) - 8 - 1].colliderect(self.Qb) or \
                            self.boxLst[self.boxLst.index(self.pw6) - 8 - 1].colliderect(self.rb1) or \
                            self.boxLst[self.boxLst.index(self.pw6) - 8 - 1].colliderect(self.rb2) or \
                            self.boxLst[self.boxLst.index(self.pw6) - 8 - 1].colliderect(self.kb1) or \
                            self.boxLst[self.boxLst.index(self.pw6) - 8 - 1].colliderect(self.kb2) or \
                            self.boxLst[self.boxLst.index(self.pw6) - 8 - 1].colliderect(self.bb1) or \
                            self.boxLst[self.boxLst.index(self.pw6) - 8 - 1].colliderect(self.bb2):
                        pygame.draw.rect(self.window, self.red, self.boxLst[self.boxLst.index(self.pw6) - 8 - 1], border_radius=100)
                        self.pawnWhite6Clicked = 1
                        self.pawnWhite2Clicked = 0
                        self.pawnWhite3Clicked = 0
                        self.pawnWhite4Clicked = 0
                        self.pawnWhite5Clicked = 0
                        self.pawnWhite1Clicked = 0
                        self.pawnWhite7Clicked = 0
                        self.pawnWhite8Clicked = 0
                        self.KingWhiteClicked = 0
                        self.knightWhite1Clicked = 0
                        self.knightWhite2Clicked = 0
                        self.rookWhite1Clicked = 0
                        self.rookWhite2Clicked = 0
                        self.bishopWhite1Clicked = 0
                        self.bishopWhite2Clicked = 0
                        self.QueenWhiteClicked = 0
                        self.pawnWhite6Clicked_cut = 1

            elif self.pw7.collidepoint(self.mouse_x, self.mouse_y):
                if self.pw7.y > self.box1.y:
                    if not self.boxLst[self.boxLst.index(self.pw7) - 8].colliderect(self.pw1) and not \
                            self.boxLst[self.boxLst.index(self.pw7) - 8].colliderect(self.pw2) and not \
                            self.boxLst[self.boxLst.index(self.pw7) - 8].colliderect(self.pw3) and not \
                            self.boxLst[self.boxLst.index(self.pw7) - 8].colliderect(self.pw4) and not \
                            self.boxLst[self.boxLst.index(self.pw7) - 8].colliderect(self.pw5) and not \
                            self.boxLst[self.boxLst.index(self.pw7) - 8].colliderect(self.pw6) and not \
                            self.boxLst[self.boxLst.index(self.pw7) - 8].colliderect(self.pb7) and not \
                            self.boxLst[self.boxLst.index(self.pw7) - 8].colliderect(self.pw8) and not \
                            self.boxLst[self.boxLst.index(self.pw7) - 8].colliderect(self.Kw) and not \
                            self.boxLst[self.boxLst.index(self.pw7) - 8].colliderect(self.Qw) and not \
                            self.boxLst[self.boxLst.index(self.pw7) - 8].colliderect(self.rw1) and not \
                            self.boxLst[self.boxLst.index(self.pw7) - 8].colliderect(self.rw2) and not \
                            self.boxLst[self.boxLst.index(self.pw7) - 8].colliderect(self.kw1) and not \
                            self.boxLst[self.boxLst.index(self.pw7) - 8].colliderect(self.kw2) and not \
                            self.boxLst[self.boxLst.index(self.pw7) - 8].colliderect(self.bw1) and not \
                            self.boxLst[self.boxLst.index(self.pw7) - 8].colliderect(self.bw2) and not \
                            self.boxLst[self.boxLst.index(self.pw7) - 8].colliderect(self.pw2) and not \
                            self.boxLst[self.boxLst.index(self.pw7) - 8].colliderect(self.pw3) and not \
                            self.boxLst[self.boxLst.index(self.pw7) - 8].colliderect(self.pw4) and not \
                            self.boxLst[self.boxLst.index(self.pw7) - 8].colliderect(self.pw5) and not \
                            self.boxLst[self.boxLst.index(self.pw7) - 8].colliderect(self.pw6) and not \
                            self.boxLst[self.boxLst.index(self.pw7) - 8].colliderect(self.pw1) and not \
                            self.boxLst[self.boxLst.index(self.pw7) - 8].colliderect(self.pb8) and not \
                            self.boxLst[self.boxLst.index(self.pw7) - 8].colliderect(self.Kb) and not \
                            self.boxLst[self.boxLst.index(self.pw7) - 8].colliderect(self.Qb) and not \
                            self.boxLst[self.boxLst.index(self.pw7) - 8].colliderect(self.rb1) and not \
                            self.boxLst[self.boxLst.index(self.pw7) - 8].colliderect(self.rb2) and not \
                            self.boxLst[self.boxLst.index(self.pw7) - 8].colliderect(self.kb1) and not \
                            self.boxLst[self.boxLst.index(self.pw7) - 8].colliderect(self.kb2) and not \
                            self.boxLst[self.boxLst.index(self.pw7) - 8].colliderect(self.bb1) and not \
                            self.boxLst[self.boxLst.index(self.pw7) - 8].colliderect(self.bb2):
                        pygame.draw.rect(self.window, self.blue, self.boxLst[self.boxLst.index(self.pw7) - 8], border_radius=100)
                        self.pawnWhite7Clicked = 1
                        self.pawnWhite7Clicked_plus8 = 1
                        self.pawnWhite2Clicked = 0
                        self.pawnWhite3Clicked = 0
                        self.pawnWhite4Clicked = 0
                        self.pawnWhite5Clicked = 0
                        self.pawnWhite6Clicked = 0
                        self.pawnWhite1Clicked = 0
                        self.pawnWhite8Clicked = 0
                        self.KingWhiteClicked = 0
                        self.knightWhite1Clicked = 0
                        self.knightWhite2Clicked = 0
                        self.rookWhite1Clicked = 0
                        self.rookWhite2Clicked = 0
                        self.bishopWhite1Clicked = 0
                        self.bishopWhite2Clicked = 0
                        self.QueenWhiteClicked = 0
                    if self.pw7.y > self.box41.y:
                        if self.pawnWhite7Clicked_plus8 == 1:
                            if not self.boxLst[self.boxLst.index(self.pw7) - 16].colliderect(self.pw1) and not \
                                    self.boxLst[self.boxLst.index(self.pw7) - 16].colliderect(self.pw2) and not \
                                    self.boxLst[self.boxLst.index(self.pw7) - 16].colliderect(self.pw3) and not \
                                    self.boxLst[self.boxLst.index(self.pw7) - 16].colliderect(self.pw4) and not \
                                    self.boxLst[self.boxLst.index(self.pw7) - 16].colliderect(self.pw5) and not \
                                    self.boxLst[self.boxLst.index(self.pw7) - 16].colliderect(self.pw6) and not \
                                    self.boxLst[self.boxLst.index(self.pw7) - 16].colliderect(self.pb7) and not \
                                    self.boxLst[self.boxLst.index(self.pw7) - 16].colliderect(self.pw8) and not \
                                    self.boxLst[self.boxLst.index(self.pw7) - 16].colliderect(self.Kw) and not \
                                    self.boxLst[self.boxLst.index(self.pw7) - 16].colliderect(self.Qw) and not \
                                    self.boxLst[self.boxLst.index(self.pw7) - 16].colliderect(self.rw1) and not \
                                    self.boxLst[self.boxLst.index(self.pw7) - 16].colliderect(self.rw2) and not \
                                    self.boxLst[self.boxLst.index(self.pw7) - 16].colliderect(self.kw1) and not \
                                    self.boxLst[self.boxLst.index(self.pw7) - 16].colliderect(self.kw2) and not \
                                    self.boxLst[self.boxLst.index(self.pw7) - 16].colliderect(self.bw1) and not \
                                    self.boxLst[self.boxLst.index(self.pw7) - 16].colliderect(self.bw2) and not \
                                    self.boxLst[self.boxLst.index(self.pw7) - 16].colliderect(self.pw2) and not \
                                    self.boxLst[self.boxLst.index(self.pw7) - 16].colliderect(self.pw3) and not \
                                    self.boxLst[self.boxLst.index(self.pw7) - 16].colliderect(self.pw4) and not \
                                    self.boxLst[self.boxLst.index(self.pw7) - 16].colliderect(self.pw5) and not \
                                    self.boxLst[self.boxLst.index(self.pw7) - 16].colliderect(self.pw6) and not \
                                    self.boxLst[self.boxLst.index(self.pw7) - 16].colliderect(self.pw1) and not \
                                    self.boxLst[self.boxLst.index(self.pw7) - 16].colliderect(self.pb8) and not \
                                    self.boxLst[self.boxLst.index(self.pw7) - 16].colliderect(self.Kb) and not \
                                    self.boxLst[self.boxLst.index(self.pw7) - 16].colliderect(self.Qb) and not \
                                    self.boxLst[self.boxLst.index(self.pw7) - 16].colliderect(self.rb1) and not \
                                    self.boxLst[self.boxLst.index(self.pw7) - 16].colliderect(self.rb2) and not \
                                    self.boxLst[self.boxLst.index(self.pw7) - 16].colliderect(self.kb1) and not \
                                    self.boxLst[self.boxLst.index(self.pw7) - 16].colliderect(self.kb2) and not \
                                    self.boxLst[self.boxLst.index(self.pw7) - 16].colliderect(self.bb1) and not \
                                    self.boxLst[self.boxLst.index(self.pw7) - 16].colliderect(self.bb2):
                                pygame.draw.rect(self.window, self.blue, self.boxLst[self.boxLst.index(self.pw7) - 16], border_radius=100)
                                self.pawnWhite7Clicked = 1
                                self.pawnWhite2Clicked = 0
                                self.pawnWhite3Clicked = 0
                                self.pawnWhite4Clicked = 0
                                self.pawnWhite5Clicked = 0
                                self.pawnWhite6Clicked = 0
                                self.pawnWhite1Clicked = 0
                                self.pawnWhite8Clicked = 0
                                self.KingWhiteClicked = 0
                                self.knightWhite1Clicked = 0
                                self.knightWhite2Clicked = 0
                                self.rookWhite1Clicked = 0
                                self.rookWhite2Clicked = 0
                                self.bishopWhite1Clicked = 0
                                self.bishopWhite2Clicked = 0
                                self.QueenWhiteClicked = 0
                                self.pawnWhite7Clicked_twoStep = 1
                            elif self.boxLst[self.boxLst.index(self.pw7) - 16].colliderect(self.pw1) or \
                                    self.boxLst[self.boxLst.index(self.pw7) - 16].colliderect(self.pw2) or \
                                    self.boxLst[self.boxLst.index(self.pw7) - 16].colliderect(self.pw3) or \
                                    self.boxLst[self.boxLst.index(self.pw7) - 16].colliderect(self.pw4) or \
                                    self.boxLst[self.boxLst.index(self.pw7) - 16].colliderect(self.pw5) or \
                                    self.boxLst[self.boxLst.index(self.pw7) - 16].colliderect(self.pw6) or \
                                    self.boxLst[self.boxLst.index(self.pw7) - 16].colliderect(self.pb7) or \
                                    self.boxLst[self.boxLst.index(self.pw7) - 16].colliderect(self.pw8) or \
                                    self.boxLst[self.boxLst.index(self.pw7) - 16].colliderect(self.Kw) or \
                                    self.boxLst[self.boxLst.index(self.pw7) - 16].colliderect(self.Qw) or \
                                    self.boxLst[self.boxLst.index(self.pw7) - 16].colliderect(self.rw1) or \
                                    self.boxLst[self.boxLst.index(self.pw7) - 16].colliderect(self.rw2) or \
                                    self.boxLst[self.boxLst.index(self.pw7) - 16].colliderect(self.kw1) or \
                                    self.boxLst[self.boxLst.index(self.pw7) - 16].colliderect(self.kw2) or \
                                    self.boxLst[self.boxLst.index(self.pw7) - 16].colliderect(self.bw1) or \
                                    self.boxLst[self.boxLst.index(self.pw7) - 16].colliderect(self.bw2) or \
                                    self.boxLst[self.boxLst.index(self.pw7) - 16].colliderect(self.pw2) or \
                                    self.boxLst[self.boxLst.index(self.pw7) - 16].colliderect(self.pw3) or \
                                    self.boxLst[self.boxLst.index(self.pw7) - 16].colliderect(self.pw4) or \
                                    self.boxLst[self.boxLst.index(self.pw7) - 16].colliderect(self.pw5) or \
                                    self.boxLst[self.boxLst.index(self.pw7) - 16].colliderect(self.pw6) or \
                                    self.boxLst[self.boxLst.index(self.pw7) - 16].colliderect(self.pw1) or \
                                    self.boxLst[self.boxLst.index(self.pw7) - 16].colliderect(self.pb8) or \
                                    self.boxLst[self.boxLst.index(self.pw7) - 16].colliderect(self.Kb) or \
                                    self.boxLst[self.boxLst.index(self.pw7) - 16].colliderect(self.Qb) or \
                                    self.boxLst[self.boxLst.index(self.pw7) - 16].colliderect(self.rb1) or \
                                    self.boxLst[self.boxLst.index(self.pw7) - 16].colliderect(self.rb2) or \
                                    self.boxLst[self.boxLst.index(self.pw7) - 16].colliderect(self.kb1) or \
                                    self.boxLst[self.boxLst.index(self.pw7) - 16].colliderect(self.kb2) or \
                                    self.boxLst[self.boxLst.index(self.pw7) - 16].colliderect(self.bb1) or \
                                    self.boxLst[self.boxLst.index(self.pw7) - 16].colliderect(self.bb2):
                                self.pawnWhite7Clicked_twoStep = 0
                if self.pw7.y > self.box1.y:
                    if self.boxLst[self.boxLst.index(self.pw7) - 8].colliderect(self.pw1) or \
                            self.boxLst[self.boxLst.index(self.pw7) - 8].colliderect(self.pw2) or \
                            self.boxLst[self.boxLst.index(self.pw7) - 8].colliderect(self.pw3) or \
                            self.boxLst[self.boxLst.index(self.pw7) - 8].colliderect(self.pw4) or \
                            self.boxLst[self.boxLst.index(self.pw7) - 8].colliderect(self.pw5) or \
                            self.boxLst[self.boxLst.index(self.pw7) - 8].colliderect(self.pw6) or \
                            self.boxLst[self.boxLst.index(self.pw7) - 8].colliderect(self.pb7) or \
                            self.boxLst[self.boxLst.index(self.pw7) - 8].colliderect(self.pw8) or \
                            self.boxLst[self.boxLst.index(self.pw7) - 8].colliderect(self.Kw) or \
                            self.boxLst[self.boxLst.index(self.pw7) - 8].colliderect(self.Qw) or \
                            self.boxLst[self.boxLst.index(self.pw7) - 8].colliderect(self.rw1) or \
                            self.boxLst[self.boxLst.index(self.pw7) - 8].colliderect(self.rw2) or \
                            self.boxLst[self.boxLst.index(self.pw7) - 8].colliderect(self.kw1) or \
                            self.boxLst[self.boxLst.index(self.pw7) - 8].colliderect(self.kw2) or \
                            self.boxLst[self.boxLst.index(self.pw7) - 8].colliderect(self.bw1) or \
                            self.boxLst[self.boxLst.index(self.pw7) - 8].colliderect(self.bw2) or \
                            self.boxLst[self.boxLst.index(self.pw7) - 8].colliderect(self.pw2) or \
                            self.boxLst[self.boxLst.index(self.pw7) - 8].colliderect(self.pw3) or \
                            self.boxLst[self.boxLst.index(self.pw7) - 8].colliderect(self.pw4) or \
                            self.boxLst[self.boxLst.index(self.pw7) - 8].colliderect(self.pw5) or \
                            self.boxLst[self.boxLst.index(self.pw7) - 8].colliderect(self.pw6) or \
                            self.boxLst[self.boxLst.index(self.pw7) - 8].colliderect(self.pw1) or \
                            self.boxLst[self.boxLst.index(self.pw7) - 8].colliderect(self.pb8) or \
                            self.boxLst[self.boxLst.index(self.pw7) - 8].colliderect(self.Kb) or \
                            self.boxLst[self.boxLst.index(self.pw7) - 8].colliderect(self.Qb) or \
                            self.boxLst[self.boxLst.index(self.pw7) - 8].colliderect(self.rb1) or \
                            self.boxLst[self.boxLst.index(self.pw7) - 8].colliderect(self.rb2) or \
                            self.boxLst[self.boxLst.index(self.pw7) - 8].colliderect(self.kb1) or \
                            self.boxLst[self.boxLst.index(self.pw7) - 8].colliderect(self.kb2) or \
                            self.boxLst[self.boxLst.index(self.pw7) - 8].colliderect(self.bb1) or \
                            self.boxLst[self.boxLst.index(self.pw7) - 8].colliderect(self.bb2):
                        self.pawnWhite7Clicked = 0
                if self.pw7.x < self.box8.x and self.pw7.y > self.box1.y:
                    if self.boxLst[self.boxLst.index(self.pw7) - 8 + 1].colliderect(self.pb1) or \
                            self.boxLst[self.boxLst.index(self.pw7) - 8 + 1].colliderect(self.pb2) or \
                            self.boxLst[self.boxLst.index(self.pw7) - 8 + 1].colliderect(self.pb3) or \
                            self.boxLst[self.boxLst.index(self.pw7) - 8 + 1].colliderect(self.pb4) or \
                            self.boxLst[self.boxLst.index(self.pw7) - 8 + 1].colliderect(self.pb5) or \
                            self.boxLst[self.boxLst.index(self.pw7) - 8 + 1].colliderect(self.pb6) or \
                            self.boxLst[self.boxLst.index(self.pw7) - 8 + 1].colliderect(self.pb7) or \
                            self.boxLst[self.boxLst.index(self.pw7) - 8 + 1].colliderect(self.pb8) or \
                            self.boxLst[self.boxLst.index(self.pw7) - 8 + 1].colliderect(self.Kb) or \
                            self.boxLst[self.boxLst.index(self.pw7) - 8 + 1].colliderect(self.Qb) or \
                            self.boxLst[self.boxLst.index(self.pw7) - 8 + 1].colliderect(self.rb1) or \
                            self.boxLst[self.boxLst.index(self.pw7) - 8 + 1].colliderect(self.rb2) or \
                            self.boxLst[self.boxLst.index(self.pw7) - 8 + 1].colliderect(self.kb1) or \
                            self.boxLst[self.boxLst.index(self.pw7) - 8 + 1].colliderect(self.kb2) or \
                            self.boxLst[self.boxLst.index(self.pw7) - 8 + 1].colliderect(self.bb1) or \
                            self.boxLst[self.boxLst.index(self.pw7) - 8 + 1].colliderect(self.bb2):
                        pygame.draw.rect(self.window, self.red, self.boxLst[self.boxLst.index(self.pw7) - 8 + 1], border_radius=100)
                        self.pawnWhite7Clicked = 1
                        self.pawnWhite2Clicked = 0
                        self.pawnWhite3Clicked = 0
                        self.pawnWhite4Clicked = 0
                        self.pawnWhite5Clicked = 0
                        self.pawnWhite6Clicked = 0
                        self.pawnWhite1Clicked = 0
                        self.pawnWhite8Clicked = 0
                        self.KingWhiteClicked = 0
                        self.knightWhite1Clicked = 0
                        self.knightWhite2Clicked = 0
                        self.rookWhite1Clicked = 0
                        self.rookWhite2Clicked = 0
                        self.bishopWhite1Clicked = 0
                        self.bishopWhite2Clicked = 0
                        self.QueenWhiteClicked = 0
                        self.pawnWhite7Clicked_cut = 1
                if self.pw7.x  > self.box1.x and self.pw7.y > self.box1.y:
                    if self.boxLst[self.boxLst.index(self.pw7) - 8 - 1].colliderect(self.pb1) or \
                            self.boxLst[self.boxLst.index(self.pw7) - 8 - 1].colliderect(self.pb2) or \
                            self.boxLst[self.boxLst.index(self.pw7) - 8 - 1].colliderect(self.pb3) or \
                            self.boxLst[self.boxLst.index(self.pw7) - 8 - 1].colliderect(self.pb4) or \
                            self.boxLst[self.boxLst.index(self.pw7) - 8 - 1].colliderect(self.pb5) or \
                            self.boxLst[self.boxLst.index(self.pw7) - 8 - 1].colliderect(self.pb6) or \
                            self.boxLst[self.boxLst.index(self.pw7) - 8 - 1].colliderect(self.pb7) or \
                            self.boxLst[self.boxLst.index(self.pw7) - 8 - 1].colliderect(self.pb8) or \
                            self.boxLst[self.boxLst.index(self.pw7) - 8 - 1].colliderect(self.Kb) or \
                            self.boxLst[self.boxLst.index(self.pw7) - 8 - 1].colliderect(self.Qb) or \
                            self.boxLst[self.boxLst.index(self.pw7) - 8 - 1].colliderect(self.rb1) or \
                            self.boxLst[self.boxLst.index(self.pw7) - 8 - 1].colliderect(self.rb2) or \
                            self.boxLst[self.boxLst.index(self.pw7) - 8 - 1].colliderect(self.kb1) or \
                            self.boxLst[self.boxLst.index(self.pw7) - 8 - 1].colliderect(self.kb2) or \
                            self.boxLst[self.boxLst.index(self.pw7) - 8 - 1].colliderect(self.bb1) or \
                            self.boxLst[self.boxLst.index(self.pw7) - 8 - 1].colliderect(self.bb2):
                        pygame.draw.rect(self.window, self.red, self.boxLst[self.boxLst.index(self.pw7) - 8 - 1], border_radius=100)
                        self.pawnWhite7Clicked = 1
                        self.pawnWhite2Clicked = 0
                        self.pawnWhite3Clicked = 0
                        self.pawnWhite4Clicked = 0
                        self.pawnWhite5Clicked = 0
                        self.pawnWhite6Clicked = 0
                        self.pawnWhite1Clicked = 0
                        self.pawnWhite8Clicked = 0
                        self.KingWhiteClicked = 0
                        self.knightWhite1Clicked = 0
                        self.knightWhite2Clicked = 0
                        self.rookWhite1Clicked = 0
                        self.rookWhite2Clicked = 0
                        self.bishopWhite1Clicked = 0
                        self.bishopWhite2Clicked = 0
                        self.QueenWhiteClicked = 0
                        self.pawnWhite7Clicked_cut = 1

            elif self.pw8.collidepoint(self.mouse_x, self.mouse_y):
                if self.pw8.y > self.box1.y:
                    if not self.boxLst[self.boxLst.index(self.pw8) - 8].colliderect(self.pw1) and not \
                            self.boxLst[self.boxLst.index(self.pw8) - 8].colliderect(self.pw2) and not \
                            self.boxLst[self.boxLst.index(self.pw8) - 8].colliderect(self.pw3) and not \
                            self.boxLst[self.boxLst.index(self.pw8) - 8].colliderect(self.pw4) and not \
                            self.boxLst[self.boxLst.index(self.pw8) - 8].colliderect(self.pw5) and not \
                            self.boxLst[self.boxLst.index(self.pw8) - 8].colliderect(self.pw6) and not \
                            self.boxLst[self.boxLst.index(self.pw8) - 8].colliderect(self.pw7) and not \
                            self.boxLst[self.boxLst.index(self.pw8) - 8].colliderect(self.pb8) and not \
                            self.boxLst[self.boxLst.index(self.pw8) - 8].colliderect(self.Kw) and not \
                            self.boxLst[self.boxLst.index(self.pw8) - 8].colliderect(self.Qw) and not \
                            self.boxLst[self.boxLst.index(self.pw8) - 8].colliderect(self.rw1) and not \
                            self.boxLst[self.boxLst.index(self.pw8) - 8].colliderect(self.rw2) and not \
                            self.boxLst[self.boxLst.index(self.pw8) - 8].colliderect(self.kw1) and not \
                            self.boxLst[self.boxLst.index(self.pw8) - 8].colliderect(self.kw2) and not \
                            self.boxLst[self.boxLst.index(self.pw8) - 8].colliderect(self.bw1) and not \
                            self.boxLst[self.boxLst.index(self.pw8) - 8].colliderect(self.bw2) and not \
                            self.boxLst[self.boxLst.index(self.pw8) - 8].colliderect(self.pw2) and not \
                            self.boxLst[self.boxLst.index(self.pw8) - 8].colliderect(self.pw3) and not \
                            self.boxLst[self.boxLst.index(self.pw8) - 8].colliderect(self.pw4) and not \
                            self.boxLst[self.boxLst.index(self.pw8) - 8].colliderect(self.pw5) and not \
                            self.boxLst[self.boxLst.index(self.pw8) - 8].colliderect(self.pw6) and not \
                            self.boxLst[self.boxLst.index(self.pw8) - 8].colliderect(self.pw7) and not \
                            self.boxLst[self.boxLst.index(self.pw8) - 8].colliderect(self.pw1) and not \
                            self.boxLst[self.boxLst.index(self.pw8) - 8].colliderect(self.Kb) and not \
                            self.boxLst[self.boxLst.index(self.pw8) - 8].colliderect(self.Qb) and not \
                            self.boxLst[self.boxLst.index(self.pw8) - 8].colliderect(self.rb1) and not \
                            self.boxLst[self.boxLst.index(self.pw8) - 8].colliderect(self.rb2) and not \
                            self.boxLst[self.boxLst.index(self.pw8) - 8].colliderect(self.kb1) and not \
                            self.boxLst[self.boxLst.index(self.pw8) - 8].colliderect(self.kb2) and not \
                            self.boxLst[self.boxLst.index(self.pw8) - 8].colliderect(self.bb1) and not \
                            self.boxLst[self.boxLst.index(self.pw8) - 8].colliderect(self.bb2):
                        pygame.draw.rect(self.window, self.blue, self.boxLst[self.boxLst.index(self.pw8) - 8], border_radius=100)
                        self.pawnWhite8Clicked = 1
                        self.pawnWhite8Clicked_plus8 = 1
                        self.pawnWhite2Clicked = 0
                        self.pawnWhite3Clicked = 0
                        self.pawnWhite4Clicked = 0
                        self.pawnWhite5Clicked = 0
                        self.pawnWhite6Clicked = 0
                        self.pawnWhite7Clicked = 0
                        self.pawnWhite1Clicked = 0
                        self.KingWhiteClicked = 0
                        self.knightWhite1Clicked = 0
                        self.knightWhite2Clicked = 0
                        self.rookWhite1Clicked = 0
                        self.rookWhite2Clicked = 0
                        self.bishopWhite1Clicked = 0
                        self.bishopWhite2Clicked = 0
                        self.QueenWhiteClicked = 0
                    if self.pw8.y > self.box41.y:
                        if self.pawnWhite8Clicked_plus8 == 1:
                            if not self.boxLst[self.boxLst.index(self.pw8) - 16].colliderect(self.pw1) and not \
                                    self.boxLst[self.boxLst.index(self.pw8) - 16].colliderect(self.pw2) and not \
                                    self.boxLst[self.boxLst.index(self.pw8) - 16].colliderect(self.pw3) and not \
                                    self.boxLst[self.boxLst.index(self.pw8) - 16].colliderect(self.pw4) and not \
                                    self.boxLst[self.boxLst.index(self.pw8) - 16].colliderect(self.pw5) and not \
                                    self.boxLst[self.boxLst.index(self.pw8) - 16].colliderect(self.pw6) and not \
                                    self.boxLst[self.boxLst.index(self.pw8) - 16].colliderect(self.pw7) and not \
                                    self.boxLst[self.boxLst.index(self.pw8) - 16].colliderect(self.pb8) and not \
                                    self.boxLst[self.boxLst.index(self.pw8) - 16].colliderect(self.Kw) and not \
                                    self.boxLst[self.boxLst.index(self.pw8) - 16].colliderect(self.Qw) and not \
                                    self.boxLst[self.boxLst.index(self.pw8) - 16].colliderect(self.rw1) and not \
                                    self.boxLst[self.boxLst.index(self.pw8) - 16].colliderect(self.rw2) and not \
                                    self.boxLst[self.boxLst.index(self.pw8) - 16].colliderect(self.kw1) and not \
                                    self.boxLst[self.boxLst.index(self.pw8) - 16].colliderect(self.kw2) and not \
                                    self.boxLst[self.boxLst.index(self.pw8) - 16].colliderect(self.bw1) and not \
                                    self.boxLst[self.boxLst.index(self.pw8) - 16].colliderect(self.bw2) and not \
                                    self.boxLst[self.boxLst.index(self.pw8) - 16].colliderect(self.pw2) and not \
                                    self.boxLst[self.boxLst.index(self.pw8) - 16].colliderect(self.pw3) and not \
                                    self.boxLst[self.boxLst.index(self.pw8) - 16].colliderect(self.pw4) and not \
                                    self.boxLst[self.boxLst.index(self.pw8) - 16].colliderect(self.pw5) and not \
                                    self.boxLst[self.boxLst.index(self.pw8) - 16].colliderect(self.pw6) and not \
                                    self.boxLst[self.boxLst.index(self.pw8) - 16].colliderect(self.pw7) and not \
                                    self.boxLst[self.boxLst.index(self.pw8) - 16].colliderect(self.pw1) and not \
                                    self.boxLst[self.boxLst.index(self.pw8) - 16].colliderect(self.Kb) and not \
                                    self.boxLst[self.boxLst.index(self.pw8) - 16].colliderect(self.Qb) and not \
                                    self.boxLst[self.boxLst.index(self.pw8) - 16].colliderect(self.rb1) and not \
                                    self.boxLst[self.boxLst.index(self.pw8) - 16].colliderect(self.rb2) and not \
                                    self.boxLst[self.boxLst.index(self.pw8) - 16].colliderect(self.kb1) and not \
                                    self.boxLst[self.boxLst.index(self.pw8) - 16].colliderect(self.kb2) and not \
                                    self.boxLst[self.boxLst.index(self.pw8) - 16].colliderect(self.bb1) and not \
                                    self.boxLst[self.boxLst.index(self.pw8) - 16].colliderect(self.bb2):
                                pygame.draw.rect(self.window, self.blue, self.boxLst[self.boxLst.index(self.pw8) - 16], border_radius=100)
                                self.pawnWhite8Clicked = 1
                                self.pawnWhite2Clicked = 0
                                self.pawnWhite3Clicked = 0
                                self.pawnWhite4Clicked = 0
                                self.pawnWhite5Clicked = 0
                                self.pawnWhite6Clicked = 0
                                self.pawnWhite7Clicked = 0
                                self.pawnWhite1Clicked = 0
                                self.KingWhiteClicked = 0
                                self.knightWhite1Clicked = 0
                                self.knightWhite2Clicked = 0
                                self.rookWhite1Clicked = 0
                                self.rookWhite2Clicked = 0
                                self.bishopWhite1Clicked = 0
                                self.bishopWhite2Clicked = 0
                                self.QueenWhiteClicked = 0
                                self.pawnWhite8Clicked_twoStep = 1
                            elif self.boxLst[self.boxLst.index(self.pw8) - 16].colliderect(self.pw1) or \
                                    self.boxLst[self.boxLst.index(self.pw8) - 16].colliderect(self.pw2) or \
                                    self.boxLst[self.boxLst.index(self.pw8) - 16].colliderect(self.pw3) or \
                                    self.boxLst[self.boxLst.index(self.pw8) - 16].colliderect(self.pw4) or \
                                    self.boxLst[self.boxLst.index(self.pw8) - 16].colliderect(self.pw5) or \
                                    self.boxLst[self.boxLst.index(self.pw8) - 16].colliderect(self.pw6) or \
                                    self.boxLst[self.boxLst.index(self.pw8) - 16].colliderect(self.pw7) or \
                                    self.boxLst[self.boxLst.index(self.pw8) - 16].colliderect(self.pb8) or \
                                    self.boxLst[self.boxLst.index(self.pw8) - 16].colliderect(self.Kw) or \
                                    self.boxLst[self.boxLst.index(self.pw8) - 16].colliderect(self.Qw) or \
                                    self.boxLst[self.boxLst.index(self.pw8) - 16].colliderect(self.rw1) or \
                                    self.boxLst[self.boxLst.index(self.pw8) - 16].colliderect(self.rw2) or \
                                    self.boxLst[self.boxLst.index(self.pw8) - 16].colliderect(self.kw1) or \
                                    self.boxLst[self.boxLst.index(self.pw8) - 16].colliderect(self.kw2) or \
                                    self.boxLst[self.boxLst.index(self.pw8) - 16].colliderect(self.bw1) or \
                                    self.boxLst[self.boxLst.index(self.pw8) - 16].colliderect(self.bw2) or \
                                    self.boxLst[self.boxLst.index(self.pw8) - 16].colliderect(self.pw2) or \
                                    self.boxLst[self.boxLst.index(self.pw8) - 16].colliderect(self.pw3) or \
                                    self.boxLst[self.boxLst.index(self.pw8) - 16].colliderect(self.pw4) or \
                                    self.boxLst[self.boxLst.index(self.pw8) - 16].colliderect(self.pw5) or \
                                    self.boxLst[self.boxLst.index(self.pw8) - 16].colliderect(self.pw6) or \
                                    self.boxLst[self.boxLst.index(self.pw8) - 16].colliderect(self.pw7) or \
                                    self.boxLst[self.boxLst.index(self.pw8) - 16].colliderect(self.pw1) or \
                                    self.boxLst[self.boxLst.index(self.pw8) - 16].colliderect(self.Kb) or \
                                    self.boxLst[self.boxLst.index(self.pw8) - 16].colliderect(self.Qb) or \
                                    self.boxLst[self.boxLst.index(self.pw8) - 16].colliderect(self.rb1) or \
                                    self.boxLst[self.boxLst.index(self.pw8) - 16].colliderect(self.rb2) or \
                                    self.boxLst[self.boxLst.index(self.pw8) - 16].colliderect(self.kb1) or \
                                    self.boxLst[self.boxLst.index(self.pw8) - 16].colliderect(self.kb2) or \
                                    self.boxLst[self.boxLst.index(self.pw8) - 16].colliderect(self.bb1) or \
                                    self.boxLst[self.boxLst.index(self.pw8) - 16].colliderect(self.bb2):
                                self.pawnWhite8Clicked_twoStep = 0
                if self.pw8.y > self.box1.y:
                    if self.boxLst[self.boxLst.index(self.pw8) - 8].colliderect(self.pw1) or \
                            self.boxLst[self.boxLst.index(self.pw8) - 8].colliderect(self.pw2) or \
                            self.boxLst[self.boxLst.index(self.pw8) - 8].colliderect(self.pw3) or \
                            self.boxLst[self.boxLst.index(self.pw8) - 8].colliderect(self.pw4) or \
                            self.boxLst[self.boxLst.index(self.pw8) - 8].colliderect(self.pw5) or \
                            self.boxLst[self.boxLst.index(self.pw8) - 8].colliderect(self.pw6) or \
                            self.boxLst[self.boxLst.index(self.pw8) - 8].colliderect(self.pw7) or \
                            self.boxLst[self.boxLst.index(self.pw8) - 8].colliderect(self.pb8) or \
                            self.boxLst[self.boxLst.index(self.pw8) - 8].colliderect(self.Kw) or \
                            self.boxLst[self.boxLst.index(self.pw8) - 8].colliderect(self.Qw) or \
                            self.boxLst[self.boxLst.index(self.pw8) - 8].colliderect(self.rw1) or \
                            self.boxLst[self.boxLst.index(self.pw8) - 8].colliderect(self.rw2) or \
                            self.boxLst[self.boxLst.index(self.pw8) - 8].colliderect(self.kw1) or \
                            self.boxLst[self.boxLst.index(self.pw8) - 8].colliderect(self.kw2) or \
                            self.boxLst[self.boxLst.index(self.pw8) - 8].colliderect(self.bw1) or \
                            self.boxLst[self.boxLst.index(self.pw8) - 8].colliderect(self.bw2) or \
                            self.boxLst[self.boxLst.index(self.pw8) - 8].colliderect(self.pw2) or \
                            self.boxLst[self.boxLst.index(self.pw8) - 8].colliderect(self.pw3) or \
                            self.boxLst[self.boxLst.index(self.pw8) - 8].colliderect(self.pw4) or \
                            self.boxLst[self.boxLst.index(self.pw8) - 8].colliderect(self.pw5) or \
                            self.boxLst[self.boxLst.index(self.pw8) - 8].colliderect(self.pw6) or \
                            self.boxLst[self.boxLst.index(self.pw8) - 8].colliderect(self.pw7) or \
                            self.boxLst[self.boxLst.index(self.pw8) - 8].colliderect(self.pw1) or \
                            self.boxLst[self.boxLst.index(self.pw8) - 8].colliderect(self.Kb) or \
                            self.boxLst[self.boxLst.index(self.pw8) - 8].colliderect(self.Qb) or \
                            self.boxLst[self.boxLst.index(self.pw8) - 8].colliderect(self.rb1) or \
                            self.boxLst[self.boxLst.index(self.pw8) - 8].colliderect(self.rb2) or \
                            self.boxLst[self.boxLst.index(self.pw8) - 8].colliderect(self.kb1) or \
                            self.boxLst[self.boxLst.index(self.pw8) - 8].colliderect(self.kb2) or \
                            self.boxLst[self.boxLst.index(self.pw8) - 8].colliderect(self.bb1) or \
                            self.boxLst[self.boxLst.index(self.pw8) - 8].colliderect(self.bb2):
                        self.pawnWhite8Clicked = 0
                if self.pw8.x < self.box8.x and self.pw8.y > self.box1.y:
                    if self.boxLst[self.boxLst.index(self.pw8) - 8 + 1].colliderect(self.pb1) or \
                            self.boxLst[self.boxLst.index(self.pw8) - 8 + 1].colliderect(self.pb2) or \
                            self.boxLst[self.boxLst.index(self.pw8) - 8 + 1].colliderect(self.pb3) or \
                            self.boxLst[self.boxLst.index(self.pw8) - 8 + 1].colliderect(self.pb4) or \
                            self.boxLst[self.boxLst.index(self.pw8) - 8 + 1].colliderect(self.pb5) or \
                            self.boxLst[self.boxLst.index(self.pw8) - 8 + 1].colliderect(self.pb6) or \
                            self.boxLst[self.boxLst.index(self.pw8) - 8 + 1].colliderect(self.pb7) or \
                            self.boxLst[self.boxLst.index(self.pw8) - 8 + 1].colliderect(self.pb8) or \
                            self.boxLst[self.boxLst.index(self.pw8) - 8 + 1].colliderect(self.Kb) or \
                            self.boxLst[self.boxLst.index(self.pw8) - 8 + 1].colliderect(self.Qb) or \
                            self.boxLst[self.boxLst.index(self.pw8) - 8 + 1].colliderect(self.rb1) or \
                            self.boxLst[self.boxLst.index(self.pw8) - 8 + 1].colliderect(self.rb2) or \
                            self.boxLst[self.boxLst.index(self.pw8) - 8 + 1].colliderect(self.kb1) or \
                            self.boxLst[self.boxLst.index(self.pw8) - 8 + 1].colliderect(self.kb2) or \
                            self.boxLst[self.boxLst.index(self.pw8) - 8 + 1].colliderect(self.bb1) or \
                            self.boxLst[self.boxLst.index(self.pw8) - 8 + 1].colliderect(self.bb2):
                        pygame.draw.rect(self.window, self.red, self.boxLst[self.boxLst.index(self.pw8) - 8 + 1], border_radius=100)
                        self.pawnWhite8Clicked = 1
                        self.pawnWhite2Clicked = 0
                        self.pawnWhite3Clicked = 0
                        self.pawnWhite4Clicked = 0
                        self.pawnWhite5Clicked = 0
                        self.pawnWhite6Clicked = 0
                        self.pawnWhite7Clicked = 0
                        self.pawnWhite1Clicked = 0
                        self.KingWhiteClicked = 0
                        self.knightWhite1Clicked = 0
                        self.knightWhite2Clicked = 0
                        self.rookWhite1Clicked = 0
                        self.rookWhite2Clicked = 0
                        self.bishopWhite1Clicked = 0
                        self.bishopWhite2Clicked = 0
                        self.QueenWhiteClicked = 0
                        self.pawnWhite8Clicked_cut = 1
                if self.pw8.x  > self.box1.x and self.pw8.y > self.box1.y:
                    if self.boxLst[self.boxLst.index(self.pw8) - 8 - 1].colliderect(self.pb1) or \
                            self.boxLst[self.boxLst.index(self.pw8) - 8 - 1].colliderect(self.pb2) or \
                            self.boxLst[self.boxLst.index(self.pw8) - 8 - 1].colliderect(self.pb3) or \
                            self.boxLst[self.boxLst.index(self.pw8) - 8 - 1].colliderect(self.pb4) or \
                            self.boxLst[self.boxLst.index(self.pw8) - 8 - 1].colliderect(self.pb5) or \
                            self.boxLst[self.boxLst.index(self.pw8) - 8 - 1].colliderect(self.pb6) or \
                            self.boxLst[self.boxLst.index(self.pw8) - 8 - 1].colliderect(self.pb7) or \
                            self.boxLst[self.boxLst.index(self.pw8) - 8 - 1].colliderect(self.pb8) or \
                            self.boxLst[self.boxLst.index(self.pw8) - 8 - 1].colliderect(self.Kb) or \
                            self.boxLst[self.boxLst.index(self.pw8) - 8 - 1].colliderect(self.Qb) or \
                            self.boxLst[self.boxLst.index(self.pw8) - 8 - 1].colliderect(self.rb1) or \
                            self.boxLst[self.boxLst.index(self.pw8) - 8 - 1].colliderect(self.rb2) or \
                            self.boxLst[self.boxLst.index(self.pw8) - 8 - 1].colliderect(self.kb1) or \
                            self.boxLst[self.boxLst.index(self.pw8) - 8 - 1].colliderect(self.kb2) or \
                            self.boxLst[self.boxLst.index(self.pw8) - 8 - 1].colliderect(self.bb1) or \
                            self.boxLst[self.boxLst.index(self.pw8) - 8 - 1].colliderect(self.bb2):
                        pygame.draw.rect(self.window, self.red, self.boxLst[self.boxLst.index(self.pw8) - 8 - 1], border_radius=100)
                        self.pawnWhite8Clicked = 1
                        self.pawnWhite2Clicked = 0
                        self.pawnWhite3Clicked = 0
                        self.pawnWhite4Clicked = 0
                        self.pawnWhite5Clicked = 0
                        self.pawnWhite6Clicked = 0
                        self.pawnWhite7Clicked = 0
                        self.pawnWhite1Clicked = 0
                        self.KingWhiteClicked = 0
                        self.knightWhite1Clicked = 0
                        self.knightWhite2Clicked = 0
                        self.rookWhite1Clicked = 0
                        self.rookWhite2Clicked = 0
                        self.bishopWhite1Clicked = 0
                        self.bishopWhite2Clicked = 0
                        self.QueenWhiteClicked = 0
                        self.pawnWhite8Clicked_cut = 1

        if self.pawnWhite1Clicked == 1:
            if self.boxLst[self.boxLst.index(self.pw1) - 8].collidepoint(self.mouse_x, self.mouse_y):
                self.pw1 = self.boxLst[self.boxLst.index(self.pw1) - 8]
                self.pawnWhite1Clicked = 0
                self.turn = "black"
            if self.pawnWhite1Clicked_cut == 1:
                if self.pw1.x < self.box8.x and self.pw1.y > self.box1.y:
                    if self.boxLst[self.boxLst.index(self.pw1) - 8 + 1].collidepoint(self.mouse_x, self.mouse_y):
                        if self.boxLst[self.boxLst.index(self.pw1) - 8 + 1].colliderect(self.pb1):
                            self.pb1 = self.blackCutPiece_1
                        if self.boxLst[self.boxLst.index(self.pw1) - 8 + 1].colliderect(self.pb2):
                            self.pb2 = self.blackCutPiece_2
                        if self.boxLst[self.boxLst.index(self.pw1) - 8 + 1].colliderect(self.pb3):
                            self.pb3 = self.blackCutPiece_3
                        if self.boxLst[self.boxLst.index(self.pw1) - 8 + 1].colliderect(self.pb4):
                            self.pb4 = self.blackCutPiece_4
                        if self.boxLst[self.boxLst.index(self.pw1) - 8 + 1].colliderect(self.pb5):
                            self.pb5 = self.blackCutPiece_5
                        if self.boxLst[self.boxLst.index(self.pw1) - 8 + 1].colliderect(self.pb6):
                            self.pb6 = self.blackCutPiece_6
                        if self.boxLst[self.boxLst.index(self.pw1) - 8 + 1].colliderect(self.pb7):
                            self.pb7 = self.blackCutPiece_7
                        if self.boxLst[self.boxLst.index(self.pw1) - 8 + 1].colliderect(self.pb8):
                            self.pb8 = self.blackCutPiece_8
                        if self.boxLst[self.boxLst.index(self.pw1) - 8 + 1].colliderect(self.rb1):
                            self.rb1 = self.blackCutPiece_9
                        if self.boxLst[self.boxLst.index(self.pw1) - 8 + 1].colliderect(self.rb2):
                            self.rb2 = self.blackCutPiece_10
                        if self.boxLst[self.boxLst.index(self.pw1) - 8 + 1].colliderect(self.kb1):
                            self.kb1 = self.blackCutPiece_11
                        if self.boxLst[self.boxLst.index(self.pw1) - 8 + 1].colliderect(self.kb2):
                            self.kb2 = self.blackCutPiece_12
                        if self.boxLst[self.boxLst.index(self.pw1) - 8 + 1].colliderect(self.bb1):
                            self.bb1 = self.blackCutPiece_13
                        if self.boxLst[self.boxLst.index(self.pw1) - 8 + 1].colliderect(self.bb2):
                            self.bb2 = self.blackCutPiece_14
                        if self.boxLst[self.boxLst.index(self.pw1) - 8 + 1].colliderect(self.Kb):
                            self.Kb = self.blackCutPiece_15
                            self.KingBlack_isDead = 1
                        if self.boxLst[self.boxLst.index(self.pw1) - 8 + 1].colliderect(self.Qb):
                            self.Qb = self.blackCutPiece_16
                        self.pw1 = self.boxLst[self.boxLst.index(self.pw1) - 8 + 1]
                        self.pawnWhite1Clicked = 0
                        self.pawnWhite1Clicked_cut = 0
                        self.turn = "black"
                if self.box1.x < self.pw1.x and self.pw1.y > self.box1.y:
                    if self.boxLst[self.boxLst.index(self.pw1) - 8 - 1].collidepoint(self.mouse_x, self.mouse_y):
                        if self.boxLst[self.boxLst.index(self.pw1) - 8 - 1].colliderect(self.pb1):
                            self.pb1 = self.blackCutPiece_1
                        if self.boxLst[self.boxLst.index(self.pw1) - 8 - 1].colliderect(self.pb2):
                            self.pb2 = self.blackCutPiece_2
                        if self.boxLst[self.boxLst.index(self.pw1) - 8 - 1].colliderect(self.pb3):
                            self.pb3 = self.blackCutPiece_3
                        if self.boxLst[self.boxLst.index(self.pw1) - 8 - 1].colliderect(self.pb4):
                            self.pb4 = self.blackCutPiece_4
                        if self.boxLst[self.boxLst.index(self.pw1) - 8 - 1].colliderect(self.pb5):
                            self.pb5 = self.blackCutPiece_5
                        if self.boxLst[self.boxLst.index(self.pw1) - 8 - 1].colliderect(self.pb6):
                            self.pb6 = self.blackCutPiece_6
                        if self.boxLst[self.boxLst.index(self.pw1) - 8 - 1].colliderect(self.pb7):
                            self.pb7 = self.blackCutPiece_7
                        if self.boxLst[self.boxLst.index(self.pw1) - 8 - 1].colliderect(self.pb8):
                            self.pb8 = self.blackCutPiece_8
                        if self.boxLst[self.boxLst.index(self.pw1) - 8 - 1].colliderect(self.rb1):
                            self.rb1 = self.blackCutPiece_9
                        if self.boxLst[self.boxLst.index(self.pw1) - 8 - 1].colliderect(self.rb2):
                            self.rb2 = self.blackCutPiece_10
                        if self.boxLst[self.boxLst.index(self.pw1) - 8 - 1].colliderect(self.kb1):
                            self.kb1 = self.blackCutPiece_11
                        if self.boxLst[self.boxLst.index(self.pw1) - 8 - 1].colliderect(self.kb2):
                            self.kb2 = self.blackCutPiece_12
                        if self.boxLst[self.boxLst.index(self.pw1) - 8 - 1].colliderect(self.bb1):
                            self.bb1 = self.blackCutPiece_13
                        if self.boxLst[self.boxLst.index(self.pw1) - 8 - 1].colliderect(self.bb2):
                            self.bb2 = self.blackCutPiece_14
                        if self.boxLst[self.boxLst.index(self.pw1) - 8 - 1].colliderect(self.Kb):
                            self.Kb = self.blackCutPiece_15
                            self.KingBlack_isDead = 1
                        if self.boxLst[self.boxLst.index(self.pw1) - 8 - 1].colliderect(self.Qb):
                            self.Qb = self.blackCutPiece_16
                        self.pw1 = self.boxLst[self.boxLst.index(self.pw1) - 8 - 1]
                        self.pawnWhite1Clicked = 0
                        self.pawnWhite1Clicked_cut = 0
                        self.turn = "black"
            if self.pw1.y > self.box9.y:
                if self.pawnWhite1Clicked_twoStep == 1:
                    if self.boxLst[self.boxLst.index(self.pw1) - 16].collidepoint(self.mouse_x, self.mouse_y):
                        self.pw1 = self.boxLst[self.boxLst.index(self.pw1) - 16]
                        self.pawnWhite1Clicked = 0
                        self.pawnWhite1Clicked_twoStep = 0
                        self.turn = "black"

        elif self.pawnWhite2Clicked == 1:
            if self.boxLst[self.boxLst.index(self.pw2) - 8].collidepoint(self.mouse_x, self.mouse_y):
                self.pw2 = self.boxLst[self.boxLst.index(self.pw2) - 8]
                self.pawnWhite2Clicked = 0
                self.turn = "black"
            if self.pawnWhite2Clicked_cut == 1:
                if self.pw2.x < self.box8.x and self.pw2.y > self.box1.y:
                    if self.boxLst[self.boxLst.index(self.pw2) - 8 + 1].collidepoint(self.mouse_x, self.mouse_y):
                        if self.boxLst[self.boxLst.index(self.pw2) - 8 + 1].colliderect(self.pb1):
                            self.pb1 = self.blackCutPiece_1
                        if self.boxLst[self.boxLst.index(self.pw2) - 8 + 1].colliderect(self.pb2):
                            self.pb2 = self.blackCutPiece_2
                        if self.boxLst[self.boxLst.index(self.pw2) - 8 + 1].colliderect(self.pb3):
                            self.pb3 = self.blackCutPiece_3
                        if self.boxLst[self.boxLst.index(self.pw2) - 8 + 1].colliderect(self.pb4):
                            self.pb4 = self.blackCutPiece_4
                        if self.boxLst[self.boxLst.index(self.pw2) - 8 + 1].colliderect(self.pb5):
                            self.pb5 = self.blackCutPiece_5
                        if self.boxLst[self.boxLst.index(self.pw2) - 8 + 1].colliderect(self.pb6):
                            self.pb6 = self.blackCutPiece_6
                        if self.boxLst[self.boxLst.index(self.pw2) - 8 + 1].colliderect(self.pb7):
                            self.pb7 = self.blackCutPiece_7
                        if self.boxLst[self.boxLst.index(self.pw2) - 8 + 1].colliderect(self.pb8):
                            self.pb8 = self.blackCutPiece_8
                        if self.boxLst[self.boxLst.index(self.pw2) - 8 + 1].colliderect(self.rb1):
                            self.rb1 = self.blackCutPiece_9
                        if self.boxLst[self.boxLst.index(self.pw2) - 8 + 1].colliderect(self.rb2):
                            self.rb2 = self.blackCutPiece_10
                        if self.boxLst[self.boxLst.index(self.pw2) - 8 + 1].colliderect(self.kb1):
                            self.kb1 = self.blackCutPiece_11
                        if self.boxLst[self.boxLst.index(self.pw2) - 8 + 1].colliderect(self.kb2):
                            self.kb2 = self.blackCutPiece_12
                        if self.boxLst[self.boxLst.index(self.pw2) - 8 + 1].colliderect(self.bb1):
                            self.bb1 = self.blackCutPiece_13
                        if self.boxLst[self.boxLst.index(self.pw2) - 8 + 1].colliderect(self.bb2):
                            self.bb2 = self.blackCutPiece_14
                        if self.boxLst[self.boxLst.index(self.pw2) - 8 + 1].colliderect(self.Kb):
                            self.Kb = self.blackCutPiece_15
                            self.KingBlack_isDead = 1
                        if self.boxLst[self.boxLst.index(self.pw2) - 8 + 1].colliderect(self.Qb):
                            self.Qb = self.blackCutPiece_16
                        self.pw2 = self.boxLst[self.boxLst.index(self.pw2) - 8 + 1]
                        self.pawnWhite2Clicked = 0
                        self.pawnWhite2Clicked_cut = 0
                        self.turn = "black"
                if self.box1.x < self.pw2.x and self.pw2.y > self.box1.y:
                    if self.boxLst[self.boxLst.index(self.pw2) - 8 - 1].collidepoint(self.mouse_x, self.mouse_y):
                        if self.boxLst[self.boxLst.index(self.pw2) - 8 - 1].colliderect(self.pb1):
                            self.pb1 = self.blackCutPiece_1
                        if self.boxLst[self.boxLst.index(self.pw2) - 8 - 1].colliderect(self.pb2):
                            self.pb2 = self.blackCutPiece_2
                        if self.boxLst[self.boxLst.index(self.pw2) - 8 - 1].colliderect(self.pb3):
                            self.pb3 = self.blackCutPiece_3
                        if self.boxLst[self.boxLst.index(self.pw2) - 8 - 1].colliderect(self.pb4):
                            self.pb4 = self.blackCutPiece_4
                        if self.boxLst[self.boxLst.index(self.pw2) - 8 - 1].colliderect(self.pb5):
                            self.pb5 = self.blackCutPiece_5
                        if self.boxLst[self.boxLst.index(self.pw2) - 8 - 1].colliderect(self.pb6):
                            self.pb6 = self.blackCutPiece_6
                        if self.boxLst[self.boxLst.index(self.pw2) - 8 - 1].colliderect(self.pb7):
                            self.pb7 = self.blackCutPiece_7
                        if self.boxLst[self.boxLst.index(self.pw2) - 8 - 1].colliderect(self.pb8):
                            self.pb8 = self.blackCutPiece_8
                        if self.boxLst[self.boxLst.index(self.pw2) - 8 - 1].colliderect(self.rb1):
                            self.rb1 = self.blackCutPiece_9
                        if self.boxLst[self.boxLst.index(self.pw2) - 8 - 1].colliderect(self.rb2):
                            self.rb2 = self.blackCutPiece_10
                        if self.boxLst[self.boxLst.index(self.pw2) - 8 - 1].colliderect(self.kb1):
                            self.kb1 = self.blackCutPiece_11
                        if self.boxLst[self.boxLst.index(self.pw2) - 8 - 1].colliderect(self.kb2):
                            self.kb2 = self.blackCutPiece_12
                        if self.boxLst[self.boxLst.index(self.pw2) - 8 - 1].colliderect(self.bb1):
                            self.bb1 = self.blackCutPiece_13
                        if self.boxLst[self.boxLst.index(self.pw2) - 8 - 1].colliderect(self.bb2):
                            self.bb2 = self.blackCutPiece_14
                        if self.boxLst[self.boxLst.index(self.pw2) - 8 - 1].colliderect(self.Kb):
                            self.Kb = self.blackCutPiece_15
                            self.KingBlack_isDead = 1
                        if self.boxLst[self.boxLst.index(self.pw2) - 8 - 1].colliderect(self.Qb):
                            self.Qb = self.blackCutPiece_16
                        self.pw2 = self.boxLst[self.boxLst.index(self.pw2) - 8 - 1]
                        self.pawnWhite2Clicked = 0
                        self.pawnWhite2Clicked_cut = 0
                        self.turn = "black"
            if self.pw2.y > self.box9.y:
                if self.pawnWhite2Clicked_twoStep == 1:
                    if self.boxLst[self.boxLst.index(self.pw2) - 16].collidepoint(self.mouse_x, self.mouse_y):
                        self.pw2 = self.boxLst[self.boxLst.index(self.pw2) - 16]
                        self.pawnWhite2Clicked = 0
                        self.pawnWhite2Clicked_twoStep = 0
                        self.turn = "black"

        elif self.pawnWhite3Clicked == 1:
            if self.boxLst[self.boxLst.index(self.pw3) - 8].collidepoint(self.mouse_x, self.mouse_y):
                self.pw3 = self.boxLst[self.boxLst.index(self.pw3) - 8]
                self.pawnWhite3Clicked = 0
                self.turn = "black"
            if self.pawnWhite3Clicked_cut == 1:
                if self.pw3.x < self.box8.x and self.pw3.y > self.box1.y:
                    if self.boxLst[self.boxLst.index(self.pw3) - 8 + 1].collidepoint(self.mouse_x, self.mouse_y):
                        if self.boxLst[self.boxLst.index(self.pw3) - 8 + 1].colliderect(self.pb1):
                            self.pb1 = self.blackCutPiece_1
                        if self.boxLst[self.boxLst.index(self.pw3) - 8 + 1].colliderect(self.pb2):
                            self.pb2 = self.blackCutPiece_2
                        if self.boxLst[self.boxLst.index(self.pw3) - 8 + 1].colliderect(self.pb3):
                            self.pb3 = self.blackCutPiece_3
                        if self.boxLst[self.boxLst.index(self.pw3) - 8 + 1].colliderect(self.pb4):
                            self.pb4 = self.blackCutPiece_4
                        if self.boxLst[self.boxLst.index(self.pw3) - 8 + 1].colliderect(self.pb5):
                            self.pb5 = self.blackCutPiece_5
                        if self.boxLst[self.boxLst.index(self.pw3) - 8 + 1].colliderect(self.pb6):
                            self.pb6 = self.blackCutPiece_6
                        if self.boxLst[self.boxLst.index(self.pw3) - 8 + 1].colliderect(self.pb7):
                            self.pb7 = self.blackCutPiece_7
                        if self.boxLst[self.boxLst.index(self.pw3) - 8 + 1].colliderect(self.pb8):
                            self.pb8 = self.blackCutPiece_8
                        if self.boxLst[self.boxLst.index(self.pw3) - 8 + 1].colliderect(self.rb1):
                            self.rb1 = self.blackCutPiece_9
                        if self.boxLst[self.boxLst.index(self.pw3) - 8 + 1].colliderect(self.rb2):
                            self.rb2 = self.blackCutPiece_10
                        if self.boxLst[self.boxLst.index(self.pw3) - 8 + 1].colliderect(self.kb1):
                            self.kb1 = self.blackCutPiece_11
                        if self.boxLst[self.boxLst.index(self.pw3) - 8 + 1].colliderect(self.kb2):
                            self.kb2 = self.blackCutPiece_12
                        if self.boxLst[self.boxLst.index(self.pw3) - 8 + 1].colliderect(self.bb1):
                            self.bb1 = self.blackCutPiece_13
                        if self.boxLst[self.boxLst.index(self.pw3) - 8 + 1].colliderect(self.bb2):
                            self.bb2 = self.blackCutPiece_14
                        if self.boxLst[self.boxLst.index(self.pw3) - 8 + 1].colliderect(self.Kb):
                            self.Kb = self.blackCutPiece_15
                            self.KingBlack_isDead = 1
                        if self.boxLst[self.boxLst.index(self.pw3) - 8 + 1].colliderect(self.Qb):
                            self.Qb = self.blackCutPiece_16
                        self.pw3 = self.boxLst[self.boxLst.index(self.pw3) - 8 + 1]
                        self.pawnWhite3Clicked = 0
                        self.pawnWhite3Clicked_cut = 0
                        self.turn = "black"
                if self.box1.x < self.pw3.x and self.pw3.y > self.box1.y:
                    if self.boxLst[self.boxLst.index(self.pw3) - 8 - 1].collidepoint(self.mouse_x, self.mouse_y):
                        if self.boxLst[self.boxLst.index(self.pw3) - 8 - 1].colliderect(self.pb1):
                            self.pb1 = self.blackCutPiece_1
                        if self.boxLst[self.boxLst.index(self.pw3) - 8 - 1].colliderect(self.pb2):
                            self.pb2 = self.blackCutPiece_2
                        if self.boxLst[self.boxLst.index(self.pw3) - 8 - 1].colliderect(self.pb3):
                            self.pb3 = self.blackCutPiece_3
                        if self.boxLst[self.boxLst.index(self.pw3) - 8 - 1].colliderect(self.pb4):
                            self.pb4 = self.blackCutPiece_4
                        if self.boxLst[self.boxLst.index(self.pw3) - 8 - 1].colliderect(self.pb5):
                            self.pb5 = self.blackCutPiece_5
                        if self.boxLst[self.boxLst.index(self.pw3) - 8 - 1].colliderect(self.pb6):
                            self.pb6 = self.blackCutPiece_6
                        if self.boxLst[self.boxLst.index(self.pw3) - 8 - 1].colliderect(self.pb7):
                            self.pb7 = self.blackCutPiece_7
                        if self.boxLst[self.boxLst.index(self.pw3) - 8 - 1].colliderect(self.pb8):
                            self.pb8 = self.blackCutPiece_8
                        if self.boxLst[self.boxLst.index(self.pw3) - 8 - 1].colliderect(self.rb1):
                            self.rb1 = self.blackCutPiece_9
                        if self.boxLst[self.boxLst.index(self.pw3) - 8 - 1].colliderect(self.rb2):
                            self.rb2 = self.blackCutPiece_10
                        if self.boxLst[self.boxLst.index(self.pw3) - 8 - 1].colliderect(self.kb1):
                            self.kb1 = self.blackCutPiece_11
                        if self.boxLst[self.boxLst.index(self.pw3) - 8 - 1].colliderect(self.kb2):
                            self.kb2 = self.blackCutPiece_12
                        if self.boxLst[self.boxLst.index(self.pw3) - 8 - 1].colliderect(self.bb1):
                            self.bb1 = self.blackCutPiece_13
                        if self.boxLst[self.boxLst.index(self.pw3) - 8 - 1].colliderect(self.bb2):
                            self.bb2 = self.blackCutPiece_14
                        if self.boxLst[self.boxLst.index(self.pw3) - 8 - 1].colliderect(self.Kb):
                            self.Kb = self.blackCutPiece_15
                            self.KingBlack_isDead = 1
                        if self.boxLst[self.boxLst.index(self.pw3) - 8 - 1].colliderect(self.Qb):
                            self.Qb = self.blackCutPiece_16
                        self.pw3 = self.boxLst[self.boxLst.index(self.pw3) - 8 - 1]
                        self.pawnWhite3Clicked = 0
                        self.pawnWhite3Clicked_cut = 0
                        self.turn = "black"
            if self.pw3.y > self.box9.y:
                if self.pawnWhite3Clicked_twoStep == 1:
                    if self.boxLst[self.boxLst.index(self.pw3) - 16].collidepoint(self.mouse_x, self.mouse_y):
                        self.pw3 = self.boxLst[self.boxLst.index(self.pw3) - 16]
                        self.pawnWhite3Clicked = 0
                        self.pawnWhite3Clicked_twoStep = 0
                        self.turn = "black"

        elif self.pawnWhite4Clicked == 1:
            if self.boxLst[self.boxLst.index(self.pw4) - 8].collidepoint(self.mouse_x, self.mouse_y):
                self.pw4 = self.boxLst[self.boxLst.index(self.pw4) - 8]
                self.pawnWhite4Clicked = 0
                self.turn = "black"
            if self.pawnWhite4Clicked_cut == 1:
                if self.pw4.x < self.box8.x and self.pw4.y > self.box1.y:
                    if self.boxLst[self.boxLst.index(self.pw4) - 8 + 1].collidepoint(self.mouse_x, self.mouse_y):
                        if self.boxLst[self.boxLst.index(self.pw4) - 8 + 1].colliderect(self.pb1):
                            self.pb1 = self.blackCutPiece_1
                        if self.boxLst[self.boxLst.index(self.pw4) - 8 + 1].colliderect(self.pb2):
                            self.pb2 = self.blackCutPiece_2
                        if self.boxLst[self.boxLst.index(self.pw4) - 8 + 1].colliderect(self.pb3):
                            self.pb3 = self.blackCutPiece_3
                        if self.boxLst[self.boxLst.index(self.pw4) - 8 + 1].colliderect(self.pb4):
                            self.pb4 = self.blackCutPiece_4
                        if self.boxLst[self.boxLst.index(self.pw4) - 8 + 1].colliderect(self.pb5):
                            self.pb5 = self.blackCutPiece_5
                        if self.boxLst[self.boxLst.index(self.pw4) - 8 + 1].colliderect(self.pb6):
                            self.pb6 = self.blackCutPiece_6
                        if self.boxLst[self.boxLst.index(self.pw4) - 8 + 1].colliderect(self.pb7):
                            self.pb7 = self.blackCutPiece_7
                        if self.boxLst[self.boxLst.index(self.pw4) - 8 + 1].colliderect(self.pb8):
                            self.pb8 = self.blackCutPiece_8
                        if self.boxLst[self.boxLst.index(self.pw4) - 8 + 1].colliderect(self.rb1):
                            self.rb1 = self.blackCutPiece_9
                        if self.boxLst[self.boxLst.index(self.pw4) - 8 + 1].colliderect(self.rb2):
                            self.rb2 = self.blackCutPiece_10
                        if self.boxLst[self.boxLst.index(self.pw4) - 8 + 1].colliderect(self.kb1):
                            self.kb1 = self.blackCutPiece_11
                        if self.boxLst[self.boxLst.index(self.pw4) - 8 + 1].colliderect(self.kb2):
                            self.kb2 = self.blackCutPiece_12
                        if self.boxLst[self.boxLst.index(self.pw4) - 8 + 1].colliderect(self.bb1):
                            self.bb1 = self.blackCutPiece_13
                        if self.boxLst[self.boxLst.index(self.pw4) - 8 + 1].colliderect(self.bb2):
                            self.bb2 = self.blackCutPiece_14
                        if self.boxLst[self.boxLst.index(self.pw4) - 8 + 1].colliderect(self.Kb):
                            self.Kb = self.blackCutPiece_15
                            self.KingBlack_isDead = 1
                        if self.boxLst[self.boxLst.index(self.pw4) - 8 + 1].colliderect(self.Qb):
                            self.Qb = self.blackCutPiece_16
                        self.pw4 = self.boxLst[self.boxLst.index(self.pw4) - 8 + 1]
                        self.pawnWhite4Clicked = 0
                        self.pawnWhite4Clicked_cut = 0
                        self.turn = "black"
                if self.box1.x < self.pw4.x and self.pw4.y > self.box1.y:
                    if self.boxLst[self.boxLst.index(self.pw4) - 8 - 1].collidepoint(self.mouse_x, self.mouse_y):
                        if self.boxLst[self.boxLst.index(self.pw4) - 8 - 1].colliderect(self.pb1):
                            self.pb1 = self.blackCutPiece_1
                        if self.boxLst[self.boxLst.index(self.pw4) - 8 - 1].colliderect(self.pb2):
                            self.pb2 = self.blackCutPiece_2
                        if self.boxLst[self.boxLst.index(self.pw4) - 8 - 1].colliderect(self.pb3):
                            self.pb3 = self.blackCutPiece_3
                        if self.boxLst[self.boxLst.index(self.pw4) - 8 - 1].colliderect(self.pb4):
                            self.pb4 = self.blackCutPiece_4
                        if self.boxLst[self.boxLst.index(self.pw4) - 8 - 1].colliderect(self.pb5):
                            self.pb5 = self.blackCutPiece_5
                        if self.boxLst[self.boxLst.index(self.pw4) - 8 - 1].colliderect(self.pb6):
                            self.pb6 = self.blackCutPiece_6
                        if self.boxLst[self.boxLst.index(self.pw4) - 8 - 1].colliderect(self.pb7):
                            self.pb7 = self.blackCutPiece_7
                        if self.boxLst[self.boxLst.index(self.pw4) - 8 - 1].colliderect(self.pb8):
                            self.pb8 = self.blackCutPiece_8
                        if self.boxLst[self.boxLst.index(self.pw4) - 8 - 1].colliderect(self.rb1):
                            self.rb1 = self.blackCutPiece_9
                        if self.boxLst[self.boxLst.index(self.pw4) - 8 - 1].colliderect(self.rb2):
                            self.rb2 = self.blackCutPiece_10
                        if self.boxLst[self.boxLst.index(self.pw4) - 8 - 1].colliderect(self.kb1):
                            self.kb1 = self.blackCutPiece_11
                        if self.boxLst[self.boxLst.index(self.pw4) - 8 - 1].colliderect(self.kb2):
                            self.kb2 = self.blackCutPiece_12
                        if self.boxLst[self.boxLst.index(self.pw4) - 8 - 1].colliderect(self.bb1):
                            self.bb1 = self.blackCutPiece_13
                        if self.boxLst[self.boxLst.index(self.pw4) - 8 - 1].colliderect(self.bb2):
                            self.bb2 = self.blackCutPiece_14
                        if self.boxLst[self.boxLst.index(self.pw4) - 8 - 1].colliderect(self.Kb):
                            self.Kb = self.blackCutPiece_15
                            self.KingBlack_isDead = 1
                        if self.boxLst[self.boxLst.index(self.pw4) - 8 - 1].colliderect(self.Qb):
                            self.Qb = self.blackCutPiece_16
                        self.pw4 = self.boxLst[self.boxLst.index(self.pw4) - 8 - 1]
                        self.pawnWhite4Clicked = 0
                        self.pawnWhite4Clicked_cut = 0
                        self.turn = "black"
            if self.pw4.y > self.box9.y:
                if self.pawnWhite4Clicked_twoStep == 1:
                    if self.boxLst[self.boxLst.index(self.pw4) - 16].collidepoint(self.mouse_x, self.mouse_y):
                        self.pw4 = self.boxLst[self.boxLst.index(self.pw4) - 16]
                        self.pawnWhite4Clicked = 0
                        self.pawnWhite4Clicked_twoStep = 0
                        self.turn = "black"

        elif self.pawnWhite5Clicked == 1:
            if self.boxLst[self.boxLst.index(self.pw5) - 8].collidepoint(self.mouse_x, self.mouse_y):
                self.pw5 = self.boxLst[self.boxLst.index(self.pw5) - 8]
                self.pawnWhite5Clicked = 0
                self.turn = "black"
            if self.pawnWhite5Clicked_cut == 1:
                if self.pw5.x < self.box8.x and self.pw5.y > self.box1.y:
                    if self.boxLst[self.boxLst.index(self.pw5) - 8 + 1].collidepoint(self.mouse_x, self.mouse_y):
                        if self.boxLst[self.boxLst.index(self.pw5) - 8 + 1].colliderect(self.pb1):
                            self.pb1 = self.blackCutPiece_1
                        if self.boxLst[self.boxLst.index(self.pw5) - 8 + 1].colliderect(self.pb2):
                            self.pb2 = self.blackCutPiece_2
                        if self.boxLst[self.boxLst.index(self.pw5) - 8 + 1].colliderect(self.pb3):
                            self.pb3 = self.blackCutPiece_3
                        if self.boxLst[self.boxLst.index(self.pw5) - 8 + 1].colliderect(self.pb4):
                            self.pb4 = self.blackCutPiece_4
                        if self.boxLst[self.boxLst.index(self.pw5) - 8 + 1].colliderect(self.pb5):
                            self.pb5 = self.blackCutPiece_5
                        if self.boxLst[self.boxLst.index(self.pw5) - 8 + 1].colliderect(self.pb6):
                            self.pb6 = self.blackCutPiece_6
                        if self.boxLst[self.boxLst.index(self.pw5) - 8 + 1].colliderect(self.pb7):
                            self.pb7 = self.blackCutPiece_7
                        if self.boxLst[self.boxLst.index(self.pw5) - 8 + 1].colliderect(self.pb8):
                            self.pb8 = self.blackCutPiece_8
                        if self.boxLst[self.boxLst.index(self.pw5) - 8 + 1].colliderect(self.rb1):
                            self.rb1 = self.blackCutPiece_9
                        if self.boxLst[self.boxLst.index(self.pw5) - 8 + 1].colliderect(self.rb2):
                            self.rb2 = self.blackCutPiece_10
                        if self.boxLst[self.boxLst.index(self.pw5) - 8 + 1].colliderect(self.kb1):
                            self.kb1 = self.blackCutPiece_11
                        if self.boxLst[self.boxLst.index(self.pw5) - 8 + 1].colliderect(self.kb2):
                            self.kb2 = self.blackCutPiece_12
                        if self.boxLst[self.boxLst.index(self.pw5) - 8 + 1].colliderect(self.bb1):
                            self.bb1 = self.blackCutPiece_13
                        if self.boxLst[self.boxLst.index(self.pw5) - 8 + 1].colliderect(self.bb2):
                            self.bb2 = self.blackCutPiece_14
                        if self.boxLst[self.boxLst.index(self.pw5) - 8 + 1].colliderect(self.Kb):
                            self.Kb = self.blackCutPiece_15
                            self.KingBlack_isDead = 1
                        if self.boxLst[self.boxLst.index(self.pw5) - 8 + 1].colliderect(self.Qb):
                            self.Qb = self.blackCutPiece_16
                        self.pw5 = self.boxLst[self.boxLst.index(self.pw5) - 8 + 1]
                        self.pawnWhite5Clicked = 0
                        self.pawnWhite5Clicked_cut = 0
                        self.turn = "black"
                if self.box1.x < self.pw5.x and self.pw5.y > self.box1.y:
                    if self.boxLst[self.boxLst.index(self.pw5) - 8 - 1].collidepoint(self.mouse_x, self.mouse_y):
                        if self.boxLst[self.boxLst.index(self.pw5) - 8 - 1].colliderect(self.pb1):
                            self.pb1 = self.blackCutPiece_1
                        if self.boxLst[self.boxLst.index(self.pw5) - 8 - 1].colliderect(self.pb2):
                            self.pb2 = self.blackCutPiece_2
                        if self.boxLst[self.boxLst.index(self.pw5) - 8 - 1].colliderect(self.pb3):
                            self.pb3 = self.blackCutPiece_3
                        if self.boxLst[self.boxLst.index(self.pw5) - 8 - 1].colliderect(self.pb4):
                            self.pb4 = self.blackCutPiece_4
                        if self.boxLst[self.boxLst.index(self.pw5) - 8 - 1].colliderect(self.pb5):
                            self.pb5 = self.blackCutPiece_5
                        if self.boxLst[self.boxLst.index(self.pw5) - 8 - 1].colliderect(self.pb6):
                            self.pb6 = self.blackCutPiece_6
                        if self.boxLst[self.boxLst.index(self.pw5) - 8 - 1].colliderect(self.pb7):
                            self.pb7 = self.blackCutPiece_7
                        if self.boxLst[self.boxLst.index(self.pw5) - 8 - 1].colliderect(self.pb8):
                            self.pb8 = self.blackCutPiece_8
                        if self.boxLst[self.boxLst.index(self.pw5) - 8 - 1].colliderect(self.rb1):
                            self.rb1 = self.blackCutPiece_9
                        if self.boxLst[self.boxLst.index(self.pw5) - 8 - 1].colliderect(self.rb2):
                            self.rb2 = self.blackCutPiece_10
                        if self.boxLst[self.boxLst.index(self.pw5) - 8 - 1].colliderect(self.kb1):
                            self.kb1 = self.blackCutPiece_11
                        if self.boxLst[self.boxLst.index(self.pw5) - 8 - 1].colliderect(self.kb2):
                            self.kb2 = self.blackCutPiece_12
                        if self.boxLst[self.boxLst.index(self.pw5) - 8 - 1].colliderect(self.bb1):
                            self.bb1 = self.blackCutPiece_13
                        if self.boxLst[self.boxLst.index(self.pw5) - 8 - 1].colliderect(self.bb2):
                            self.bb2 = self.blackCutPiece_14
                        if self.boxLst[self.boxLst.index(self.pw5) - 8 - 1].colliderect(self.Kb):
                            self.Kb = self.blackCutPiece_15
                            self.KingBlack_isDead = 1
                        if self.boxLst[self.boxLst.index(self.pw5) - 8 - 1].colliderect(self.Qb):
                            self.Qb = self.blackCutPiece_16
                        self.pw5 = self.boxLst[self.boxLst.index(self.pw5) - 8 - 1]
                        self.pawnWhite5Clicked = 0
                        self.pawnWhite5Clicked_cut = 0
                        self.turn = "black"
            if self.pw5.y > self.box9.y:
                if self.pawnWhite5Clicked_twoStep == 1:
                    if self.boxLst[self.boxLst.index(self.pw5) - 16].collidepoint(self.mouse_x, self.mouse_y):
                        self.pw5 = self.boxLst[self.boxLst.index(self.pw5) - 16]
                        self.pawnWhite5Clicked = 0
                        self.pawnWhite5Clicked_twoStep = 0
                        self.turn = "black"

        elif self.pawnWhite6Clicked == 1:
            if self.boxLst[self.boxLst.index(self.pw6) - 8].collidepoint(self.mouse_x, self.mouse_y):
                self.pw6 = self.boxLst[self.boxLst.index(self.pw6) - 8]
                self.pawnWhite6Clicked = 0
                self.turn = "black"
            if self.pawnWhite6Clicked_cut == 1:
                if self.pw6.x < self.box8.x and self.pw6.y > self.box1.y:
                    if self.boxLst[self.boxLst.index(self.pw6) - 8 + 1].collidepoint(self.mouse_x, self.mouse_y):
                        if self.boxLst[self.boxLst.index(self.pw6) - 8 + 1].colliderect(self.pb1):
                            self.pb1 = self.blackCutPiece_1
                        if self.boxLst[self.boxLst.index(self.pw6) - 8 + 1].colliderect(self.pb2):
                            self.pb2 = self.blackCutPiece_2
                        if self.boxLst[self.boxLst.index(self.pw6) - 8 + 1].colliderect(self.pb3):
                            self.pb3 = self.blackCutPiece_3
                        if self.boxLst[self.boxLst.index(self.pw6) - 8 + 1].colliderect(self.pb4):
                            self.pb4 = self.blackCutPiece_4
                        if self.boxLst[self.boxLst.index(self.pw6) - 8 + 1].colliderect(self.pb5):
                            self.pb5 = self.blackCutPiece_5
                        if self.boxLst[self.boxLst.index(self.pw6) - 8 + 1].colliderect(self.pb6):
                            self.pb6 = self.blackCutPiece_6
                        if self.boxLst[self.boxLst.index(self.pw6) - 8 + 1].colliderect(self.pb7):
                            self.pb7 = self.blackCutPiece_7
                        if self.boxLst[self.boxLst.index(self.pw6) - 8 + 1].colliderect(self.pb8):
                            self.pb8 = self.blackCutPiece_8
                        if self.boxLst[self.boxLst.index(self.pw6) - 8 + 1].colliderect(self.rb1):
                            self.rb1 = self.blackCutPiece_9
                        if self.boxLst[self.boxLst.index(self.pw6) - 8 + 1].colliderect(self.rb2):
                            self.rb2 = self.blackCutPiece_10
                        if self.boxLst[self.boxLst.index(self.pw6) - 8 + 1].colliderect(self.kb1):
                            self.kb1 = self.blackCutPiece_11
                        if self.boxLst[self.boxLst.index(self.pw6) - 8 + 1].colliderect(self.kb2):
                            self.kb2 = self.blackCutPiece_12
                        if self.boxLst[self.boxLst.index(self.pw6) - 8 + 1].colliderect(self.bb1):
                            self.bb1 = self.blackCutPiece_13
                        if self.boxLst[self.boxLst.index(self.pw6) - 8 + 1].colliderect(self.bb2):
                            self.bb2 = self.blackCutPiece_14
                        if self.boxLst[self.boxLst.index(self.pw6) - 8 + 1].colliderect(self.Kb):
                            self.Kb = self.blackCutPiece_15
                            self.KingBlack_isDead = 1
                        if self.boxLst[self.boxLst.index(self.pw6) - 8 + 1].colliderect(self.Qb):
                            self.Qb = self.blackCutPiece_16
                        self.pw6 = self.boxLst[self.boxLst.index(self.pw6) - 8 + 1]
                        self.pawnWhite6Clicked = 0
                        self.pawnWhite6Clicked_cut = 0
                        self.turn = "black"
                if self.box1.x < self.pw6.x and self.pw6.y > self.box1.y:
                    if self.boxLst[self.boxLst.index(self.pw6) - 8 - 1].collidepoint(self.mouse_x, self.mouse_y):
                        if self.boxLst[self.boxLst.index(self.pw6) - 8 - 1].colliderect(self.pb1):
                            self.pb1 = self.blackCutPiece_1
                        if self.boxLst[self.boxLst.index(self.pw6) - 8 - 1].colliderect(self.pb2):
                            self.pb2 = self.blackCutPiece_2
                        if self.boxLst[self.boxLst.index(self.pw6) - 8 - 1].colliderect(self.pb3):
                            self.pb3 = self.blackCutPiece_3
                        if self.boxLst[self.boxLst.index(self.pw6) - 8 - 1].colliderect(self.pb4):
                            self.pb4 = self.blackCutPiece_4
                        if self.boxLst[self.boxLst.index(self.pw6) - 8 - 1].colliderect(self.pb5):
                            self.pb5 = self.blackCutPiece_5
                        if self.boxLst[self.boxLst.index(self.pw6) - 8 - 1].colliderect(self.pb6):
                            self.pb6 = self.blackCutPiece_6
                        if self.boxLst[self.boxLst.index(self.pw6) - 8 - 1].colliderect(self.pb7):
                            self.pb7 = self.blackCutPiece_7
                        if self.boxLst[self.boxLst.index(self.pw6) - 8 - 1].colliderect(self.pb8):
                            self.pb8 = self.blackCutPiece_8
                        if self.boxLst[self.boxLst.index(self.pw6) - 8 - 1].colliderect(self.rb1):
                            self.rb1 = self.blackCutPiece_9
                        if self.boxLst[self.boxLst.index(self.pw6) - 8 - 1].colliderect(self.rb2):
                            self.rb2 = self.blackCutPiece_10
                        if self.boxLst[self.boxLst.index(self.pw6) - 8 - 1].colliderect(self.kb1):
                            self.kb1 = self.blackCutPiece_11
                        if self.boxLst[self.boxLst.index(self.pw6) - 8 - 1].colliderect(self.kb2):
                            self.kb2 = self.blackCutPiece_12
                        if self.boxLst[self.boxLst.index(self.pw6) - 8 - 1].colliderect(self.bb1):
                            self.bb1 = self.blackCutPiece_13
                        if self.boxLst[self.boxLst.index(self.pw6) - 8 - 1].colliderect(self.bb2):
                            self.bb2 = self.blackCutPiece_14
                        if self.boxLst[self.boxLst.index(self.pw6) - 8 - 1].colliderect(self.Kb):
                            self.Kb = self.blackCutPiece_15
                            self.KingBlack_isDead = 1
                        if self.boxLst[self.boxLst.index(self.pw6) - 8 - 1].colliderect(self.Qb):
                            self.Qb = self.blackCutPiece_16
                        self.pw6 = self.boxLst[self.boxLst.index(self.pw6) - 8 - 1]
                        self.pawnWhite6Clicked = 0
                        self.pawnWhite6Clicked_cut = 0
                        self.turn = "black"
            if self.pw6.y > self.box9.y:
                if self.pawnWhite6Clicked_twoStep == 1:
                    if self.boxLst[self.boxLst.index(self.pw6) - 16].collidepoint(self.mouse_x, self.mouse_y):
                        self.pw6 = self.boxLst[self.boxLst.index(self.pw6) - 16]
                        self.pawnWhite6Clicked = 0
                        self.pawnWhite6Clicked_twoStep = 0
                        self.turn = "black"

        elif self.pawnWhite7Clicked == 1:
            if self.boxLst[self.boxLst.index(self.pw7) - 8].collidepoint(self.mouse_x, self.mouse_y):
                self.pw7 = self.boxLst[self.boxLst.index(self.pw7) - 8]
                self.pawnWhite7Clicked = 0
                self.turn = "black"
            if self.pawnWhite7Clicked_cut == 1:
                if self.pw7.x < self.box8.x and self.pw7.y > self.box1.y:
                    if self.boxLst[self.boxLst.index(self.pw7) - 8 + 1].collidepoint(self.mouse_x, self.mouse_y):
                        if self.boxLst[self.boxLst.index(self.pw7) - 8 + 1].colliderect(self.pb1):
                            self.pb1 = self.blackCutPiece_1
                        if self.boxLst[self.boxLst.index(self.pw7) - 8 + 1].colliderect(self.pb2):
                            self.pb2 = self.blackCutPiece_2
                        if self.boxLst[self.boxLst.index(self.pw7) - 8 + 1].colliderect(self.pb3):
                            self.pb3 = self.blackCutPiece_3
                        if self.boxLst[self.boxLst.index(self.pw7) - 8 + 1].colliderect(self.pb4):
                            self.pb4 = self.blackCutPiece_4
                        if self.boxLst[self.boxLst.index(self.pw7) - 8 + 1].colliderect(self.pb5):
                            self.pb5 = self.blackCutPiece_5
                        if self.boxLst[self.boxLst.index(self.pw7) - 8 + 1].colliderect(self.pb6):
                            self.pb6 = self.blackCutPiece_6
                        if self.boxLst[self.boxLst.index(self.pw7) - 8 + 1].colliderect(self.pb7):
                            self.pb7 = self.blackCutPiece_7
                        if self.boxLst[self.boxLst.index(self.pw7) - 8 + 1].colliderect(self.pb8):
                            self.pb8 = self.blackCutPiece_8
                        if self.boxLst[self.boxLst.index(self.pw7) - 8 + 1].colliderect(self.rb1):
                            self.rb1 = self.blackCutPiece_9
                        if self.boxLst[self.boxLst.index(self.pw7) - 8 + 1].colliderect(self.rb2):
                            self.rb2 = self.blackCutPiece_10
                        if self.boxLst[self.boxLst.index(self.pw7) - 8 + 1].colliderect(self.kb1):
                            self.kb1 = self.blackCutPiece_11
                        if self.boxLst[self.boxLst.index(self.pw7) - 8 + 1].colliderect(self.kb2):
                            self.kb2 = self.blackCutPiece_12
                        if self.boxLst[self.boxLst.index(self.pw7) - 8 + 1].colliderect(self.bb1):
                            self.bb1 = self.blackCutPiece_13
                        if self.boxLst[self.boxLst.index(self.pw7) - 8 + 1].colliderect(self.bb2):
                            self.bb2 = self.blackCutPiece_14
                        if self.boxLst[self.boxLst.index(self.pw7) - 8 + 1].colliderect(self.Kb):
                            self.Kb = self.blackCutPiece_15
                            self.KingBlack_isDead = 1
                        if self.boxLst[self.boxLst.index(self.pw7) - 8 + 1].colliderect(self.Qb):
                            self.Qb = self.blackCutPiece_16
                        self.pw7 = self.boxLst[self.boxLst.index(self.pw7) - 8 + 1]
                        self.pawnWhite7Clicked = 0
                        self.pawnWhite7Clicked_cut = 0
                        self.turn = "black"
                if self.box1.x < self.pw7.x and self.pw7.y > self.box1.y:
                    if self.boxLst[self.boxLst.index(self.pw7) - 8 - 1].collidepoint(self.mouse_x, self.mouse_y):
                        if self.boxLst[self.boxLst.index(self.pw7) - 8 - 1].colliderect(self.pb1):
                            self.pb1 = self.blackCutPiece_1
                        if self.boxLst[self.boxLst.index(self.pw7) - 8 - 1].colliderect(self.pb2):
                            self.pb2 = self.blackCutPiece_2
                        if self.boxLst[self.boxLst.index(self.pw7) - 8 - 1].colliderect(self.pb3):
                            self.pb3 = self.blackCutPiece_3
                        if self.boxLst[self.boxLst.index(self.pw7) - 8 - 1].colliderect(self.pb4):
                            self.pb4 = self.blackCutPiece_4
                        if self.boxLst[self.boxLst.index(self.pw7) - 8 - 1].colliderect(self.pb5):
                            self.pb5 = self.blackCutPiece_5
                        if self.boxLst[self.boxLst.index(self.pw7) - 8 - 1].colliderect(self.pb6):
                            self.pb6 = self.blackCutPiece_6
                        if self.boxLst[self.boxLst.index(self.pw7) - 8 - 1].colliderect(self.pb7):
                            self.pb7 = self.blackCutPiece_7
                        if self.boxLst[self.boxLst.index(self.pw7) - 8 - 1].colliderect(self.pb8):
                            self.pb8 = self.blackCutPiece_8
                        if self.boxLst[self.boxLst.index(self.pw7) - 8 - 1].colliderect(self.rb1):
                            self.rb1 = self.blackCutPiece_9
                        if self.boxLst[self.boxLst.index(self.pw7) - 8 - 1].colliderect(self.rb2):
                            self.rb2 = self.blackCutPiece_10
                        if self.boxLst[self.boxLst.index(self.pw7) - 8 - 1].colliderect(self.kb1):
                            self.kb1 = self.blackCutPiece_11
                        if self.boxLst[self.boxLst.index(self.pw7) - 8 - 1].colliderect(self.kb2):
                            self.kb2 = self.blackCutPiece_12
                        if self.boxLst[self.boxLst.index(self.pw7) - 8 - 1].colliderect(self.bb1):
                            self.bb1 = self.blackCutPiece_13
                        if self.boxLst[self.boxLst.index(self.pw7) - 8 - 1].colliderect(self.bb2):
                            self.bb2 = self.blackCutPiece_14
                        if self.boxLst[self.boxLst.index(self.pw7) - 8 - 1].colliderect(self.Kb):
                            self.Kb = self.blackCutPiece_15
                            self.KingBlack_isDead = 1
                        if self.boxLst[self.boxLst.index(self.pw7) - 8 - 1].colliderect(self.Qb):
                            self.Qb = self.blackCutPiece_16
                        self.pw7 = self.boxLst[self.boxLst.index(self.pw7) - 8 - 1]
                        self.pawnWhite7Clicked = 0
                        self.pawnWhite7Clicked_cut = 0
                        self.turn = "black"
            if self.pw7.y > self.box9.y:
                if self.pawnWhite7Clicked_twoStep == 1:
                    if self.boxLst[self.boxLst.index(self.pw7) - 16].collidepoint(self.mouse_x, self.mouse_y):
                        self.pw7 = self.boxLst[self.boxLst.index(self.pw7) - 16]
                        self.pawnWhite7Clicked = 0
                        self.pawnWhite7Clicked_twoStep = 0
                        self.turn = "black"

        elif self.pawnWhite8Clicked == 1:
            if self.boxLst[self.boxLst.index(self.pw8) - 8].collidepoint(self.mouse_x, self.mouse_y):
                self.pw8 = self.boxLst[self.boxLst.index(self.pw8) - 8]
                self.pawnWhite8Clicked = 0
                self.turn = "black"
            if self.pawnWhite8Clicked_cut == 1:
                if self.pw8.x < self.box8.x and self.pw8.y > self.box1.y:
                    if self.boxLst[self.boxLst.index(self.pw8) - 8 + 1].collidepoint(self.mouse_x, self.mouse_y):
                        if self.boxLst[self.boxLst.index(self.pw8) - 8 + 1].colliderect(self.pb1):
                            self.pb1 = self.blackCutPiece_1
                        if self.boxLst[self.boxLst.index(self.pw8) - 8 + 1].colliderect(self.pb2):
                            self.pb2 = self.blackCutPiece_2
                        if self.boxLst[self.boxLst.index(self.pw8) - 8 + 1].colliderect(self.pb3):
                            self.pb3 = self.blackCutPiece_3
                        if self.boxLst[self.boxLst.index(self.pw8) - 8 + 1].colliderect(self.pb4):
                            self.pb4 = self.blackCutPiece_4
                        if self.boxLst[self.boxLst.index(self.pw8) - 8 + 1].colliderect(self.pb5):
                            self.pb5 = self.blackCutPiece_5
                        if self.boxLst[self.boxLst.index(self.pw8) - 8 + 1].colliderect(self.pb6):
                            self.pb6 = self.blackCutPiece_6
                        if self.boxLst[self.boxLst.index(self.pw8) - 8 + 1].colliderect(self.pb7):
                            self.pb7 = self.blackCutPiece_7
                        if self.boxLst[self.boxLst.index(self.pw8) - 8 + 1].colliderect(self.pb8):
                            self.pb8 = self.blackCutPiece_8
                        if self.boxLst[self.boxLst.index(self.pw8) - 8 + 1].colliderect(self.rb1):
                            self.rb1 = self.blackCutPiece_9
                        if self.boxLst[self.boxLst.index(self.pw8) - 8 + 1].colliderect(self.rb2):
                            self.rb2 = self.blackCutPiece_10
                        if self.boxLst[self.boxLst.index(self.pw8) - 8 + 1].colliderect(self.kb1):
                            self.kb1 = self.blackCutPiece_11
                        if self.boxLst[self.boxLst.index(self.pw8) - 8 + 1].colliderect(self.kb2):
                            self.kb2 = self.blackCutPiece_12
                        if self.boxLst[self.boxLst.index(self.pw8) - 8 + 1].colliderect(self.bb1):
                            self.bb1 = self.blackCutPiece_13
                        if self.boxLst[self.boxLst.index(self.pw8) - 8 + 1].colliderect(self.bb2):
                            self.bb2 = self.blackCutPiece_14
                        if self.boxLst[self.boxLst.index(self.pw8) - 8 + 1].colliderect(self.Kb):
                            self.Kb = self.blackCutPiece_15
                            self.KingBlack_isDead = 1
                        if self.boxLst[self.boxLst.index(self.pw8) - 8 + 1].colliderect(self.Qb):
                            self.Qb = self.blackCutPiece_16
                        self.pw8 = self.boxLst[self.boxLst.index(self.pw8) - 8 + 1]
                        self.pawnWhite8Clicked = 0
                        self.pawnWhite8Clicked_cut = 0
                        self.turn = "black"
                if self.box1.x < self.pw8.x and self.pw8.y > self.box1.y:
                    if self.boxLst[self.boxLst.index(self.pw8) - 8 - 1].collidepoint(self.mouse_x, self.mouse_y):
                        if self.boxLst[self.boxLst.index(self.pw8) - 8 - 1].colliderect(self.pb1):
                            self.pb1 = self.blackCutPiece_1
                        if self.boxLst[self.boxLst.index(self.pw8) - 8 - 1].colliderect(self.pb2):
                            self.pb2 = self.blackCutPiece_2
                        if self.boxLst[self.boxLst.index(self.pw8) - 8 - 1].colliderect(self.pb3):
                            self.pb3 = self.blackCutPiece_3
                        if self.boxLst[self.boxLst.index(self.pw8) - 8 - 1].colliderect(self.pb4):
                            self.pb4 = self.blackCutPiece_4
                        if self.boxLst[self.boxLst.index(self.pw8) - 8 - 1].colliderect(self.pb5):
                            self.pb5 = self.blackCutPiece_5
                        if self.boxLst[self.boxLst.index(self.pw8) - 8 - 1].colliderect(self.pb6):
                            self.pb6 = self.blackCutPiece_6
                        if self.boxLst[self.boxLst.index(self.pw8) - 8 - 1].colliderect(self.pb7):
                            self.pb7 = self.blackCutPiece_7
                        if self.boxLst[self.boxLst.index(self.pw8) - 8 - 1].colliderect(self.pb8):
                            self.pb8 = self.blackCutPiece_8
                        if self.boxLst[self.boxLst.index(self.pw8) - 8 - 1].colliderect(self.rb1):
                            self.rb1 = self.blackCutPiece_9
                        if self.boxLst[self.boxLst.index(self.pw8) - 8 - 1].colliderect(self.rb2):
                            self.rb2 = self.blackCutPiece_10
                        if self.boxLst[self.boxLst.index(self.pw8) - 8 - 1].colliderect(self.kb1):
                            self.kb1 = self.blackCutPiece_11
                        if self.boxLst[self.boxLst.index(self.pw8) - 8 - 1].colliderect(self.kb2):
                            self.kb2 = self.blackCutPiece_12
                        if self.boxLst[self.boxLst.index(self.pw8) - 8 - 1].colliderect(self.bb1):
                            self.bb1 = self.blackCutPiece_13
                        if self.boxLst[self.boxLst.index(self.pw8) - 8 - 1].colliderect(self.bb2):
                            self.bb2 = self.blackCutPiece_14
                        if self.boxLst[self.boxLst.index(self.pw8) - 8 - 1].colliderect(self.Kb):
                            self.Kb = self.blackCutPiece_15
                            self.KingBlack_isDead = 1
                        if self.boxLst[self.boxLst.index(self.pw8) - 8 - 1].colliderect(self.Qb):
                            self.Qb = self.blackCutPiece_16
                        self.pw8 = self.boxLst[self.boxLst.index(self.pw8) - 8 - 1]
                        self.pawnWhite8Clicked = 0
                        self.pawnWhite8Clicked_cut = 0
                        self.turn = "black"
            if self.pw8.y > self.box9.y:
                if self.pawnWhite8Clicked_twoStep == 1:
                    if self.boxLst[self.boxLst.index(self.pw8) - 16].collidepoint(self.mouse_x, self.mouse_y):
                        self.pw8 = self.boxLst[self.boxLst.index(self.pw8) - 16]
                        self.pawnWhite8Clicked = 0
                        self.pawnWhite8Clicked_twoStep = 0
                        self.turn = "black"

        # pawn promoted to queen
        if self.pw1.y < self.box9.y and self.pw1.x < 8 * self.boxSize:
            self.newQueenWhite_1 = self.pw1
            self.window.blit(self.assets['Qw'], self.newQueenWhite_1)
        if self.pw2.y < self.box9.y:
            self.newQueenWhite_2 = self.pw2
            self.window.blit(self.assets['Qw'], self.newQueenWhite_2)
        if self.pw3.y < self.box9.y:
            self.newQueenWhite_3 = self.pw3
            self.window.blit(self.assets['Qw'], self.newQueenWhite_3)
        if self.pw4.y < self.box9.y:
            self.newQueenWhite_4 = self.pw4
            self.window.blit(self.assets['Qw'], self.newQueenWhite_4)
        if self.pw5.y < self.box9.y:
            self.newQueenWhite_5 = self.pw5
            self.window.blit(self.assets['Qw'], self.newQueenWhite_5)
        if self.pw6.y < self.box9.y:
            self.newQueenWhite_6 = self.pw6
            self.window.blit(self.assets['Qw'], self.newQueenWhite_6)
        if self.pw7.y < self.box9.y:
            self.newQueenWhite_7 = self.pw7
            self.window.blit(self.assets['Qw'], self.newQueenWhite_7)
        if self.pw8.y < self.box9.y:
            self.newQueenWhite_8 = self.pw8
            self.window.blit(self.assets['Qw'], self.newQueenWhite_8)

    def kingWMovements(self):
        for event in pygame.event.get():
            if event.type == MOUSEBUTTONDOWN:
                self.mouse_x, self.mouse_y = pygame.mouse.get_pos()

        def drawRect_add(num):
            if not self.boxLst[self.boxLst.index(self.Kw) + num].colliderect(self.pw1) and not \
                    self.boxLst[self.boxLst.index(self.Kw) + num].colliderect(self.pw2) and not \
                    self.boxLst[self.boxLst.index(self.Kw) + num].colliderect(self.pw3) and not \
                    self.boxLst[self.boxLst.index(self.Kw) + num].colliderect(self.pw4) and not \
                    self.boxLst[self.boxLst.index(self.Kw) + num].colliderect(self.pw5) and not \
                    self.boxLst[self.boxLst.index(self.Kw) + num].colliderect(self.pw6) and not \
                    self.boxLst[self.boxLst.index(self.Kw) + num].colliderect(self.pw7) and not \
                    self.boxLst[self.boxLst.index(self.Kw) + num].colliderect(self.pw8) and not \
                    self.boxLst[self.boxLst.index(self.Kw) + num].colliderect(self.Qw) and not \
                    self.boxLst[self.boxLst.index(self.Kw) + num].colliderect(self.rw1) and not \
                    self.boxLst[self.boxLst.index(self.Kw) + num].colliderect(self.rw2) and not \
                    self.boxLst[self.boxLst.index(self.Kw) + num].colliderect(self.kw1) and not \
                    self.boxLst[self.boxLst.index(self.Kw) + num].colliderect(self.kw2) and not \
                    self.boxLst[self.boxLst.index(self.Kw) + num].colliderect(self.bw1) and not \
                    self.boxLst[self.boxLst.index(self.Kw) + num].colliderect(self.bw2) and not \
                    self.boxLst[self.boxLst.index(self.Kw) + num].colliderect(self.pb1) and not \
                    self.boxLst[self.boxLst.index(self.Kw) + num].colliderect(self.pb2) and not \
                    self.boxLst[self.boxLst.index(self.Kw) + num].colliderect(self.pb3) and not \
                    self.boxLst[self.boxLst.index(self.Kw) + num].colliderect(self.pb4) and not \
                    self.boxLst[self.boxLst.index(self.Kw) + num].colliderect(self.pb5) and not \
                    self.boxLst[self.boxLst.index(self.Kw) + num].colliderect(self.pb6) and not \
                    self.boxLst[self.boxLst.index(self.Kw) + num].colliderect(self.pb7) and not \
                    self.boxLst[self.boxLst.index(self.Kw) + num].colliderect(self.pb8) and not \
                    self.boxLst[self.boxLst.index(self.Kw) + num].colliderect(self.Kb) and not \
                    self.boxLst[self.boxLst.index(self.Kw) + num].colliderect(self.Qb) and not \
                    self.boxLst[self.boxLst.index(self.Kw) + num].colliderect(self.rb1) and not \
                    self.boxLst[self.boxLst.index(self.Kw) + num].colliderect(self.rb2) and not \
                    self.boxLst[self.boxLst.index(self.Kw) + num].colliderect(self.kb1) and not \
                    self.boxLst[self.boxLst.index(self.Kw) + num].colliderect(self.kb2) and not \
                    self.boxLst[self.boxLst.index(self.Kw) + num].colliderect(self.bb1) and not \
                    self.boxLst[self.boxLst.index(self.Kw) + num].colliderect(self.bb2):
                pygame.draw.rect(self.window, self.blue, self.boxLst[self.boxLst.index(self.Kw) + num], border_radius=100)
                self.KingWhiteClicked = 1
                self.pawnWhite1Clicked = 0
                self.pawnWhite2Clicked = 0
                self.pawnWhite3Clicked = 0
                self.pawnWhite4Clicked = 0
                self.pawnWhite5Clicked = 0
                self.pawnWhite6Clicked = 0
                self.pawnWhite7Clicked = 0
                self.pawnWhite8Clicked = 0
                self.knightWhite1Clicked = 0
                self.knightWhite2Clicked = 0
                self.rookWhite1Clicked = 0
                self.rookWhite2Clicked = 0
                self.bishopWhite1Clicked = 0
                self.bishopWhite2Clicked = 0
                self.QueenWhiteClicked = 0
        
        def check(num):
            if self.boxLst[self.boxLst.index(self.Kw) + num].colliderect(self.pb1) or \
                    self.boxLst[self.boxLst.index(self.Kw) + num].colliderect(self.pb2) or \
                    self.boxLst[self.boxLst.index(self.Kw) + num].colliderect(self.pb3) or \
                    self.boxLst[self.boxLst.index(self.Kw) + num].colliderect(self.pb4) or \
                    self.boxLst[self.boxLst.index(self.Kw) + num].colliderect(self.pb5) or \
                    self.boxLst[self.boxLst.index(self.Kw) + num].colliderect(self.pb6) or \
                    self.boxLst[self.boxLst.index(self.Kw) + num].colliderect(self.pb7) or \
                    self.boxLst[self.boxLst.index(self.Kw) + num].colliderect(self.pb8) or \
                    self.boxLst[self.boxLst.index(self.Kw) + num].colliderect(self.Kb) or \
                    self.boxLst[self.boxLst.index(self.Kw) + num].colliderect(self.Qb) or \
                    self.boxLst[self.boxLst.index(self.Kw) + num].colliderect(self.rb1) or \
                    self.boxLst[self.boxLst.index(self.Kw) + num].colliderect(self.rb2) or \
                    self.boxLst[self.boxLst.index(self.Kw) + num].colliderect(self.kb1) or \
                    self.boxLst[self.boxLst.index(self.Kw) + num].colliderect(self.kb2) or \
                    self.boxLst[self.boxLst.index(self.Kw) + num].colliderect(self.bb1) or \
                    self.boxLst[self.boxLst.index(self.Kw) + num].colliderect(self.bb2):
                pygame.draw.rect(self.window, self.red, self.boxLst[self.boxLst.index(self.Kw) + num], border_radius=100)
                self.KingWhiteClicked = 1
                self.pawnWhite1Clicked = 0
                self.pawnWhite2Clicked = 0
                self.pawnWhite3Clicked = 0
                self.pawnWhite4Clicked = 0
                self.pawnWhite5Clicked = 0
                self.pawnWhite6Clicked = 0
                self.pawnWhite7Clicked = 0
                self.pawnWhite8Clicked = 0
                self.knightWhite1Clicked = 0
                self.knightWhite2Clicked = 0
                self.rookWhite1Clicked = 0
                self.bishopWhite1Clicked = 0
                self.bishopWhite2Clicked = 0
                self.QueenWhiteClicked = 0
                self.KingWhiteClicked_cut = 1
            
        def remove(num):
            if self.boxLst[self.boxLst.index(self.Kw) + num].collidepoint(self.mouse_x, self.mouse_y):
                if self.boxLst[self.boxLst.index(self.Kw) + num].colliderect(self.pb1):
                    self.pb1 = self.blackCutPiece_1
                if self.boxLst[self.boxLst.index(self.Kw) + num].colliderect(self.pb2):
                    self.pb2 = self.blackCutPiece_2
                if self.boxLst[self.boxLst.index(self.Kw) + num].colliderect(self.pb3):
                    self.pb3 = self.blackCutPiece_3
                if self.boxLst[self.boxLst.index(self.Kw) + num].colliderect(self.pb4):
                    self.pb4 = self.blackCutPiece_4
                if self.boxLst[self.boxLst.index(self.Kw) + num].colliderect(self.pb5):
                    self.pb5 = self.blackCutPiece_5
                if self.boxLst[self.boxLst.index(self.Kw) + num].colliderect(self.pb6):
                    self.pb6 = self.blackCutPiece_6
                if self.boxLst[self.boxLst.index(self.Kw) + num].colliderect(self.pb7):
                    self.pb7 = self.blackCutPiece_7
                if self.boxLst[self.boxLst.index(self.Kw) + num].colliderect(self.pb8):
                    self.pb8 = self.blackCutPiece_8
                if self.boxLst[self.boxLst.index(self.Kw) + num].colliderect(self.rb1):
                    self.rb1 = self.blackCutPiece_9
                if self.boxLst[self.boxLst.index(self.Kw) + num].colliderect(self.rb2):
                    self.rb2 = self.blackCutPiece_10
                if self.boxLst[self.boxLst.index(self.Kw) + num].colliderect(self.kb1):
                    self.kb1 = self.blackCutPiece_11
                if self.boxLst[self.boxLst.index(self.Kw) + num].colliderect(self.kb2):
                    self.kb2 = self.blackCutPiece_12
                if self.boxLst[self.boxLst.index(self.Kw) + num].colliderect(self.bb1):
                    self.bb1 = self.blackCutPiece_13
                if self.boxLst[self.boxLst.index(self.Kw) + num].colliderect(self.bb2):
                    self.bb2 = self.blackCutPiece_14
                if self.boxLst[self.boxLst.index(self.Kw) + num].colliderect(self.Kb):
                    self.Kb = self.blackCutPiece_15
                    self.KingBlack_isDead = 1
                if self.boxLst[self.boxLst.index(self.Kw) + num].colliderect(self.Qb):
                    self.Qb = self.blackCutPiece_16
                self.Kw = self.boxLst[self.boxLst.index(self.Kw) + num]
                self.KingWhiteClicked = 0
                self.KingWhiteClicked_cut = 0
                self.turn = "black"
            
        def move(num): 
            if self.boxLst[self.boxLst.index(self.Kw) + num].collidepoint(self.mouse_x, self.mouse_y):
                self.Kw = self.boxLst[self.boxLst.index(self.Kw) + num]
                self.KingWhiteClicked = 0
                self.turn = "black"       

        if self.turn == "white":
            # detection of collision with mouse
            if self.Kw.collidepoint(self.mouse_x, self.mouse_y):
                if self.Kw == self.box1:
                    drawRect_add(1)
                    drawRect_add(8 + 1)
                    drawRect_add(8)

                elif self.Kw == self.box8:
                    drawRect_add(-1)
                    drawRect_add(8)
                    drawRect_add(8 - 1)

                elif self.Kw == self.box57:
                    drawRect_add(1)
                    drawRect_add(-8 + 1)
                    drawRect_add(-8)

                elif self.Kw == self.box64:
                    drawRect_add(-1)
                    drawRect_add(-8)
                    drawRect_add(-8 - 1)

                elif self.Kw.x < self.box8.x and self.Kw.y < self.box9.y:
                    drawRect_add(1)
                    drawRect_add(-1)
                    drawRect_add(8)
                    drawRect_add(8 + 1)
                    drawRect_add(8 - 1)

                elif self.Kw.x < self.box8.x and self.Kw.y == self.box57.y:
                    drawRect_add(-1)
                    drawRect_add(1)
                    drawRect_add(-8)
                    drawRect_add(-8 - 1)
                    drawRect_add(-8 + 1)

                elif self.Kw.x == self.box8.x and self.Kw.y < self.box57.y:
                    drawRect_add(-8)
                    drawRect_add(-8 - 1)
                    drawRect_add(-1)
                    drawRect_add(8 - 1)
                    drawRect_add(8)

                elif self.Kw.x == self.box1.x and self.Kw.y < self.box57.y:
                    drawRect_add(1)
                    drawRect_add(-8)
                    drawRect_add(8)
                    drawRect_add(-8 + 1)
                    drawRect_add(8 + 1)

                elif self.box1.x < self.Kw.x < self.box8.x and self.box8.y < self.Kw.y < self.box57.y:
                    drawRect_add(1)
                    drawRect_add(-1)
                    drawRect_add(-8)
                    drawRect_add(+8)
                    drawRect_add(-8 + 1)
                    drawRect_add(-8 - 1)
                    drawRect_add(8 - 1)
                    drawRect_add(8 + 1)

                # checking if white pieces can be cut or not
                if self.Kw.x > self.box1.x:
                    check(-1)

                if self.Kw.x < self.box8.x:
                    check(1)

                if self.Kw.y < self.box57.y:
                    check(8)

                if self.Kw.y < self.box57.y:
                    if self.Kw.x > self.box1.x:
                        check(8 - 1)

                if self.Kw.y < self.box57.y:
                    if self.Kw.x < self.box8.x:
                        check(8 + 1)

                if self.Kw.y > self.box1.y:
                    check(-8)

                if self.Kw.y > self.box1.y:
                    if self.Kw.x > self.box1.x:
                        check(-8 - 1)

                if self.Kw.y > self.box1.y:
                    if self.Kw.x < self.box8.x:
                        check(-8 + 1)

        # what should happen if king is clicked
        if self.KingWhiteClicked == 1:

            # cut the pieces
            if self.KingWhiteClicked_cut == 1:
                if self.Kw.x < self.box8.x:
                    remove(1)
                if self.Kw.x > self.box1.x:
                    remove(-1)
                if self.Kw.y < self.box57.y:
                    if self.Kw.x > self.box1.x:
                        remove(8 - 1)
                if self.Kw.y < self.box57.y:
                    if self.Kw.y < self.box57.y:
                        remove(8)
                if self.Kw.y < self.box57.y:
                    if self.Kw.x < self.box8.x:
                        remove(8 + 1)
                if self.Kw.y > self.box1.y:
                    if self.Kw.x > self.box1.x:
                        remove(-8 - 1)
                if self.Kw.y > self.box1.y:
                    remove(-8)
                if self.Kw.y > self.box1.y:
                    if self.Kw.x < self.box8.x:
                        remove(-8 + 1)

            if self.Kw.x < self.box8.x:
                move(1)
            if self.Kw.x > self.box1.x:
                move(-1)
            if self.Kw.y < self.box57.y:
                if self.Kw.x > self.box1.x:
                    move(8 - 1)
            if self.Kw.y < self.box57.y:
                move(8)
            if self.Kw.y < self.box57.y:
                if self.Kw.x < self.box8.x:
                    move(8 + 1)
            if self.Kw.y > self.box1.y:
                if self.Kw.x > self.box1.x:
                    move(-8 - 1)
            if self.Kw.y > self.box1.y:
                move(-8)
            if self.Kw.y > self.box1.y:
                if self.Kw.x < self.box8.x:
                    move(-8 + 1)

    def knightW1Movements(self):
        for event in pygame.event.get():
            if event.type == MOUSEBUTTONDOWN:
                self.mouse_x, self.mouse_y = pygame.mouse.get_pos()

        # knight 1
        def drawRect_add(num):
            if not self.boxLst[self.boxLst.index(self.kw1) + num].colliderect(self.pw1) and not \
                    self.boxLst[self.boxLst.index(self.kw1) + num].colliderect(self.pw2) and not \
                    self.boxLst[self.boxLst.index(self.kw1) + num].colliderect(self.pw3) and not \
                    self.boxLst[self.boxLst.index(self.kw1) + num].colliderect(self.pw4) and not \
                    self.boxLst[self.boxLst.index(self.kw1) + num].colliderect(self.pw5) and not \
                    self.boxLst[self.boxLst.index(self.kw1) + num].colliderect(self.pw6) and not \
                    self.boxLst[self.boxLst.index(self.kw1) + num].colliderect(self.pw7) and not \
                    self.boxLst[self.boxLst.index(self.kw1) + num].colliderect(self.pw8) and not \
                    self.boxLst[self.boxLst.index(self.kw1) + num].colliderect(self.Kw) and not \
                    self.boxLst[self.boxLst.index(self.kw1) + num].colliderect(self.Qw) and not \
                    self.boxLst[self.boxLst.index(self.kw1) + num].colliderect(self.rw1) and not \
                    self.boxLst[self.boxLst.index(self.kw1) + num].colliderect(self.rw2) and not \
                    self.boxLst[self.boxLst.index(self.kw1) + num].colliderect(self.kw2) and not \
                    self.boxLst[self.boxLst.index(self.kw1) + num].colliderect(self.bw1) and not \
                    self.boxLst[self.boxLst.index(self.kw1) + num].colliderect(self.bw2) and not \
                    self.boxLst[self.boxLst.index(self.kw1) + num].colliderect(self.pb1) and not \
                    self.boxLst[self.boxLst.index(self.kw1) + num].colliderect(self.pb2) and not \
                    self.boxLst[self.boxLst.index(self.kw1) + num].colliderect(self.pb3) and not \
                    self.boxLst[self.boxLst.index(self.kw1) + num].colliderect(self.pb4) and not \
                    self.boxLst[self.boxLst.index(self.kw1) + num].colliderect(self.pb5) and not \
                    self.boxLst[self.boxLst.index(self.kw1) + num].colliderect(self.pb6) and not \
                    self.boxLst[self.boxLst.index(self.kw1) + num].colliderect(self.pb7) and not \
                    self.boxLst[self.boxLst.index(self.kw1) + num].colliderect(self.pb8) and not \
                    self.boxLst[self.boxLst.index(self.kw1) + num].colliderect(self.Kb) and not \
                    self.boxLst[self.boxLst.index(self.kw1) + num].colliderect(self.Qb) and not \
                    self.boxLst[self.boxLst.index(self.kw1) + num].colliderect(self.rb1) and not \
                    self.boxLst[self.boxLst.index(self.kw1) + num].colliderect(self.rb2) and not \
                    self.boxLst[self.boxLst.index(self.kw1) + num].colliderect(self.kb1) and not \
                    self.boxLst[self.boxLst.index(self.kw1) + num].colliderect(self.kb2) and not \
                    self.boxLst[self.boxLst.index(self.kw1) + num].colliderect(self.bb1) and not \
                    self.boxLst[self.boxLst.index(self.kw1) + num].colliderect(self.bb2):
                pygame.draw.rect(self.window, self.blue, self.boxLst[self.boxLst.index(self.kw1) + num], border_radius=100)
                self.knightWhite1Clicked = 1
                self.pawnWhite1Clicked = 0
                self.pawnWhite2Clicked = 0
                self.pawnWhite3Clicked = 0
                self.pawnWhite4Clicked = 0
                self.pawnWhite5Clicked = 0
                self.pawnWhite6Clicked = 0
                self.pawnWhite7Clicked = 0
                self.pawnWhite8Clicked = 0
                self.KingWhiteClicked = 0
                self.knightWhite2Clicked = 0
                self.rookWhite1Clicked = 0
                self.rookWhite2Clicked = 0
                self.bishopWhite1Clicked = 0
                self.bishopWhite2Clicked = 0
                self.QueenWhiteClicked = 0

        def check(num):
            if self.boxLst[self.boxLst.index(self.kw1) + num].colliderect(self.pb1) or \
                    self.boxLst[self.boxLst.index(self.kw1) + num].colliderect(self.pb2) or \
                    self.boxLst[self.boxLst.index(self.kw1) + num].colliderect(self.pb3) or \
                    self.boxLst[self.boxLst.index(self.kw1) + num].colliderect(self.pb4) or \
                    self.boxLst[self.boxLst.index(self.kw1) + num].colliderect(self.pb5) or \
                    self.boxLst[self.boxLst.index(self.kw1) + num].colliderect(self.pb6) or \
                    self.boxLst[self.boxLst.index(self.kw1) + num].colliderect(self.pb7) or \
                    self.boxLst[self.boxLst.index(self.kw1) + num].colliderect(self.pb8) or \
                    self.boxLst[self.boxLst.index(self.kw1) + num].colliderect(self.Kb) or \
                    self.boxLst[self.boxLst.index(self.kw1) + num].colliderect(self.Qb) or \
                    self.boxLst[self.boxLst.index(self.kw1) + num].colliderect(self.rb1) or \
                    self.boxLst[self.boxLst.index(self.kw1) + num].colliderect(self.rb2) or \
                    self.boxLst[self.boxLst.index(self.kw1) + num].colliderect(self.kb1) or \
                    self.boxLst[self.boxLst.index(self.kw1) + num].colliderect(self.kb2) or \
                    self.boxLst[self.boxLst.index(self.kw1) + num].colliderect(self.bb1) or \
                    self.boxLst[self.boxLst.index(self.kw1) + num].colliderect(self.bb2):
                pygame.draw.rect(self.window, self.red, self.boxLst[self.boxLst.index(self.kw1) + num], border_radius=100)
                self.knightWhite1Clicked = 1
                self.pawnWhite1Clicked = 0
                self.pawnWhite2Clicked = 0
                self.pawnWhite3Clicked = 0
                self.pawnWhite4Clicked = 0
                self.pawnWhite5Clicked = 0
                self.pawnWhite6Clicked = 0
                self.pawnWhite7Clicked = 0
                self.pawnWhite8Clicked = 0
                self.KingWhiteClicked = 0
                self.knightWhite2Clicked = 0
                self.rookWhite1Clicked = 0
                self.rookWhite2Clicked = 0
                self.bishopWhite1Clicked = 0
                self.bishopWhite2Clicked = 0
                self.QueenWhiteClicked = 0
                self.knightWhite1Clicked_cut = 1

        def remove(num):
            if self.boxLst[self.boxLst.index(self.kw1) + num].collidepoint(self.mouse_x, self.mouse_y):
                if self.boxLst[self.boxLst.index(self.kw1) + num].colliderect(self.pb1):
                    self.pb1 = self.blackCutPiece_1
                if self.boxLst[self.boxLst.index(self.kw1) + num].colliderect(self.pb2):
                    self.pb2 = self.blackCutPiece_2
                if self.boxLst[self.boxLst.index(self.kw1) + num].colliderect(self.pb3):
                    self.pb3 = self.blackCutPiece_3
                if self.boxLst[self.boxLst.index(self.kw1) + num].colliderect(self.pb4):
                    self.pb4 = self.blackCutPiece_4
                if self.boxLst[self.boxLst.index(self.kw1) + num].colliderect(self.pb5):
                    self.pb5 = self.blackCutPiece_5
                if self.boxLst[self.boxLst.index(self.kw1) + num].colliderect(self.pb6):
                    self.pb6 = self.blackCutPiece_6
                if self.boxLst[self.boxLst.index(self.kw1) + num].colliderect(self.pb7):
                    self.pb7 = self.blackCutPiece_7
                if self.boxLst[self.boxLst.index(self.kw1) + num].colliderect(self.pb8):
                    self.pb8 = self.blackCutPiece_8
                if self.boxLst[self.boxLst.index(self.kw1) + num].colliderect(self.rb1):
                    self.rb1 = self.blackCutPiece_9
                if self.boxLst[self.boxLst.index(self.kw1) + num].colliderect(self.rb2):
                    self.rb2 = self.blackCutPiece_10
                if self.boxLst[self.boxLst.index(self.kw1) + num].colliderect(self.kb1):
                    self.kb1 = self.blackCutPiece_11
                if self.boxLst[self.boxLst.index(self.kw1) + num].colliderect(self.kb2):
                    self.kb2 = self.blackCutPiece_12
                if self.boxLst[self.boxLst.index(self.kw1) + num].colliderect(self.bb1):
                    self.bb1 = self.blackCutPiece_13
                if self.boxLst[self.boxLst.index(self.kw1) + num].colliderect(self.bb2):
                    self.bb2 = self.blackCutPiece_14
                if self.boxLst[self.boxLst.index(self.kw1) + num].colliderect(self.Kb):
                    self.Kb = self.blackCutPiece_15
                    self.KingBlack_isDead = 1
                if self.boxLst[self.boxLst.index(self.kw1) + num].colliderect(self.Qb):
                    self.Qb = self.blackCutPiece_16
                self.kw1 = self.boxLst[self.boxLst.index(self.kw1) + num]
                self.knightWhite1Clicked = 0
                self.knightWhite1Clicked_cut = 0
                self.turn = "black"

        def move(num):
            if self.boxLst[self.boxLst.index(self.kw1) + num].collidepoint(self.mouse_x, self.mouse_y):
                self.kw1 = self.boxLst[self.boxLst.index(self.kw1) + num]
                self.knightWhite1Clicked = 0
                self.turn = "black"

        if self.turn == "white":
            if self.kw1.collidepoint(self.mouse_x, self.mouse_y):
                if self.kw1.x < self.box8.x and self.kw1.y < self.box49.y:
                    drawRect_add(16 + 1)
                if self.kw1.x > self.box1.x and self.kw1.y < self.box49.y:
                    drawRect_add(16 - 1)
                if self.kw1.x < self.box8.x and self.kw1.y > self.box9.y:
                    drawRect_add(-16 + 1)
                if self.kw1.x > self.box1.x and self.kw1.y > self.box9.y:
                    drawRect_add(-16 - 1)
                if self.kw1.x < self.box7.x and self.kw1.y < self.box57.y:
                    drawRect_add(8 + 2)
                if self.kw1.x > self.box2.x and self.kw1.y < self.box57.y:
                    drawRect_add(8 - 2)
                if self.kw1.x < self.box7.x and self.kw1.y > self.box1.y:
                    drawRect_add(-8 + 2)
                if self.kw1.x > self.box2.x and self.kw1.y > self.box1.y:
                    drawRect_add(-8 - 2)

                if self.kw1.x < self.box8.x and self.kw1.y < self.box49.y:
                    check(16 + 1)
                if self.kw1.x > self.box1.x and self.kw1.y < self.box49.y:
                    check(16 - 1)
                if self.kw1.x < self.box8.x and self.kw1.y > self.box9.y:
                    check(-16 + 1)
                if self.kw1.x > self.box1.x and self.kw1.y > self.box9.y:
                    check(-16 - 1)
                if self.kw1.x < self.box7.x and self.kw1.y < self.box57.y:
                    check(8 + 2)
                if self.kw1.x > self.box2.x and self.kw1.y < self.box57.y:
                    check(8 - 2)
                if self.kw1.x < self.box7.x and self.kw1.y > self.box1.y:
                    check(-8 + 2)
                if self.kw1.x > self.box2.x and self.kw1.y > self.box1.y:
                    check(-8 - 2)

        if self.knightWhite1Clicked == 1:
            # cut white pieces
            if self.knightWhite1Clicked_cut == 1:
                if self.kw1.x > self.box1.x and self.kw1.y < self.box49.y:
                    remove(16 - 1)

                if self.kw1.x < self.box8.x and self.kw1.y < self.box49.y:
                    remove(16 + 1)

                if self.kw1.x < self.box8.x and self.kw1.y > self.box9.y:
                    remove(-16 + 1)

                if self.kw1.x > self.box1.x and self.kw1.y > self.box9.y:
                    remove(-16 - 1)

                if self.kw1.x < self.box7.x and self.kw1.y < self.box57.y:
                    remove(8 + 2)

                if self.kw1.x > self.box2.x and self.kw1.y < self.box57.y:
                    remove(8 - 2)

                if self.kw1.x < self.box7.x and self.kw1.y > self.box1.y:
                    remove(-8 + 2)

                if self.kw1.x > self.box2.x and self.kw1.y > self.box1.y:
                    remove(-8 - 2)

            # move the knight
            if self.kw1.x > self.box1.x and self.kw1.y < self.box49.y:
                move(16 - 1)
            if self.kw1.x < self.box8.x and self.kw1.y < self.box49.y:
                move(16 + 1)
            if self.kw1.x < self.box8.x and self.kw1.y > self.box9.y:
                move(-16 + 1)
            if self.kw1.x > self.box1.x and self.kw1.y > self.box9.y:
                move(-16 - 1)
            if self.kw1.x < self.box7.x and self.kw1.y < self.box57.y:
                move(8 + 2)
            if self.kw1.x > self.box2.x and self.kw1.y < self.box57.y:
                move(8 - 2)
            if self.kw1.x < self.box7.x and self.kw1.y > self.box1.y:
                move(-8 + 2)
            if self.kw1.x > self.box2.x and self.kw1.y > self.box1.y:
                move(-8 - 2)

    def knightW2Movements(self):
        for event in pygame.event.get():
            if event.type == MOUSEBUTTONDOWN:
                self.mouse_x, self.mouse_y = pygame.mouse.get_pos()

        # knight 2
        def drawRect_add(num):
            if not self.boxLst[self.boxLst.index(self.kw2) + num].colliderect(self.pw1) and not \
                    self.boxLst[self.boxLst.index(self.kw2) + num].colliderect(self.pw2) and not \
                    self.boxLst[self.boxLst.index(self.kw2) + num].colliderect(self.pw3) and not \
                    self.boxLst[self.boxLst.index(self.kw2) + num].colliderect(self.pw4) and not \
                    self.boxLst[self.boxLst.index(self.kw2) + num].colliderect(self.pw5) and not \
                    self.boxLst[self.boxLst.index(self.kw2) + num].colliderect(self.pw6) and not \
                    self.boxLst[self.boxLst.index(self.kw2) + num].colliderect(self.pw7) and not \
                    self.boxLst[self.boxLst.index(self.kw2) + num].colliderect(self.pw8) and not \
                    self.boxLst[self.boxLst.index(self.kw2) + num].colliderect(self.Kw) and not \
                    self.boxLst[self.boxLst.index(self.kw2) + num].colliderect(self.Qw) and not \
                    self.boxLst[self.boxLst.index(self.kw2) + num].colliderect(self.rw1) and not \
                    self.boxLst[self.boxLst.index(self.kw2) + num].colliderect(self.rw2) and not \
                    self.boxLst[self.boxLst.index(self.kw2) + num].colliderect(self.kw1) and not \
                    self.boxLst[self.boxLst.index(self.kw2) + num].colliderect(self.bw1) and not \
                    self.boxLst[self.boxLst.index(self.kw2) + num].colliderect(self.bw2) and not \
                    self.boxLst[self.boxLst.index(self.kw2) + num].colliderect(self.pb1) and not \
                    self.boxLst[self.boxLst.index(self.kw2) + num].colliderect(self.pb2) and not \
                    self.boxLst[self.boxLst.index(self.kw2) + num].colliderect(self.pb3) and not \
                    self.boxLst[self.boxLst.index(self.kw2) + num].colliderect(self.pb4) and not \
                    self.boxLst[self.boxLst.index(self.kw2) + num].colliderect(self.pb5) and not \
                    self.boxLst[self.boxLst.index(self.kw2) + num].colliderect(self.pb6) and not \
                    self.boxLst[self.boxLst.index(self.kw2) + num].colliderect(self.pb7) and not \
                    self.boxLst[self.boxLst.index(self.kw2) + num].colliderect(self.pb8) and not \
                    self.boxLst[self.boxLst.index(self.kw2) + num].colliderect(self.Kb) and not \
                    self.boxLst[self.boxLst.index(self.kw2) + num].colliderect(self.Qb) and not \
                    self.boxLst[self.boxLst.index(self.kw2) + num].colliderect(self.rb1) and not \
                    self.boxLst[self.boxLst.index(self.kw2) + num].colliderect(self.rb2) and not \
                    self.boxLst[self.boxLst.index(self.kw2) + num].colliderect(self.kb1) and not \
                    self.boxLst[self.boxLst.index(self.kw2) + num].colliderect(self.kb2) and not \
                    self.boxLst[self.boxLst.index(self.kw2) + num].colliderect(self.bb1) and not \
                    self.boxLst[self.boxLst.index(self.kw2) + num].colliderect(self.bb2):
                pygame.draw.rect(self.window, self.blue, self.boxLst[self.boxLst.index(self.kw2) + num], border_radius=100)
                self.knightWhite2Clicked = 1
                self.pawnWhite1Clicked = 0
                self.pawnWhite2Clicked = 0
                self.pawnWhite3Clicked = 0
                self.pawnWhite4Clicked = 0
                self.pawnWhite5Clicked = 0
                self.pawnWhite6Clicked = 0
                self.pawnWhite7Clicked = 0
                self.pawnWhite8Clicked = 0
                self.KingWhiteClicked = 0
                self.knightWhite1Clicked = 0
                self.rookWhite1Clicked = 0
                self.rookWhite2Clicked = 0
                self.bishopWhite1Clicked = 0
                self.bishopWhite2Clicked = 0
                self.QueenWhiteClicked = 0

        def check(num):
            if self.boxLst[self.boxLst.index(self.kw2) + num].colliderect(self.pb1) or \
                    self.boxLst[self.boxLst.index(self.kw2) + num].colliderect(self.pb2) or \
                    self.boxLst[self.boxLst.index(self.kw2) + num].colliderect(self.pb3) or \
                    self.boxLst[self.boxLst.index(self.kw2) + num].colliderect(self.pb4) or \
                    self.boxLst[self.boxLst.index(self.kw2) + num].colliderect(self.pb5) or \
                    self.boxLst[self.boxLst.index(self.kw2) + num].colliderect(self.pb6) or \
                    self.boxLst[self.boxLst.index(self.kw2) + num].colliderect(self.pb7) or \
                    self.boxLst[self.boxLst.index(self.kw2) + num].colliderect(self.pb8) or \
                    self.boxLst[self.boxLst.index(self.kw2) + num].colliderect(self.Kb) or \
                    self.boxLst[self.boxLst.index(self.kw2) + num].colliderect(self.Qb) or \
                    self.boxLst[self.boxLst.index(self.kw2) + num].colliderect(self.rb1) or \
                    self.boxLst[self.boxLst.index(self.kw2) + num].colliderect(self.rb2) or \
                    self.boxLst[self.boxLst.index(self.kw2) + num].colliderect(self.kb1) or \
                    self.boxLst[self.boxLst.index(self.kw2) + num].colliderect(self.kb2) or \
                    self.boxLst[self.boxLst.index(self.kw2) + num].colliderect(self.bb1) or \
                    self.boxLst[self.boxLst.index(self.kw2) + num].colliderect(self.bb2):
                pygame.draw.rect(self.window, self.red, self.boxLst[self.boxLst.index(self.kw2) + num], border_radius=100)
                self.knightWhite2Clicked = 1
                self.pawnWhite1Clicked = 0
                self.pawnWhite2Clicked = 0
                self.pawnWhite3Clicked = 0
                self.pawnWhite4Clicked = 0
                self.pawnWhite5Clicked = 0
                self.pawnWhite6Clicked = 0
                self.pawnWhite7Clicked = 0
                self.pawnWhite8Clicked = 0
                self.KingWhiteClicked = 0
                self.knightWhite1Clicked = 0
                self.rookWhite1Clicked = 0
                self.rookWhite2Clicked = 0
                self.bishopWhite1Clicked = 0
                self.bishopWhite2Clicked = 0
                self.QueenWhiteClicked = 0
                self.knightWhite2Clicked_cut = 1

        def remove(num):
            if self.boxLst[self.boxLst.index(self.kw2) + num].collidepoint(self.mouse_x, self.mouse_y):
                if self.boxLst[self.boxLst.index(self.kw2) + num].colliderect(self.pb1):
                    self.pb1 = self.blackCutPiece_1
                if self.boxLst[self.boxLst.index(self.kw2) + num].colliderect(self.pb2):
                    self.pb2 = self.blackCutPiece_2
                if self.boxLst[self.boxLst.index(self.kw2) + num].colliderect(self.pb3):
                    self.pb3 = self.blackCutPiece_3
                if self.boxLst[self.boxLst.index(self.kw2) + num].colliderect(self.pb4):
                    self.pb4 = self.blackCutPiece_4
                if self.boxLst[self.boxLst.index(self.kw2) + num].colliderect(self.pb5):
                    self.pb5 = self.blackCutPiece_5
                if self.boxLst[self.boxLst.index(self.kw2) + num].colliderect(self.pb6):
                    self.pb6 = self.blackCutPiece_6
                if self.boxLst[self.boxLst.index(self.kw2) + num].colliderect(self.pb7):
                    self.pb7 = self.blackCutPiece_7
                if self.boxLst[self.boxLst.index(self.kw2) + num].colliderect(self.pb8):
                    self.pb8 = self.blackCutPiece_8
                if self.boxLst[self.boxLst.index(self.kw2) + num].colliderect(self.rb1):
                    self.rb1 = self.blackCutPiece_9
                if self.boxLst[self.boxLst.index(self.kw2) + num].colliderect(self.rb2):
                    self.rb2 = self.blackCutPiece_10
                if self.boxLst[self.boxLst.index(self.kw2) + num].colliderect(self.kb1):
                    self.kb1 = self.blackCutPiece_11
                if self.boxLst[self.boxLst.index(self.kw2) + num].colliderect(self.kb2):
                    self.kb2 = self.blackCutPiece_12
                if self.boxLst[self.boxLst.index(self.kw2) + num].colliderect(self.bb1):
                    self.bb1 = self.blackCutPiece_13
                if self.boxLst[self.boxLst.index(self.kw2) + num].colliderect(self.bb2):
                    self.bb2 = self.blackCutPiece_14
                if self.boxLst[self.boxLst.index(self.kw2) + num].colliderect(self.Kb):
                    self.Kb = self.blackCutPiece_15
                    self.KingBlack_isDead = 1
                if self.boxLst[self.boxLst.index(self.kw2) + num].colliderect(self.Qb):
                    self.Qb = self.blackCutPiece_16
                self.kw2 = self.boxLst[self.boxLst.index(self.kw2) + num]
                self.knightWhite2Clicked = 0
                self.knightWhite2Clicked_cut = 0
                self.turn = "black"

        def move(num):
            if self.boxLst[self.boxLst.index(self.kw2) + num].collidepoint(self.mouse_x, self.mouse_y):
                self.kw2 = self.boxLst[self.boxLst.index(self.kw2) + num]
                self.knightWhite2Clicked = 0
                self.turn = "black"

        if self.turn == "white":
            if self.kw2.collidepoint(self.mouse_x, self.mouse_y):
                if self.kw2.x < self.box8.x and self.kw2.y < self.box49.y:
                    drawRect_add(16 + 1)
                if self.kw2.x > self.box1.x and self.kw2.y < self.box49.y:
                    drawRect_add(16 - 1)
                if self.kw2.x < self.box8.x and self.kw2.y > self.box9.y:
                    drawRect_add(-16 + 1)
                if self.kw2.x > self.box1.x and self.kw2.y > self.box9.y:
                    drawRect_add(-16 - 1)
                if self.kw2.x < self.box7.x and self.kw2.y < self.box57.y:
                    drawRect_add(8 + 2)
                if self.kw2.x > self.box2.x and self.kw2.y < self.box57.y:
                    drawRect_add(8 - 2)
                if self.kw2.x < self.box7.x and self.kw2.y > self.box1.y:
                    drawRect_add(-8 + 2)
                if self.kw2.x > self.box2.x and self.kw2.y > self.box1.y:
                    drawRect_add(-8 - 2)

                if self.kw2.x < self.box8.x and self.kw2.y < self.box49.y:
                    check(16 + 1)
                if self.kw2.x > self.box1.x and self.kw2.y < self.box49.y:
                    check(16 - 1)
                if self.kw2.x < self.box8.x and self.kw2.y > self.box9.y:
                    check(-16 + 1)
                if self.kw2.x > self.box1.x and self.kw2.y > self.box9.y:
                    check(-16 - 1)
                if self.kw2.x < self.box7.x and self.kw2.y < self.box57.y:
                    check(8 + 2)
                if self.kw2.x > self.box2.x and self.kw2.y < self.box57.y:
                    check(8 - 2)
                if self.kw2.x < self.box7.x and self.kw2.y > self.box1.y:
                    check(-8 + 2)
                if self.kw2.x > self.box2.x and self.kw2.y > self.box1.y:
                    check(-8 - 2)

        if self.knightWhite2Clicked == 1:
            # cut white pieces
            if self.knightWhite2Clicked_cut == 1:
                if self.kw2.x > self.box1.x and self.kw2.y < self.box49.y:
                    remove(16 - 1)

                if self.kw2.x < self.box8.x and self.kw2.y < self.box49.y:
                    remove(16 + 1)

                if self.kw2.x < self.box8.x and self.kw2.y > self.box9.y:
                    remove(-16 + 1)

                if self.kw2.x > self.box1.x and self.kw2.y > self.box9.y:
                    remove(-16 - 1)

                if self.kw2.x < self.box7.x and self.kw2.y < self.box57.y:
                    remove(8 + 2)

                if self.kw2.x > self.box2.x and self.kw2.y < self.box57.y:
                    remove(8 - 2)

                if self.kw2.x < self.box7.x and self.kw2.y > self.box1.y:
                    remove(-8 + 2)

                if self.kw2.x > self.box2.x and self.kw2.y > self.box1.y:
                    remove(-8 - 2)

            # move the knight
            if self.kw2.x > self.box1.x and self.kw2.y < self.box49.y:
                move(16 - 1)
            if self.kw2.x < self.box8.x and self.kw2.y < self.box49.y:
                move(16 + 1)
            if self.kw2.x < self.box8.x and self.kw2.y > self.box9.y:
                move(-16 + 1)
            if self.kw2.x > self.box1.x and self.kw2.y > self.box9.y:
                move(-16 - 1)
            if self.kw2.x < self.box7.x and self.kw2.y < self.box57.y:
                move(8 + 2)
            if self.kw2.x > self.box2.x and self.kw2.y < self.box57.y:
                move(8 - 2)
            if self.kw2.x < self.box7.x and self.kw2.y > self.box1.y:
                move(-8 + 2)
            if self.kw2.x > self.box2.x and self.kw2.y > self.box1.y:
                move(-8 - 2)

    def rookW1Movements(self):
        for event in pygame.event.get():
            if event.type == MOUSEBUTTONDOWN:
                self.mouse_x, self.mouse_y = pygame.mouse.get_pos()

        # rook 1
        def drawRect_add(num):
            if not self.boxLst[self.boxLst.index(self.rw1) + num].colliderect(self.pw1) and not \
                    self.boxLst[self.boxLst.index(self.rw1) + num].colliderect(self.pw2) and not \
                    self.boxLst[self.boxLst.index(self.rw1) + num].colliderect(self.pw3) and not \
                    self.boxLst[self.boxLst.index(self.rw1) + num].colliderect(self.pw4) and not \
                    self.boxLst[self.boxLst.index(self.rw1) + num].colliderect(self.pw5) and not \
                    self.boxLst[self.boxLst.index(self.rw1) + num].colliderect(self.pw6) and not \
                    self.boxLst[self.boxLst.index(self.rw1) + num].colliderect(self.pw7) and not \
                    self.boxLst[self.boxLst.index(self.rw1) + num].colliderect(self.pw8) and not \
                    self.boxLst[self.boxLst.index(self.rw1) + num].colliderect(self.Kw) and not \
                    self.boxLst[self.boxLst.index(self.rw1) + num].colliderect(self.Qw) and not \
                    self.boxLst[self.boxLst.index(self.rw1) + num].colliderect(self.rw2) and not \
                    self.boxLst[self.boxLst.index(self.rw1) + num].colliderect(self.kw1) and not \
                    self.boxLst[self.boxLst.index(self.rw1) + num].colliderect(self.kw2) and not \
                    self.boxLst[self.boxLst.index(self.rw1) + num].colliderect(self.bw1) and not \
                    self.boxLst[self.boxLst.index(self.rw1) + num].colliderect(self.bw2) and not \
                    self.boxLst[self.boxLst.index(self.rw1) + num].colliderect(self.pb1) and not \
                    self.boxLst[self.boxLst.index(self.rw1) + num].colliderect(self.pb2) and not \
                    self.boxLst[self.boxLst.index(self.rw1) + num].colliderect(self.pb3) and not \
                    self.boxLst[self.boxLst.index(self.rw1) + num].colliderect(self.pb4) and not \
                    self.boxLst[self.boxLst.index(self.rw1) + num].colliderect(self.pb5) and not \
                    self.boxLst[self.boxLst.index(self.rw1) + num].colliderect(self.pb6) and not \
                    self.boxLst[self.boxLst.index(self.rw1) + num].colliderect(self.pb7) and not \
                    self.boxLst[self.boxLst.index(self.rw1) + num].colliderect(self.pb8) and not \
                    self.boxLst[self.boxLst.index(self.rw1) + num].colliderect(self.Kb) and not \
                    self.boxLst[self.boxLst.index(self.rw1) + num].colliderect(self.Qb) and not \
                    self.boxLst[self.boxLst.index(self.rw1) + num].colliderect(self.kb1) and not \
                    self.boxLst[self.boxLst.index(self.rw1) + num].colliderect(self.kb2) and not \
                    self.boxLst[self.boxLst.index(self.rw1) + num].colliderect(self.rb1) and not \
                    self.boxLst[self.boxLst.index(self.rw1) + num].colliderect(self.rb2) and not \
                    self.boxLst[self.boxLst.index(self.rw1) + num].colliderect(self.bb1) and not \
                    self.boxLst[self.boxLst.index(self.rw1) + num].colliderect(self.bb2):
                pygame.draw.rect(self.window, self.blue, self.boxLst[self.boxLst.index(self.rw1) + num], border_radius=100)

                if num == 8:
                    self.rookWhite1Clicked_plus8 = 1
                if num == 16:
                    self.rookWhite1Clicked_plus16 = 1
                if num == 24:
                    self.rookWhite1Clicked_plus24 = 1
                if num == 32:
                    self.rookWhite1Clicked_plus32 = 1
                if num == 40:
                    self.rookWhite1Clicked_plus40 = 1
                if num == 48:
                    self.rookWhite1Clicked_plus48 = 1
                if num == 1:
                    self.rookWhite1Clicked_plus1 = 1
                if num == 2:
                    self.rookWhite1Clicked_plus2 = 1
                if num == 3:
                    self.rookWhite1Clicked_plus3 = 1
                if num == 4:
                    self.rookWhite1Clicked_plus4 = 1
                if num == 5:
                    self.rookWhite1Clicked_plus5 = 1
                if num == 6:
                    self.rookWhite1Clicked_plus6 = 1

        def drawRect_sub(num):
            if not self.boxLst[self.boxLst.index(self.rw1) - num].colliderect(self.pw1) and not \
                    self.boxLst[self.boxLst.index(self.rw1) - num].colliderect(self.pw2) and not \
                    self.boxLst[self.boxLst.index(self.rw1) - num].colliderect(self.pw3) and not \
                    self.boxLst[self.boxLst.index(self.rw1) - num].colliderect(self.pw4) and not \
                    self.boxLst[self.boxLst.index(self.rw1) - num].colliderect(self.pw5) and not \
                    self.boxLst[self.boxLst.index(self.rw1) - num].colliderect(self.pw6) and not \
                    self.boxLst[self.boxLst.index(self.rw1) - num].colliderect(self.pw7) and not \
                    self.boxLst[self.boxLst.index(self.rw1) - num].colliderect(self.pw8) and not \
                    self.boxLst[self.boxLst.index(self.rw1) - num].colliderect(self.Kw) and not \
                    self.boxLst[self.boxLst.index(self.rw1) - num].colliderect(self.Qw) and not \
                    self.boxLst[self.boxLst.index(self.rw1) - num].colliderect(self.rw2) and not \
                    self.boxLst[self.boxLst.index(self.rw1) - num].colliderect(self.kw1) and not \
                    self.boxLst[self.boxLst.index(self.rw1) - num].colliderect(self.kw2) and not \
                    self.boxLst[self.boxLst.index(self.rw1) - num].colliderect(self.bw1) and not \
                    self.boxLst[self.boxLst.index(self.rw1) - num].colliderect(self.bw2) and not \
                    self.boxLst[self.boxLst.index(self.rw1) - num].colliderect(self.pb1) and not \
                    self.boxLst[self.boxLst.index(self.rw1) - num].colliderect(self.pb2) and not \
                    self.boxLst[self.boxLst.index(self.rw1) - num].colliderect(self.pb3) and not \
                    self.boxLst[self.boxLst.index(self.rw1) - num].colliderect(self.pb4) and not \
                    self.boxLst[self.boxLst.index(self.rw1) - num].colliderect(self.pb5) and not \
                    self.boxLst[self.boxLst.index(self.rw1) - num].colliderect(self.pb6) and not \
                    self.boxLst[self.boxLst.index(self.rw1) - num].colliderect(self.pb7) and not \
                    self.boxLst[self.boxLst.index(self.rw1) - num].colliderect(self.pb8) and not \
                    self.boxLst[self.boxLst.index(self.rw1) - num].colliderect(self.Kb) and not \
                    self.boxLst[self.boxLst.index(self.rw1) - num].colliderect(self.Qb) and not \
                    self.boxLst[self.boxLst.index(self.rw1) - num].colliderect(self.kb1) and not \
                    self.boxLst[self.boxLst.index(self.rw1) - num].colliderect(self.kb2) and not \
                    self.boxLst[self.boxLst.index(self.rw1) - num].colliderect(self.rb1) and not \
                    self.boxLst[self.boxLst.index(self.rw1) - num].colliderect(self.rb2) and not \
                    self.boxLst[self.boxLst.index(self.rw1) - num].colliderect(self.bb1) and not \
                    self.boxLst[self.boxLst.index(self.rw1) - num].colliderect(self.bb2):
                pygame.draw.rect(self.window, self.blue, self.boxLst[self.boxLst.index(self.rw1) - num], border_radius=100)

                if num == 8:
                    self.rookWhite1Clicked_minus8 = 1
                if num == 16:
                    self.rookWhite1Clicked_minus16 = 1
                if num == 24:
                    self.rookWhite1Clicked_minus24 = 1
                if num == 32:
                    self.rookWhite1Clicked_minus32 = 1
                if num == 40:
                    self.rookWhite1Clicked_minus40 = 1
                if num == 48:
                    self.rookWhite1Clicked_minus48 = 1
                if num == 1:
                    self.rookWhite1Clicked_minus1 = 1
                if num == 2:
                    self.rookWhite1Clicked_minus2 = 1
                if num == 3:
                    self.rookWhite1Clicked_minus3 = 1
                if num == 4:
                    self.rookWhite1Clicked_minus4 = 1
                if num == 5:
                    self.rookWhite1Clicked_minus5 = 1
                if num == 6:
                    self.rookWhite1Clicked_minus6 = 1

        def cutBlackPiece_add(num):
            if self.boxLst[self.boxLst.index(self.rw1) + num].colliderect(self.pb1) or \
                    self.boxLst[self.boxLst.index(self.rw1) + num].colliderect(self.pb2) or \
                    self.boxLst[self.boxLst.index(self.rw1) + num].colliderect(self.pb3) or \
                    self.boxLst[self.boxLst.index(self.rw1) + num].colliderect(self.pb4) or \
                    self.boxLst[self.boxLst.index(self.rw1) + num].colliderect(self.pb5) or \
                    self.boxLst[self.boxLst.index(self.rw1) + num].colliderect(self.pb6) or \
                    self.boxLst[self.boxLst.index(self.rw1) + num].colliderect(self.pb7) or \
                    self.boxLst[self.boxLst.index(self.rw1) + num].colliderect(self.pb8) or \
                    self.boxLst[self.boxLst.index(self.rw1) + num].colliderect(self.Kb) or \
                    self.boxLst[self.boxLst.index(self.rw1) + num].colliderect(self.Qb) or \
                    self.boxLst[self.boxLst.index(self.rw1) + num].colliderect(self.rb1) or \
                    self.boxLst[self.boxLst.index(self.rw1) + num].colliderect(self.rb2) or \
                    self.boxLst[self.boxLst.index(self.rw1) + num].colliderect(self.kb1) or \
                    self.boxLst[self.boxLst.index(self.rw1) + num].colliderect(self.kb2) or \
                    self.boxLst[self.boxLst.index(self.rw1) + num].colliderect(self.bb1) or \
                    self.boxLst[self.boxLst.index(self.rw1) + num].colliderect(self.bb2):
                pygame.draw.rect(self.window, self.red, self.boxLst[self.boxLst.index(self.rw1) + num], border_radius=100)
                self.rookWhite1Clicked = 1
                self.rookWhite2Clicked = 0
                self.pawnWhite1Clicked = 0
                self.pawnWhite2Clicked = 0
                self.pawnWhite3Clicked = 0
                self.pawnWhite4Clicked = 0
                self.pawnWhite5Clicked = 0
                self.pawnWhite6Clicked = 0
                self.pawnWhite7Clicked = 0
                self.pawnWhite8Clicked = 0
                self.KingWhiteClicked = 0
                self.knightWhite1Clicked = 0
                self.knightWhite2Clicked = 0
                self.bishopWhite1Clicked = 0
                self.bishopWhite2Clicked = 0
                self.QueenWhiteClicked = 0
                self.rookWhite1Clicked_cut = 1

        def cutBlackPiece_sub(num):
            if self.boxLst[self.boxLst.index(self.rw1) - num].colliderect(self.pb1) or \
                    self.boxLst[self.boxLst.index(self.rw1) - num].colliderect(self.pb2) or \
                    self.boxLst[self.boxLst.index(self.rw1) - num].colliderect(self.pb3) or \
                    self.boxLst[self.boxLst.index(self.rw1) - num].colliderect(self.pb4) or \
                    self.boxLst[self.boxLst.index(self.rw1) - num].colliderect(self.pb5) or \
                    self.boxLst[self.boxLst.index(self.rw1) - num].colliderect(self.pb6) or \
                    self.boxLst[self.boxLst.index(self.rw1) - num].colliderect(self.pb7) or \
                    self.boxLst[self.boxLst.index(self.rw1) - num].colliderect(self.pb8) or \
                    self.boxLst[self.boxLst.index(self.rw1) - num].colliderect(self.Kb) or \
                    self.boxLst[self.boxLst.index(self.rw1) - num].colliderect(self.Qb) or \
                    self.boxLst[self.boxLst.index(self.rw1) - num].colliderect(self.rb1) or \
                    self.boxLst[self.boxLst.index(self.rw1) - num].colliderect(self.rb2) or \
                    self.boxLst[self.boxLst.index(self.rw1) - num].colliderect(self.kb1) or \
                    self.boxLst[self.boxLst.index(self.rw1) - num].colliderect(self.kb2) or \
                    self.boxLst[self.boxLst.index(self.rw1) - num].colliderect(self.bb1) or \
                    self.boxLst[self.boxLst.index(self.rw1) - num].colliderect(self.bb2):
                pygame.draw.rect(self.window, self.red, self.boxLst[self.boxLst.index(self.rw1) - num], border_radius=100)
                self.rookWhite1Clicked = 1
                self.rookWhite2Clicked = 0
                self.pawnWhite1Clicked = 0
                self.pawnWhite2Clicked = 0
                self.pawnWhite3Clicked = 0
                self.pawnWhite4Clicked = 0
                self.pawnWhite5Clicked = 0
                self.pawnWhite6Clicked = 0
                self.pawnWhite7Clicked = 0
                self.pawnWhite8Clicked = 0
                self.KingWhiteClicked = 0
                self.knightWhite1Clicked = 0
                self.knightWhite2Clicked = 0
                self.bishopWhite1Clicked = 0
                self.bishopWhite2Clicked = 0
                self.QueenWhiteClicked = 0
                self.rookWhite1Clicked_cut = 1

        def removeBlackPiece_add(num):
            if self.boxLst[self.boxLst.index(self.rw1) + num].collidepoint(self.mouse_x, self.mouse_y):
                if self.boxLst[self.boxLst.index(self.rw1) + num].colliderect(self.pb1):
                    self.pb1 = self.blackCutPiece_1
                if self.boxLst[self.boxLst.index(self.rw1) + num].colliderect(self.pb2):
                    self.pb2 = self.blackCutPiece_2
                if self.boxLst[self.boxLst.index(self.rw1) + num].colliderect(self.pb3):
                    self.pb3 = self.blackCutPiece_3
                if self.boxLst[self.boxLst.index(self.rw1) + num].colliderect(self.pb4):
                    self.pb4 = self.blackCutPiece_4
                if self.boxLst[self.boxLst.index(self.rw1) + num].colliderect(self.pb5):
                    self.pb5 = self.blackCutPiece_5
                if self.boxLst[self.boxLst.index(self.rw1) + num].colliderect(self.pb6):
                    self.pb6 = self.blackCutPiece_6
                if self.boxLst[self.boxLst.index(self.rw1) + num].colliderect(self.pb7):
                    self.pb7 = self.blackCutPiece_7
                if self.boxLst[self.boxLst.index(self.rw1) + num].colliderect(self.pb8):
                    self.pb8 = self.blackCutPiece_8
                if self.boxLst[self.boxLst.index(self.rw1) + num].colliderect(self.rb1):
                    self.rb1 = self.blackCutPiece_9
                if self.boxLst[self.boxLst.index(self.rw1) + num].colliderect(self.rb2):
                    self.rb2 = self.blackCutPiece_10
                if self.boxLst[self.boxLst.index(self.rw1) + num].colliderect(self.kb1):
                    self.kb1 = self.blackCutPiece_11
                if self.boxLst[self.boxLst.index(self.rw1) + num].colliderect(self.kb2):
                    self.kb2 = self.blackCutPiece_12
                if self.boxLst[self.boxLst.index(self.rw1) + num].colliderect(self.bb1):
                    self.bb1 = self.blackCutPiece_13
                if self.boxLst[self.boxLst.index(self.rw1) + num].colliderect(self.bb2):
                    self.bb2 = self.blackCutPiece_14
                if self.boxLst[self.boxLst.index(self.rw1) + num].colliderect(self.Kb):
                    self.Kb = self.blackCutPiece_15
                    self.KingBlack_isDead = 1
                if self.boxLst[self.boxLst.index(self.rw1) + num].colliderect(self.Qb):
                    self.Qb = self.blackCutPiece_16
                self.rw1 = self.boxLst[self.boxLst.index(self.rw1) + num]
                self.rookWhite1Clicked = 0
                self.rookWhite1Clicked_cut = 0
                self.turn = "black"

        def removeBlackPiece_sub(num):
            if self.boxLst[self.boxLst.index(self.rw1) - num].collidepoint(self.mouse_x, self.mouse_y):
                if self.boxLst[self.boxLst.index(self.rw1) - num].colliderect(self.pb1):
                    self.pb1 = self.blackCutPiece_1
                if self.boxLst[self.boxLst.index(self.rw1) - num].colliderect(self.pb2):
                    self.pb2 = self.blackCutPiece_2
                if self.boxLst[self.boxLst.index(self.rw1) - num].colliderect(self.pb3):
                    self.pb3 = self.blackCutPiece_3
                if self.boxLst[self.boxLst.index(self.rw1) - num].colliderect(self.pb4):
                    self.pb4 = self.blackCutPiece_4
                if self.boxLst[self.boxLst.index(self.rw1) - num].colliderect(self.pb5):
                    self.pb5 = self.blackCutPiece_5
                if self.boxLst[self.boxLst.index(self.rw1) - num].colliderect(self.pb6):
                    self.pb6 = self.blackCutPiece_6
                if self.boxLst[self.boxLst.index(self.rw1) - num].colliderect(self.pb7):
                    self.pb7 = self.blackCutPiece_7
                if self.boxLst[self.boxLst.index(self.rw1) - num].colliderect(self.pb8):
                    self.pb8 = self.blackCutPiece_8
                if self.boxLst[self.boxLst.index(self.rw1) - num].colliderect(self.rb1):
                    self.rb1 = self.blackCutPiece_9
                if self.boxLst[self.boxLst.index(self.rw1) - num].colliderect(self.rb2):
                    self.rb2 = self.blackCutPiece_10
                if self.boxLst[self.boxLst.index(self.rw1) - num].colliderect(self.kb1):
                    self.kb1 = self.blackCutPiece_11
                if self.boxLst[self.boxLst.index(self.rw1) - num].colliderect(self.kb2):
                    self.kb2 = self.blackCutPiece_12
                if self.boxLst[self.boxLst.index(self.rw1) - num].colliderect(self.bb1):
                    self.bb1 = self.blackCutPiece_13
                if self.boxLst[self.boxLst.index(self.rw1) - num].colliderect(self.bb2):
                    self.bb2 = self.blackCutPiece_14
                if self.boxLst[self.boxLst.index(self.rw1) - num].colliderect(self.Kb):
                    self.Kb = self.blackCutPiece_15
                    self.KingBlack_isDead = 1
                if self.boxLst[self.boxLst.index(self.rw1) - num].colliderect(self.Qb):
                    self.Qb = self.blackCutPiece_16
                self.rw1 = self.boxLst[self.boxLst.index(self.rw1) - num]
                self.rookWhite1Clicked = 0
                self.rookWhite1Clicked_cut = 0
                self.turn = "black"
        
        def make_zero():
            self.rookWhite2Clicked = 0
            self.pawnWhite1Clicked = 0
            self.pawnWhite2Clicked = 0
            self.pawnWhite3Clicked = 0
            self.pawnWhite4Clicked = 0
            self.pawnWhite5Clicked = 0
            self.pawnWhite6Clicked = 0
            self.pawnWhite7Clicked = 0
            self.pawnWhite8Clicked = 0
            self.KingWhiteClicked = 0
            self.QueenWhiteClicked = 0
            self.knightWhite1Clicked = 0
            self.knightWhite2Clicked = 0
            self.bishopWhite1Clicked = 0
            self.bishopWhite2Clicked = 0

        def move(num):
            if self.boxLst[self.boxLst.index(self.rw1) + num].collidepoint(self.mouse_x, self.mouse_y):
                self.rw1 = self.boxLst[self.boxLst.index(self.rw1) + num]
                self.rookWhite1Clicked = 0
                self.turn = "black"

        if self.turn == "black":
            self.rookWhite1Clicked_plus8 = 0
            self.rookWhite1Clicked_plus16 = 0
            self.rookWhite1Clicked_plus24 = 0
            self.rookWhite1Clicked_plus32 = 0
            self.rookWhite1Clicked_plus40 = 0
            self.rookWhite1Clicked_plus48 = 0
            self.rookWhite1Clicked_plus1 = 0
            self.rookWhite1Clicked_plus2 = 0
            self.rookWhite1Clicked_plus3 = 0
            self.rookWhite1Clicked_plus4 = 0
            self.rookWhite1Clicked_plus5 = 0
            self.rookWhite1Clicked_plus6 = 0
            self.rookWhite1Clicked_minus8 = 0
            self.rookWhite1Clicked_minus16 = 0
            self.rookWhite1Clicked_minus24 = 0
            self.rookWhite1Clicked_minus32 = 0
            self.rookWhite1Clicked_minus40 = 0
            self.rookWhite1Clicked_minus48 = 0
            self.rookWhite1Clicked_minus1 = 0
            self.rookWhite1Clicked_minus2 = 0
            self.rookWhite1Clicked_minus3 = 0
            self.rookWhite1Clicked_minus4 = 0
            self.rookWhite1Clicked_minus5 = 0
            self.rookWhite1Clicked_minus6 = 0

        if self.turn == "white":
            if self.rw1.collidepoint(self.mouse_x, self.mouse_y):
                # along y-axis
                if self.rw1.y < self.box57.y:
                    drawRect_add(8)
                    self.rookWhite1Clicked = 1
                    make_zero()
                if self.rw1.y < self.box49.y:
                    if self.rookWhite1Clicked_plus8 == 1:
                        drawRect_add(16)
                        self.rookWhite1Clicked = 1
                        make_zero()
                if self.rw1.y < self.box41.y:
                    if self.rookWhite1Clicked_plus8 == 1 and self.rookWhite1Clicked_plus16 == 1:
                        drawRect_add(24)
                        self.rookWhite1Clicked = 1
                        make_zero()
                if self.rw1.y < self.box33.y:
                    if self.rookWhite1Clicked_plus8 == 1 and self.rookWhite1Clicked_plus16 == 1 and self.rookWhite1Clicked_plus24 == 1:
                        drawRect_add(32)
                        self.rookWhite1Clicked = 1
                        make_zero()
                if self.rw1.y < self.box25.y:
                    if self.rookWhite1Clicked_plus8 == 1 and self.rookWhite1Clicked_plus16 == 1 and self.rookWhite1Clicked_plus24 == 1 and self.rookWhite1Clicked_plus32 == 1:
                        drawRect_add(40)
                        self.rookWhite1Clicked = 1
                        make_zero()
                if self.rw1.y < self.box17.y:
                    if self.rookWhite1Clicked_plus8 == 1 and self.rookWhite1Clicked_plus16 == 1 and self.rookWhite1Clicked_plus24 == 1 and self.rookWhite1Clicked_plus32 == 1 and \
                            self.rookWhite1Clicked_plus40 == 1:
                        drawRect_add(48)
                        self.rookWhite1Clicked = 1
                        make_zero()
                if self.rw1.y < self.box9.y:
                    if self.rookWhite1Clicked_plus8 == 1 and self.rookWhite1Clicked_plus16 == 1 and self.rookWhite1Clicked_plus24 == 1 and self.rookWhite1Clicked_plus32 == 1 and \
                            self.rookWhite1Clicked_plus40 == 1 and self.rookWhite1Clicked_plus48 == 1:
                        drawRect_add(56)
                        self.rookWhite1Clicked = 1
                        make_zero()

                if self.rw1.y > self.box1.y:
                    drawRect_sub(8)
                    self.rookWhite1Clicked = 1
                    make_zero()
                if self.rw1.y > self.box9.y:
                    if self.rookWhite1Clicked_minus8 == 1:
                        drawRect_sub(16)
                        self.rookWhite1Clicked = 1
                        make_zero()
                if self.rw1.y > self.box17.y:
                    if self.rookWhite1Clicked_minus8 == 1 and self.rookWhite1Clicked_minus16 == 1:
                        drawRect_sub(24)
                        self.rookWhite1Clicked = 1
                        make_zero()
                if self.rw1.y > self.box25.y:
                    if self.rookWhite1Clicked_minus8 == 1 and self.rookWhite1Clicked_minus16 == 1 and self.rookWhite1Clicked_minus24 == 1:
                        drawRect_sub(32)
                        self.rookWhite1Clicked = 1
                        make_zero()
                if self.rw1.y > self.box33.y:
                    if self.rookWhite1Clicked_minus8 == 1 and self.rookWhite1Clicked_minus16 == 1 and self.rookWhite1Clicked_minus24 == 1 and self.rookWhite1Clicked_minus32 == 1:
                        drawRect_sub(40)
                        self.rookWhite1Clicked = 1
                        make_zero()
                if self.rw1.y > self.box41.y:
                    if self.rookWhite1Clicked_minus8 == 1 and self.rookWhite1Clicked_minus16 == 1 and self.rookWhite1Clicked_minus24 == 1 and self.rookWhite1Clicked_minus32 == 1 and \
                            self.rookWhite1Clicked_minus40:
                        drawRect_sub(48)
                        self.rookWhite1Clicked = 1
                        make_zero()
                if self.rw1.y > self.box49.y:
                    if self.rookWhite1Clicked_minus8 == 1 and self.rookWhite1Clicked_minus16 == 1 and self.rookWhite1Clicked_minus24 == 1 and self.rookWhite1Clicked_minus32 == 1 and \
                            self.rookWhite1Clicked_minus40 and self.rookWhite1Clicked_minus48:
                        drawRect_sub(56)
                        self.rookWhite1Clicked = 1
                        make_zero()

                # along x-axis
                if self.rw1.x < self.box8.x:
                    drawRect_add(1)
                    self.rookWhite1Clicked = 1
                    make_zero()
                if self.rw1.x < self.box7.x:
                    if self.rookWhite1Clicked_plus1 == 1:
                        drawRect_add(2)
                        self.rookWhite1Clicked = 1
                        make_zero()
                if self.rw1.x < self.box6.x:
                    if self.rookWhite1Clicked_plus1 == 1 and self.rookWhite1Clicked_plus2 == 1:
                        drawRect_add(3)
                        self.rookWhite1Clicked = 1
                        make_zero()
                if self.rw1.x < self.box5.x:
                    if self.rookWhite1Clicked_plus1 == 1 and self.rookWhite1Clicked_plus2 == 1 and self.rookWhite1Clicked_plus3 == 1:
                        drawRect_add(4)
                        self.rookWhite1Clicked = 1
                        make_zero()
                if self.rw1.x < self.box4.x:
                    if self.rookWhite1Clicked_plus1 == 1 and self.rookWhite1Clicked_plus2 == 1 and self.rookWhite1Clicked_plus3 == 1 and self.rookWhite1Clicked_plus4 == 1:
                        drawRect_add(5)
                        self.rookWhite1Clicked = 1
                        make_zero()
                if self.rw1.x < self.box3.x:
                    if self.rookWhite1Clicked_plus1 == 1 and self.rookWhite1Clicked_plus2 == 1 and self.rookWhite1Clicked_plus3 == 1 and self.rookWhite1Clicked_plus4 == 1 and \
                            self.rookWhite1Clicked_plus5 == 1:
                        drawRect_add(6)
                        self.rookWhite1Clicked = 1
                        make_zero()
                if self.rw1.x < self.box2.x:
                    if self.rookWhite1Clicked_plus1 == 1 and self.rookWhite1Clicked_plus2 == 1 and self.rookWhite1Clicked_plus3 == 1 and self.rookWhite1Clicked_plus4 == 1 and \
                            self.rookWhite1Clicked_plus5 == 1 and self.rookWhite1Clicked_plus6 == 1:
                        drawRect_add(7)
                        self.rookWhite1Clicked = 1
                        make_zero()

                if self.rw1.x > self.box1.x:
                    drawRect_sub(1)
                    self.rookWhite1Clicked = 1
                    make_zero()
                if self.rw1.x > self.box2.x:
                    if self.rookWhite1Clicked_minus1 == 1:
                        drawRect_sub(2)
                        self.rookWhite1Clicked = 1
                        make_zero()
                if self.rw1.x > self.box3.x:
                    if self.rookWhite1Clicked_minus1 == 1 and self.rookWhite1Clicked_minus2 == 1:
                        drawRect_sub(3)
                        self.rookWhite1Clicked = 1
                        make_zero()
                if self.rw1.x > self.box4.x:
                    if self.rookWhite1Clicked_minus1 == 1 and self.rookWhite1Clicked_minus2 == 1 and self.rookWhite1Clicked_minus3 == 1:
                        drawRect_sub(4)
                        self.rookWhite1Clicked = 1
                        make_zero()
                if self.rw1.x > self.box5.x:
                    if self.rookWhite1Clicked_minus1 == 1 and self.rookWhite1Clicked_minus2 == 1 and self.rookWhite1Clicked_minus3 == 1 and self.rookWhite1Clicked_minus4 == 1:
                        drawRect_sub(5)
                        self.rookWhite1Clicked = 1
                        make_zero()
                if self.rw1.x > self.box6.x:
                    if self.rookWhite1Clicked_minus1 == 1 and self.rookWhite1Clicked_minus2 == 1 and self.rookWhite1Clicked_minus3 == 1 and self.rookWhite1Clicked_minus4 == 1 and \
                            self.rookWhite1Clicked_minus5 == 1:
                        drawRect_sub(6)
                        self.rookWhite1Clicked = 1
                        make_zero()
                if self.rw1.x > self.box7.x:
                    if self.rookWhite1Clicked_minus1 == 1 and self.rookWhite1Clicked_minus2 == 1 and self.rookWhite1Clicked_minus3 == 1 and self.rookWhite1Clicked_minus4 == 1 and \
                            self.rookWhite1Clicked_minus5 == 1 and self.rookWhite1Clicked_minus6 == 1:
                        drawRect_sub(7)
                        self.rookWhite1Clicked = 1
                        make_zero()

                # check if white pieces can be cut or not
                if self.rw1.y < self.box57.y:
                    cutBlackPiece_add(8)
                if self.rw1.y < self.box49.y:
                    if self.rookWhite1Clicked_plus8 == 1:
                        cutBlackPiece_add(16)
                if self.rw1.y < self.box41.y:
                    if self.rookWhite1Clicked_plus8 == 1 and self.rookWhite1Clicked_plus16 == 1:
                        cutBlackPiece_add(24)
                if self.rw1.y < self.box33.y:
                    if self.rookWhite1Clicked_plus8 == 1 and self.rookWhite1Clicked_plus16 == 1 and self.rookWhite1Clicked_plus24 == 1:
                        cutBlackPiece_add(32)
                if self.rw1.y < self.box25.y:
                    if self.rookWhite1Clicked_plus8 == 1 and self.rookWhite1Clicked_plus16 == 1 and self.rookWhite1Clicked_plus24 == 1 and self.rookWhite1Clicked_plus32 == 1:
                        cutBlackPiece_add(40)
                if self.rw1.y < self.box17.y:
                    if self.rookWhite1Clicked_plus8 == 1 and self.rookWhite1Clicked_plus16 == 1 and self.rookWhite1Clicked_plus24 == 1 and self.rookWhite1Clicked_plus32 == 1 and \
                            self.rookWhite1Clicked_plus40 == 1:
                        cutBlackPiece_add(48)
                if self.rw1.y < self.box9.y:
                    if self.rookWhite1Clicked_plus8 == 1 and self.rookWhite1Clicked_plus16 == 1 and self.rookWhite1Clicked_plus24 == 1 and self.rookWhite1Clicked_plus32 == 1 and \
                            self.rookWhite1Clicked_plus40 == 1 and self.rookWhite1Clicked_plus48 == 1:
                        cutBlackPiece_add(56)

                if self.rw1.y > self.box1.y:
                    cutBlackPiece_sub(8)
                if self.rw1.y > self.box9.y:
                    if self.rookWhite1Clicked_minus8 == 1:
                        cutBlackPiece_sub(16)
                if self.rw1.y > self.box17.y:
                    if self.rookWhite1Clicked_minus8 == 1 and self.rookWhite1Clicked_minus16 == 1:
                        cutBlackPiece_sub(24)
                if self.rw1.y > self.box25.y:
                    if self.rookWhite1Clicked_minus8 == 1 and self.rookWhite1Clicked_minus16 == 1 and self.rookWhite1Clicked_minus24 == 1:
                        cutBlackPiece_sub(32)
                if self.rw1.y > self.box33.y:
                    if self.rookWhite1Clicked_minus8 == 1 and self.rookWhite1Clicked_minus16 == 1 and self.rookWhite1Clicked_minus24 == 1 and self.rookWhite1Clicked_minus32 == 1:
                        cutBlackPiece_sub(40)
                if self.rw1.y > self.box41.y:
                    if self.rookWhite1Clicked_minus8 == 1 and self.rookWhite1Clicked_minus16 == 1 and self.rookWhite1Clicked_minus24 == 1 and self.rookWhite1Clicked_minus32 == 1 and \
                            self.rookWhite1Clicked_minus40 == 1:
                        cutBlackPiece_sub(48)
                if self.rw1.y > self.box49.y:
                    if self.rookWhite1Clicked_minus8 == 1 and self.rookWhite1Clicked_minus16 == 1 and self.rookWhite1Clicked_minus24 == 1 and self.rookWhite1Clicked_minus32 == 1 and \
                            self.rookWhite1Clicked_minus40 == 1 and self.rookWhite1Clicked_minus48 == 1:
                        cutBlackPiece_sub(56)

                if self.rw1.x < self.box8.x:
                    cutBlackPiece_add(1)
                if self.rw1.x < self.box7.x:
                    if self.rookWhite1Clicked_plus1 == 1:
                        cutBlackPiece_add(2)
                if self.rw1.x < self.box6.x:
                    if self.rookWhite1Clicked_plus1 == 1 and self.rookWhite1Clicked_plus2 == 1:
                        cutBlackPiece_add(3)
                if self.rw1.x < self.box5.x:
                    if self.rookWhite1Clicked_plus1 == 1 and self.rookWhite1Clicked_plus2 == 1 and self.rookWhite1Clicked_plus3 == 1:
                        cutBlackPiece_add(4)
                if self.rw1.x < self.box4.x:
                    if self.rookWhite1Clicked_plus1 == 1 and self.rookWhite1Clicked_plus2 == 1 and self.rookWhite1Clicked_plus3 == 1 and self.rookWhite1Clicked_plus4 == 1:
                        cutBlackPiece_add(5)
                if self.rw1.x < self.box3.x:
                    if self.rookWhite1Clicked_plus1 == 1 and self.rookWhite1Clicked_plus2 == 1 and self.rookWhite1Clicked_plus3 == 1 and self.rookWhite1Clicked_plus4 == 1 and \
                            self.rookWhite1Clicked_plus5 == 1:
                        cutBlackPiece_add(6)
                if self.rw1.x < self.box2.x:
                    if self.rookWhite1Clicked_plus1 == 1 and self.rookWhite1Clicked_plus2 == 1 and self.rookWhite1Clicked_plus3 == 1 and self.rookWhite1Clicked_plus4 == 1 and \
                            self.rookWhite1Clicked_plus5 == 1 and self.rookWhite1Clicked_plus6 == 1:
                        cutBlackPiece_add(7)

                if self.rw1.x > self.box1.x:
                    cutBlackPiece_sub(1)
                if self.rw1.x > self.box2.x:
                    if self.rookWhite1Clicked_minus1 == 1:
                        cutBlackPiece_sub(2)
                if self.rw1.x > self.box3.x:
                    if self.rookWhite1Clicked_minus1 == 1 and self.rookWhite1Clicked_minus2 == 1:
                        cutBlackPiece_sub(3)
                if self.rw1.x > self.box4.x:
                    if self.rookWhite1Clicked_minus1 == 1 and self.rookWhite1Clicked_minus2 == 1 and self.rookWhite1Clicked_minus3 == 1:
                        cutBlackPiece_sub(4)
                if self.rw1.x > self.box5.x:
                    if self.rookWhite1Clicked_minus1 == 1 and self.rookWhite1Clicked_minus2 == 1 and self.rookWhite1Clicked_minus3 == 1 and self.rookWhite1Clicked_minus4 == 1:
                        cutBlackPiece_sub(5)
                if self.rw1.x > self.box6.x:
                    if self.rookWhite1Clicked_minus1 == 1 and self.rookWhite1Clicked_minus2 == 1 and self.rookWhite1Clicked_minus3 == 1 and self.rookWhite1Clicked_minus4 == 1 and \
                            self.rookWhite1Clicked_minus5 == 1:
                        cutBlackPiece_sub(6)
                if self.rw1.x > self.box7.x:
                    if self.rookWhite1Clicked_minus1 == 1 and self.rookWhite1Clicked_minus2 == 1 and self.rookWhite1Clicked_minus3 == 1 and self.rookWhite1Clicked_minus4 == 1 and \
                            self.rookWhite1Clicked_minus5 == 1 and self.rookWhite1Clicked_minus6 == 1:
                        cutBlackPiece_sub(7)

        # move the rook
        if self.rookWhite1Clicked == 1:

            # cut the pieces
            if self.rookWhite1Clicked_cut == 1:
                # along y-axis
                if self.rw1.y < self.box57.y:
                    removeBlackPiece_add(8)
                if self.rw1.y < self.box49.y:
                    removeBlackPiece_add(16)
                if self.rw1.y < self.box41.y:
                    removeBlackPiece_add(24)
                if self.rw1.y < self.box33.y:
                    removeBlackPiece_add(32)
                if self.rw1.y < self.box25.y:
                    removeBlackPiece_add(40)
                if self.rw1.y < self.box17.y:
                    removeBlackPiece_add(48)
                if self.rw1.y < self.box9.y:
                    removeBlackPiece_add(56)

                if self.rw1.y > self.box1.y:
                    removeBlackPiece_sub(8)
                if self.rw1.y > self.box9.y:
                    removeBlackPiece_sub(16)
                if self.rw1.y > self.box17.y:
                    removeBlackPiece_sub(24)
                if self.rw1.y > self.box25.y:
                    removeBlackPiece_sub(32)
                if self.rw1.y > self.box33.y:
                    removeBlackPiece_sub(40)
                if self.rw1.y > self.box41.y:
                    removeBlackPiece_sub(48)
                if self.rw1.y > self.box49.y:
                    removeBlackPiece_sub(56)

                # along x-axis
                if self.rw1.x < self.box8.x:
                    removeBlackPiece_add(1)
                if self.rw1.x < self.box7.x:
                    removeBlackPiece_add(2)
                if self.rw1.x < self.box6.x:
                    removeBlackPiece_add(3)
                if self.rw1.x < self.box5.x:
                    removeBlackPiece_add(4)
                if self.rw1.x < self.box4.x:
                    removeBlackPiece_add(5)
                if self.rw1.x < self.box3.x:
                    removeBlackPiece_add(6)
                if self.rw1.x < self.box2.x:
                    removeBlackPiece_add(7)

                if self.rw1.x > self.box1.x:
                    removeBlackPiece_sub(1)
                if self.rw1.x > self.box2.x:
                    removeBlackPiece_sub(2)
                if self.rw1.x > self.box3.x:
                    removeBlackPiece_sub(3)
                if self.rw1.x > self.box4.x:
                    removeBlackPiece_sub(4)
                if self.rw1.x > self.box5.x:
                    removeBlackPiece_sub(5)
                if self.rw1.x > self.box6.x:
                    removeBlackPiece_sub(6)
                if self.rw1.x > self.box7.x:
                    removeBlackPiece_sub(7)

            # along y-axis(+)
            if self.rw1.y < self.box57.y:
                move(8)
            if self.rw1.y < self.box49.y:
                move(16)
            if self.rw1.y < self.box41.y:
                move(24)
            if self.rw1.y < self.box33.y:
                move(32)
            if self.rw1.y < self.box25.y:
                move(40)
            if self.rw1.y < self.box17.y:
                move(48)
            if self.rw1.y < self.box9.y:
                move(56)

            # along y-axis(-)
            if self.rw1.y > self.box1.y:
                move(-8)
            if self.rw1.y > self.box9.y:
                move(-16)
            if self.rw1.y > self.box17.y:
                move(-24)
            if self.rw1.y > self.box25.y:
                move(-32)
            if self.rw1.y > self.box33.y:
                move(-40)
            if self.rw1.y > self.box41.y:
                move(-48)
            if self.rw1.y > self.box49.y:
                move(-56)

            # along x-axis(+)
            if self.rw1.x < self.box8.x:
                move(1)
            if self.rw1.x < self.box7.x:
                move(2)
            if self.rw1.x < self.box6.x:
                move(3)
            if self.rw1.x < self.box5.x:
                move(4)
            if self.rw1.x < self.box4.x:
                move(5)
            if self.rw1.x < self.box3.x:
                move(6)
            if self.rw1.x < self.box2.x:
                move(7)

            # along x-axis(-)
            if self.rw1.x > self.box1.x:
                move(-1)
            if self.rw1.x > self.box2.x:
                move(-2)
            if self.rw1.x > self.box3.x:
                move(-3)
            if self.rw1.x > self.box4.x:
                move(-4)
            if self.rw1.x > self.box5.x:
                move(-5)
            if self.rw1.x > self.box6.x:
                move(-6)
            if self.rw1.x > self.box7.x:
                move(-7)

    def rookW2Movements(self):
        for event in pygame.event.get():
            if event.type == MOUSEBUTTONDOWN:
                self.mouse_x, self.mouse_y = pygame.mouse.get_pos()

        # rook 2
        def drawRect_add(num):
            if not self.boxLst[self.boxLst.index(self.rw2) + num].colliderect(self.pw1) and not \
                    self.boxLst[self.boxLst.index(self.rw2) + num].colliderect(self.pw2) and not \
                    self.boxLst[self.boxLst.index(self.rw2) + num].colliderect(self.pw3) and not \
                    self.boxLst[self.boxLst.index(self.rw2) + num].colliderect(self.pw4) and not \
                    self.boxLst[self.boxLst.index(self.rw2) + num].colliderect(self.pw5) and not \
                    self.boxLst[self.boxLst.index(self.rw2) + num].colliderect(self.pw6) and not \
                    self.boxLst[self.boxLst.index(self.rw2) + num].colliderect(self.pw7) and not \
                    self.boxLst[self.boxLst.index(self.rw2) + num].colliderect(self.pw8) and not \
                    self.boxLst[self.boxLst.index(self.rw2) + num].colliderect(self.Kw) and not \
                    self.boxLst[self.boxLst.index(self.rw2) + num].colliderect(self.Qw) and not \
                    self.boxLst[self.boxLst.index(self.rw2) + num].colliderect(self.rw1) and not \
                    self.boxLst[self.boxLst.index(self.rw2) + num].colliderect(self.kw1) and not \
                    self.boxLst[self.boxLst.index(self.rw2) + num].colliderect(self.kw2) and not \
                    self.boxLst[self.boxLst.index(self.rw2) + num].colliderect(self.bw1) and not \
                    self.boxLst[self.boxLst.index(self.rw2) + num].colliderect(self.bw2) and not \
                    self.boxLst[self.boxLst.index(self.rw2) + num].colliderect(self.pb1) and not \
                    self.boxLst[self.boxLst.index(self.rw2) + num].colliderect(self.pb2) and not \
                    self.boxLst[self.boxLst.index(self.rw2) + num].colliderect(self.pb3) and not \
                    self.boxLst[self.boxLst.index(self.rw2) + num].colliderect(self.pb4) and not \
                    self.boxLst[self.boxLst.index(self.rw2) + num].colliderect(self.pb5) and not \
                    self.boxLst[self.boxLst.index(self.rw2) + num].colliderect(self.pb6) and not \
                    self.boxLst[self.boxLst.index(self.rw2) + num].colliderect(self.pb7) and not \
                    self.boxLst[self.boxLst.index(self.rw2) + num].colliderect(self.pb8) and not \
                    self.boxLst[self.boxLst.index(self.rw2) + num].colliderect(self.Kb) and not \
                    self.boxLst[self.boxLst.index(self.rw2) + num].colliderect(self.Qb) and not \
                    self.boxLst[self.boxLst.index(self.rw2) + num].colliderect(self.rb1) and not \
                    self.boxLst[self.boxLst.index(self.rw2) + num].colliderect(self.rb2) and not \
                    self.boxLst[self.boxLst.index(self.rw2) + num].colliderect(self.kb1) and not \
                    self.boxLst[self.boxLst.index(self.rw2) + num].colliderect(self.kb2) and not \
                    self.boxLst[self.boxLst.index(self.rw2) + num].colliderect(self.bb1) and not \
                    self.boxLst[self.boxLst.index(self.rw2) + num].colliderect(self.bb2):
                pygame.draw.rect(self.window, self.blue, self.boxLst[self.boxLst.index(self.rw2) + num], border_radius=100)

                if num == 8:
                    self.rookWhite2Clicked_plus8 = 1
                if num == 16:
                    self.rookWhite2Clicked_plus16 = 1
                if num == 24:
                    self.rookWhite2Clicked_plus24 = 1
                if num == 32:
                    self.rookWhite2Clicked_plus32 = 1
                if num == 40:
                    self.rookWhite2Clicked_plus40 = 1
                if num == 48:
                    self.rookWhite2Clicked_plus48 = 1
                if num == 1:
                    self.rookWhite2Clicked_plus1 = 1
                if num == 2:
                    self.rookWhite2Clicked_plus2 = 1
                if num == 3:
                    self.rookWhite2Clicked_plus3 = 1
                if num == 4:
                    self.rookWhite2Clicked_plus4 = 1
                if num == 5:
                    self.rookWhite2Clicked_plus5 = 1
                if num == 6:
                    self.rookWhite2Clicked_plus6 = 1

        def drawRect_sub(num):
            if not self.boxLst[self.boxLst.index(self.rw2) - num].colliderect(self.pw1) and not \
                    self.boxLst[self.boxLst.index(self.rw2) - num].colliderect(self.pw2) and not \
                    self.boxLst[self.boxLst.index(self.rw2) - num].colliderect(self.pw3) and not \
                    self.boxLst[self.boxLst.index(self.rw2) - num].colliderect(self.pw4) and not \
                    self.boxLst[self.boxLst.index(self.rw2) - num].colliderect(self.pw5) and not \
                    self.boxLst[self.boxLst.index(self.rw2) - num].colliderect(self.pw6) and not \
                    self.boxLst[self.boxLst.index(self.rw2) - num].colliderect(self.pw7) and not \
                    self.boxLst[self.boxLst.index(self.rw2) - num].colliderect(self.pw8) and not \
                    self.boxLst[self.boxLst.index(self.rw2) - num].colliderect(self.Kw) and not \
                    self.boxLst[self.boxLst.index(self.rw2) - num].colliderect(self.Qw) and not \
                    self.boxLst[self.boxLst.index(self.rw2) - num].colliderect(self.rw1) and not \
                    self.boxLst[self.boxLst.index(self.rw2) - num].colliderect(self.kw1) and not \
                    self.boxLst[self.boxLst.index(self.rw2) - num].colliderect(self.kw2) and not \
                    self.boxLst[self.boxLst.index(self.rw2) - num].colliderect(self.bw1) and not \
                    self.boxLst[self.boxLst.index(self.rw2) - num].colliderect(self.bw2) and not \
                    self.boxLst[self.boxLst.index(self.rw2) - num].colliderect(self.pb1) and not \
                    self.boxLst[self.boxLst.index(self.rw2) - num].colliderect(self.pb2) and not \
                    self.boxLst[self.boxLst.index(self.rw2) - num].colliderect(self.pb3) and not \
                    self.boxLst[self.boxLst.index(self.rw2) - num].colliderect(self.pb4) and not \
                    self.boxLst[self.boxLst.index(self.rw2) - num].colliderect(self.pb5) and not \
                    self.boxLst[self.boxLst.index(self.rw2) - num].colliderect(self.pb6) and not \
                    self.boxLst[self.boxLst.index(self.rw2) - num].colliderect(self.pb7) and not \
                    self.boxLst[self.boxLst.index(self.rw2) - num].colliderect(self.pb8) and not \
                    self.boxLst[self.boxLst.index(self.rw2) - num].colliderect(self.Kb) and not \
                    self.boxLst[self.boxLst.index(self.rw2) - num].colliderect(self.Qb) and not \
                    self.boxLst[self.boxLst.index(self.rw2) - num].colliderect(self.rb1) and not \
                    self.boxLst[self.boxLst.index(self.rw2) - num].colliderect(self.rb2) and not \
                    self.boxLst[self.boxLst.index(self.rw2) - num].colliderect(self.kb1) and not \
                    self.boxLst[self.boxLst.index(self.rw2) - num].colliderect(self.kb2) and not \
                    self.boxLst[self.boxLst.index(self.rw2) - num].colliderect(self.bb1) and not \
                    self.boxLst[self.boxLst.index(self.rw2) - num].colliderect(self.bb2):
                pygame.draw.rect(self.window, self.blue, self.boxLst[self.boxLst.index(self.rw2) - num], border_radius=100)

                if num == 8:
                    self.rookWhite2Clicked_minus8 = 1
                if num == 16:
                    self.rookWhite2Clicked_minus16 = 1
                if num == 24:
                    self.rookWhite2Clicked_minus24 = 1
                if num == 32:
                    self.rookWhite2Clicked_minus32 = 1
                if num == 40:
                    self.rookWhite2Clicked_minus40 = 1
                if num == 48:
                    self.rookWhite2Clicked_minus48 = 1
                if num == 1:
                    self.rookWhite2Clicked_minus1 = 1
                if num == 2:
                    self.rookWhite2Clicked_minus2 = 1
                if num == 3:
                    self.rookWhite2Clicked_minus3 = 1
                if num == 4:
                    self.rookWhite2Clicked_minus4 = 1
                if num == 5:
                    self.rookWhite2Clicked_minus5 = 1
                if num == 6:
                    self.rookWhite2Clicked_minus6 = 1

        def cutBlackPiece_add(num):
            if self.boxLst[self.boxLst.index(self.rw2) + num].colliderect(self.pb1) or \
                    self.boxLst[self.boxLst.index(self.rw2) + num].colliderect(self.pb2) or \
                    self.boxLst[self.boxLst.index(self.rw2) + num].colliderect(self.pb3) or \
                    self.boxLst[self.boxLst.index(self.rw2) + num].colliderect(self.pb4) or \
                    self.boxLst[self.boxLst.index(self.rw2) + num].colliderect(self.pb5) or \
                    self.boxLst[self.boxLst.index(self.rw2) + num].colliderect(self.pb6) or \
                    self.boxLst[self.boxLst.index(self.rw2) + num].colliderect(self.pb7) or \
                    self.boxLst[self.boxLst.index(self.rw2) + num].colliderect(self.pb8) or \
                    self.boxLst[self.boxLst.index(self.rw2) + num].colliderect(self.Kb) or \
                    self.boxLst[self.boxLst.index(self.rw2) + num].colliderect(self.Qb) or \
                    self.boxLst[self.boxLst.index(self.rw2) + num].colliderect(self.rb1) or \
                    self.boxLst[self.boxLst.index(self.rw2) + num].colliderect(self.rb2) or \
                    self.boxLst[self.boxLst.index(self.rw2) + num].colliderect(self.kb1) or \
                    self.boxLst[self.boxLst.index(self.rw2) + num].colliderect(self.kb2) or \
                    self.boxLst[self.boxLst.index(self.rw2) + num].colliderect(self.bb1) or \
                    self.boxLst[self.boxLst.index(self.rw2) + num].colliderect(self.bb2):
                pygame.draw.rect(self.window, self.red, self.boxLst[self.boxLst.index(self.rw2) + num], border_radius=100)
                self.rookWhite2Clicked = 1
                self.rookWhite1Clicked = 0
                self.pawnWhite1Clicked = 0
                self.pawnWhite2Clicked = 0
                self.pawnWhite3Clicked = 0
                self.pawnWhite4Clicked = 0
                self.pawnWhite5Clicked = 0
                self.pawnWhite6Clicked = 0
                self.pawnWhite7Clicked = 0
                self.pawnWhite8Clicked = 0
                self.KingWhiteClicked = 0
                self.knightWhite1Clicked = 0
                self.knightWhite2Clicked = 0
                self.bishopWhite1Clicked = 0
                self.bishopWhite2Clicked = 0
                self.QueenWhiteClicked = 0
                self.rookWhite2Clicked_cut = 1

        def cutBlackPiece_sub(num):
            if self.boxLst[self.boxLst.index(self.rw2) - num].colliderect(self.pb1) or \
                    self.boxLst[self.boxLst.index(self.rw2) - num].colliderect(self.pb2) or \
                    self.boxLst[self.boxLst.index(self.rw2) - num].colliderect(self.pb3) or \
                    self.boxLst[self.boxLst.index(self.rw2) - num].colliderect(self.pb4) or \
                    self.boxLst[self.boxLst.index(self.rw2) - num].colliderect(self.pb5) or \
                    self.boxLst[self.boxLst.index(self.rw2) - num].colliderect(self.pb6) or \
                    self.boxLst[self.boxLst.index(self.rw2) - num].colliderect(self.pb7) or \
                    self.boxLst[self.boxLst.index(self.rw2) - num].colliderect(self.pb8) or \
                    self.boxLst[self.boxLst.index(self.rw2) - num].colliderect(self.Kb) or \
                    self.boxLst[self.boxLst.index(self.rw2) - num].colliderect(self.Qb) or \
                    self.boxLst[self.boxLst.index(self.rw2) - num].colliderect(self.rb1) or \
                    self.boxLst[self.boxLst.index(self.rw2) - num].colliderect(self.rb2) or \
                    self.boxLst[self.boxLst.index(self.rw2) - num].colliderect(self.kb1) or \
                    self.boxLst[self.boxLst.index(self.rw2) - num].colliderect(self.kb2) or \
                    self.boxLst[self.boxLst.index(self.rw2) - num].colliderect(self.bb1) or \
                    self.boxLst[self.boxLst.index(self.rw2) - num].colliderect(self.bb2):
                pygame.draw.rect(self.window, self.red, self.boxLst[self.boxLst.index(self.rw2) - num], border_radius=100)
                self.rookWhite2Clicked = 1
                self.rookWhite1Clicked = 0
                self.pawnWhite1Clicked = 0
                self.pawnWhite2Clicked = 0
                self.pawnWhite3Clicked = 0
                self.pawnWhite4Clicked = 0
                self.pawnWhite5Clicked = 0
                self.pawnWhite6Clicked = 0
                self.pawnWhite7Clicked = 0
                self.pawnWhite8Clicked = 0
                self.KingWhiteClicked = 0
                self.knightWhite1Clicked = 0
                self.knightWhite2Clicked = 0
                self.bishopWhite1Clicked = 0
                self.bishopWhite2Clicked = 0
                self.QueenWhiteClicked = 0
                self.rookWhite2Clicked_cut = 1

        def removeBlackPiece_add(num):
            if self.boxLst[self.boxLst.index(self.rw2) + num].collidepoint(self.mouse_x, self.mouse_y):
                if self.boxLst[self.boxLst.index(self.rw2) + num].colliderect(self.pb1):
                    self.pb1 = self.blackCutPiece_1
                if self.boxLst[self.boxLst.index(self.rw2) + num].colliderect(self.pb2):
                    self.pb2 = self.blackCutPiece_2
                if self.boxLst[self.boxLst.index(self.rw2) + num].colliderect(self.pb3):
                    self.pb3 = self.blackCutPiece_3
                if self.boxLst[self.boxLst.index(self.rw2) + num].colliderect(self.pb4):
                    self.pb4 = self.blackCutPiece_4
                if self.boxLst[self.boxLst.index(self.rw2) + num].colliderect(self.pb5):
                    self.pb5 = self.blackCutPiece_5
                if self.boxLst[self.boxLst.index(self.rw2) + num].colliderect(self.pb6):
                    self.pb6 = self.blackCutPiece_6
                if self.boxLst[self.boxLst.index(self.rw2) + num].colliderect(self.pb7):
                    self.pb7 = self.blackCutPiece_7
                if self.boxLst[self.boxLst.index(self.rw2) + num].colliderect(self.pb8):
                    self.pb8 = self.blackCutPiece_8
                if self.boxLst[self.boxLst.index(self.rw2) + num].colliderect(self.rb1):
                    self.rb1 = self.blackCutPiece_9
                if self.boxLst[self.boxLst.index(self.rw2) + num].colliderect(self.rb2):
                    self.rb2 = self.blackCutPiece_10
                if self.boxLst[self.boxLst.index(self.rw2) + num].colliderect(self.kb1):
                    self.kb1 = self.blackCutPiece_11
                if self.boxLst[self.boxLst.index(self.rw2) + num].colliderect(self.kb2):
                    self.kb2 = self.blackCutPiece_12
                if self.boxLst[self.boxLst.index(self.rw2) + num].colliderect(self.bb1):
                    self.bb1 = self.blackCutPiece_13
                if self.boxLst[self.boxLst.index(self.rw2) + num].colliderect(self.bb2):
                    self.bb2 = self.blackCutPiece_14
                if self.boxLst[self.boxLst.index(self.rw2) + num].colliderect(self.Kb):
                    self.Kb = self.blackCutPiece_15
                    self.KingBlack_isDead = 1
                if self.boxLst[self.boxLst.index(self.rw2) + num].colliderect(self.Qb):
                    self.Qb = self.blackCutPiece_16
                self.rw2 = self.boxLst[self.boxLst.index(self.rw2) + num]
                self.rookWhite2Clicked = 0
                self.rookWhite2Clicked_cut = 0
                self.turn = "black"

        def removeBlackPiece_sub(num):
            if self.boxLst[self.boxLst.index(self.rw2) - num].collidepoint(self.mouse_x, self.mouse_y):
                if self.boxLst[self.boxLst.index(self.rw2) - num].colliderect(self.pb1):
                    self.pb1 = self.blackCutPiece_1
                if self.boxLst[self.boxLst.index(self.rw2) - num].colliderect(self.pb2):
                    self.pb2 = self.blackCutPiece_2
                if self.boxLst[self.boxLst.index(self.rw2) - num].colliderect(self.pb3):
                    self.pb3 = self.blackCutPiece_3
                if self.boxLst[self.boxLst.index(self.rw2) - num].colliderect(self.pb4):
                    self.pb4 = self.blackCutPiece_4
                if self.boxLst[self.boxLst.index(self.rw2) - num].colliderect(self.pb5):
                    self.pb5 = self.blackCutPiece_5
                if self.boxLst[self.boxLst.index(self.rw2) - num].colliderect(self.pb6):
                    self.pb6 = self.blackCutPiece_6
                if self.boxLst[self.boxLst.index(self.rw2) - num].colliderect(self.pb7):
                    self.pb7 = self.blackCutPiece_7
                if self.boxLst[self.boxLst.index(self.rw2) - num].colliderect(self.pb8):
                    self.pb8 = self.blackCutPiece_8
                if self.boxLst[self.boxLst.index(self.rw2) - num].colliderect(self.rb1):
                    self.rb1 = self.blackCutPiece_9
                if self.boxLst[self.boxLst.index(self.rw2) - num].colliderect(self.rb2):
                    self.rb2 = self.blackCutPiece_10
                if self.boxLst[self.boxLst.index(self.rw2) - num].colliderect(self.kb1):
                    self.kb1 = self.blackCutPiece_11
                if self.boxLst[self.boxLst.index(self.rw2) - num].colliderect(self.kb2):
                    self.kb2 = self.blackCutPiece_12
                if self.boxLst[self.boxLst.index(self.rw2) - num].colliderect(self.bb1):
                    self.bb1 = self.blackCutPiece_13
                if self.boxLst[self.boxLst.index(self.rw2) - num].colliderect(self.bw2):
                    self.bb2 = self.blackCutPiece_14
                if self.boxLst[self.boxLst.index(self.rw2) - num].colliderect(self.Kb):
                    self.Kb = self.blackCutPiece_15
                    self.KingBlack_isDead = 1
                if self.boxLst[self.boxLst.index(self.rw2) - num].colliderect(self.Qb):
                    self.Qb = self.blackCutPiece_16
                self.rw2 = self.boxLst[self.boxLst.index(self.rw2) - num]
                self.rookWhite2Clicked = 0
                self.rookWhite2Clicked_cut = 0
                self.turn = "black"

        def make_zero():
            self.rookWhite1Clicked = 0
            self.pawnWhite1Clicked = 0
            self.pawnWhite2Clicked = 0
            self.pawnWhite3Clicked = 0
            self.pawnWhite4Clicked = 0
            self.pawnWhite5Clicked = 0
            self.pawnWhite6Clicked = 0
            self.pawnWhite7Clicked = 0
            self.pawnWhite8Clicked = 0
            self.KingWhiteClicked = 0
            self.QueenWhiteClicked = 0
            self.knightWhite1Clicked = 0
            self.knightWhite2Clicked = 0
            self.bishopWhite1Clicked = 0
            self.bishopWhite2Clicked = 0

        def move(num):
            if self.boxLst[self.boxLst.index(self.rw2) + num].collidepoint(self.mouse_x, self.mouse_y):
                self.rw2 = self.boxLst[self.boxLst.index(self.rw2) + num]
                self.rookWhite2Clicked = 0
                self.turn = "black"

        if self.turn == "black":
            self.rookWhite2Clicked_plus8 = 0
            self.rookWhite2Clicked_plus16 = 0
            self.rookWhite2Clicked_plus24 = 0
            self.rookWhite2Clicked_plus32 = 0
            self.rookWhite2Clicked_plus40 = 0
            self.rookWhite2Clicked_plus48 = 0
            self.rookWhite2Clicked_plus1 = 0
            self.rookWhite2Clicked_plus2 = 0
            self.rookWhite2Clicked_plus3 = 0
            self.rookWhite2Clicked_plus4 = 0
            self.rookWhite2Clicked_plus5 = 0
            self.rookWhite2Clicked_plus6 = 0
            self.rookWhite2Clicked_minus8 = 0
            self.rookWhite2Clicked_minus16 = 0
            self.rookWhite2Clicked_minus24 = 0
            self.rookWhite2Clicked_minus32 = 0
            self.rookWhite2Clicked_minus40 = 0
            self.rookWhite2Clicked_minus48 = 0
            self.rookWhite2Clicked_minus1 = 0
            self.rookWhite2Clicked_minus2 = 0
            self.rookWhite2Clicked_minus3 = 0
            self.rookWhite2Clicked_minus4 = 0
            self.rookWhite2Clicked_minus5 = 0
            self.rookWhite2Clicked_minus6 = 0

        if self.turn == "white":
            if self.rw2.collidepoint(self.mouse_x, self.mouse_y):
                # along y-axis
                if self.rw2.y < self.box57.y:
                    drawRect_add(8)
                    self.rookWhite2Clicked = 1
                    make_zero()
                if self.rw2.y < self.box49.y:
                    if self.rookWhite2Clicked_plus8 == 1:
                        drawRect_add(16)
                        self.rookWhite2Clicked = 1
                        make_zero()
                if self.rw2.y < self.box41.y:
                    if self.rookWhite2Clicked_plus8 == 1 and self.rookWhite2Clicked_plus16 == 1:
                        drawRect_add(24)
                        self.rookWhite2Clicked = 1
                        make_zero()
                if self.rw2.y < self.box33.y:
                    if self.rookWhite2Clicked_plus8 == 1 and self.rookWhite2Clicked_plus16 == 1 and self.rookWhite2Clicked_plus24 == 1:
                        drawRect_add(32)
                        self.rookWhite2Clicked = 1
                        make_zero()
                if self.rw2.y < self.box25.y:
                    if self.rookWhite2Clicked_plus8 == 1 and self.rookWhite2Clicked_plus16 == 1 and self.rookWhite2Clicked_plus24 == 1 and self.rookWhite2Clicked_plus32 == 1:
                        drawRect_add(40)
                        self.rookWhite2Clicked = 1
                        make_zero()
                if self.rw2.y < self.box17.y:
                    if self.rookWhite2Clicked_plus8 == 1 and self.rookWhite2Clicked_plus16 == 1 and self.rookWhite2Clicked_plus24 == 1 and self.rookWhite2Clicked_plus32 == 1 and \
                            self.rookWhite2Clicked_plus40 == 1:
                        drawRect_add(48)
                        self.rookWhite2Clicked = 1
                        make_zero()
                if self.rw2.y < self.box9.y:
                    if self.rookWhite2Clicked_plus8 == 1 and self.rookWhite2Clicked_plus16 == 1 and self.rookWhite2Clicked_plus24 == 1 and self.rookWhite2Clicked_plus32 == 1 and \
                            self.rookWhite2Clicked_plus40 == 1 and self.rookWhite2Clicked_plus48 == 1:
                        drawRect_add(56)
                        self.rookWhite2Clicked = 1
                        make_zero()

                if self.rw2.y > self.box1.y:
                    drawRect_sub(8)
                    self.rookWhite2Clicked = 1
                    make_zero()
                if self.rw2.y > self.box9.y:
                    if self.rookWhite2Clicked_minus8 == 1:
                        drawRect_sub(16)
                        self.rookWhite2Clicked = 1
                        make_zero()
                if self.rw2.y > self.box17.y:
                    if self.rookWhite2Clicked_minus8 == 1 and self.rookWhite2Clicked_minus16 == 1:
                        drawRect_sub(24)
                        self.rookWhite2Clicked = 1
                        make_zero()
                if self.rw2.y > self.box25.y:
                    if self.rookWhite2Clicked_minus8 == 1 and self.rookWhite2Clicked_minus16 == 1 and self.rookWhite2Clicked_minus24 == 1:
                        drawRect_sub(32)
                        self.rookWhite2Clicked = 1
                        make_zero()
                if self.rw2.y > self.box33.y:
                    if self.rookWhite2Clicked_minus8 == 1 and self.rookWhite2Clicked_minus16 == 1 and self.rookWhite2Clicked_minus24 == 1 and self.rookWhite2Clicked_minus32 == 1:
                        drawRect_sub(40)
                        self.rookWhite2Clicked = 1
                        make_zero()
                if self.rw2.y > self.box41.y:
                    if self.rookWhite2Clicked_minus8 == 1 and self.rookWhite2Clicked_minus16 == 1 and self.rookWhite2Clicked_minus24 == 1 and self.rookWhite2Clicked_minus32 == 1 and \
                            self.rookWhite2Clicked_minus40:
                        drawRect_sub(48)
                        self.rookWhite2Clicked = 1
                        make_zero()
                if self.rw2.y > self.box49.y:
                    if self.rookWhite2Clicked_minus8 == 1 and self.rookWhite2Clicked_minus16 == 1 and self.rookWhite2Clicked_minus24 == 1 and self.rookWhite2Clicked_minus32 == 1 and \
                            self.rookWhite2Clicked_minus40 and self.rookWhite2Clicked_minus48:
                        drawRect_sub(56)
                        self.rookWhite2Clicked = 1
                        make_zero()

                # along x-axis
                if self.rw2.x < self.box8.x:
                    drawRect_add(1)
                    self.rookWhite2Clicked = 1
                    make_zero()
                if self.rw2.x < self.box7.x:
                    if self.rookWhite2Clicked_plus1 == 1:
                        drawRect_add(2)
                        self.rookWhite2Clicked = 1
                        make_zero()
                if self.rw2.x < self.box6.x:
                    if self.rookWhite2Clicked_plus1 == 1 and self.rookWhite2Clicked_plus2 == 1:
                        drawRect_add(3)
                        self.rookWhite2Clicked = 1
                        make_zero()
                if self.rw2.x < self.box5.x:
                    if self.rookWhite2Clicked_plus1 == 1 and self.rookWhite2Clicked_plus2 == 1 and self.rookWhite2Clicked_plus3 == 1:
                        drawRect_add(4)
                        self.rookWhite2Clicked = 1
                        make_zero()
                if self.rw2.x < self.box4.x:
                    if self.rookWhite2Clicked_plus1 == 1 and self.rookWhite2Clicked_plus2 == 1 and self.rookWhite2Clicked_plus3 == 1 and self.rookWhite2Clicked_plus4 == 1:
                        drawRect_add(5)
                        self.rookWhite2Clicked = 1
                        make_zero()
                if self.rw2.x < self.box3.x:
                    if self.rookWhite2Clicked_plus1 == 1 and self.rookWhite2Clicked_plus2 == 1 and self.rookWhite2Clicked_plus3 == 1 and self.rookWhite2Clicked_plus4 == 1 and \
                            self.rookWhite2Clicked_plus5 == 1:
                        drawRect_add(6)
                        self.rookWhite2Clicked = 1
                        make_zero()
                if self.rw2.x < self.box2.x:
                    if self.rookWhite2Clicked_plus1 == 1 and self.rookWhite2Clicked_plus2 == 1 and self.rookWhite2Clicked_plus3 == 1 and self.rookWhite2Clicked_plus4 == 1 and \
                            self.rookWhite2Clicked_plus5 == 1 and self.rookWhite2Clicked_plus6 == 1:
                        drawRect_add(7)
                        self.rookWhite2Clicked = 1
                        make_zero()

                if self.rw2.x > self.box1.x:
                    drawRect_sub(1)
                    self.rookWhite2Clicked = 1
                    make_zero()
                if self.rw2.x > self.box2.x:
                    if self.rookWhite2Clicked_minus1 == 1:
                        drawRect_sub(2)
                        self.rookWhite2Clicked = 1
                        make_zero()
                if self.rw2.x > self.box3.x:
                    if self.rookWhite2Clicked_minus1 == 1 and self.rookWhite2Clicked_minus2 == 1:
                        drawRect_sub(3)
                        self.rookWhite2Clicked = 1
                        make_zero()
                if self.rw2.x > self.box4.x:
                    if self.rookWhite2Clicked_minus1 == 1 and self.rookWhite2Clicked_minus2 == 1 and self.rookWhite2Clicked_minus3 == 1:
                        drawRect_sub(4)
                        self.rookWhite2Clicked = 1
                        make_zero()
                if self.rw2.x > self.box5.x:
                    if self.rookWhite2Clicked_minus1 == 1 and self.rookWhite2Clicked_minus2 == 1 and self.rookWhite2Clicked_minus3 == 1 and self.rookWhite2Clicked_minus4 == 1:
                        drawRect_sub(5)
                        self.rookWhite2Clicked = 1
                        make_zero()
                if self.rw2.x > self.box6.x:
                    if self.rookWhite2Clicked_minus1 == 1 and self.rookWhite2Clicked_minus2 == 1 and self.rookWhite2Clicked_minus3 == 1 and self.rookWhite2Clicked_minus4 == 1 and \
                            self.rookWhite2Clicked_minus5 == 1:
                        drawRect_sub(6)
                        self.rookWhite2Clicked = 1
                        make_zero()
                if self.rw2.x > self.box7.x:
                    if self.rookWhite2Clicked_minus1 == 1 and self.rookWhite2Clicked_minus2 == 1 and self.rookWhite2Clicked_minus3 == 1 and self.rookWhite2Clicked_minus4 == 1 and \
                            self.rookWhite2Clicked_minus5 == 1 and self.rookWhite2Clicked_minus6 == 1:
                        drawRect_sub(7)
                        self.rookWhite2Clicked = 1
                        make_zero()

                # check if white pieces can be cut or not
                if self.rw2.y < self.box57.y:
                    cutBlackPiece_add(8)
                if self.rw2.y < self.box49.y:
                    if self.rookWhite2Clicked_plus8 == 1:
                        cutBlackPiece_add(16)
                if self.rw2.y < self.box41.y:
                    if self.rookWhite2Clicked_plus8 == 1 and self.rookWhite2Clicked_plus16 == 1:
                        cutBlackPiece_add(24)
                if self.rw2.y < self.box33.y:
                    if self.rookWhite2Clicked_plus8 == 1 and self.rookWhite2Clicked_plus16 == 1 and self.rookWhite2Clicked_plus24 == 1:
                        cutBlackPiece_add(32)
                if self.rw2.y < self.box25.y:
                    if self.rookWhite2Clicked_plus8 == 1 and self.rookWhite2Clicked_plus16 == 1 and self.rookWhite2Clicked_plus24 == 1 and self.rookWhite2Clicked_plus32 == 1:
                        cutBlackPiece_add(40)
                if self.rw2.y < self.box17.y:
                    if self.rookWhite2Clicked_plus8 == 1 and self.rookWhite2Clicked_plus16 == 1 and self.rookWhite2Clicked_plus24 == 1 and self.rookWhite2Clicked_plus32 == 1 and \
                            self.rookWhite2Clicked_plus40 == 1:
                        cutBlackPiece_add(48)
                if self.rw2.y < self.box9.y:
                    if self.rookWhite2Clicked_plus8 == 1 and self.rookWhite2Clicked_plus16 == 1 and self.rookWhite2Clicked_plus24 == 1 and self.rookWhite2Clicked_plus32 == 1 and \
                            self.rookWhite2Clicked_plus40 == 1 and self.rookWhite2Clicked_plus48 == 1:
                        cutBlackPiece_add(56)

                if self.rw2.y > self.box1.y:
                    cutBlackPiece_sub(8)
                if self.rw2.y > self.box9.y:
                    if self.rookWhite2Clicked_minus8 == 1:
                        cutBlackPiece_sub(16)
                if self.rw2.y > self.box17.y:
                    if self.rookWhite2Clicked_minus8 == 1 and self.rookWhite2Clicked_minus16 == 1:
                        cutBlackPiece_sub(24)
                if self.rw2.y > self.box25.y:
                    if self.rookWhite2Clicked_minus8 == 1 and self.rookWhite2Clicked_minus16 == 1 and self.rookWhite2Clicked_minus24 == 1:
                        cutBlackPiece_sub(32)
                if self.rw2.y > self.box33.y:
                    if self.rookWhite2Clicked_minus8 == 1 and self.rookWhite2Clicked_minus16 == 1 and self.rookWhite2Clicked_minus24 == 1 and self.rookWhite2Clicked_minus32 == 1:
                        cutBlackPiece_sub(40)
                if self.rw2.y > self.box41.y:
                    if self.rookWhite2Clicked_minus8 == 1 and self.rookWhite2Clicked_minus16 == 1 and self.rookWhite2Clicked_minus24 == 1 and self.rookWhite2Clicked_minus32 == 1 and \
                            self.rookWhite2Clicked_minus40 == 1:
                        cutBlackPiece_sub(48)
                if self.rw2.y > self.box49.y:
                    if self.rookWhite2Clicked_minus8 == 1 and self.rookWhite2Clicked_minus16 == 1 and self.rookWhite2Clicked_minus24 == 1 and self.rookWhite2Clicked_minus32 == 1 and \
                            self.rookWhite2Clicked_minus40 == 1 and self.rookWhite2Clicked_minus48 == 1:
                        cutBlackPiece_sub(56)

                if self.rw2.x < self.box8.x:
                    cutBlackPiece_add(1)
                if self.rw2.x < self.box7.x:
                    if self.rookWhite2Clicked_plus1 == 1:
                        cutBlackPiece_add(2)
                if self.rw2.x < self.box6.x:
                    if self.rookWhite2Clicked_plus1 == 1 and self.rookWhite2Clicked_plus2 == 1:
                        cutBlackPiece_add(3)
                if self.rw2.x < self.box5.x:
                    if self.rookWhite2Clicked_plus1 == 1 and self.rookWhite2Clicked_plus2 == 1 and self.rookWhite2Clicked_plus3 == 1:
                        cutBlackPiece_add(4)
                if self.rw2.x < self.box4.x:
                    if self.rookWhite2Clicked_plus1 == 1 and self.rookWhite2Clicked_plus2 == 1 and self.rookWhite2Clicked_plus3 == 1 and self.rookWhite2Clicked_plus4 == 1:
                        cutBlackPiece_add(5)
                if self.rw2.x < self.box3.x:
                    if self.rookWhite2Clicked_plus1 == 1 and self.rookWhite2Clicked_plus2 == 1 and self.rookWhite2Clicked_plus3 == 1 and self.rookWhite2Clicked_plus4 == 1 and \
                            self.rookWhite2Clicked_plus5 == 1:
                        cutBlackPiece_add(6)
                if self.rw2.x < self.box2.x:
                    if self.rookWhite2Clicked_plus1 == 1 and self.rookWhite2Clicked_plus2 == 1 and self.rookWhite2Clicked_plus3 == 1 and self.rookWhite2Clicked_plus4 == 1 and \
                            self.rookWhite2Clicked_plus5 == 1 and self.rookWhite2Clicked_plus6 == 1:
                        cutBlackPiece_add(7)

                if self.rw2.x > self.box1.x:
                    cutBlackPiece_sub(1)
                if self.rw2.x > self.box2.x:
                    if self.rookWhite2Clicked_minus1 == 1:
                        cutBlackPiece_sub(2)
                if self.rw2.x > self.box3.x:
                    if self.rookWhite2Clicked_minus1 == 1 and self.rookWhite2Clicked_minus2 == 1:
                        cutBlackPiece_sub(3)
                if self.rw2.x > self.box4.x:
                    if self.rookWhite2Clicked_minus1 == 1 and self.rookWhite2Clicked_minus2 == 1 and self.rookWhite2Clicked_minus3 == 1:
                        cutBlackPiece_sub(4)
                if self.rw2.x > self.box5.x:
                    if self.rookWhite2Clicked_minus1 == 1 and self.rookWhite2Clicked_minus2 == 1 and self.rookWhite2Clicked_minus3 == 1 and self.rookWhite2Clicked_minus4 == 1:
                        cutBlackPiece_sub(5)
                if self.rw2.x > self.box6.x:
                    if self.rookWhite2Clicked_minus1 == 1 and self.rookWhite2Clicked_minus2 == 1 and self.rookWhite2Clicked_minus3 == 1 and self.rookWhite2Clicked_minus4 == 1 and \
                            self.rookWhite2Clicked_minus5 == 1:
                        cutBlackPiece_sub(6)
                if self.rw2.x > self.box7.x:
                    if self.rookWhite2Clicked_minus1 == 1 and self.rookWhite2Clicked_minus2 == 1 and self.rookWhite2Clicked_minus3 == 1 and self.rookWhite2Clicked_minus4 == 1 and \
                            self.rookWhite2Clicked_minus5 == 1 and self.rookWhite2Clicked_minus6 == 1:
                        cutBlackPiece_sub(7)

        # move the rook
        if self.rookWhite2Clicked == 1:
            # cut the pieces
            if self.rookWhite2Clicked_cut == 1:
                # along y-axis
                if self.rw2.y < self.box57.y:
                    removeBlackPiece_add(8)
                if self.rw2.y < self.box49.y:
                    removeBlackPiece_add(16)
                if self.rw2.y < self.box41.y:
                    removeBlackPiece_add(24)
                if self.rw2.y < self.box33.y:
                    removeBlackPiece_add(32)
                if self.rw2.y < self.box25.y:
                    removeBlackPiece_add(40)
                if self.rw2.y < self.box17.y:
                    removeBlackPiece_add(48)
                if self.rw2.y < self.box9.y:
                    removeBlackPiece_add(56)

                if self.rw2.y > self.box1.y:
                    removeBlackPiece_sub(8)
                if self.rw2.y > self.box9.y:
                    removeBlackPiece_sub(16)
                if self.rw2.y > self.box17.y:
                    removeBlackPiece_sub(24)
                if self.rw2.y > self.box25.y:
                    removeBlackPiece_sub(32)
                if self.rw2.y > self.box33.y:
                    removeBlackPiece_sub(40)
                if self.rw2.y > self.box41.y:
                    removeBlackPiece_sub(48)
                if self.rw2.y > self.box49.y:
                    removeBlackPiece_sub(56)

                # along x-axis
                if self.rw2.x < self.box8.x:
                    removeBlackPiece_add(1)
                if self.rw2.x < self.box7.x:
                    removeBlackPiece_add(2)
                if self.rw2.x < self.box6.x:
                    removeBlackPiece_add(3)
                if self.rw2.x < self.box5.x:
                    removeBlackPiece_add(4)
                if self.rw2.x < self.box4.x:
                    removeBlackPiece_add(5)
                if self.rw2.x < self.box3.x:
                    removeBlackPiece_add(6)
                if self.rw2.x < self.box2.x:
                    removeBlackPiece_add(7)

                if self.rw2.x > self.box1.x:
                    removeBlackPiece_sub(1)
                if self.rw2.x > self.box2.x:
                    removeBlackPiece_sub(2)
                if self.rw2.x > self.box3.x:
                    removeBlackPiece_sub(3)
                if self.rw2.x > self.box4.x:
                    removeBlackPiece_sub(4)
                if self.rw2.x > self.box5.x:
                    removeBlackPiece_sub(5)
                if self.rw2.x > self.box6.x:
                    removeBlackPiece_sub(6)
                if self.rw2.x > self.box7.x:
                    removeBlackPiece_sub(7)

            # along y-axis(+)
            if self.rw2.y < self.box57.y:
                move(8)
            if self.rw2.y < self.box49.y:
                move(16)
            if self.rw2.y < self.box41.y:
                move(24)
            if self.rw2.y < self.box33.y:
                move(32)
            if self.rw2.y < self.box25.y:
                move(40)
            if self.rw2.y < self.box17.y:
                move(48)
            if self.rw2.y < self.box9.y:
                move(56)

            # along y-axis(-)
            if self.rw2.y > self.box1.y:
                move(-8)
            if self.rw2.y > self.box9.y:
                move(-16)
            if self.rw2.y > self.box17.y:
                move(-24)
            if self.rw2.y > self.box25.y:
                move(-32)
            if self.rw2.y > self.box33.y:
                move(-40)
            if self.rw2.y > self.box41.y:
                move(-48)
            if self.rw2.y > self.box49.y:
                move(-56)

            # along x-axis(+)
            if self.rw2.x < self.box8.x:
                move(1)
            if self.rw2.x < self.box7.x:
                move(2)
            if self.rw2.x < self.box6.x:
                move(3)
            if self.rw2.x < self.box5.x:
                move(4)
            if self.rw2.x < self.box4.x:
                move(5)
            if self.rw2.x < self.box3.x:
                move(6)
            if self.rw2.x < self.box2.x:
                move(7)

            # along x-axis(-)
            if self.rw2.x > self.box1.x:
                move(-1)
            if self.rw2.x > self.box2.x:
                move(-2)
            if self.rw2.x > self.box3.x:
                move(-3)
            if self.rw2.x > self.box4.x:
                move(-4)
            if self.rw2.x > self.box5.x:
                move(-5)
            if self.rw2.x > self.box6.x:
                move(-6)
            if self.rw2.x > self.box7.x:
                move(-7)

    def bishopW1Movements(self):
        for event in pygame.event.get():
            if event.type == pygame.MOUSEBUTTONDOWN:
                self.mouse_x, self.mouse_y = pygame.mouse.get_pos()

        def drawRect_add(num):
            if not self.boxLst[self.boxLst.index(self.bw1) + num].colliderect(self.pw1) and not \
                    self.boxLst[self.boxLst.index(self.bw1) + num].colliderect(self.pw2) and not \
                    self.boxLst[self.boxLst.index(self.bw1) + num].colliderect(self.pw3) and not \
                    self.boxLst[self.boxLst.index(self.bw1) + num].colliderect(self.pw4) and not \
                    self.boxLst[self.boxLst.index(self.bw1) + num].colliderect(self.pw5) and not \
                    self.boxLst[self.boxLst.index(self.bw1) + num].colliderect(self.pw6) and not \
                    self.boxLst[self.boxLst.index(self.bw1) + num].colliderect(self.pw7) and not \
                    self.boxLst[self.boxLst.index(self.bw1) + num].colliderect(self.pw8) and not \
                    self.boxLst[self.boxLst.index(self.bw1) + num].colliderect(self.Kw) and not \
                    self.boxLst[self.boxLst.index(self.bw1) + num].colliderect(self.Qw) and not \
                    self.boxLst[self.boxLst.index(self.bw1) + num].colliderect(self.rw1) and not \
                    self.boxLst[self.boxLst.index(self.bw1) + num].colliderect(self.rw2) and not \
                    self.boxLst[self.boxLst.index(self.bw1) + num].colliderect(self.kw1) and not \
                    self.boxLst[self.boxLst.index(self.bw1) + num].colliderect(self.kw2) and not \
                    self.boxLst[self.boxLst.index(self.bw1) + num].colliderect(self.bw2) and not \
                    self.boxLst[self.boxLst.index(self.bw1) + num].colliderect(self.pb1) and not \
                    self.boxLst[self.boxLst.index(self.bw1) + num].colliderect(self.pb2) and not \
                    self.boxLst[self.boxLst.index(self.bw1) + num].colliderect(self.pb3) and not \
                    self.boxLst[self.boxLst.index(self.bw1) + num].colliderect(self.pb4) and not \
                    self.boxLst[self.boxLst.index(self.bw1) + num].colliderect(self.pb5) and not \
                    self.boxLst[self.boxLst.index(self.bw1) + num].colliderect(self.pb6) and not \
                    self.boxLst[self.boxLst.index(self.bw1) + num].colliderect(self.pb7) and not \
                    self.boxLst[self.boxLst.index(self.bw1) + num].colliderect(self.pb8) and not \
                    self.boxLst[self.boxLst.index(self.bw1) + num].colliderect(self.Kb) and not \
                    self.boxLst[self.boxLst.index(self.bw1) + num].colliderect(self.Qb) and not \
                    self.boxLst[self.boxLst.index(self.bw1) + num].colliderect(self.kb1) and not \
                    self.boxLst[self.boxLst.index(self.bw1) + num].colliderect(self.kb2) and not \
                    self.boxLst[self.boxLst.index(self.bw1) + num].colliderect(self.rb1) and not \
                    self.boxLst[self.boxLst.index(self.bw1) + num].colliderect(self.rb2) and not \
                    self.boxLst[self.boxLst.index(self.bw1) + num].colliderect(self.bb1) and not \
                    self.boxLst[self.boxLst.index(self.bw1) + num].colliderect(self.bb2):
                pygame.draw.rect(self.window, self.blue, self.boxLst[self.boxLst.index(self.bw1) + num], border_radius=100)
                if num == 8 + 1:
                    self.bishopWhite1Clicked_plus8_plus1 = 1
                if num == 16 + 2:
                    self.bishopWhite1Clicked_plus16_plus2 = 1
                if num == 24 + 3:
                    self.bishopWhite1Clicked_plus24_plus3 = 1
                if num == 32 + 4:
                    self.bishopWhite1Clicked_plus32_plus4 = 1
                if num == 40 + 5:
                    self.bishopWhite1Clicked_plus40_plus5 = 1
                if num == 48 + 6:
                    self.bishopWhite1Clicked_plus48_plus6 = 1

                if num == 8 - 1:
                    self.bishopWhite1Clicked_plus8_minus1 = 1
                if num == 16 - 2:
                    self.bishopWhite1Clicked_plus16_minus2 = 1
                if num == 24 - 3:
                    self.bishopWhite1Clicked_plus24_minus3 = 1
                if num == 32 - 4:
                    self.bishopWhite1Clicked_plus32_minus4 = 1
                if num == 40 - 5:
                    self.bishopWhite1Clicked_plus40_minus5 = 1
                if num == 48 - 6:
                    self.bishopWhite1Clicked_plus48_minus6 = 1

                if num == -8 + 1:
                    self.bishopWhite1Clicked_minus8_plus1 = 1
                if num == -16 + 2:
                    self.bishopWhite1Clicked_minus16_plus2 = 1
                if num == -24 + 3:
                    self.bishopWhite1Clicked_minus24_plus3 = 1
                if num == -32 + 4:
                    self.bishopWhite1Clicked_minus32_plus4 = 1
                if num == -40 + 5:
                    self.bishopWhite1Clicked_minus40_plus5 = 1
                if num == -48 + 6:
                    self.bishopWhite1Clicked_minus48_plus6 = 1

                if num == -8 - 1:
                    self.bishopWhite1Clicked_minus8_minus1 = 1
                if num == -16 - 2:
                    self.bishopWhite1Clicked_minus16_minus2 = 1
                if num == -24 - 3:
                    self.bishopWhite1Clicked_minus24_minus3 = 1
                if num == -32 - 4:
                    self.bishopWhite1Clicked_minus32_minus4 = 1
                if num == -40 - 5:
                    self.bishopWhite1Clicked_minus40_minus5 = 1
                if num == -48 - 6:
                    self.bishopWhite1Clicked_minus48_minus6 = 1

        def check(num):
            if self.boxLst[self.boxLst.index(self.bw1) + num].colliderect(self.pb1) or \
                    self.boxLst[self.boxLst.index(self.bw1) + num].colliderect(self.pb2) or \
                    self.boxLst[self.boxLst.index(self.bw1) + num].colliderect(self.pb3) or \
                    self.boxLst[self.boxLst.index(self.bw1) + num].colliderect(self.pb4) or \
                    self.boxLst[self.boxLst.index(self.bw1) + num].colliderect(self.pb5) or \
                    self.boxLst[self.boxLst.index(self.bw1) + num].colliderect(self.pb6) or \
                    self.boxLst[self.boxLst.index(self.bw1) + num].colliderect(self.pb7) or \
                    self.boxLst[self.boxLst.index(self.bw1) + num].colliderect(self.pb8) or \
                    self.boxLst[self.boxLst.index(self.bw1) + num].colliderect(self.Kb) or \
                    self.boxLst[self.boxLst.index(self.bw1) + num].colliderect(self.Qb) or \
                    self.boxLst[self.boxLst.index(self.bw1) + num].colliderect(self.rb1) or \
                    self.boxLst[self.boxLst.index(self.bw1) + num].colliderect(self.rb2) or \
                    self.boxLst[self.boxLst.index(self.bw1) + num].colliderect(self.kb1) or \
                    self.boxLst[self.boxLst.index(self.bw1) + num].colliderect(self.kb2) or \
                    self.boxLst[self.boxLst.index(self.bw1) + num].colliderect(self.bb1) or \
                    self.boxLst[self.boxLst.index(self.bw1) + num].colliderect(self.bb2):
                pygame.draw.rect(self.window, self.red, self.boxLst[self.boxLst.index(self.bw1) + num], border_radius=100)
                self.bishopWhite1Clicked = 1
                self.bishopWhite2Clicked = 0
                self.rookWhite1Clicked = 0
                self.rookWhite2Clicked = 0
                self.KingWhiteClicked = 0
                self.knightWhite1Clicked = 0
                self.knightWhite2Clicked = 0
                self.pawnWhite1Clicked = 0
                self.pawnWhite2Clicked = 0
                self.pawnWhite3Clicked = 0
                self.pawnWhite4Clicked = 0
                self.pawnWhite5Clicked = 0
                self.pawnWhite6Clicked = 0
                self.pawnWhite7Clicked = 0
                self.pawnWhite8Clicked = 0
                self.QueenWhiteClicked = 0
                self.bishopWhite1Clicked_cut = 1

        def remove(num):
            if self.boxLst[self.boxLst.index(self.bw1) + num].collidepoint(self.mouse_x, self.mouse_y):
                if self.boxLst[self.boxLst.index(self.bw1) + num].colliderect(self.pb1):
                    self.pb1 = self.blackCutPiece_1
                if self.boxLst[self.boxLst.index(self.bw1) + num].colliderect(self.pb2):
                    self.pb2 = self.blackCutPiece_2
                if self.boxLst[self.boxLst.index(self.bw1) + num].colliderect(self.pb3):
                    self.pb3 = self.blackCutPiece_3
                if self.boxLst[self.boxLst.index(self.bw1) + num].colliderect(self.pb4):
                    self.pb4 = self.blackCutPiece_4
                if self.boxLst[self.boxLst.index(self.bw1) + num].colliderect(self.pb5):
                    self.pb5 = self.blackCutPiece_5
                if self.boxLst[self.boxLst.index(self.bw1) + num].colliderect(self.pb6):
                    self.pb6 = self.blackCutPiece_6
                if self.boxLst[self.boxLst.index(self.bw1) + num].colliderect(self.pb7):
                    self.pb7 = self.blackCutPiece_7
                if self.boxLst[self.boxLst.index(self.bw1) + num].colliderect(self.pb8):
                    self.pb8 = self.blackCutPiece_8
                if self.boxLst[self.boxLst.index(self.bw1) + num].colliderect(self.rb1):
                    self.rb1 = self.blackCutPiece_9
                if self.boxLst[self.boxLst.index(self.bw1) + num].colliderect(self.rb2):
                    self.rb2 = self.blackCutPiece_10
                if self.boxLst[self.boxLst.index(self.bw1) + num].colliderect(self.kb1):
                    self.kb1 = self.blackCutPiece_11
                if self.boxLst[self.boxLst.index(self.bw1) + num].colliderect(self.kb2):
                    self.kb2 = self.blackCutPiece_12
                if self.boxLst[self.boxLst.index(self.bw1) + num].colliderect(self.bb1):
                    self.bb1 = self.blackCutPiece_13
                if self.boxLst[self.boxLst.index(self.bw1) + num].colliderect(self.bb2):
                    self.bb2 = self.blackCutPiece_14
                if self.boxLst[self.boxLst.index(self.bw1) + num].colliderect(self.Kb):
                    self.Kb = self.blackCutPiece_15
                    self.KingBlack_isDead = 1
                if self.boxLst[self.boxLst.index(self.bw1) + num].colliderect(self.Qb):
                    self.Qb = self.blackCutPiece_16
                self.bw1 = self.boxLst[self.boxLst.index(self.bw1) + num]
                self.bishopWhite1Clicked = 0
                self.bishopWhite1Clicked_cut = 0
                self.turn = "black"

        def make_zero():
            self.bishopWhite2Clicked = 0
            self.rookWhite1Clicked = 0
            self.rookWhite2Clicked = 0
            self.KingWhiteClicked = 0
            self.QueenWhiteClicked = 0
            self.knightWhite1Clicked = 0
            self.knightWhite2Clicked = 0
            self.pawnWhite1Clicked = 0
            self.pawnWhite2Clicked = 0
            self.pawnWhite3Clicked = 0
            self.pawnWhite4Clicked = 0
            self.pawnWhite5Clicked = 0
            self.pawnWhite6Clicked = 0
            self.pawnWhite7Clicked = 0
            self.pawnWhite8Clicked = 0

        def move(num):
            if self.boxLst[self.boxLst.index(self.bw1) + num].collidepoint(self.mouse_x, self.mouse_y):
                self.bw1 = self.boxLst[self.boxLst.index(self.bw1) + num]
                self.bishopWhite1Clicked = 0
                self.turn = "black"

        if self.turn == "black":
            self.bishopWhite1Clicked_plus8_plus1 = 0
            self.bishopWhite1Clicked_plus16_plus2 = 0
            self.bishopWhite1Clicked_plus24_plus3 = 0
            self.bishopWhite1Clicked_plus32_plus4 = 0
            self.bishopWhite1Clicked_plus40_plus5 = 0
            self.bishopWhite1Clicked_plus48_plus6 = 0
            self.bishopWhite1Clicked_plus8_minus1 = 0
            self.bishopWhite1Clicked_plus16_minus2 = 0
            self.bishopWhite1Clicked_plus24_minus3 = 0
            self.bishopWhite1Clicked_plus32_minus4 = 0
            self.bishopWhite1Clicked_plus40_minus5 = 0
            self.bishopWhite1Clicked_plus48_minus6 = 0
            self.bishopWhite1Clicked_minus8_plus1 = 0
            self.bishopWhite1Clicked_minus16_plus2 = 0
            self.bishopWhite1Clicked_minus24_plus3 = 0
            self.bishopWhite1Clicked_minus32_plus4 = 0
            self.bishopWhite1Clicked_minus40_plus5 = 0
            self.bishopWhite1Clicked_minus48_plus6 = 0
            self.bishopWhite1Clicked_minus8_minus1 = 0
            self.bishopWhite1Clicked_minus16_minus2 = 0
            self.bishopWhite1Clicked_minus24_minus3 = 0
            self.bishopWhite1Clicked_minus32_minus4 = 0
            self.bishopWhite1Clicked_minus40_minus5 = 0
            self.bishopWhite1Clicked_minus48_minus6 = 0

        if self.turn == "white":
            if self.bw1.collidepoint(self.mouse_x, self.mouse_y):
                if self.bw1.y < self.box57.y and self.bw1.x < self.box8.x:
                    drawRect_add(8 + 1)
                    self.bishopWhite1Clicked = 1
                    make_zero()
                if self.bw1.y < self.box49.y and self.bw1.x < self.box7.x:
                    if self.bishopWhite1Clicked_plus8_plus1 == 1:
                        drawRect_add(16 + 2)
                        self.bishopWhite1Clicked = 1
                        make_zero()
                if self.bw1.y < self.box41.y and self.bw1.x < self.box6.x:
                    if self.bishopWhite1Clicked_plus8_plus1 == 1 and self.bishopWhite1Clicked_plus16_plus2 == 1:
                        drawRect_add(24 + 3)
                        self.bishopWhite1Clicked = 1
                        make_zero()
                if self.bw1.y < self.box33.y and self.bw1.x < self.box5.x:
                    if self.bishopWhite1Clicked_plus8_plus1 == 1 and self.bishopWhite1Clicked_plus16_plus2 == 1 and self.bishopWhite1Clicked_plus24_plus3 == 1:
                        drawRect_add(32 + 4)
                        self.bishopWhite1Clicked = 1
                        make_zero()
                if self.bw1.y < self.box25.y and self.bw1.x < self.box4.x:
                    if self.bishopWhite1Clicked_plus8_plus1 == 1 and self.bishopWhite1Clicked_plus16_plus2 == 1 and self.bishopWhite1Clicked_plus24_plus3 == 1 and \
                            self.bishopWhite1Clicked_plus32_plus4 == 1:
                        drawRect_add(40 + 5)
                        self.bishopWhite1Clicked = 1
                        make_zero()
                if self.bw1.y < self.box17.y and self.bw1.x < self.box3.x:
                    if self.bishopWhite1Clicked_plus8_plus1 == 1 and self.bishopWhite1Clicked_plus16_plus2 == 1 and self.bishopWhite1Clicked_plus24_plus3 == 1 and \
                            self.bishopWhite1Clicked_plus32_plus4 == 1 and self.bishopWhite1Clicked_plus40_plus5 == 1:
                        drawRect_add(48 + 6)
                        self.bishopWhite1Clicked = 1
                        make_zero()
                if self.bw1.y < self.box9.y and self.bw1.x < self.box2.x:
                    if self.bishopWhite1Clicked_plus8_plus1 == 1 and self.bishopWhite1Clicked_plus16_plus2 == 1 and self.bishopWhite1Clicked_plus24_plus3 == 1 and \
                            self.bishopWhite1Clicked_plus32_plus4 == 1 and self.bishopWhite1Clicked_plus40_plus5 == 1 and self.bishopWhite1Clicked_plus48_plus6 == 1:
                        drawRect_add(56 + 7)
                        self.bishopWhite1Clicked = 1
                        make_zero()

                if self.bw1.y < self.box57.y and self.bw1.x > self.box1.x:
                        drawRect_add(8 - 1)
                        self.bishopWhite1Clicked = 1
                        make_zero()
                if self.bw1.y < self.box49.y and self.bw1.x > self.box2.x:
                    if self.bishopWhite1Clicked_plus8_minus1 == 1:
                        drawRect_add(16 - 2)
                        self.bishopWhite1Clicked = 1
                        make_zero()
                if self.bw1.y < self.box41.y and self.bw1.x > self.box3.x:
                    if self.bishopWhite1Clicked_plus8_minus1 == 1 and self.bishopWhite1Clicked_plus16_minus2 == 1:
                        drawRect_add(24 - 3)
                        self.bishopWhite1Clicked = 1
                        make_zero()
                if self.bw1.y < self.box33.y and self.bw1.x > self.box4.x:
                    if self.bishopWhite1Clicked_plus8_minus1 == 1 and self.bishopWhite1Clicked_plus16_minus2 == 1 and self.bishopWhite1Clicked_plus24_minus3 == 1:
                        drawRect_add(32 - 4)
                        self.bishopWhite1Clicked = 1
                        make_zero()
                if self.bw1.y < self.box25.y and self.bw1.x > self.box5.x:
                    if self.bishopWhite1Clicked_plus8_minus1 == 1 and self.bishopWhite1Clicked_plus16_minus2 == 1 and self.bishopWhite1Clicked_plus24_minus3 == 1 and \
                            self.bishopWhite1Clicked_plus32_minus4 == 1:
                        drawRect_add(40 - 5)
                        self.bishopWhite1Clicked = 1
                        make_zero()
                if self.bw1.y < self.box17.y and self.bw1.x > self.box6.x:
                    if self.bishopWhite1Clicked_plus8_minus1 == 1 and self.bishopWhite1Clicked_plus16_minus2 == 1 and self.bishopWhite1Clicked_plus24_minus3 == 1 and \
                            self.bishopWhite1Clicked_plus32_minus4 == 1 and self.bishopWhite1Clicked_plus40_minus5 == 1:
                        drawRect_add(48 - 6)
                        self.bishopWhite1Clicked = 1
                        make_zero()
                if self.bw1.y < self.box9.y and self.bw1.x > self.box7.x:
                    if self.bishopWhite1Clicked_plus8_minus1 == 1 and self.bishopWhite1Clicked_plus16_minus2 == 1 and self.bishopWhite1Clicked_plus24_minus3 == 1 and \
                            self.bishopWhite1Clicked_plus32_minus4 == 1 and self.bishopWhite1Clicked_plus40_minus5 == 1 and self.bishopWhite1Clicked_plus48_minus6 == 1:
                        drawRect_add(56 - 7)
                        self.bishopWhite1Clicked = 1
                        make_zero()

                if self.bw1.y > self.box1.y and self.bw1.x < self.box8.x:
                        drawRect_add(-8 + 1)
                        self.bishopWhite1Clicked = 1
                        make_zero()
                if self.bw1.y > self.box9.y and self.bw1.x < self.box7.x:
                    if self.bishopWhite1Clicked_minus8_plus1 == 1:
                        drawRect_add(-16 + 2)
                        self.bishopWhite1Clicked = 1
                        make_zero()
                if self.bw1.y > self.box17.y and self.bw1.x < self.box6.x:
                    if self.bishopWhite1Clicked_minus8_plus1 == 1 and self.bishopWhite1Clicked_minus16_plus2 == 1:
                        drawRect_add(-24 + 3)
                        self.bishopWhite1Clicked = 1
                        make_zero()
                if self.bw1.y > self.box25.y and self.bw1.x < self.box5.x:
                    if self.bishopWhite1Clicked_minus8_plus1 == 1 and self.bishopWhite1Clicked_minus16_plus2 == 1 and self.bishopWhite1Clicked_minus24_plus3 == 1:
                        drawRect_add(-32 + 4)
                        self.bishopWhite1Clicked = 1
                        make_zero()
                if self.bw1.y > self.box33.y and self.bw1.x < self.box4.x:
                    if self.bishopWhite1Clicked_minus8_plus1 == 1 and self.bishopWhite1Clicked_minus16_plus2 == 1 and self.bishopWhite1Clicked_minus24_plus3 == 1 and \
                            self.bishopWhite1Clicked_minus32_plus4 == 1:
                        drawRect_add(-40 + 5)
                        self.bishopWhite1Clicked = 1
                        make_zero()
                if self.bw1.y > self.box41.y and self.bw1.x < self.box3.x:
                    if self.bishopWhite1Clicked_minus8_plus1 == 1 and self.bishopWhite1Clicked_minus16_plus2 == 1 and self.bishopWhite1Clicked_minus24_plus3 == 1 and \
                            self.bishopWhite1Clicked_minus32_plus4 == 1 and self.bishopWhite1Clicked_minus40_plus5 == 1:
                        drawRect_add(-48 + 6)
                        self.bishopWhite1Clicked = 1
                        make_zero()
                if self.bw1.y > self.box49.y and self.bw1.x < self.box2.x:
                    if self.bishopWhite1Clicked_minus8_plus1 == 1 and self.bishopWhite1Clicked_minus16_plus2 == 1 and self.bishopWhite1Clicked_minus24_plus3 == 1 and \
                            self.bishopWhite1Clicked_minus32_plus4 == 1 and self.bishopWhite1Clicked_minus40_plus5 == 1 and self.bishopWhite1Clicked_minus48_plus6 == 1:
                        drawRect_add(-56 + 7)
                        self.bishopWhite1Clicked = 1
                        make_zero()

                if self.bw1.y > self.box1.y and self.bw1.x > self.box1.x:
                        drawRect_add(-8 - 1)
                        self.bishopWhite1Clicked = 1
                        make_zero()
                if self.bw1.y > self.box9.y and self.bw1.x > self.box2.x:
                    if self.bishopWhite1Clicked_minus8_minus1 == 1:
                        drawRect_add(-16 - 2)
                        self.bishopWhite1Clicked = 1
                        make_zero()
                if self.bw1.y > self.box17.y and self.bw1.x > self.box3.x:
                    if self.bishopWhite1Clicked_minus8_minus1 == 1 and self.bishopWhite1Clicked_minus16_minus2 == 1:
                        drawRect_add(-24 - 3)
                        self.bishopWhite1Clicked = 1
                        make_zero()
                if self.bw1.y > self.box25.y and self.bw1.x > self.box4.x:
                    if self.bishopWhite1Clicked_minus8_minus1 == 1 and self.bishopWhite1Clicked_minus16_minus2 == 1 and self.bishopWhite1Clicked_minus24_minus3 == 1:
                        drawRect_add(-32 - 4)
                        self.bishopWhite1Clicked = 1
                        make_zero()
                if self.bw1.y > self.box33.y and self.bw1.x > self.box5.x:
                    if self.bishopWhite1Clicked_minus8_minus1 == 1 and self.bishopWhite1Clicked_minus16_minus2 == 1 and self.bishopWhite1Clicked_minus24_minus3 == 1 and \
                            self.bishopWhite1Clicked_minus32_minus4 == 1:
                        drawRect_add(-40 - 5)
                        self.bishopWhite1Clicked = 1
                        make_zero()
                if self.bw1.y > self.box41.y and self.bw1.x > self.box6.x:
                    if self.bishopWhite1Clicked_minus8_minus1 == 1 and self.bishopWhite1Clicked_minus16_minus2 == 1 and self.bishopWhite1Clicked_minus24_minus3 == 1 and \
                            self.bishopWhite1Clicked_minus32_minus4 == 1 and self.bishopWhite1Clicked_minus40_minus5 == 1:
                        drawRect_add(-48 - 6)
                        self.bishopWhite1Clicked = 1
                        make_zero()
                if self.bw1.y > self.box49.y and self.bw1.x > self.box7.x:
                    if self.bishopWhite1Clicked_minus8_minus1 == 1 and self.bishopWhite1Clicked_minus16_minus2 == 1 and self.bishopWhite1Clicked_minus24_minus3 == 1 and \
                            self.bishopWhite1Clicked_minus32_minus4 == 1 and self.bishopWhite1Clicked_minus40_minus5 == 1 and self.bishopWhite1Clicked_minus48_minus6 == 1:
                        drawRect_add(-56 - 7)
                        self.bishopWhite1Clicked = 1
                        make_zero()

                # check if white pieces can be cut or not
                if self.bw1.y < self.box57.y and self.bw1.x < self.box8.x:
                    check(8 + 1)
                if self.bw1.y < self.box49.y and self.bw1.x < self.box7.x:
                    if self.bishopWhite1Clicked_plus8_plus1 == 1:
                        check(16 + 2)
                if self.bw1.y < self.box41.y and self.bw1.x < self.box6.x:
                    if self.bishopWhite1Clicked_plus8_plus1 == 1 and self.bishopWhite1Clicked_plus16_plus2 == 1:
                        check(24 + 3)
                if self.bw1.y < self.box33.y and self.bw1.x < self.box5.x:
                    if self.bishopWhite1Clicked_plus8_plus1 == 1 and self.bishopWhite1Clicked_plus16_plus2 == 1 and self.bishopWhite1Clicked_plus24_plus3 == 1:
                        check(32 + 4)
                if self.bw1.y < self.box25.y and self.bw1.x < self.box4.x:
                    if self.bishopWhite1Clicked_plus8_plus1 == 1 and self.bishopWhite1Clicked_plus16_plus2 == 1 and self.bishopWhite1Clicked_plus24_plus3 == 1 and \
                            self.bishopWhite1Clicked_plus32_plus4 == 1:
                        check(40 + 5)
                if self.bw1.y < self.box17.y and self.bw1.x < self.box3.x:
                    if self.bishopWhite1Clicked_plus8_plus1 == 1 and self.bishopWhite1Clicked_plus16_plus2 == 1 and self.bishopWhite1Clicked_plus24_plus3 == 1 and \
                            self.bishopWhite1Clicked_plus32_plus4 == 1 and self.bishopWhite1Clicked_plus40_plus5 == 1:
                        check(48 + 6)
                if self.bw1.y < self.box9.y and self.bw1.x < self.box2.x:
                    if self.bishopWhite1Clicked_plus8_plus1 == 1 and self.bishopWhite1Clicked_plus16_plus2 == 1 and self.bishopWhite1Clicked_plus24_plus3 == 1 and \
                            self.bishopWhite1Clicked_plus32_plus4 == 1 and self.bishopWhite1Clicked_plus40_plus5 == 1 and self.bishopWhite1Clicked_plus48_plus6 == 1:
                        check(56 + 7)

                if self.bw1.y < self.box57.y and self.bw1.x > self.box1.x:
                    check(8 - 1)
                if self.bw1.y < self.box49.y and self.bw1.x > self.box2.x:
                    if self.bishopWhite1Clicked_plus8_minus1 == 1:
                        check(16 - 2)
                if self.bw1.y < self.box41.y and self.bw1.x > self.box3.x:
                    if self.bishopWhite1Clicked_plus8_minus1 == 1 and self.bishopWhite1Clicked_plus16_minus2 == 1:
                        check(24 - 3)
                if self.bw1.y < self.box33.y and self.bw1.x > self.box4.x:
                    if self.bishopWhite1Clicked_plus8_minus1 == 1 and self.bishopWhite1Clicked_plus16_minus2 == 1 and self.bishopWhite1Clicked_plus24_minus3 == 1:
                        check(32 - 4)
                if self.bw1.y < self.box25.y and self.bw1.x > self.box5.x:
                    if self.bishopWhite1Clicked_plus8_minus1 == 1 and self.bishopWhite1Clicked_plus16_minus2 == 1 and self.bishopWhite1Clicked_plus24_minus3 == 1 and \
                            self.bishopWhite1Clicked_plus32_minus4 == 1:
                        check(40 - 5)
                if self.bw1.y < self.box17.y and self.bw1.x > self.box6.x:
                    if self.bishopWhite1Clicked_plus8_minus1 == 1 and self.bishopWhite1Clicked_plus16_minus2 == 1 and self.bishopWhite1Clicked_plus24_minus3 == 1 and \
                            self.bishopWhite1Clicked_plus32_minus4 == 1 and self.bishopWhite1Clicked_plus40_minus5 == 1:
                        check(48 - 6)
                if self.bw1.y < self.box9.y and self.bw1.x > self.box7.x:
                    if self.bishopWhite1Clicked_plus8_minus1 == 1 and self.bishopWhite1Clicked_plus16_minus2 == 1 and self.bishopWhite1Clicked_plus24_minus3 == 1 and \
                            self.bishopWhite1Clicked_plus32_minus4 == 1 and self.bishopWhite1Clicked_plus40_minus5 == 1 and self.bishopWhite1Clicked_plus48_minus6 == 1:
                        check(56 - 7)

                if self.bw1.y > self.box1.y and self.bw1.x < self.box8.x:
                    check(-8 + 1)
                if self.bw1.y > self.box9.y and self.bw1.x < self.box7.x:
                    if self.bishopWhite1Clicked_minus8_plus1 == 1:
                        check(-16 + 2)
                if self.bw1.y > self.box17.y and self.bw1.x < self.box6.x:
                    if self.bishopWhite1Clicked_minus8_plus1 == 1 and self.bishopWhite1Clicked_minus16_plus2 == 1:
                        check(-24 + 3)
                if self.bw1.y > self.box25.y and self.bw1.x < self.box5.x:
                    if self.bishopWhite1Clicked_minus8_plus1 == 1 and self.bishopWhite1Clicked_minus16_plus2 == 1 and self.bishopWhite1Clicked_minus24_plus3 == 1:
                        check(-32 + 4)
                if self.bw1.y > self.box33.y and self.bw1.x < self.box4.x:
                    if self.bishopWhite1Clicked_minus8_plus1 == 1 and self.bishopWhite1Clicked_minus16_plus2 == 1 and self.bishopWhite1Clicked_minus24_plus3 == 1 and \
                            self.bishopWhite1Clicked_minus32_plus4 == 1:
                        check(-40 + 5)
                if self.bw1.y > self.box41.y and self.bw1.x < self.box3.x:
                    if self.bishopWhite1Clicked_minus8_plus1 == 1 and self.bishopWhite1Clicked_minus16_plus2 == 1 and self.bishopWhite1Clicked_minus24_plus3 == 1 and \
                            self.bishopWhite1Clicked_minus32_plus4 == 1 and self.bishopWhite1Clicked_minus40_plus5 == 1:
                        check(-48 + 6)
                if self.bw1.y > self.box49.y and self.bw1.x < self.box2.x:
                    if self.bishopWhite1Clicked_minus8_plus1 == 1 and self.bishopWhite1Clicked_minus16_plus2 == 1 and self.bishopWhite1Clicked_minus24_plus3 == 1 and \
                            self.bishopWhite1Clicked_minus32_plus4 == 1 and self.bishopWhite1Clicked_minus40_plus5 == 1 and self.bishopWhite1Clicked_minus48_plus6 == 1:
                        check(-56 + 7)

                if self.bw1.y > self.box1.y and self.bw1.x > self.box1.x:
                    check(-8 - 1)
                if self.bw1.y > self.box9.y and self.bw1.x > self.box2.x:
                    if self.bishopWhite1Clicked_minus8_minus1 == 1:
                        check(-16 - 2)
                if self.bw1.y > self.box17.y and self.bw1.x > self.box3.x:
                    if self.bishopWhite1Clicked_minus8_minus1 == 1 and self.bishopWhite1Clicked_minus16_minus2 == 1:
                        check(-24 - 3)
                if self.bw1.y > self.box25.y and self.bw1.x > self.box4.x:
                    if self.bishopWhite1Clicked_minus8_minus1 == 1 and self.bishopWhite1Clicked_minus16_minus2 == 1 and self.bishopWhite1Clicked_minus24_minus3 == 1:
                        check(-32 - 4)
                if self.bw1.y > self.box33.y and self.bw1.x > self.box5.x:
                    if self.bishopWhite1Clicked_minus8_minus1 == 1 and self.bishopWhite1Clicked_minus16_minus2 == 1 and self.bishopWhite1Clicked_minus24_minus3 == 1 and \
                            self.bishopWhite1Clicked_minus32_minus4 == 1:
                        check(-40 - 5)
                if self.bw1.y > self.box41.y and self.bw1.x > self.box6.x:
                    if self.bishopWhite1Clicked_minus8_minus1 == 1 and self.bishopWhite1Clicked_minus16_minus2 == 1 and self.bishopWhite1Clicked_minus24_minus3 == 1 and \
                            self.bishopWhite1Clicked_minus32_minus4 == 1 and self.bishopWhite1Clicked_minus40_minus5 == 1:
                        check(-48 - 6)
                if self.bw1.y > self.box49.y and self.bw1.x > self.box7.x:
                    if self.bishopWhite1Clicked_minus8_minus1 == 1 and self.bishopWhite1Clicked_minus16_minus2 == 1 and self.bishopWhite1Clicked_minus24_minus3 == 1 and \
                            self.bishopWhite1Clicked_minus32_minus4 == 1 and self.bishopWhite1Clicked_minus40_minus5 == 1 and self.bishopWhite1Clicked_minus48_minus6 == 1:
                        check(-56 - 7)

        # what will happen if bishop is clicked
        if self.bishopWhite1Clicked == 1:

            # remove the white pieces
            if self.bishopWhite1Clicked_cut == 1:
                if self.bw1.y < self.box57.y and self.bw1.x < self.box8.x:
                    remove(8 + 1)
                if self.bw1.y < self.box49.y and self.bw1.x < self.box7.x:
                    remove(16 + 2)
                if self.bw1.y < self.box41.y and self.bw1.x < self.box6.x:
                    remove(24 + 3)
                if self.bw1.y < self.box33.y and self.bw1.x < self.box5.x:
                    remove(32 + 4)
                if self.bw1.y < self.box25.y and self.bw1.x < self.box4.x:
                    remove(40 + 5)
                if self.bw1.y < self.box17.y and self.bw1.x < self.box3.x:
                    remove(48 + 6)
                if self.bw1.y < self.box9.y and self.bw1.x < self.box2.x:
                    remove(56 + 7)

                if self.bw1.y < self.box57.y and self.bw1.x > self.box1.x:
                    remove(8 - 1)
                if self.bw1.y < self.box49.y and self.bw1.x > self.box2.x:
                    remove(16 - 2)
                if self.bw1.y < self.box41.y and self.bw1.x > self.box3.x:
                    remove(24 - 3)
                if self.bw1.y < self.box33.y and self.bw1.x > self.box4.x:
                    remove(32 - 4)
                if self.bw1.y < self.box25.y and self.bw1.x > self.box5.x:
                    remove(40 - 5)
                if self.bw1.y < self.box17.y and self.bw1.x > self.box6.x:
                    remove(48 - 6)
                if self.bw1.y < self.box9.y and self.bw1.x > self.box7.x:
                    remove(56 - 7)

                if self.bw1.y > self.box1.y and self.bw1.x < self.box8.x:
                    remove(-8 + 1)
                if self.bw1.y > self.box9.y and self.bw1.x < self.box7.x:
                    remove(-16 + 2)
                if self.bw1.y > self.box17.y and self.bw1.x < self.box6.x:
                    remove(-24 + 3)
                if self.bw1.y > self.box25.y and self.bw1.x < self.box5.x:
                    remove(-32 + 4)
                if self.bw1.y > self.box33.y and self.bw1.x < self.box4.x:
                    remove(-40 + 5)
                if self.bw1.y > self.box41.y and self.bw1.x < self.box3.x:
                    remove(-48 + 6)
                if self.bw1.y > self.box49.y and self.bw1.x < self.box2.x:
                    remove(-56 + 7)

                if self.bw1.y > self.box1.y and self.bw1.x > self.box1.x:
                    remove(-8 - 1)
                if self.bw1.y > self.box9.y and self.bw1.x > self.box2.x:
                    remove(-16 - 2)
                if self.bw1.y > self.box17.y and self.bw1.x > self.box3.x:
                    remove(-24 - 3)
                if self.bw1.y > self.box25.y and self.bw1.x > self.box4.x:
                    remove(-32 - 4)
                if self.bw1.y > self.box33.y and self.bw1.x > self.box5.x:
                    remove(-40 - 5)
                if self.bw1.y > self.box41.y and self.bw1.x > self.box6.x:
                    remove(-48 - 6)
                if self.bw1.y > self.box49.y and self.bw1.x > self.box7.x:
                    remove(-56 - 7)

            if self.bw1.y < self.box57.y and self.bw1.x < self.box8.x:
                move(8 + 1)
            if self.bw1.y < self.box49.y and self.bw1.x < self.box7.x:
                move(16 + 2)
            if self.bw1.y < self.box41.y and self.bw1.x < self.box6.x:
                move(24 + 3)
            if self.bw1.y < self.box33.y and self.bw1.x < self.box5.x:
                move(32 + 4)
            if self.bw1.y < self.box25.y and self.bw1.x < self.box4.x:
                move(40 + 5)
            if self.bw1.y < self.box17.y and self.bw1.x < self.box3.x:
                move(48 + 6)
            if self.bw1.y < self.box9.y and self.bw1.x < self.box2.x:
                move(56 + 7)

            if self.bw1.y < self.box57.y and self.bw1.x > self.box1.x:
                move(8 - 1)
            if self.bw1.y < self.box49.y and self.bw1.x > self.box2.x:
                move(16 - 2)
            if self.bw1.y < self.box41.y and self.bw1.x > self.box3.x:
                move(24 - 3)
            if self.bw1.y < self.box33.y and self.bw1.x > self.box4.x:
                move(32 - 4)
            if self.bw1.y < self.box25.y and self.bw1.x > self.box5.x:
                move(40 - 5)
            if self.bw1.y < self.box17.y and self.bw1.x > self.box6.x:
                move(48 - 6)
            if self.bw1.y < self.box9.y and self.bw1.x > self.box7.x:
                move(56 - 7)

            if self.bw1.y > self.box1.y and self.bw1.x < self.box8.x:
                move(-8 + 1)
            if self.bw1.y > self.box9.y and self.bw1.x < self.box7.x:
                move(-16 + 2)
            if self.bw1.y > self.box17.y and self.bw1.x < self.box6.x:
                move(-24 + 3)
            if self.bw1.y > self.box25.y and self.bw1.x < self.box5.x:
                move(-32 + 4)
            if self.bw1.y > self.box33.y and self.bw1.x < self.box4.x:
                move(-40 + 5)
            if self.bw1.y > self.box41.y and self.bw1.x < self.box3.x:
                move(-48 + 6)
            if self.bw1.y > self.box49.y and self.bw1.x < self.box2.x:
                move(-56 + 7)

            if self.bw1.y > self.box1.y and self.bw1.x > self.box1.x:
                move(-8 - 1)
            if self.bw1.y > self.box9.y and self.bw1.x > self.box2.x:
                move(-16 - 2)
            if self.bw1.y > self.box17.y and self.bw1.x > self.box3.x:
                move(-24 - 3)
            if self.bw1.y > self.box25.y and self.bw1.x > self.box4.x:
                move(-32 - 4)
            if self.bw1.y > self.box33.y and self.bw1.x > self.box5.x:
                move(-40 - 5)
            if self.bw1.y > self.box41.y and self.bw1.x > self.box6.x:
                move(-48 - 6)
            if self.bw1.y > self.box49.y and self.bw1.x > self.box7.x:
                move(-56 - 7)

    def bishopW2Movements(self):
        for event in pygame.event.get():
            if event.type == pygame.MOUSEBUTTONDOWN:
                self.mouse_x, self.mouse_y = pygame.mouse.get_pos()

        def drawRect_add(num):
            if not self.boxLst[self.boxLst.index(self.bw2) + num].colliderect(self.pw1) and not \
                    self.boxLst[self.boxLst.index(self.bw2) + num].colliderect(self.pw2) and not \
                    self.boxLst[self.boxLst.index(self.bw2) + num].colliderect(self.pw3) and not \
                    self.boxLst[self.boxLst.index(self.bw2) + num].colliderect(self.pw4) and not \
                    self.boxLst[self.boxLst.index(self.bw2) + num].colliderect(self.pw5) and not \
                    self.boxLst[self.boxLst.index(self.bw2) + num].colliderect(self.pw6) and not \
                    self.boxLst[self.boxLst.index(self.bw2) + num].colliderect(self.pw7) and not \
                    self.boxLst[self.boxLst.index(self.bw2) + num].colliderect(self.pw8) and not \
                    self.boxLst[self.boxLst.index(self.bw2) + num].colliderect(self.Kw) and not \
                    self.boxLst[self.boxLst.index(self.bw2) + num].colliderect(self.Qw) and not \
                    self.boxLst[self.boxLst.index(self.bw2) + num].colliderect(self.rw1) and not \
                    self.boxLst[self.boxLst.index(self.bw2) + num].colliderect(self.rw2) and not \
                    self.boxLst[self.boxLst.index(self.bw2) + num].colliderect(self.kw1) and not \
                    self.boxLst[self.boxLst.index(self.bw2) + num].colliderect(self.kw2) and not \
                    self.boxLst[self.boxLst.index(self.bw2) + num].colliderect(self.bw1) and not \
                    self.boxLst[self.boxLst.index(self.bw2) + num].colliderect(self.pb1) and not \
                    self.boxLst[self.boxLst.index(self.bw2) + num].colliderect(self.pb2) and not \
                    self.boxLst[self.boxLst.index(self.bw2) + num].colliderect(self.pb3) and not \
                    self.boxLst[self.boxLst.index(self.bw2) + num].colliderect(self.pb4) and not \
                    self.boxLst[self.boxLst.index(self.bw2) + num].colliderect(self.pb5) and not \
                    self.boxLst[self.boxLst.index(self.bw2) + num].colliderect(self.pb6) and not \
                    self.boxLst[self.boxLst.index(self.bw2) + num].colliderect(self.pb7) and not \
                    self.boxLst[self.boxLst.index(self.bw2) + num].colliderect(self.pb8) and not \
                    self.boxLst[self.boxLst.index(self.bw2) + num].colliderect(self.Kb) and not \
                    self.boxLst[self.boxLst.index(self.bw2) + num].colliderect(self.Qb) and not \
                    self.boxLst[self.boxLst.index(self.bw2) + num].colliderect(self.kb1) and not \
                    self.boxLst[self.boxLst.index(self.bw2) + num].colliderect(self.kb2) and not \
                    self.boxLst[self.boxLst.index(self.bw2) + num].colliderect(self.rb1) and not \
                    self.boxLst[self.boxLst.index(self.bw2) + num].colliderect(self.rb2) and not \
                    self.boxLst[self.boxLst.index(self.bw2) + num].colliderect(self.bb1) and not \
                    self.boxLst[self.boxLst.index(self.bw2) + num].colliderect(self.bb2):
                pygame.draw.rect(self.window, self.blue, self.boxLst[self.boxLst.index(self.bw2) + num], border_radius=100)
                if num == 8 + 1:
                    self.bishopWhite2Clicked_plus8_plus1 = 1
                if num == 16 + 2:
                    self.bishopWhite2Clicked_plus16_plus2 = 1
                if num == 24 + 3:
                    self.bishopWhite2Clicked_plus24_plus3 = 1
                if num == 32 + 4:
                    self.bishopWhite2Clicked_plus32_plus4 = 1
                if num == 40 + 5:
                    self.bishopWhite2Clicked_plus40_plus5 = 1
                if num == 48 + 6:
                    self.bishopWhite2Clicked_plus48_plus6 = 1

                if num == 8 - 1:
                    self.bishopWhite2Clicked_plus8_minus1 = 1
                if num == 16 - 2:
                    self.bishopWhite2Clicked_plus16_minus2 = 1
                if num == 24 - 3:
                    self.bishopWhite2Clicked_plus24_minus3 = 1
                if num == 32 - 4:
                    self.bishopWhite2Clicked_plus32_minus4 = 1
                if num == 40 - 5:
                    self.bishopWhite2Clicked_plus40_minus5 = 1
                if num == 48 - 6:
                    self.bishopWhite2Clicked_plus48_minus6 = 1

                if num == -8 + 1:
                    self.bishopWhite2Clicked_minus8_plus1 = 1
                if num == -16 + 2:
                    self.bishopWhite2Clicked_minus16_plus2 = 1
                if num == -24 + 3:
                    self.bishopWhite2Clicked_minus24_plus3 = 1
                if num == -32 + 4:
                    self.bishopWhite2Clicked_minus32_plus4 = 1
                if num == -40 + 5:
                    self.bishopWhite2Clicked_minus40_plus5 = 1
                if num == -48 + 6:
                    self.bishopWhite2Clicked_minus48_plus6 = 1

                if num == -8 - 1:
                    self.bishopWhite2Clicked_minus8_minus1 = 1
                if num == -16 - 2:
                    self.bishopWhite2Clicked_minus16_minus2 = 1
                if num == -24 - 3:
                    self.bishopWhite2Clicked_minus24_minus3 = 1
                if num == -32 - 4:
                    self.bishopWhite2Clicked_minus32_minus4 = 1
                if num == -40 - 5:
                    self.bishopWhite2Clicked_minus40_minus5 = 1
                if num == -48 - 6:
                    self.bishopWhite2Clicked_minus48_minus6 = 1

        def check(num):
            if self.boxLst[self.boxLst.index(self.bw2) + num].colliderect(self.pb1) or \
                    self.boxLst[self.boxLst.index(self.bw2) + num].colliderect(self.pb2) or \
                    self.boxLst[self.boxLst.index(self.bw2) + num].colliderect(self.pb3) or \
                    self.boxLst[self.boxLst.index(self.bw2) + num].colliderect(self.pb4) or \
                    self.boxLst[self.boxLst.index(self.bw2) + num].colliderect(self.pb5) or \
                    self.boxLst[self.boxLst.index(self.bw2) + num].colliderect(self.pb6) or \
                    self.boxLst[self.boxLst.index(self.bw2) + num].colliderect(self.pb7) or \
                    self.boxLst[self.boxLst.index(self.bw2) + num].colliderect(self.pb8) or \
                    self.boxLst[self.boxLst.index(self.bw2) + num].colliderect(self.Kb) or \
                    self.boxLst[self.boxLst.index(self.bw2) + num].colliderect(self.Qb) or \
                    self.boxLst[self.boxLst.index(self.bw2) + num].colliderect(self.rb1) or \
                    self.boxLst[self.boxLst.index(self.bw2) + num].colliderect(self.rb2) or \
                    self.boxLst[self.boxLst.index(self.bw2) + num].colliderect(self.kb1) or \
                    self.boxLst[self.boxLst.index(self.bw2) + num].colliderect(self.kb2) or \
                    self.boxLst[self.boxLst.index(self.bw2) + num].colliderect(self.bb1) or \
                    self.boxLst[self.boxLst.index(self.bw2) + num].colliderect(self.bb2):
                pygame.draw.rect(self.window, self.red, self.boxLst[self.boxLst.index(self.bw2) + num], border_radius=100)
                self.bishopWhite2Clicked = 1
                self.bishopWhite1Clicked = 0
                self.rookWhite1Clicked = 0
                self.rookWhite2Clicked = 0
                self.KingWhiteClicked = 0
                self.knightWhite1Clicked = 0
                self.knightWhite2Clicked = 0
                self.pawnWhite1Clicked = 0
                self.pawnWhite2Clicked = 0
                self.pawnWhite3Clicked = 0
                self.pawnWhite4Clicked = 0
                self.pawnWhite5Clicked = 0
                self.pawnWhite6Clicked = 0
                self.pawnWhite7Clicked = 0
                self.pawnWhite8Clicked = 0
                self.QueenWhiteClicked = 0
                self.bishopWhite2Clicked_cut = 1

        def remove(num):
            if self.boxLst[self.boxLst.index(self.bw2) + num].collidepoint(self.mouse_x, self.mouse_y):
                if self.boxLst[self.boxLst.index(self.bw2) + num].colliderect(self.pb1):
                    self.pb1 = self.blackCutPiece_1
                if self.boxLst[self.boxLst.index(self.bw2) + num].colliderect(self.pb2):
                    self.pb2 = self.blackCutPiece_2
                if self.boxLst[self.boxLst.index(self.bw2) + num].colliderect(self.pb3):
                    self.pb3 = self.blackCutPiece_3
                if self.boxLst[self.boxLst.index(self.bw2) + num].colliderect(self.pb4):
                    self.pb4 = self.blackCutPiece_4
                if self.boxLst[self.boxLst.index(self.bw2) + num].colliderect(self.pb5):
                    self.pb5 = self.blackCutPiece_5
                if self.boxLst[self.boxLst.index(self.bw2) + num].colliderect(self.pb6):
                    self.pb6 = self.blackCutPiece_6
                if self.boxLst[self.boxLst.index(self.bw2) + num].colliderect(self.pb7):
                    self.pb7 = self.blackCutPiece_7
                if self.boxLst[self.boxLst.index(self.bw2) + num].colliderect(self.pb8):
                    self.pb8 = self.blackCutPiece_8
                if self.boxLst[self.boxLst.index(self.bw2) + num].colliderect(self.rb1):
                    self.rb1 = self.blackCutPiece_9
                if self.boxLst[self.boxLst.index(self.bw2) + num].colliderect(self.rb2):
                    self.rb2 = self.blackCutPiece_10
                if self.boxLst[self.boxLst.index(self.bw2) + num].colliderect(self.kb1):
                    self.kb1 = self.blackCutPiece_11
                if self.boxLst[self.boxLst.index(self.bw2) + num].colliderect(self.kb2):
                    self.kb2 = self.blackCutPiece_12
                if self.boxLst[self.boxLst.index(self.bw2) + num].colliderect(self.bb1):
                    self.bb1 = self.blackCutPiece_13
                if self.boxLst[self.boxLst.index(self.bw2) + num].colliderect(self.bb2):
                    self.bb2 = self.blackCutPiece_14
                if self.boxLst[self.boxLst.index(self.bw2) + num].colliderect(self.Kb):
                    self.Kb = self.blackCutPiece_15
                    self.KingBlack_isDead = 1
                if self.boxLst[self.boxLst.index(self.bw2) + num].colliderect(self.Qb):
                    self.Qb = self.blackCutPiece_16
                self.bw2 = self.boxLst[self.boxLst.index(self.bw2) + num]
                self.bishopWhite2Clicked = 0
                self.bishopWhite2Clicked_cut = 0
                self.turn = "black"

        def make_zero():
            self.bishopWhite1Clicked = 0
            self.rookWhite1Clicked = 0
            self.rookWhite2Clicked = 0
            self.KingWhiteClicked = 0
            self.QueenWhiteClicked = 0
            self.knightWhite1Clicked = 0
            self.knightWhite2Clicked = 0
            self.pawnWhite1Clicked = 0
            self.pawnWhite2Clicked = 0
            self.pawnWhite3Clicked = 0
            self.pawnWhite4Clicked = 0
            self.pawnWhite5Clicked = 0
            self.pawnWhite6Clicked = 0
            self.pawnWhite7Clicked = 0
            self.pawnWhite8Clicked = 0

        def move(num):
            if self.boxLst[self.boxLst.index(self.bw2) + num].collidepoint(self.mouse_x, self.mouse_y):
                self.bw2 = self.boxLst[self.boxLst.index(self.bw2) + num]
                self.bishopWhite2Clicked = 0
                self.turn = "black"

        if self.turn == "black":
            self.bishopWhite2Clicked_plus8_plus1 = 0
            self.bishopWhite2Clicked_plus16_plus2 = 0
            self.bishopWhite2Clicked_plus24_plus3 = 0
            self.bishopWhite2Clicked_plus32_plus4 = 0
            self.bishopWhite2Clicked_plus40_plus5 = 0
            self.bishopWhite2Clicked_plus48_plus6 = 0
            self.bishopWhite2Clicked_plus8_minus1 = 0
            self.bishopWhite2Clicked_plus16_minus2 = 0
            self.bishopWhite2Clicked_plus24_minus3 = 0
            self.bishopWhite2Clicked_plus32_minus4 = 0
            self.bishopWhite2Clicked_plus40_minus5 = 0
            self.bishopWhite2Clicked_plus48_minus6 = 0
            self.bishopWhite2Clicked_minus8_plus1 = 0
            self.bishopWhite2Clicked_minus16_plus2 = 0
            self.bishopWhite2Clicked_minus24_plus3 = 0
            self.bishopWhite2Clicked_minus32_plus4 = 0
            self.bishopWhite2Clicked_minus40_plus5 = 0
            self.bishopWhite2Clicked_minus48_plus6 = 0
            self.bishopWhite2Clicked_minus8_minus1 = 0
            self.bishopWhite2Clicked_minus16_minus2 = 0
            self.bishopWhite2Clicked_minus24_minus3 = 0
            self.bishopWhite2Clicked_minus32_minus4 = 0
            self.bishopWhite2Clicked_minus40_minus5 = 0
            self.bishopWhite2Clicked_minus48_minus6 = 0

        if self.turn == "white":
            if self.bw2.collidepoint(self.mouse_x, self.mouse_y):
                if self.bw2.y < self.box57.y and self.bw2.x < self.box8.x:
                    drawRect_add(8 + 1)
                    self.bishopWhite2Clicked = 1
                    make_zero()
                if self.bw2.y < self.box49.y and self.bw2.x < self.box7.x:
                    if self.bishopWhite2Clicked_plus8_plus1 == 1:
                        drawRect_add(16 + 2)
                        self.bishopWhite2Clicked = 1
                        make_zero()
                if self.bw2.y < self.box41.y and self.bw2.x < self.box6.x:
                    if self.bishopWhite2Clicked_plus8_plus1 == 1 and self.bishopWhite2Clicked_plus16_plus2 == 1:
                        drawRect_add(24 + 3)
                        self.bishopWhite2Clicked = 1
                        make_zero()
                if self.bw2.y < self.box33.y and self.bw2.x < self.box5.x:
                    if self.bishopWhite2Clicked_plus8_plus1 == 1 and self.bishopWhite2Clicked_plus16_plus2 == 1 and self.bishopWhite2Clicked_plus24_plus3 == 1:
                        drawRect_add(32 + 4)
                        self.bishopWhite2Clicked = 1
                        make_zero()
                if self.bw2.y < self.box25.y and self.bw2.x < self.box4.x:
                    if self.bishopWhite2Clicked_plus8_plus1 == 1 and self.bishopWhite2Clicked_plus16_plus2 == 1 and self.bishopWhite2Clicked_plus24_plus3 == 1 and \
                            self.bishopWhite2Clicked_plus32_plus4 == 1:
                        drawRect_add(40 + 5)
                        self.bishopWhite2Clicked = 1
                        make_zero()
                if self.bw2.y < self.box17.y and self.bw2.x < self.box3.x:
                    if self.bishopWhite2Clicked_plus8_plus1 == 1 and self.bishopWhite2Clicked_plus16_plus2 == 1 and self.bishopWhite2Clicked_plus24_plus3 == 1 and \
                            self.bishopWhite2Clicked_plus32_plus4 == 1 and self.bishopWhite2Clicked_plus40_plus5 == 1:
                        drawRect_add(48 + 6)
                        self.bishopWhite2Clicked = 1
                        make_zero()
                if self.bw2.y < self.box9.y and self.bw2.x < self.box2.x:
                    if self.bishopWhite2Clicked_plus8_plus1 == 1 and self.bishopWhite2Clicked_plus16_plus2 == 1 and self.bishopWhite2Clicked_plus24_plus3 == 1 and \
                            self.bishopWhite2Clicked_plus32_plus4 == 1 and self.bishopWhite2Clicked_plus40_plus5 == 1 and self.bishopWhite2Clicked_plus48_plus6 == 1:
                        drawRect_add(56 + 7)
                        self.bishopWhite2Clicked = 1
                        make_zero()

                if self.bw2.y < self.box57.y and self.bw2.x > self.box1.x:
                        drawRect_add(8 - 1)
                        self.bishopWhite2Clicked = 1
                        make_zero()
                if self.bw2.y < self.box49.y and self.bw2.x > self.box2.x:
                    if self.bishopWhite2Clicked_plus8_minus1 == 1:
                        drawRect_add(16 - 2)
                        self.bishopWhite2Clicked = 1
                        make_zero()
                if self.bw2.y < self.box41.y and self.bw2.x > self.box3.x:
                    if self.bishopWhite2Clicked_plus8_minus1 == 1 and self.bishopWhite2Clicked_plus16_minus2 == 1:
                        drawRect_add(24 - 3)
                        self.bishopWhite2Clicked = 1
                        make_zero()
                if self.bw2.y < self.box33.y and self.bw2.x > self.box4.x:
                    if self.bishopWhite2Clicked_plus8_minus1 == 1 and self.bishopWhite2Clicked_plus16_minus2 == 1 and self.bishopWhite2Clicked_plus24_minus3 == 1:
                        drawRect_add(32 - 4)
                        self.bishopWhite2Clicked = 1
                        make_zero()
                if self.bw2.y < self.box25.y and self.bw2.x > self.box5.x:
                    if self.bishopWhite2Clicked_plus8_minus1 == 1 and self.bishopWhite2Clicked_plus16_minus2 == 1 and self.bishopWhite2Clicked_plus24_minus3 == 1 and \
                            self.bishopWhite2Clicked_plus32_minus4 == 1:
                        drawRect_add(40 - 5)
                        self.bishopWhite2Clicked = 1
                        make_zero()
                if self.bw2.y < self.box17.y and self.bw2.x > self.box6.x:
                    if self.bishopWhite2Clicked_plus8_minus1 == 1 and self.bishopWhite2Clicked_plus16_minus2 == 1 and self.bishopWhite2Clicked_plus24_minus3 == 1 and \
                            self.bishopWhite2Clicked_plus32_minus4 == 1 and self.bishopWhite2Clicked_plus40_minus5 == 1:
                        drawRect_add(48 - 6)
                        self.bishopWhite2Clicked = 1
                        make_zero()
                if self.bw2.y < self.box9.y and self.bw2.x > self.box7.x:
                    if self.bishopWhite2Clicked_plus8_minus1 == 1 and self.bishopWhite2Clicked_plus16_minus2 == 1 and self.bishopWhite2Clicked_plus24_minus3 == 1 and \
                            self.bishopWhite2Clicked_plus32_minus4 == 1 and self.bishopWhite2Clicked_plus40_minus5 == 1 and self.bishopWhite2Clicked_plus48_minus6 == 1:
                        drawRect_add(56 - 7)
                        self.bishopWhite2Clicked = 1
                        make_zero()

                if self.bw2.y > self.box1.y and self.bw2.x < self.box8.x:
                        drawRect_add(-8 + 1)
                        self.bishopWhite2Clicked = 1
                        make_zero()
                if self.bw2.y > self.box9.y and self.bw2.x < self.box7.x:
                    if self.bishopWhite2Clicked_minus8_plus1 == 1:
                        drawRect_add(-16 + 2)
                        self.bishopWhite2Clicked = 1
                        make_zero()
                if self.bw2.y > self.box17.y and self.bw2.x < self.box6.x:
                    if self.bishopWhite2Clicked_minus8_plus1 == 1 and self.bishopWhite2Clicked_minus16_plus2 == 1:
                        drawRect_add(-24 + 3)
                        self.bishopWhite2Clicked = 1
                        make_zero()
                if self.bw2.y > self.box25.y and self.bw2.x < self.box5.x:
                    if self.bishopWhite2Clicked_minus8_plus1 == 1 and self.bishopWhite2Clicked_minus16_plus2 == 1 and self.bishopWhite2Clicked_minus24_plus3 == 1:
                        drawRect_add(-32 + 4)
                        self.bishopWhite2Clicked = 1
                        make_zero()
                if self.bw2.y > self.box33.y and self.bw2.x < self.box4.x:
                    if self.bishopWhite2Clicked_minus8_plus1 == 1 and self.bishopWhite2Clicked_minus16_plus2 == 1 and self.bishopWhite2Clicked_minus24_plus3 == 1 and \
                            self.bishopWhite2Clicked_minus32_plus4 == 1:
                        drawRect_add(-40 + 5)
                        self.bishopWhite2Clicked = 1
                        make_zero()
                if self.bw2.y > self.box41.y and self.bw2.x < self.box3.x:
                    if self.bishopWhite2Clicked_minus8_plus1 == 1 and self.bishopWhite2Clicked_minus16_plus2 == 1 and self.bishopWhite2Clicked_minus24_plus3 == 1 and \
                            self.bishopWhite2Clicked_minus32_plus4 == 1 and self.bishopWhite2Clicked_minus40_plus5 == 1:
                        drawRect_add(-48 + 6)
                        self.bishopWhite2Clicked = 1
                        make_zero()
                if self.bw2.y > self.box49.y and self.bw2.x < self.box2.x:
                    if self.bishopWhite2Clicked_minus8_plus1 == 1 and self.bishopWhite2Clicked_minus16_plus2 == 1 and self.bishopWhite2Clicked_minus24_plus3 == 1 and \
                            self.bishopWhite2Clicked_minus32_plus4 == 1 and self.bishopWhite2Clicked_minus40_plus5 == 1 and self.bishopWhite2Clicked_minus48_plus6 == 1:
                        drawRect_add(-56 + 7)
                        self.bishopWhite2Clicked = 1
                        make_zero()

                if self.bw2.y > self.box1.y and self.bw2.x > self.box1.x:
                        drawRect_add(-8 - 1)
                        self.bishopWhite2Clicked = 1
                        make_zero()
                if self.bw2.y > self.box9.y and self.bw2.x > self.box2.x:
                    if self.bishopWhite2Clicked_minus8_minus1 == 1:
                        drawRect_add(-16 - 2)
                        self.bishopWhite2Clicked = 1
                        make_zero()
                if self.bw2.y > self.box17.y and self.bw2.x > self.box3.x:
                    if self.bishopWhite2Clicked_minus8_minus1 == 1 and self.bishopWhite2Clicked_minus16_minus2 == 1:
                        drawRect_add(-24 - 3)
                        self.bishopWhite2Clicked = 1
                        make_zero()
                if self.bw2.y > self.box25.y and self.bw2.x > self.box4.x:
                    if self.bishopWhite2Clicked_minus8_minus1 == 1 and self.bishopWhite2Clicked_minus16_minus2 == 1 and self.bishopWhite2Clicked_minus24_minus3 == 1:
                        drawRect_add(-32 - 4)
                        self.bishopWhite2Clicked = 1
                        make_zero()
                if self.bw2.y > self.box33.y and self.bw2.x > self.box5.x:
                    if self.bishopWhite2Clicked_minus8_minus1 == 1 and self.bishopWhite2Clicked_minus16_minus2 == 1 and self.bishopWhite2Clicked_minus24_minus3 == 1 and \
                            self.bishopWhite2Clicked_minus32_minus4 == 1:
                        drawRect_add(-40 - 5)
                        self.bishopWhite2Clicked = 1
                        make_zero()
                if self.bw2.y > self.box41.y and self.bw2.x > self.box6.x:
                    if self.bishopWhite2Clicked_minus8_minus1 == 1 and self.bishopWhite2Clicked_minus16_minus2 == 1 and self.bishopWhite2Clicked_minus24_minus3 == 1 and \
                            self.bishopWhite2Clicked_minus32_minus4 == 1 and self.bishopWhite2Clicked_minus40_minus5 == 1:
                        drawRect_add(-48 - 6)
                        self.bishopWhite2Clicked = 1
                        make_zero()
                if self.bw2.y > self.box49.y and self.bw2.x > self.box7.x:
                    if self.bishopWhite2Clicked_minus8_minus1 == 1 and self.bishopWhite2Clicked_minus16_minus2 == 1 and self.bishopWhite2Clicked_minus24_minus3 == 1 and \
                            self.bishopWhite2Clicked_minus32_minus4 == 1 and self.bishopWhite2Clicked_minus40_minus5 == 1 and self.bishopWhite2Clicked_minus48_minus6 == 1:
                        drawRect_add(-56 - 7)
                        self.bishopWhite2Clicked = 1
                        make_zero()

                # check if white pieces can be cut or not
                if self.bw2.y < self.box57.y and self.bw2.x < self.box8.x:
                    check(8 + 1)
                if self.bw2.y < self.box49.y and self.bw2.x < self.box7.x:
                    if self.bishopWhite2Clicked_plus8_plus1 == 1:
                        check(16 + 2)
                if self.bw2.y < self.box41.y and self.bw2.x < self.box6.x:
                    if self.bishopWhite2Clicked_plus8_plus1 == 1 and self.bishopWhite2Clicked_plus16_plus2 == 1:
                        check(24 + 3)
                if self.bw2.y < self.box33.y and self.bw2.x < self.box5.x:
                    if self.bishopWhite2Clicked_plus8_plus1 == 1 and self.bishopWhite2Clicked_plus16_plus2 == 1 and self.bishopWhite2Clicked_plus24_plus3 == 1:
                        check(32 + 4)
                if self.bw2.y < self.box25.y and self.bw2.x < self.box4.x:
                    if self.bishopWhite2Clicked_plus8_plus1 == 1 and self.bishopWhite2Clicked_plus16_plus2 == 1 and self.bishopWhite2Clicked_plus24_plus3 == 1 and \
                            self.bishopWhite2Clicked_plus32_plus4 == 1:
                        check(40 + 5)
                if self.bw2.y < self.box17.y and self.bw2.x < self.box3.x:
                    if self.bishopWhite2Clicked_plus8_plus1 == 1 and self.bishopWhite2Clicked_plus16_plus2 == 1 and self.bishopWhite2Clicked_plus24_plus3 == 1 and \
                            self.bishopWhite2Clicked_plus32_plus4 == 1 and self.bishopWhite2Clicked_plus40_plus5 == 1:
                        check(48 + 6)
                if self.bw2.y < self.box9.y and self.bw2.x < self.box2.x:
                    if self.bishopWhite2Clicked_plus8_plus1 == 1 and self.bishopWhite2Clicked_plus16_plus2 == 1 and self.bishopWhite2Clicked_plus24_plus3 == 1 and \
                            self.bishopWhite2Clicked_plus32_plus4 == 1 and self.bishopWhite2Clicked_plus40_plus5 == 1 and self.bishopWhite2Clicked_plus48_plus6 == 1:
                        check(56 + 7)

                if self.bw2.y < self.box57.y and self.bw2.x > self.box1.x:
                    check(8 - 1)
                if self.bw2.y < self.box49.y and self.bw2.x > self.box2.x:
                    if self.bishopWhite2Clicked_plus8_minus1 == 1:
                        check(16 - 2)
                if self.bw2.y < self.box41.y and self.bw2.x > self.box3.x:
                    if self.bishopWhite2Clicked_plus8_minus1 == 1 and self.bishopWhite2Clicked_plus16_minus2 == 1:
                        check(24 - 3)
                if self.bw2.y < self.box33.y and self.bw2.x > self.box4.x:
                    if self.bishopWhite2Clicked_plus8_minus1 == 1 and self.bishopWhite2Clicked_plus16_minus2 == 1 and self.bishopWhite2Clicked_plus24_minus3 == 1:
                        check(32 - 4)
                if self.bw2.y < self.box25.y and self.bw2.x > self.box5.x:
                    if self.bishopWhite2Clicked_plus8_minus1 == 1 and self.bishopWhite2Clicked_plus16_minus2 == 1 and self.bishopWhite2Clicked_plus24_minus3 == 1 and \
                            self.bishopWhite2Clicked_plus32_minus4 == 1:
                        check(40 - 5)
                if self.bw2.y < self.box17.y and self.bw2.x > self.box6.x:
                    if self.bishopWhite2Clicked_plus8_minus1 == 1 and self.bishopWhite2Clicked_plus16_minus2 == 1 and self.bishopWhite2Clicked_plus24_minus3 == 1 and \
                            self.bishopWhite2Clicked_plus32_minus4 == 1 and self.bishopWhite2Clicked_plus40_minus5 == 1:
                        check(48 - 6)
                if self.bw2.y < self.box9.y and self.bw2.x > self.box7.x:
                    if self.bishopWhite2Clicked_plus8_minus1 == 1 and self.bishopWhite2Clicked_plus16_minus2 == 1 and self.bishopWhite2Clicked_plus24_minus3 == 1 and \
                            self.bishopWhite2Clicked_plus32_minus4 == 1 and self.bishopWhite2Clicked_plus40_minus5 == 1 and self.bishopWhite2Clicked_plus48_minus6 == 1:
                        check(56 - 7)

                if self.bw2.y > self.box1.y and self.bw2.x < self.box8.x:
                    check(-8 + 1)
                if self.bw2.y > self.box9.y and self.bw2.x < self.box7.x:
                    if self.bishopWhite2Clicked_minus8_plus1 == 1:
                        check(-16 + 2)
                if self.bw2.y > self.box17.y and self.bw2.x < self.box6.x:
                    if self.bishopWhite2Clicked_minus8_plus1 == 1 and self.bishopWhite2Clicked_minus16_plus2 == 1:
                        check(-24 + 3)
                if self.bw2.y > self.box25.y and self.bw2.x < self.box5.x:
                    if self.bishopWhite2Clicked_minus8_plus1 == 1 and self.bishopWhite2Clicked_minus16_plus2 == 1 and self.bishopWhite2Clicked_minus24_plus3 == 1:
                        check(-32 + 4)
                if self.bw2.y > self.box33.y and self.bw2.x < self.box4.x:
                    if self.bishopWhite2Clicked_minus8_plus1 == 1 and self.bishopWhite2Clicked_minus16_plus2 == 1 and self.bishopWhite2Clicked_minus24_plus3 == 1 and \
                            self.bishopWhite2Clicked_minus32_plus4 == 1:
                        check(-40 + 5)
                if self.bw2.y > self.box41.y and self.bw2.x < self.box3.x:
                    if self.bishopWhite2Clicked_minus8_plus1 == 1 and self.bishopWhite2Clicked_minus16_plus2 == 1 and self.bishopWhite2Clicked_minus24_plus3 == 1 and \
                            self.bishopWhite2Clicked_minus32_plus4 == 1 and self.bishopWhite2Clicked_minus40_plus5 == 1:
                        check(-48 + 6)
                if self.bw2.y > self.box49.y and self.bw2.x < self.box2.x:
                    if self.bishopWhite2Clicked_minus8_plus1 == 1 and self.bishopWhite2Clicked_minus16_plus2 == 1 and self.bishopWhite2Clicked_minus24_plus3 == 1 and \
                            self.bishopWhite2Clicked_minus32_plus4 == 1 and self.bishopWhite2Clicked_minus40_plus5 == 1 and self.bishopWhite2Clicked_minus48_plus6 == 1:
                        check(-56 + 7)

                if self.bw2.y > self.box1.y and self.bw2.x > self.box1.x:
                    check(-8 - 1)
                if self.bw2.y > self.box9.y and self.bw2.x > self.box2.x:
                    if self.bishopWhite2Clicked_minus8_minus1 == 1:
                        check(-16 - 2)
                if self.bw2.y > self.box17.y and self.bw2.x > self.box3.x:
                    if self.bishopWhite2Clicked_minus8_minus1 == 1 and self.bishopWhite2Clicked_minus16_minus2 == 1:
                        check(-24 - 3)
                if self.bw2.y > self.box25.y and self.bw2.x > self.box4.x:
                    if self.bishopWhite2Clicked_minus8_minus1 == 1 and self.bishopWhite2Clicked_minus16_minus2 == 1 and self.bishopWhite2Clicked_minus24_minus3 == 1:
                        check(-32 - 4)
                if self.bw2.y > self.box33.y and self.bw2.x > self.box5.x:
                    if self.bishopWhite2Clicked_minus8_minus1 == 1 and self.bishopWhite2Clicked_minus16_minus2 == 1 and self.bishopWhite2Clicked_minus24_minus3 == 1 and \
                            self.bishopWhite2Clicked_minus32_minus4 == 1:
                        check(-40 - 5)
                if self.bw2.y > self.box41.y and self.bw2.x > self.box6.x:
                    if self.bishopWhite2Clicked_minus8_minus1 == 1 and self.bishopWhite2Clicked_minus16_minus2 == 1 and self.bishopWhite2Clicked_minus24_minus3 == 1 and \
                            self.bishopWhite2Clicked_minus32_minus4 == 1 and self.bishopWhite2Clicked_minus40_minus5 == 1:
                        check(-48 - 6)
                if self.bw2.y > self.box49.y and self.bw2.x > self.box7.x:
                    if self.bishopWhite2Clicked_minus8_minus1 == 1 and self.bishopWhite2Clicked_minus16_minus2 == 1 and self.bishopWhite2Clicked_minus24_minus3 == 1 and \
                            self.bishopWhite2Clicked_minus32_minus4 == 1 and self.bishopWhite2Clicked_minus40_minus5 == 1 and self.bishopWhite2Clicked_minus48_minus6 == 1:
                        check(-56 - 7)

        # what will happen if bishop is clicked
        if self.bishopWhite2Clicked == 1:

            # remove the white pieces
            if self.bishopWhite2Clicked_cut == 1:
                if self.bw2.y < self.box57.y and self.bw2.x < self.box8.x:
                    remove(8 + 1)
                if self.bw2.y < self.box49.y and self.bw2.x < self.box7.x:
                    remove(16 + 2)
                if self.bw2.y < self.box41.y and self.bw2.x < self.box6.x:
                    remove(24 + 3)
                if self.bw2.y < self.box33.y and self.bw2.x < self.box5.x:
                    remove(32 + 4)
                if self.bw2.y < self.box25.y and self.bw2.x < self.box4.x:
                    remove(40 + 5)
                if self.bw2.y < self.box17.y and self.bw2.x < self.box3.x:
                    remove(48 + 6)
                if self.bw2.y < self.box9.y and self.bw2.x < self.box2.x:
                    remove(56 + 7)

                if self.bw2.y < self.box57.y and self.bw2.x > self.box1.x:
                    remove(8 - 1)
                if self.bw2.y < self.box49.y and self.bw2.x > self.box2.x:
                    remove(16 - 2)
                if self.bw2.y < self.box41.y and self.bw2.x > self.box3.x:
                    remove(24 - 3)
                if self.bw2.y < self.box33.y and self.bw2.x > self.box4.x:
                    remove(32 - 4)
                if self.bw2.y < self.box25.y and self.bw2.x > self.box5.x:
                    remove(40 - 5)
                if self.bw2.y < self.box17.y and self.bw2.x > self.box6.x:
                    remove(48 - 6)
                if self.bw2.y < self.box9.y and self.bw2.x > self.box7.x:
                    remove(56 - 7)

                if self.bw2.y > self.box1.y and self.bw2.x < self.box8.x:
                    remove(-8 + 1)
                if self.bw2.y > self.box9.y and self.bw2.x < self.box7.x:
                    remove(-16 + 2)
                if self.bw2.y > self.box17.y and self.bw2.x < self.box6.x:
                    remove(-24 + 3)
                if self.bw2.y > self.box25.y and self.bw2.x < self.box5.x:
                    remove(-32 + 4)
                if self.bw2.y > self.box33.y and self.bw2.x < self.box4.x:
                    remove(-40 + 5)
                if self.bw2.y > self.box41.y and self.bw2.x < self.box3.x:
                    remove(-48 + 6)
                if self.bw2.y > self.box49.y and self.bw2.x < self.box2.x:
                    remove(-56 + 7)

                if self.bw2.y > self.box1.y and self.bw2.x > self.box1.x:
                    remove(-8 - 1)
                if self.bw2.y > self.box9.y and self.bw2.x > self.box2.x:
                    remove(-16 - 2)
                if self.bw2.y > self.box17.y and self.bw2.x > self.box3.x:
                    remove(-24 - 3)
                if self.bw2.y > self.box25.y and self.bw2.x > self.box4.x:
                    remove(-32 - 4)
                if self.bw2.y > self.box33.y and self.bw2.x > self.box5.x:
                    remove(-40 - 5)
                if self.bw2.y > self.box41.y and self.bw2.x > self.box6.x:
                    remove(-48 - 6)
                if self.bw2.y > self.box49.y and self.bw2.x > self.box7.x:
                    remove(-56 - 7)

            if self.bw2.y < self.box57.y and self.bw2.x < self.box8.x:
                move(8 + 1)
            if self.bw2.y < self.box49.y and self.bw2.x < self.box7.x:
                move(16 + 2)
            if self.bw2.y < self.box41.y and self.bw2.x < self.box6.x:
                move(24 + 3)
            if self.bw2.y < self.box33.y and self.bw2.x < self.box5.x:
                move(32 + 4)
            if self.bw2.y < self.box25.y and self.bw2.x < self.box4.x:
                move(40 + 5)
            if self.bw2.y < self.box17.y and self.bw2.x < self.box3.x:
                move(48 + 6)
            if self.bw2.y < self.box9.y and self.bw2.x < self.box2.x:
                move(56 + 7)

            if self.bw2.y < self.box57.y and self.bw2.x > self.box1.x:
                move(8 - 1)
            if self.bw2.y < self.box49.y and self.bw2.x > self.box2.x:
                move(16 - 2)
            if self.bw2.y < self.box41.y and self.bw2.x > self.box3.x:
                move(24 - 3)
            if self.bw2.y < self.box33.y and self.bw2.x > self.box4.x:
                move(32 - 4)
            if self.bw2.y < self.box25.y and self.bw2.x > self.box5.x:
                move(40 - 5)
            if self.bw2.y < self.box17.y and self.bw2.x > self.box6.x:
                move(48 - 6)
            if self.bw2.y < self.box9.y and self.bw2.x > self.box7.x:
                move(56 - 7)

            if self.bw2.y > self.box1.y and self.bw2.x < self.box8.x:
                move(-8 + 1)
            if self.bw2.y > self.box9.y and self.bw2.x < self.box7.x:
                move(-16 + 2)
            if self.bw2.y > self.box17.y and self.bw2.x < self.box6.x:
                move(-24 + 3)
            if self.bw2.y > self.box25.y and self.bw2.x < self.box5.x:
                move(-32 + 4)
            if self.bw2.y > self.box33.y and self.bw2.x < self.box4.x:
                move(-40 + 5)
            if self.bw2.y > self.box41.y and self.bw2.x < self.box3.x:
                move(-48 + 6)
            if self.bw2.y > self.box49.y and self.bw2.x < self.box2.x:
                move(-56 + 7)

            if self.bw2.y > self.box1.y and self.bw2.x > self.box1.x:
                move(-8 - 1)
            if self.bw2.y > self.box9.y and self.bw2.x > self.box2.x:
                move(-16 - 2)
            if self.bw2.y > self.box17.y and self.bw2.x > self.box3.x:
                move(-24 - 3)
            if self.bw2.y > self.box25.y and self.bw2.x > self.box4.x:
                move(-32 - 4)
            if self.bw2.y > self.box33.y and self.bw2.x > self.box5.x:
                move(-40 - 5)
            if self.bw2.y > self.box41.y and self.bw2.x > self.box6.x:
                move(-48 - 6)
            if self.bw2.y > self.box49.y and self.bw2.x > self.box7.x:
                move(-56 - 7)

    def queenWMovements(self):
        for event in pygame.event.get():
            if event.type == pygame.MOUSEBUTTONDOWN:
                self.mouse_x, self.mouse_y = pygame.mouse.get_pos()

        # queen
        def drawRectRook_add(num):
            if not self.boxLst[self.boxLst.index(self.Qw) + num].colliderect(self.pw1) and not \
                    self.boxLst[self.boxLst.index(self.Qw) + num].colliderect(self.pw2) and not \
                    self.boxLst[self.boxLst.index(self.Qw) + num].colliderect(self.pw3) and not \
                    self.boxLst[self.boxLst.index(self.Qw) + num].colliderect(self.pw4) and not \
                    self.boxLst[self.boxLst.index(self.Qw) + num].colliderect(self.pw5) and not \
                    self.boxLst[self.boxLst.index(self.Qw) + num].colliderect(self.pw6) and not \
                    self.boxLst[self.boxLst.index(self.Qw) + num].colliderect(self.pw7) and not \
                    self.boxLst[self.boxLst.index(self.Qw) + num].colliderect(self.pw8) and not \
                    self.boxLst[self.boxLst.index(self.Qw) + num].colliderect(self.Kw) and not \
                    self.boxLst[self.boxLst.index(self.Qw) + num].colliderect(self.rw1) and not \
                    self.boxLst[self.boxLst.index(self.Qw) + num].colliderect(self.rw2) and not \
                    self.boxLst[self.boxLst.index(self.Qw) + num].colliderect(self.kw1) and not \
                    self.boxLst[self.boxLst.index(self.Qw) + num].colliderect(self.kw2) and not \
                    self.boxLst[self.boxLst.index(self.Qw) + num].colliderect(self.bw1) and not \
                    self.boxLst[self.boxLst.index(self.Qw) + num].colliderect(self.bw2) and not \
                    self.boxLst[self.boxLst.index(self.Qw) + num].colliderect(self.pb1) and not \
                    self.boxLst[self.boxLst.index(self.Qw) + num].colliderect(self.pb2) and not \
                    self.boxLst[self.boxLst.index(self.Qw) + num].colliderect(self.pb3) and not \
                    self.boxLst[self.boxLst.index(self.Qw) + num].colliderect(self.pb4) and not \
                    self.boxLst[self.boxLst.index(self.Qw) + num].colliderect(self.pb5) and not \
                    self.boxLst[self.boxLst.index(self.Qw) + num].colliderect(self.pb6) and not \
                    self.boxLst[self.boxLst.index(self.Qw) + num].colliderect(self.pb7) and not \
                    self.boxLst[self.boxLst.index(self.Qw) + num].colliderect(self.pb8) and not \
                    self.boxLst[self.boxLst.index(self.Qw) + num].colliderect(self.Kb) and not \
                    self.boxLst[self.boxLst.index(self.Qw) + num].colliderect(self.Qb) and not \
                    self.boxLst[self.boxLst.index(self.Qw) + num].colliderect(self.rb1) and not \
                    self.boxLst[self.boxLst.index(self.Qw) + num].colliderect(self.rb2) and not \
                    self.boxLst[self.boxLst.index(self.Qw) + num].colliderect(self.kb1) and not \
                    self.boxLst[self.boxLst.index(self.Qw) + num].colliderect(self.kb2) and not \
                    self.boxLst[self.boxLst.index(self.Qw) + num].colliderect(self.bb1) and not \
                    self.boxLst[self.boxLst.index(self.Qw) + num].colliderect(self.bb2):
                pygame.draw.rect(self.window, self.blue, self.boxLst[self.boxLst.index(self.Qw) + num], border_radius=100)

                if num == 8:
                    self.QueenWhiteClicked_plus8 = 1
                if num == 16:
                    self.QueenWhiteClicked_plus16 = 1
                if num == 24:
                    self.QueenWhiteClicked_plus24 = 1
                if num == 32:
                    self.QueenWhiteClicked_plus32 = 1
                if num == 40:
                    self.QueenWhiteClicked_plus40 = 1
                if num == 48:
                    self.QueenWhiteClicked_plus48 = 1
                if num == 1:
                    self.QueenWhiteClicked_plus1 = 1
                if num == 2:
                    self.QueenWhiteClicked_plus2 = 1
                if num == 3:
                    self.QueenWhiteClicked_plus3 = 1
                if num == 4:
                    self.QueenWhiteClicked_plus4 = 1
                if num == 5:
                    self.QueenWhiteClicked_plus5 = 1
                if num == 6:
                    self.QueenWhiteClicked_plus6 = 1

        def drawRect_sub(num):
            if not self.boxLst[self.boxLst.index(self.Qw) - num].colliderect(self.pw1) and not \
                    self.boxLst[self.boxLst.index(self.Qw) - num].colliderect(self.pw2) and not \
                    self.boxLst[self.boxLst.index(self.Qw) - num].colliderect(self.pw3) and not \
                    self.boxLst[self.boxLst.index(self.Qw) - num].colliderect(self.pw4) and not \
                    self.boxLst[self.boxLst.index(self.Qw) - num].colliderect(self.pw5) and not \
                    self.boxLst[self.boxLst.index(self.Qw) - num].colliderect(self.pw6) and not \
                    self.boxLst[self.boxLst.index(self.Qw) - num].colliderect(self.pw7) and not \
                    self.boxLst[self.boxLst.index(self.Qw) - num].colliderect(self.pw8) and not \
                    self.boxLst[self.boxLst.index(self.Qw) - num].colliderect(self.Kw) and not \
                    self.boxLst[self.boxLst.index(self.Qw) - num].colliderect(self.rw1) and not \
                    self.boxLst[self.boxLst.index(self.Qw) - num].colliderect(self.rw2) and not \
                    self.boxLst[self.boxLst.index(self.Qw) - num].colliderect(self.kw1) and not \
                    self.boxLst[self.boxLst.index(self.Qw) - num].colliderect(self.kw2) and not \
                    self.boxLst[self.boxLst.index(self.Qw) - num].colliderect(self.bw1) and not \
                    self.boxLst[self.boxLst.index(self.Qw) - num].colliderect(self.bw2) and not \
                    self.boxLst[self.boxLst.index(self.Qw) - num].colliderect(self.pb1) and not \
                    self.boxLst[self.boxLst.index(self.Qw) - num].colliderect(self.pb2) and not \
                    self.boxLst[self.boxLst.index(self.Qw) - num].colliderect(self.pb3) and not \
                    self.boxLst[self.boxLst.index(self.Qw) - num].colliderect(self.pb4) and not \
                    self.boxLst[self.boxLst.index(self.Qw) - num].colliderect(self.pb5) and not \
                    self.boxLst[self.boxLst.index(self.Qw) - num].colliderect(self.pb6) and not \
                    self.boxLst[self.boxLst.index(self.Qw) - num].colliderect(self.pb7) and not \
                    self.boxLst[self.boxLst.index(self.Qw) - num].colliderect(self.pb8) and not \
                    self.boxLst[self.boxLst.index(self.Qw) - num].colliderect(self.Kb) and not \
                    self.boxLst[self.boxLst.index(self.Qw) - num].colliderect(self.Qb) and not \
                    self.boxLst[self.boxLst.index(self.Qw) - num].colliderect(self.rb1) and not \
                    self.boxLst[self.boxLst.index(self.Qw) - num].colliderect(self.rb2) and not \
                    self.boxLst[self.boxLst.index(self.Qw) - num].colliderect(self.kb1) and not \
                    self.boxLst[self.boxLst.index(self.Qw) - num].colliderect(self.kb2) and not \
                    self.boxLst[self.boxLst.index(self.Qw) - num].colliderect(self.bb1) and not \
                    self.boxLst[self.boxLst.index(self.Qw) - num].colliderect(self.bb2):
                pygame.draw.rect(self.window, self.blue, self.boxLst[self.boxLst.index(self.Qw) - num], border_radius=100)

                if num == 8:
                    self.QueenWhiteClicked_minus8 = 1
                if num == 16:
                    self.QueenWhiteClicked_minus16 = 1
                if num == 24:
                    self.QueenWhiteClicked_minus24 = 1
                if num == 32:
                    self.QueenWhiteClicked_minus32 = 1
                if num == 40:
                    self.QueenWhiteClicked_minus40 = 1
                if num == 48:
                    self.QueenWhiteClicked_minus48 = 1
                if num == 1:
                    self.QueenWhiteClicked_minus1 = 1
                if num == 2:
                    self.QueenWhiteClicked_minus2 = 1
                if num == 3:
                    self.QueenWhiteClicked_minus3 = 1
                if num == 4:
                    self.QueenWhiteClicked_minus4 = 1
                if num == 5:
                    self.QueenWhiteClicked_minus5 = 1
                if num == 6:
                    self.QueenWhiteClicked_minus6 = 1

        def cutBlackPiece_add(num):
            if self.boxLst[self.boxLst.index(self.Qw) + num].colliderect(self.pb1) or \
                    self.boxLst[self.boxLst.index(self.Qw) + num].colliderect(self.pb2) or \
                    self.boxLst[self.boxLst.index(self.Qw) + num].colliderect(self.pb3) or \
                    self.boxLst[self.boxLst.index(self.Qw) + num].colliderect(self.pb4) or \
                    self.boxLst[self.boxLst.index(self.Qw) + num].colliderect(self.pb5) or \
                    self.boxLst[self.boxLst.index(self.Qw) + num].colliderect(self.pb6) or \
                    self.boxLst[self.boxLst.index(self.Qw) + num].colliderect(self.pb7) or \
                    self.boxLst[self.boxLst.index(self.Qw) + num].colliderect(self.pb8) or \
                    self.boxLst[self.boxLst.index(self.Qw) + num].colliderect(self.Kb) or \
                    self.boxLst[self.boxLst.index(self.Qw) + num].colliderect(self.Qb) or \
                    self.boxLst[self.boxLst.index(self.Qw) + num].colliderect(self.rb1) or \
                    self.boxLst[self.boxLst.index(self.Qw) + num].colliderect(self.rb2) or \
                    self.boxLst[self.boxLst.index(self.Qw) + num].colliderect(self.kb1) or \
                    self.boxLst[self.boxLst.index(self.Qw) + num].colliderect(self.kb2) or \
                    self.boxLst[self.boxLst.index(self.Qw) + num].colliderect(self.bb1) or \
                    self.boxLst[self.boxLst.index(self.Qw) + num].colliderect(self.bb2):
                pygame.draw.rect(self.window, self.red, self.boxLst[self.boxLst.index(self.Qw) + num], border_radius=100)
                self.QueenWhiteClicked = 1
                self.rookWhite2Clicked = 0
                self.rookWhite1Clicked = 0
                self.pawnWhite1Clicked = 0
                self.pawnWhite2Clicked = 0
                self.pawnWhite3Clicked = 0
                self.pawnWhite4Clicked = 0
                self.pawnWhite5Clicked = 0
                self.pawnWhite6Clicked = 0
                self.pawnWhite7Clicked = 0
                self.pawnWhite8Clicked = 0
                self.KingWhiteClicked = 0
                self.knightWhite1Clicked = 0
                self.knightWhite2Clicked = 0
                self.bishopWhite1Clicked = 0
                self.bishopWhite2Clicked = 0
                self.QueenWhiteClicked_cut = 1

        def cutBlackPiece_sub(num):
            if self.boxLst[self.boxLst.index(self.Qw) - num].colliderect(self.pb1) or \
                    self.boxLst[self.boxLst.index(self.Qw) - num].colliderect(self.pb2) or \
                    self.boxLst[self.boxLst.index(self.Qw) - num].colliderect(self.pb3) or \
                    self.boxLst[self.boxLst.index(self.Qw) - num].colliderect(self.pb4) or \
                    self.boxLst[self.boxLst.index(self.Qw) - num].colliderect(self.pb5) or \
                    self.boxLst[self.boxLst.index(self.Qw) - num].colliderect(self.pb6) or \
                    self.boxLst[self.boxLst.index(self.Qw) - num].colliderect(self.pb7) or \
                    self.boxLst[self.boxLst.index(self.Qw) - num].colliderect(self.pb8) or \
                    self.boxLst[self.boxLst.index(self.Qw) - num].colliderect(self.Kb) or \
                    self.boxLst[self.boxLst.index(self.Qw) - num].colliderect(self.Qb) or \
                    self.boxLst[self.boxLst.index(self.Qw) - num].colliderect(self.rb1) or \
                    self.boxLst[self.boxLst.index(self.Qw) - num].colliderect(self.rb2) or \
                    self.boxLst[self.boxLst.index(self.Qw) - num].colliderect(self.kb1) or \
                    self.boxLst[self.boxLst.index(self.Qw) - num].colliderect(self.kb2) or \
                    self.boxLst[self.boxLst.index(self.Qw) - num].colliderect(self.bb1) or \
                    self.boxLst[self.boxLst.index(self.Qw) - num].colliderect(self.bb2):
                pygame.draw.rect(self.window, self.red, self.boxLst[self.boxLst.index(self.Qw) - num], border_radius=100)
                self.QueenWhiteClicked = 1
                self.rookWhite2Clicked = 0
                self.rookWhite1Clicked = 0
                self.pawnWhite1Clicked = 0
                self.pawnWhite2Clicked = 0
                self.pawnWhite3Clicked = 0
                self.pawnWhite4Clicked = 0
                self.pawnWhite5Clicked = 0
                self.pawnWhite6Clicked = 0
                self.pawnWhite7Clicked = 0
                self.pawnWhite8Clicked = 0
                self.KingWhiteClicked = 0
                self.knightWhite1Clicked = 0
                self.knightWhite2Clicked = 0
                self.bishopWhite1Clicked = 0
                self.bishopWhite2Clicked = 0
                self.QueenWhiteClicked_cut = 1

        def removeBlackPiece_add(num):
            if self.boxLst[self.boxLst.index(self.Qw) + num].collidepoint(self.mouse_x, self.mouse_y):
                if self.boxLst[self.boxLst.index(self.Qw) + num].colliderect(self.pb1):
                    self.pb1 = self.blackCutPiece_1
                if self.boxLst[self.boxLst.index(self.Qw) + num].colliderect(self.pb2):
                    self.pb2 = self.blackCutPiece_2
                if self.boxLst[self.boxLst.index(self.Qw) + num].colliderect(self.pb3):
                    self.pb3 = self.blackCutPiece_3
                if self.boxLst[self.boxLst.index(self.Qw) + num].colliderect(self.pb4):
                    self.pb4 = self.blackCutPiece_4
                if self.boxLst[self.boxLst.index(self.Qw) + num].colliderect(self.pb5):
                    self.pb5 = self.blackCutPiece_5
                if self.boxLst[self.boxLst.index(self.Qw) + num].colliderect(self.pb6):
                    self.pb6 = self.blackCutPiece_6
                if self.boxLst[self.boxLst.index(self.Qw) + num].colliderect(self.pb7):
                    self.pb7 = self.blackCutPiece_7
                if self.boxLst[self.boxLst.index(self.Qw) + num].colliderect(self.pb8):
                    self.pb8 = self.blackCutPiece_8
                if self.boxLst[self.boxLst.index(self.Qw) + num].colliderect(self.rb1):
                    self.rb1 = self.blackCutPiece_9
                if self.boxLst[self.boxLst.index(self.Qw) + num].colliderect(self.rb2):
                    self.rb2 = self.blackCutPiece_10
                if self.boxLst[self.boxLst.index(self.Qw) + num].colliderect(self.kb1):
                    self.kb1 = self.blackCutPiece_11
                if self.boxLst[self.boxLst.index(self.Qw) + num].colliderect(self.kb2):
                    self.kb2 = self.blackCutPiece_12
                if self.boxLst[self.boxLst.index(self.Qw) + num].colliderect(self.bb1):
                    self.bb1 = self.blackCutPiece_13
                if self.boxLst[self.boxLst.index(self.Qw) + num].colliderect(self.bb2):
                    self.bb2 = self.blackCutPiece_14
                if self.boxLst[self.boxLst.index(self.Qw) + num].colliderect(self.Kb):
                    self.Kb = self.blackCutPiece_15
                    self.KingBlack_isDead = 1
                if self.boxLst[self.boxLst.index(self.Qw) + num].colliderect(self.Qb):
                    self.Qb = self.blackCutPiece_16
                self.Qw = self.boxLst[self.boxLst.index(self.Qw) + num]
                self.QueenWhiteClicked = 0
                self.QueenWhiteClicked_cut = 0
                self.turn = "black"

        def removeBlackPiece_sub(num):
            if self.boxLst[self.boxLst.index(self.Qw) - num].collidepoint(self.mouse_x, self.mouse_y):
                if self.boxLst[self.boxLst.index(self.Qw) - num].colliderect(self.pb1):
                    self.pb1 = self.blackCutPiece_1
                if self.boxLst[self.boxLst.index(self.Qw) - num].colliderect(self.pb2):
                    self.pb2 = self.blackCutPiece_2
                if self.boxLst[self.boxLst.index(self.Qw) - num].colliderect(self.pb3):
                    self.pb3 = self.blackCutPiece_3
                if self.boxLst[self.boxLst.index(self.Qw) - num].colliderect(self.pb4):
                    self.pb4 = self.blackCutPiece_4
                if self.boxLst[self.boxLst.index(self.Qw) - num].colliderect(self.pb5):
                    self.pb5 = self.blackCutPiece_5
                if self.boxLst[self.boxLst.index(self.Qw) - num].colliderect(self.pb6):
                    self.pb6 = self.blackCutPiece_6
                if self.boxLst[self.boxLst.index(self.Qw) - num].colliderect(self.pb7):
                    self.pb7 = self.blackCutPiece_7
                if self.boxLst[self.boxLst.index(self.Qw) - num].colliderect(self.pb8):
                    self.pb8 = self.blackCutPiece_8
                if self.boxLst[self.boxLst.index(self.Qw) - num].colliderect(self.rb1):
                    self.rb1 = self.blackCutPiece_9
                if self.boxLst[self.boxLst.index(self.Qw) - num].colliderect(self.rb2):
                    self.rb2 = self.blackCutPiece_10
                if self.boxLst[self.boxLst.index(self.Qw) - num].colliderect(self.kb1):
                    self.kb1 = self.blackCutPiece_11
                if self.boxLst[self.boxLst.index(self.Qw) - num].colliderect(self.kb2):
                    self.kb2 = self.blackCutPiece_12
                if self.boxLst[self.boxLst.index(self.Qw) - num].colliderect(self.bb1):
                    self.bb1 = self.blackCutPiece_13
                if self.boxLst[self.boxLst.index(self.Qw) - num].colliderect(self.bb2):
                    self.bb2 = self.blackCutPiece_14
                if self.boxLst[self.boxLst.index(self.Qw) - num].colliderect(self.Kb):
                    self.Kb = self.blackCutPiece_15
                    self.KingBlack_isDead = 1
                if self.boxLst[self.boxLst.index(self.Qw) - num].colliderect(self.Qb):
                    self.Qb = self.blackCutPiece_16
                self.Qw = self.boxLst[self.boxLst.index(self.Qw) - num]
                self.QueenWhiteClicked = 0
                self.QueenWhiteClicked_cut = 0
                self.turn = "black"

        def drawRectBishop_add(num):
            if not self.boxLst[self.boxLst.index(self.Qw) + num].colliderect(self.pw1) and not \
                    self.boxLst[self.boxLst.index(self.Qw) + num].colliderect(self.pw2) and not \
                    self.boxLst[self.boxLst.index(self.Qw) + num].colliderect(self.pw3) and not \
                    self.boxLst[self.boxLst.index(self.Qw) + num].colliderect(self.pw4) and not \
                    self.boxLst[self.boxLst.index(self.Qw) + num].colliderect(self.pw5) and not \
                    self.boxLst[self.boxLst.index(self.Qw) + num].colliderect(self.pw6) and not \
                    self.boxLst[self.boxLst.index(self.Qw) + num].colliderect(self.pw7) and not \
                    self.boxLst[self.boxLst.index(self.Qw) + num].colliderect(self.pw8) and not \
                    self.boxLst[self.boxLst.index(self.Qw) + num].colliderect(self.Kw) and not \
                    self.boxLst[self.boxLst.index(self.Qw) + num].colliderect(self.rw1) and not \
                    self.boxLst[self.boxLst.index(self.Qw) + num].colliderect(self.rw2) and not \
                    self.boxLst[self.boxLst.index(self.Qw) + num].colliderect(self.kw1) and not \
                    self.boxLst[self.boxLst.index(self.Qw) + num].colliderect(self.kw2) and not \
                    self.boxLst[self.boxLst.index(self.Qw) + num].colliderect(self.bw1) and not \
                    self.boxLst[self.boxLst.index(self.Qw) + num].colliderect(self.bw2) and not \
                    self.boxLst[self.boxLst.index(self.Qw) + num].colliderect(self.pb1) and not \
                    self.boxLst[self.boxLst.index(self.Qw) + num].colliderect(self.pb2) and not \
                    self.boxLst[self.boxLst.index(self.Qw) + num].colliderect(self.pb3) and not \
                    self.boxLst[self.boxLst.index(self.Qw) + num].colliderect(self.pb4) and not \
                    self.boxLst[self.boxLst.index(self.Qw) + num].colliderect(self.pb5) and not \
                    self.boxLst[self.boxLst.index(self.Qw) + num].colliderect(self.pb6) and not \
                    self.boxLst[self.boxLst.index(self.Qw) + num].colliderect(self.pb7) and not \
                    self.boxLst[self.boxLst.index(self.Qw) + num].colliderect(self.pb8) and not \
                    self.boxLst[self.boxLst.index(self.Qw) + num].colliderect(self.Kb) and not \
                    self.boxLst[self.boxLst.index(self.Qw) + num].colliderect(self.Qb) and not \
                    self.boxLst[self.boxLst.index(self.Qw) + num].colliderect(self.rb1) and not \
                    self.boxLst[self.boxLst.index(self.Qw) + num].colliderect(self.rb2) and not \
                    self.boxLst[self.boxLst.index(self.Qw) + num].colliderect(self.kb1) and not \
                    self.boxLst[self.boxLst.index(self.Qw) + num].colliderect(self.kb2) and not \
                    self.boxLst[self.boxLst.index(self.Qw) + num].colliderect(self.bb1) and not \
                    self.boxLst[self.boxLst.index(self.Qw) + num].colliderect(self.bb2):
                pygame.draw.rect(self.window, self.blue, self.boxLst[self.boxLst.index(self.Qw) + num], border_radius=100)
                if num == 8 + 1:
                    self.QueenWhiteClicked_plus8_plus1 = 1
                if num == 16 + 2:
                    self.QueenWhiteClicked_plus16_plus2 = 1
                if num == 24 + 3:
                    self.QueenWhiteClicked_plus24_plus3 = 1
                if num == 32 + 4:
                    self.QueenWhiteClicked_plus32_plus4 = 1
                if num == 40 + 5:
                    self.QueenWhiteClicked_plus40_plus5 = 1
                if num == 48 + 6:
                    self.QueenWhiteClicked_plus48_plus6 = 1

                if num == 8 - 1:
                    self.QueenWhiteClicked_plus8_minus1 = 1
                if num == 16 - 2:
                    self.QueenWhiteClicked_plus16_minus2 = 1
                if num == 24 - 3:
                    self.QueenWhiteClicked_plus24_minus3 = 1
                if num == 32 - 4:
                    self.QueenWhiteClicked_plus32_minus4 = 1
                if num == 40 - 5:
                    self.QueenWhiteClicked_plus40_minus5 = 1
                if num == 48 - 6:
                    self.QueenWhiteClicked_plus48_minus6 = 1

                if num == -8 + 1:
                    self.QueenWhiteClicked_minus8_plus1 = 1
                if num == -16 + 2:
                    self.QueenWhiteClicked_minus16_plus2 = 1
                if num == -24 + 3:
                    self.QueenWhiteClicked_minus24_plus3 = 1
                if num == -32 + 4:
                    self.QueenWhiteClicked_minus32_plus4 = 1
                if num == -40 + 5:
                    self.QueenWhiteClicked_minus40_plus5 = 1
                if num == -48 + 6:
                    self.QueenWhiteClicked_minus48_plus6 = 1

                if num == -8 - 1:
                    self.QueenWhiteClicked_minus8_minus1 = 1
                if num == -16 - 2:
                    self.QueenWhiteClicked_minus16_minus2 = 1
                if num == -24 - 3:
                    self.QueenWhiteClicked_minus24_minus3 = 1
                if num == -32 - 4:
                    self.QueenWhiteClicked_minus32_minus4 = 1
                if num == -40 - 5:
                    self.QueenWhiteClicked_minus40_minus5 = 1
                if num == -48 - 6:
                    self.QueenWhiteClicked_minus48_minus6 = 1

        def check(num):
            if self.boxLst[self.boxLst.index(self.Qw) + num].colliderect(self.pb1) or \
                    self.boxLst[self.boxLst.index(self.Qw) + num].colliderect(self.pb2) or \
                    self.boxLst[self.boxLst.index(self.Qw) + num].colliderect(self.pb3) or \
                    self.boxLst[self.boxLst.index(self.Qw) + num].colliderect(self.pb4) or \
                    self.boxLst[self.boxLst.index(self.Qw) + num].colliderect(self.pb5) or \
                    self.boxLst[self.boxLst.index(self.Qw) + num].colliderect(self.pb6) or \
                    self.boxLst[self.boxLst.index(self.Qw) + num].colliderect(self.pb7) or \
                    self.boxLst[self.boxLst.index(self.Qw) + num].colliderect(self.pb8) or \
                    self.boxLst[self.boxLst.index(self.Qw) + num].colliderect(self.Kb) or \
                    self.boxLst[self.boxLst.index(self.Qw) + num].colliderect(self.Qb) or \
                    self.boxLst[self.boxLst.index(self.Qw) + num].colliderect(self.rb1) or \
                    self.boxLst[self.boxLst.index(self.Qw) + num].colliderect(self.rb2) or \
                    self.boxLst[self.boxLst.index(self.Qw) + num].colliderect(self.kb1) or \
                    self.boxLst[self.boxLst.index(self.Qw) + num].colliderect(self.kb2) or \
                    self.boxLst[self.boxLst.index(self.Qw) + num].colliderect(self.bb1) or \
                    self.boxLst[self.boxLst.index(self.Qw) + num].colliderect(self.bb2):
                pygame.draw.rect(self.window, self.red, self.boxLst[self.boxLst.index(self.Qw) + num], border_radius=100)
                self.QueenWhiteClicked = 1
                self.bishopWhite2Clicked = 0
                self.bishopWhite1Clicked = 0
                self.rookWhite2Clicked = 0
                self.rookWhite1Clicked = 0
                self.KingWhiteClicked = 0
                self.knightWhite1Clicked = 0
                self.knightWhite2Clicked = 0
                self.pawnWhite1Clicked = 0
                self.pawnWhite2Clicked = 0
                self.pawnWhite3Clicked = 0
                self.pawnWhite4Clicked = 0
                self.pawnWhite5Clicked = 0
                self.pawnWhite6Clicked = 0
                self.pawnWhite7Clicked = 0
                self.pawnWhite8Clicked = 0
                self.QueenWhiteClicked_cut = 1

        def remove(num):
            if self.boxLst[self.boxLst.index(self.Qw) + num].collidepoint(self.mouse_x, self.mouse_y):
                if self.boxLst[self.boxLst.index(self.Qw) + num].colliderect(self.pb1):
                    self.pb1 = self.blackCutPiece_1
                if self.boxLst[self.boxLst.index(self.Qw) + num].colliderect(self.pb2):
                    self.pb2 = self.blackCutPiece_2
                if self.boxLst[self.boxLst.index(self.Qw) + num].colliderect(self.pb3):
                    self.pb3 = self.blackCutPiece_3
                if self.boxLst[self.boxLst.index(self.Qw) + num].colliderect(self.pb4):
                    self.pb4 = self.blackCutPiece_4
                if self.boxLst[self.boxLst.index(self.Qw) + num].colliderect(self.pb5):
                    self.pb5 = self.blackCutPiece_5
                if self.boxLst[self.boxLst.index(self.Qw) + num].colliderect(self.pb6):
                    self.pb6 = self.blackCutPiece_6
                if self.boxLst[self.boxLst.index(self.Qw) + num].colliderect(self.pb7):
                    self.pb7 = self.blackCutPiece_7
                if self.boxLst[self.boxLst.index(self.Qw) + num].colliderect(self.pb8):
                    self.pb8 = self.blackCutPiece_8
                if self.boxLst[self.boxLst.index(self.Qw) + num].colliderect(self.rb1):
                    self.rb1 = self.blackCutPiece_9
                if self.boxLst[self.boxLst.index(self.Qw) + num].colliderect(self.rb2):
                    self.rb2 = self.blackCutPiece_10
                if self.boxLst[self.boxLst.index(self.Qw) + num].colliderect(self.kb1):
                    self.kb1 = self.blackCutPiece_11
                if self.boxLst[self.boxLst.index(self.Qw) + num].colliderect(self.kb2):
                    self.kb2 = self.blackCutPiece_12
                if self.boxLst[self.boxLst.index(self.Qw) + num].colliderect(self.bb1):
                    self.bb1 = self.blackCutPiece_13
                if self.boxLst[self.boxLst.index(self.Qw) + num].colliderect(self.bb2):
                    self.bb2 = self.blackCutPiece_14
                if self.boxLst[self.boxLst.index(self.Qw) + num].colliderect(self.Kb):
                    self.Kb = self.blackCutPiece_15
                    self.KingBlack_isDead = 1
                if self.boxLst[self.boxLst.index(self.Qw) + num].colliderect(self.Qb):
                    self.Qb = self.blackCutPiece_16
                self.Qw = self.boxLst[self.boxLst.index(self.Qw) + num]
                self.QueenWhiteClicked = 0
                self.QueenWhiteClicked_cut = 0
                self.turn = "black"

        def make_zero():
            self.rookWhite2Clicked = 0
            self.rookWhite1Clicked = 0
            self.pawnWhite1Clicked = 0
            self.pawnWhite2Clicked = 0
            self.pawnWhite3Clicked = 0
            self.pawnWhite4Clicked = 0
            self.pawnWhite5Clicked = 0
            self.pawnWhite6Clicked = 0
            self.pawnWhite7Clicked = 0
            self.pawnWhite8Clicked = 0
            self.KingWhiteClicked = 0
            self.knightWhite1Clicked = 0
            self.knightWhite2Clicked = 0
            self.bishopWhite1Clicked = 0
            self.bishopWhite2Clicked = 0

        def move(num):
            if self.boxLst[self.boxLst.index(self.Qw) + num].collidepoint(self.mouse_x, self.mouse_y):
                self.Qw = self.boxLst[self.boxLst.index(self.Qw) + num]
                self.QueenWhiteClicked = 0
                self.turn = "black"

        if self.turn == "black":
            self.QueenWhiteClicked_plus8_plus1 = 0
            self.QueenWhiteClicked_plus16_plus2 = 0
            self.QueenWhiteClicked_plus24_plus3 = 0
            self.QueenWhiteClicked_plus32_plus4 = 0
            self.QueenWhiteClicked_plus40_plus5 = 0
            self.QueenWhiteClicked_plus48_plus6 = 0
            self.QueenWhiteClicked_plus8_minus1 = 0
            self.QueenWhiteClicked_plus16_minus2 = 0
            self.QueenWhiteClicked_plus24_minus3 = 0
            self.QueenWhiteClicked_plus32_minus4 = 0
            self.QueenWhiteClicked_plus40_minus5 = 0
            self.QueenWhiteClicked_plus48_minus6 = 0
            self.QueenWhiteClicked_minus8_plus1 = 0
            self.QueenWhiteClicked_minus16_plus2 = 0
            self.QueenWhiteClicked_minus24_plus3 = 0
            self.QueenWhiteClicked_minus32_plus4 = 0
            self.QueenWhiteClicked_minus40_plus5 = 0
            self.QueenWhiteClicked_minus48_plus6 = 0
            self.QueenWhiteClicked_minus8_minus1 = 0
            self.QueenWhiteClicked_minus16_minus2 = 0
            self.QueenWhiteClicked_minus24_minus3 = 0
            self.QueenWhiteClicked_minus32_minus4 = 0
            self.QueenWhiteClicked_minus40_minus5 = 0
            self.QueenWhiteClicked_minus48_minus6 = 0

            self.QueenWhiteClicked_plus8 = 0
            self.QueenWhiteClicked_plus16 = 0
            self.QueenWhiteClicked_plus24 = 0
            self.QueenWhiteClicked_plus32 = 0
            self.QueenWhiteClicked_plus40 = 0
            self.QueenWhiteClicked_plus48 = 0
            self.QueenWhiteClicked_plus1 = 0
            self.QueenWhiteClicked_plus2 = 0
            self.QueenWhiteClicked_plus3 = 0
            self.QueenWhiteClicked_plus4 = 0
            self.QueenWhiteClicked_plus5 = 0
            self.QueenWhiteClicked_plus6 = 0
            self.QueenWhiteClicked_minus8 = 0
            self.QueenWhiteClicked_minus16 = 0
            self.QueenWhiteClicked_minus24 = 0
            self.QueenWhiteClicked_minus32 = 0
            self.QueenWhiteClicked_minus40 = 0
            self.QueenWhiteClicked_minus48 = 0
            self.QueenWhiteClicked_minus1 = 0
            self.QueenWhiteClicked_minus2 = 0
            self.QueenWhiteClicked_minus3 = 0
            self.QueenWhiteClicked_minus4 = 0
            self.QueenWhiteClicked_minus5 = 0
            self.QueenWhiteClicked_minus6 = 0

        if self.turn == "white":
            if self.Qw.collidepoint(self.mouse_x, self.mouse_y):
                # along y-axis
                if self.Qw.y < self.box57.y:
                    drawRectRook_add(8)
                    self.QueenWhiteClicked = 1
                    make_zero()
                if self.Qw.y < self.box49.y:
                    if self.QueenWhiteClicked_plus8 == 1:
                        drawRectRook_add(16)
                        self.QueenWhiteClicked = 1
                        make_zero()
                if self.Qw.y < self.box41.y:
                    if self.QueenWhiteClicked_plus8 == 1 and self.QueenWhiteClicked_plus16 == 1:
                        drawRectRook_add(24)
                        self.QueenWhiteClicked = 1
                        make_zero()
                if self.Qw.y < self.box33.y:
                    if self.QueenWhiteClicked_plus8 == 1 and self.QueenWhiteClicked_plus16 == 1 and self.QueenWhiteClicked_plus24 == 1:
                        drawRectRook_add(32)
                        self.QueenWhiteClicked = 1
                        make_zero()
                if self.Qw.y < self.box25.y:
                    if self.QueenWhiteClicked_plus8 == 1 and self.QueenWhiteClicked_plus16 == 1 and self.QueenWhiteClicked_plus24 == 1 and self.QueenWhiteClicked_plus32 == 1:
                        drawRectRook_add(40)
                        self.QueenWhiteClicked = 1
                        make_zero()
                if self.Qw.y < self.box17.y:
                    if self.QueenWhiteClicked_plus8 == 1 and self.QueenWhiteClicked_plus16 == 1 and self.QueenWhiteClicked_plus24 == 1 and self.QueenWhiteClicked_plus32 == 1 and \
                            self.QueenWhiteClicked_plus40 == 1:
                        drawRectRook_add(48)
                        self.QueenWhiteClicked = 1
                        make_zero()
                if self.Qw.y < self.box9.y:
                    if self.QueenWhiteClicked_plus8 == 1 and self.QueenWhiteClicked_plus16 == 1 and self.QueenWhiteClicked_plus24 == 1 and self.QueenWhiteClicked_plus32 == 1 and \
                            self.QueenWhiteClicked_plus40 == 1 and self.QueenWhiteClicked_plus48 == 1:
                        drawRectRook_add(56)
                        self.QueenWhiteClicked = 1
                        make_zero()

                if self.Qw.y > self.box1.y:
                    drawRect_sub(8)
                    self.QueenWhiteClicked = 1
                    make_zero()
                if self.Qw.y > self.box9.y:
                    if self.QueenWhiteClicked_minus8 == 1:
                        drawRect_sub(16)
                        self.QueenWhiteClicked = 1
                        make_zero()
                if self.Qw.y > self.box17.y:
                    if self.QueenWhiteClicked_minus8 == 1 and self.QueenWhiteClicked_minus16 == 1:
                        drawRect_sub(24)
                        self.QueenWhiteClicked = 1
                        make_zero()
                if self.Qw.y > self.box25.y:
                    if self.QueenWhiteClicked_minus8 == 1 and self.QueenWhiteClicked_minus16 == 1 and self.QueenWhiteClicked_minus24 == 1:
                        drawRect_sub(32)
                        self.QueenWhiteClicked = 1
                        make_zero()
                if self.Qw.y > self.box33.y:
                    if self.QueenWhiteClicked_minus8 == 1 and self.QueenWhiteClicked_minus16 == 1 and self.QueenWhiteClicked_minus24 == 1 and self.QueenWhiteClicked_minus32 == 1:
                        drawRect_sub(40)
                        self.QueenWhiteClicked = 1
                        make_zero()
                if self.Qw.y > self.box41.y:
                    if self.QueenWhiteClicked_minus8 == 1 and self.QueenWhiteClicked_minus16 == 1 and self.QueenWhiteClicked_minus24 == 1 and self.QueenWhiteClicked_minus32 == 1 and \
                            self.QueenWhiteClicked_minus40:
                        drawRect_sub(48)
                        self.QueenWhiteClicked = 1
                        make_zero()
                if self.Qw.y > self.box49.y:
                    if self.QueenWhiteClicked_minus8 == 1 and self.QueenWhiteClicked_minus16 == 1 and self.QueenWhiteClicked_minus24 == 1 and self.QueenWhiteClicked_minus32 == 1 and \
                            self.QueenWhiteClicked_minus40 and self.QueenWhiteClicked_minus48:
                        drawRect_sub(56)
                        self.QueenWhiteClicked = 1
                        make_zero()

                # along x-axis
                if self.Qw.x < self.box8.x:
                    drawRectRook_add(1)
                    self.QueenWhiteClicked = 1
                    make_zero()
                if self.Qw.x < self.box7.x:
                    if self.QueenWhiteClicked_plus1 == 1:
                        drawRectRook_add(2)
                        self.QueenWhiteClicked = 1
                        make_zero()
                if self.Qw.x < self.box6.x:
                    if self.QueenWhiteClicked_plus1 == 1 and self.QueenWhiteClicked_plus2 == 1:
                        drawRectRook_add(3)
                        self.QueenWhiteClicked = 1
                        make_zero()
                if self.Qw.x < self.box5.x:
                    if self.QueenWhiteClicked_plus1 == 1 and self.QueenWhiteClicked_plus2 == 1 and self.QueenWhiteClicked_plus3 == 1:
                        drawRectRook_add(4)
                        self.QueenWhiteClicked = 1
                        make_zero()
                if self.Qw.x < self.box4.x:
                    if self.QueenWhiteClicked_plus1 == 1 and self.QueenWhiteClicked_plus2 == 1 and self.QueenWhiteClicked_plus3 == 1 and self.QueenWhiteClicked_plus4 == 1:
                        drawRectRook_add(5)
                        self.QueenWhiteClicked = 1
                        make_zero()
                if self.Qw.x < self.box3.x:
                    if self.QueenWhiteClicked_plus1 == 1 and self.QueenWhiteClicked_plus2 == 1 and self.QueenWhiteClicked_plus3 == 1 and self.QueenWhiteClicked_plus4 == 1 and \
                            self.QueenWhiteClicked_plus5 == 1:
                        drawRectRook_add(6)
                        self.QueenWhiteClicked = 1
                        make_zero()
                if self.Qw.x < self.box2.x:
                    if self.QueenWhiteClicked_plus1 == 1 and self.QueenWhiteClicked_plus2 == 1 and self.QueenWhiteClicked_plus3 == 1 and self.QueenWhiteClicked_plus4 == 1 and \
                            self.QueenWhiteClicked_plus5 == 1 and self.QueenWhiteClicked_plus6 == 1:
                        drawRectRook_add(7)
                        self.QueenWhiteClicked = 1
                        make_zero()

                if self.Qw.x > self.box1.x:
                    drawRect_sub(1)
                    self.QueenWhiteClicked = 1
                    make_zero()
                if self.Qw.x > self.box2.x:
                    if self.QueenWhiteClicked_minus1 == 1:
                        drawRect_sub(2)
                        self.QueenWhiteClicked = 1
                        make_zero()
                if self.Qw.x > self.box3.x:
                    if self.QueenWhiteClicked_minus1 == 1 and self.QueenWhiteClicked_minus2 == 1:
                        drawRect_sub(3)
                        self.QueenWhiteClicked = 1
                        make_zero()
                if self.Qw.x > self.box4.x:
                    if self.QueenWhiteClicked_minus1 == 1 and self.QueenWhiteClicked_minus2 == 1 and self.QueenWhiteClicked_minus3 == 1:
                        drawRect_sub(4)
                        self.QueenWhiteClicked = 1
                        make_zero()
                if self.Qw.x > self.box5.x:
                    if self.QueenWhiteClicked_minus1 == 1 and self.QueenWhiteClicked_minus2 == 1 and self.QueenWhiteClicked_minus3 == 1 and self.QueenWhiteClicked_minus4 == 1:
                        drawRect_sub(5)
                        self.QueenWhiteClicked = 1
                        make_zero()
                if self.Qw.x > self.box6.x:
                    if self.QueenWhiteClicked_minus1 == 1 and self.QueenWhiteClicked_minus2 == 1 and self.QueenWhiteClicked_minus3 == 1 and self.QueenWhiteClicked_minus4 == 1 and \
                            self.QueenWhiteClicked_minus5 == 1:
                        drawRect_sub(6)
                        self.QueenWhiteClicked = 1
                        make_zero()
                if self.Qw.x > self.box7.x:
                    if self.QueenWhiteClicked_minus1 == 1 and self.QueenWhiteClicked_minus2 == 1 and self.QueenWhiteClicked_minus3 == 1 and self.QueenWhiteClicked_minus4 == 1 and \
                            self.QueenWhiteClicked_minus5 == 1 and self.QueenWhiteClicked_minus6 == 1:
                        drawRect_sub(7)
                        self.QueenWhiteClicked = 1
                        make_zero()

                # check if white pieces can be cut or not
                if self.Qw.y < self.box57.y:
                    cutBlackPiece_add(8)
                if self.Qw.y < self.box49.y:
                    if self.QueenWhiteClicked_plus8 == 1:
                        cutBlackPiece_add(16)
                if self.Qw.y < self.box41.y:
                    if self.QueenWhiteClicked_plus8 == 1 and self.QueenWhiteClicked_plus16 == 1:
                        cutBlackPiece_add(24)
                if self.Qw.y < self.box33.y:
                    if self.QueenWhiteClicked_plus8 == 1 and self.QueenWhiteClicked_plus16 == 1 and self.QueenWhiteClicked_plus24 == 1:
                        cutBlackPiece_add(32)
                if self.Qw.y < self.box25.y:
                    if self.QueenWhiteClicked_plus8 == 1 and self.QueenWhiteClicked_plus16 == 1 and self.QueenWhiteClicked_plus24 == 1 and self.QueenWhiteClicked_plus32 == 1:
                        cutBlackPiece_add(40)
                if self.Qw.y < self.box17.y:
                    if self.QueenWhiteClicked_plus8 == 1 and self.QueenWhiteClicked_plus16 == 1 and self.QueenWhiteClicked_plus24 == 1 and self.QueenWhiteClicked_plus32 == 1 and \
                            self.QueenWhiteClicked_plus40 == 1:
                        cutBlackPiece_add(48)
                if self.Qw.y < self.box9.y:
                    if self.QueenWhiteClicked_plus8 == 1 and self.QueenWhiteClicked_plus16 == 1 and self.QueenWhiteClicked_plus24 == 1 and self.QueenWhiteClicked_plus32 == 1 and \
                            self.QueenWhiteClicked_plus40 == 1 and self.QueenWhiteClicked_plus48 == 1:
                        cutBlackPiece_add(56)

                if self.Qw.y > self.box1.y:
                    cutBlackPiece_sub(8)
                if self.Qw.y > self.box9.y:
                    if self.QueenWhiteClicked_minus8 == 1:
                        cutBlackPiece_sub(16)
                if self.Qw.y > self.box17.y:
                    if self.QueenWhiteClicked_minus8 == 1 and self.QueenWhiteClicked_minus16 == 1:
                        cutBlackPiece_sub(24)
                if self.Qw.y > self.box25.y:
                    if self.QueenWhiteClicked_minus8 == 1 and self.QueenWhiteClicked_minus16 == 1 and self.QueenWhiteClicked_minus24 == 1:
                        cutBlackPiece_sub(32)
                if self.Qw.y > self.box33.y:
                    if self.QueenWhiteClicked_minus8 == 1 and self.QueenWhiteClicked_minus16 == 1 and self.QueenWhiteClicked_minus24 == 1 and self.QueenWhiteClicked_minus32 == 1:
                        cutBlackPiece_sub(40)
                if self.Qw.y > self.box41.y:
                    if self.QueenWhiteClicked_minus8 == 1 and self.QueenWhiteClicked_minus16 == 1 and self.QueenWhiteClicked_minus24 == 1 and self.QueenWhiteClicked_minus32 == 1 and \
                            self.QueenWhiteClicked_minus40 == 1:
                        cutBlackPiece_sub(48)
                if self.Qw.y > self.box49.y:
                    if self.QueenWhiteClicked_minus8 == 1 and self.QueenWhiteClicked_minus16 == 1 and self.QueenWhiteClicked_minus24 == 1 and self.QueenWhiteClicked_minus32 == 1 and \
                            self.QueenWhiteClicked_minus40 == 1 and self.QueenWhiteClicked_minus48 == 1:
                        cutBlackPiece_sub(56)

                if self.Qw.x < self.box8.x:
                    cutBlackPiece_add(1)
                if self.Qw.x < self.box7.x:
                    if self.QueenWhiteClicked_plus1 == 1:
                        cutBlackPiece_add(2)
                if self.Qw.x < self.box6.x:
                    if self.QueenWhiteClicked_plus1 == 1 and self.QueenWhiteClicked_plus2 == 1:
                        cutBlackPiece_add(3)
                if self.Qw.x < self.box5.x:
                    if self.QueenWhiteClicked_plus1 == 1 and self.QueenWhiteClicked_plus2 == 1 and self.QueenWhiteClicked_plus3 == 1:
                        cutBlackPiece_add(4)
                if self.Qw.x < self.box4.x:
                    if self.QueenWhiteClicked_plus1 == 1 and self.QueenWhiteClicked_plus2 == 1 and self.QueenWhiteClicked_plus3 == 1 and self.QueenWhiteClicked_plus4 == 1:
                        cutBlackPiece_add(5)
                if self.Qw.x < self.box3.x:
                    if self.QueenWhiteClicked_plus1 == 1 and self.QueenWhiteClicked_plus2 == 1 and self.QueenWhiteClicked_plus3 == 1 and self.QueenWhiteClicked_plus4 == 1 and \
                            self.QueenWhiteClicked_plus5 == 1:
                        cutBlackPiece_add(6)
                if self.Qw.x < self.box2.x:
                    if self.QueenWhiteClicked_plus1 == 1 and self.QueenWhiteClicked_plus2 == 1 and self.QueenWhiteClicked_plus3 == 1 and self.QueenWhiteClicked_plus4 == 1 and \
                            self.QueenWhiteClicked_plus5 == 1 and self.QueenWhiteClicked_plus6 == 1:
                        cutBlackPiece_add(7)

                if self.Qw.x > self.box1.x:
                    cutBlackPiece_sub(1)
                if self.Qw.x > self.box2.x:
                    if self.QueenWhiteClicked_minus1 == 1:
                        cutBlackPiece_sub(2)
                if self.Qw.x > self.box3.x:
                    if self.QueenWhiteClicked_minus1 == 1 and self.QueenWhiteClicked_minus2 == 1:
                        cutBlackPiece_sub(3)
                if self.Qw.x > self.box4.x:
                    if self.QueenWhiteClicked_minus1 == 1 and self.QueenWhiteClicked_minus2 == 1 and self.QueenWhiteClicked_minus3 == 1:
                        cutBlackPiece_sub(4)
                if self.Qw.x > self.box5.x:
                    if self.QueenWhiteClicked_minus1 == 1 and self.QueenWhiteClicked_minus2 == 1 and self.QueenWhiteClicked_minus3 == 1 and self.QueenWhiteClicked_minus4 == 1:
                        cutBlackPiece_sub(5)
                if self.Qw.x > self.box6.x:
                    if self.QueenWhiteClicked_minus1 == 1 and self.QueenWhiteClicked_minus2 == 1 and self.QueenWhiteClicked_minus3 == 1 and self.QueenWhiteClicked_minus4 == 1 and \
                            self.QueenWhiteClicked_minus5 == 1:
                        cutBlackPiece_sub(6)
                if self.Qw.x > self.box7.x:
                    if self.QueenWhiteClicked_minus1 == 1 and self.QueenWhiteClicked_minus2 == 1 and self.QueenWhiteClicked_minus3 == 1 and self.QueenWhiteClicked_minus4 == 1 and \
                            self.QueenWhiteClicked_minus5 == 1 and self.QueenWhiteClicked_minus6 == 1:
                        cutBlackPiece_sub(7)

                if self.Qw.y < self.box57.y and self.Qw.x < self.box8.x:
                    drawRectBishop_add(8 + 1)
                    self.QueenWhiteClicked = 1
                    make_zero()
                if self.Qw.y < self.box49.y and self.Qw.x < self.box7.x:
                    if self.QueenWhiteClicked_plus8_plus1 == 1:
                        drawRectBishop_add(16 + 2)
                        self.QueenWhiteClicked = 1
                        make_zero()
                if self.Qw.y < self.box41.y and self.Qw.x < self.box6.x:
                    if self.QueenWhiteClicked_plus8_plus1 == 1 and self.QueenWhiteClicked_plus16_plus2 == 1:
                        drawRectBishop_add(24 + 3)
                        self.QueenWhiteClicked = 1
                        make_zero()
                if self.Qw.y < self.box33.y and self.Qw.x < self.box5.x:
                    if self.QueenWhiteClicked_plus8_plus1 == 1 and self.QueenWhiteClicked_plus16_plus2 == 1 and self.QueenWhiteClicked_plus24_plus3 == 1:
                        drawRectBishop_add(32 + 4)
                        self.QueenWhiteClicked = 1
                        make_zero()
                if self.Qw.y < self.box25.y and self.Qw.x < self.box4.x:
                    if self.QueenWhiteClicked_plus8_plus1 == 1 and self.QueenWhiteClicked_plus16_plus2 == 1 and self.QueenWhiteClicked_plus24_plus3 == 1 and \
                            self.QueenWhiteClicked_plus32_plus4 == 1:
                        drawRectBishop_add(40 + 5)
                        self.QueenWhiteClicked = 1
                        make_zero()
                if self.Qw.y < self.box17.y and self.Qw.x < self.box3.x:
                    if self.QueenWhiteClicked_plus8_plus1 == 1 and self.QueenWhiteClicked_plus16_plus2 == 1 and self.QueenWhiteClicked_plus24_plus3 == 1 and \
                            self.QueenWhiteClicked_plus32_plus4 == 1 and self.QueenWhiteClicked_plus40_plus5 == 1:
                        drawRectBishop_add(48 + 6)
                        self.QueenWhiteClicked = 1
                        make_zero()
                if self.Qw.y < self.box9.y and self.Qw.x < self.box2.x:
                    if self.QueenWhiteClicked_plus8_plus1 == 1 and self.QueenWhiteClicked_plus16_plus2 == 1 and self.QueenWhiteClicked_plus24_plus3 == 1 and \
                            self.QueenWhiteClicked_plus32_plus4 == 1 and self.QueenWhiteClicked_plus40_plus5 == 1 and self.QueenWhiteClicked_plus48_plus6 == 1:
                        drawRectBishop_add(56 + 7)
                        self.QueenWhiteClicked = 1
                        make_zero()

                if self.Qw.y < self.box57.y and self.Qw.x > self.box1.x:
                    drawRectBishop_add(8 - 1)
                    self.QueenWhiteClicked = 1
                    make_zero()
                if self.Qw.y < self.box49.y and self.Qw.x > self.box2.x:
                    if self.QueenWhiteClicked_plus8_minus1 == 1:
                        drawRectBishop_add(16 - 2)
                        self.QueenWhiteClicked = 1
                        make_zero()
                if self.Qw.y < self.box41.y and self.Qw.x > self.box3.x:
                    if self.QueenWhiteClicked_plus8_minus1 == 1 and self.QueenWhiteClicked_plus16_minus2 == 1:
                        drawRectBishop_add(24 - 3)
                        self.QueenWhiteClicked = 1
                        make_zero()
                if self.Qw.y < self.box33.y and self.Qw.x > self.box4.x:
                    if self.QueenWhiteClicked_plus8_minus1 == 1 and self.QueenWhiteClicked_plus16_minus2 == 1 and self.QueenWhiteClicked_plus24_minus3 == 1:
                        drawRectBishop_add(32 - 4)
                        self.QueenWhiteClicked = 1
                        make_zero()
                if self.Qw.y < self.box25.y and self.Qw.x > self.box5.x:
                    if self.QueenWhiteClicked_plus8_minus1 == 1 and self.QueenWhiteClicked_plus16_minus2 == 1 and self.QueenWhiteClicked_plus24_minus3 == 1 and \
                            self.QueenWhiteClicked_plus32_minus4 == 1:
                        drawRectBishop_add(40 - 5)
                        self.QueenWhiteClicked = 1
                        make_zero()
                if self.Qw.y < self.box17.y and self.Qw.x > self.box6.x:
                    if self.QueenWhiteClicked_plus8_minus1 == 1 and self.QueenWhiteClicked_plus16_minus2 == 1 and self.QueenWhiteClicked_plus24_minus3 == 1 and \
                            self.QueenWhiteClicked_plus32_minus4 == 1 and self.QueenWhiteClicked_plus40_minus5 == 1:
                        drawRectBishop_add(48 - 6)
                        self.QueenWhiteClicked = 1
                        make_zero()
                if self.Qw.y < self.box9.y and self.Qw.x > self.box7.x:
                    if self.QueenWhiteClicked_plus8_minus1 == 1 and self.QueenWhiteClicked_plus16_minus2 == 1 and self.QueenWhiteClicked_plus24_minus3 == 1 and \
                            self.QueenWhiteClicked_plus32_minus4 == 1 and self.QueenWhiteClicked_plus40_minus5 == 1 and self.QueenWhiteClicked_plus48_minus6 == 1:
                        drawRectBishop_add(56 - 7)
                        self.QueenWhiteClicked = 1
                        make_zero()

                if self.Qw.y > self.box1.y and self.Qw.x < self.box8.x:
                    drawRectBishop_add(-8 + 1)
                    self.QueenWhiteClicked = 1
                    make_zero()
                if self.Qw.y > self.box9.y and self.Qw.x < self.box7.x:
                    if self.QueenWhiteClicked_minus8_plus1 == 1:
                        drawRectBishop_add(-16 + 2)
                        self.QueenWhiteClicked = 1
                        make_zero()
                if self.Qw.y > self.box17.y and self.Qw.x < self.box6.x:
                    if self.QueenWhiteClicked_minus8_plus1 == 1 and self.QueenWhiteClicked_minus16_plus2 == 1:
                        drawRectBishop_add(-24 + 3)
                        self.QueenWhiteClicked = 1
                        make_zero()
                if self.Qw.y > self.box25.y and self.Qw.x < self.box5.x:
                    if self.QueenWhiteClicked_minus8_plus1 == 1 and self.QueenWhiteClicked_minus16_plus2 == 1 and self.QueenWhiteClicked_minus24_plus3 == 1:
                        drawRectBishop_add(-32 + 4)
                        self.QueenWhiteClicked = 1
                        make_zero()
                if self.Qw.y > self.box33.y and self.Qw.x < self.box4.x:
                    if self.QueenWhiteClicked_minus8_plus1 == 1 and self.QueenWhiteClicked_minus16_plus2 == 1 and self.QueenWhiteClicked_minus24_plus3 == 1 and \
                            self.QueenWhiteClicked_minus32_plus4 == 1:
                        drawRectBishop_add(-40 + 5)
                        self.QueenWhiteClicked = 1
                        make_zero()
                if self.Qw.y > self.box41.y and self.Qw.x < self.box3.x:
                    if self.QueenWhiteClicked_minus8_plus1 == 1 and self.QueenWhiteClicked_minus16_plus2 == 1 and self.QueenWhiteClicked_minus24_plus3 == 1 and \
                            self.QueenWhiteClicked_minus32_plus4 == 1 and self.QueenWhiteClicked_minus40_plus5 == 1:
                        drawRectBishop_add(-48 + 6)
                        self.QueenWhiteClicked = 1
                        make_zero()
                if self.Qw.y > self.box49.y and self.Qw.x < self.box2.x:
                    if self.QueenWhiteClicked_minus8_plus1 == 1 and self.QueenWhiteClicked_minus16_plus2 == 1 and self.QueenWhiteClicked_minus24_plus3 == 1 and \
                            self.QueenWhiteClicked_minus32_plus4 == 1 and self.QueenWhiteClicked_minus40_plus5 == 1 and self.QueenWhiteClicked_minus48_plus6 == 1:
                        drawRectBishop_add(-56 + 7)
                        self.QueenWhiteClicked = 1
                        make_zero()

                if self.Qw.y > self.box1.y and self.Qw.x > self.box1.x:
                    drawRectBishop_add(-8 - 1)
                    self.QueenWhiteClicked = 1
                    make_zero()
                if self.Qw.y > self.box9.y and self.Qw.x > self.box2.x:
                    if self.QueenWhiteClicked_minus8_minus1 == 1:
                        drawRectBishop_add(-16 - 2)
                        self.QueenWhiteClicked = 1
                        make_zero()
                if self.Qw.y > self.box17.y and self.Qw.x > self.box3.x:
                    if self.QueenWhiteClicked_minus8_minus1 == 1 and self.QueenWhiteClicked_minus16_minus2 == 1:
                        drawRectBishop_add(-24 - 3)
                        self.QueenWhiteClicked = 1
                        make_zero()
                if self.Qw.y > self.box25.y and self.Qw.x > self.box4.x:
                    if self.QueenWhiteClicked_minus8_minus1 == 1 and self.QueenWhiteClicked_minus16_minus2 == 1 and self.QueenWhiteClicked_minus24_minus3 == 1:
                        drawRectBishop_add(-32 - 4)
                        self.QueenWhiteClicked = 1
                        make_zero()
                if self.Qw.y > self.box33.y and self.Qw.x > self.box5.x:
                    if self.QueenWhiteClicked_minus8_minus1 == 1 and self.QueenWhiteClicked_minus16_minus2 == 1 and self.QueenWhiteClicked_minus24_minus3 == 1 and \
                            self.QueenWhiteClicked_minus32_minus4 == 1:
                        drawRectBishop_add(-40 - 5)
                        self.QueenWhiteClicked = 1
                        make_zero()
                if self.Qw.y > self.box41.y and self.Qw.x > self.box6.x:
                    if self.QueenWhiteClicked_minus8_minus1 == 1 and self.QueenWhiteClicked_minus16_minus2 == 1 and self.QueenWhiteClicked_minus24_minus3 == 1 and \
                            self.QueenWhiteClicked_minus32_minus4 == 1 and self.QueenWhiteClicked_minus40_minus5 == 1:
                        drawRectBishop_add(-48 - 6)
                        self.QueenWhiteClicked = 1
                        make_zero()
                if self.Qw.y > self.box49.y and self.Qw.x > self.box7.x:
                    if self.QueenWhiteClicked_minus8_minus1 == 1 and self.QueenWhiteClicked_minus16_minus2 == 1 and self.QueenWhiteClicked_minus24_minus3 == 1 and \
                            self.QueenWhiteClicked_minus32_minus4 == 1 and self.QueenWhiteClicked_minus40_minus5 == 1 and self.QueenWhiteClicked_minus48_minus6 == 1:
                        drawRectBishop_add(-56 - 7)
                        self.QueenWhiteClicked = 1
                        make_zero()

                # check if white pieces can be cut or not
                if self.Qw.y < self.box57.y and self.Qw.x < self.box8.x:
                    check(8 + 1)
                if self.Qw.y < self.box49.y and self.Qw.x < self.box7.x:
                    if self.QueenWhiteClicked_plus8_plus1 == 1:
                        check(16 + 2)
                if self.Qw.y < self.box41.y and self.Qw.x < self.box6.x:
                    if self.QueenWhiteClicked_plus8_plus1 == 1 and self.QueenWhiteClicked_plus16_plus2 == 1:
                        check(24 + 3)
                if self.Qw.y < self.box33.y and self.Qw.x < self.box5.x:
                    if self.QueenWhiteClicked_plus8_plus1 == 1 and self.QueenWhiteClicked_plus16_plus2 == 1 and self.QueenWhiteClicked_plus24_plus3 == 1:
                        check(32 + 4)
                if self.Qw.y < self.box25.y and self.Qw.x < self.box4.x:
                    if self.QueenWhiteClicked_plus8_plus1 == 1 and self.QueenWhiteClicked_plus16_plus2 == 1 and self.QueenWhiteClicked_plus24_plus3 == 1 and \
                            self.QueenWhiteClicked_plus32_plus4 == 1:
                        check(40 + 5)
                if self.Qw.y < self.box17.y and self.Qw.x < self.box3.x:
                    if self.QueenWhiteClicked_plus8_plus1 == 1 and self.QueenWhiteClicked_plus16_plus2 == 1 and self.QueenWhiteClicked_plus24_plus3 == 1 and \
                            self.QueenWhiteClicked_plus32_plus4 == 1 and self.QueenWhiteClicked_plus40_plus5 == 1:
                        check(48 + 6)
                if self.Qw.y < self.box9.y and self.Qw.x < self.box2.x:
                    if self.QueenWhiteClicked_plus8_plus1 == 1 and self.QueenWhiteClicked_plus16_plus2 == 1 and self.QueenWhiteClicked_plus24_plus3 == 1 and \
                            self.QueenWhiteClicked_plus32_plus4 == 1 and self.QueenWhiteClicked_plus40_plus5 == 1 and self.QueenWhiteClicked_plus48_plus6 == 1:
                        check(56 + 7)

                if self.Qw.y < self.box57.y and self.Qw.x > self.box1.x:
                    check(8 - 1)
                if self.Qw.y < self.box49.y and self.Qw.x > self.box2.x:
                    if self.QueenWhiteClicked_plus8_minus1 == 1:
                        check(16 - 2)
                if self.Qw.y < self.box41.y and self.Qw.x > self.box3.x:
                    if self.QueenWhiteClicked_plus8_minus1 == 1 and self.QueenWhiteClicked_plus16_minus2 == 1:
                        check(24 - 3)
                if self.Qw.y < self.box33.y and self.Qw.x > self.box4.x:
                    if self.QueenWhiteClicked_plus8_minus1 == 1 and self.QueenWhiteClicked_plus16_minus2 == 1 and self.QueenWhiteClicked_plus24_minus3 == 1:
                        check(32 - 4)
                if self.Qw.y < self.box25.y and self.Qw.x > self.box5.x:
                    if self.QueenWhiteClicked_plus8_minus1 == 1 and self.QueenWhiteClicked_plus16_minus2 == 1 and self.QueenWhiteClicked_plus24_minus3 == 1 and \
                            self.QueenWhiteClicked_plus32_minus4 == 1:
                        check(40 - 5)
                if self.Qw.y < self.box17.y and self.Qw.x > self.box6.x:
                    if self.QueenWhiteClicked_plus8_minus1 == 1 and self.QueenWhiteClicked_plus16_minus2 == 1 and self.QueenWhiteClicked_plus24_minus3 == 1 and \
                            self.QueenWhiteClicked_plus32_minus4 == 1 and self.QueenWhiteClicked_plus40_minus5 == 1:
                        check(48 - 6)
                if self.Qw.y < self.box9.y and self.Qw.x > self.box7.x:
                    if self.QueenWhiteClicked_plus8_minus1 == 1 and self.QueenWhiteClicked_plus16_minus2 == 1 and self.QueenWhiteClicked_plus24_minus3 == 1 and \
                            self.QueenWhiteClicked_plus32_minus4 == 1 and self.QueenWhiteClicked_plus40_minus5 == 1 and self.QueenWhiteClicked_plus48_minus6 == 1:
                        check(56 - 7)

                if self.Qw.y > self.box1.y and self.Qw.x < self.box8.x:
                    check(-8 + 1)
                if self.Qw.y > self.box9.y and self.Qw.x < self.box7.x:
                    if self.QueenWhiteClicked_minus8_plus1 == 1:
                        check(-16 + 2)
                if self.Qw.y > self.box17.y and self.Qw.x < self.box6.x:
                    if self.QueenWhiteClicked_minus8_plus1 == 1 and self.QueenWhiteClicked_minus16_plus2 == 1:
                        check(-24 + 3)
                if self.Qw.y > self.box25.y and self.Qw.x < self.box5.x:
                    if self.QueenWhiteClicked_minus8_plus1 == 1 and self.QueenWhiteClicked_minus16_plus2 == 1 and self.QueenWhiteClicked_minus24_plus3 == 1:
                        check(-32 + 4)
                if self.Qw.y > self.box33.y and self.Qw.x < self.box4.x:
                    if self.QueenWhiteClicked_minus8_plus1 == 1 and self.QueenWhiteClicked_minus16_plus2 == 1 and self.QueenWhiteClicked_minus24_plus3 == 1 and \
                            self.QueenWhiteClicked_minus32_plus4 == 1:
                        check(-40 + 5)
                if self.Qw.y > self.box41.y and self.Qw.x < self.box3.x:
                    if self.QueenWhiteClicked_minus8_plus1 == 1 and self.QueenWhiteClicked_minus16_plus2 == 1 and self.QueenWhiteClicked_minus24_plus3 == 1 and \
                            self.QueenWhiteClicked_minus32_plus4 == 1 and self.QueenWhiteClicked_minus40_plus5 == 1:
                        check(-48 + 6)
                if self.Qw.y > self.box49.y and self.Qw.x < self.box2.x:
                    if self.QueenWhiteClicked_minus8_plus1 == 1 and self.QueenWhiteClicked_minus16_plus2 == 1 and self.QueenWhiteClicked_minus24_plus3 == 1 and \
                            self.QueenWhiteClicked_minus32_plus4 == 1 and self.QueenWhiteClicked_minus40_plus5 == 1 and self.QueenWhiteClicked_minus48_plus6 == 1:
                        check(-56 + 7)

                if self.Qw.y > self.box1.y and self.Qw.x > self.box1.x:
                    check(-8 - 1)
                if self.Qw.y > self.box9.y and self.Qw.x > self.box2.x:
                    if self.QueenWhiteClicked_minus8_minus1 == 1:
                        check(-16 - 2)
                if self.Qw.y > self.box17.y and self.Qw.x > self.box3.x:
                    if self.QueenWhiteClicked_minus8_minus1 == 1 and self.QueenWhiteClicked_minus16_minus2 == 1:
                        check(-24 - 3)
                if self.Qw.y > self.box25.y and self.Qw.x > self.box4.x:
                    if self.QueenWhiteClicked_minus8_minus1 == 1 and self.QueenWhiteClicked_minus16_minus2 == 1 and self.QueenWhiteClicked_minus24_minus3 == 1:
                        check(-32 - 4)
                if self.Qw.y > self.box33.y and self.Qw.x > self.box5.x:
                    if self.QueenWhiteClicked_minus8_minus1 == 1 and self.QueenWhiteClicked_minus16_minus2 == 1 and self.QueenWhiteClicked_minus24_minus3 == 1 and \
                            self.QueenWhiteClicked_minus32_minus4 == 1:
                        check(-40 - 5)
                if self.Qw.y > self.box41.y and self.Qw.x > self.box6.x:
                    if self.QueenWhiteClicked_minus8_minus1 == 1 and self.QueenWhiteClicked_minus16_minus2 == 1 and self.QueenWhiteClicked_minus24_minus3 == 1 and \
                            self.QueenWhiteClicked_minus32_minus4 == 1 and self.QueenWhiteClicked_minus40_minus5 == 1:
                        check(-48 - 6)
                if self.Qw.y > self.box49.y and self.Qw.x > self.box7.x:
                    if self.QueenWhiteClicked_minus8_minus1 == 1 and self.QueenWhiteClicked_minus16_minus2 == 1 and self.QueenWhiteClicked_minus24_minus3 == 1 and \
                            self.QueenWhiteClicked_minus32_minus4 == 1 and self.QueenWhiteClicked_minus40_minus5 == 1 and self.QueenWhiteClicked_minus48_minus6 == 1:
                        check(-56 - 7)

        # move the queen
        if self.QueenWhiteClicked == 1:
            # cut the pieces
            if self.QueenWhiteClicked_cut == 1:
                # along y-axis
                if self.Qw.y < self.box57.y:
                    removeBlackPiece_add(8)
                if self.Qw.y < self.box49.y:
                    removeBlackPiece_add(16)
                if self.Qw.y < self.box41.y:
                    removeBlackPiece_add(24)
                if self.Qw.y < self.box33.y:
                    removeBlackPiece_add(32)
                if self.Qw.y < self.box25.y:
                    removeBlackPiece_add(40)
                if self.Qw.y < self.box17.y:
                    removeBlackPiece_add(48)
                if self.Qw.y < self.box9.y:
                    removeBlackPiece_add(56)

                if self.Qw.y > self.box1.y:
                    removeBlackPiece_sub(8)
                if self.Qw.y > self.box9.y:
                    removeBlackPiece_sub(16)
                if self.Qw.y > self.box17.y:
                    removeBlackPiece_sub(24)
                if self.Qw.y > self.box25.y:
                    removeBlackPiece_sub(32)
                if self.Qw.y > self.box33.y:
                    removeBlackPiece_sub(40)
                if self.Qw.y > self.box41.y:
                    removeBlackPiece_sub(48)
                if self.Qw.y > self.box49.y:
                    removeBlackPiece_sub(56)

                # along x-axis
                if self.Qw.x < self.box8.x:
                    removeBlackPiece_add(1)
                if self.Qw.x < self.box7.x:
                    removeBlackPiece_add(2)
                if self.Qw.x < self.box6.x:
                    removeBlackPiece_add(3)
                if self.Qw.x < self.box5.x:
                    removeBlackPiece_add(4)
                if self.Qw.x < self.box4.x:
                    removeBlackPiece_add(5)
                if self.Qw.x < self.box3.x:
                    removeBlackPiece_add(6)
                if self.Qw.x < self.box2.x:
                    removeBlackPiece_add(7)

                if self.Qw.x > self.box1.x:
                    removeBlackPiece_sub(1)
                if self.Qw.x > self.box2.x:
                    removeBlackPiece_sub(2)
                if self.Qw.x > self.box3.x:
                    removeBlackPiece_sub(3)
                if self.Qw.x > self.box4.x:
                    removeBlackPiece_sub(4)
                if self.Qw.x > self.box5.x:
                    removeBlackPiece_sub(5)
                if self.Qw.x > self.box6.x:
                    removeBlackPiece_sub(6)
                if self.Qw.x > self.box7.x:
                    removeBlackPiece_sub(7)

                if self.Qw.y < self.box57.y and self.Qw.x < self.box8.x:
                    remove(8 + 1)
                if self.Qw.y < self.box49.y and self.Qw.x < self.box7.x:
                    remove(16 + 2)
                if self.Qw.y < self.box41.y and self.Qw.x < self.box6.x:
                    remove(24 + 3)
                if self.Qw.y < self.box33.y and self.Qw.x < self.box5.x:
                    remove(32 + 4)
                if self.Qw.y < self.box25.y and self.Qw.x < self.box4.x:
                    remove(40 + 5)
                if self.Qw.y < self.box17.y and self.Qw.x < self.box3.x:
                    remove(48 + 6)
                if self.Qw.y < self.box9.y and self.Qw.x < self.box2.x:
                    remove(56 + 7)

                if self.Qw.y < self.box57.y and self.Qw.x > self.box1.x:
                    remove(8 - 1)
                if self.Qw.y < self.box49.y and self.Qw.x > self.box2.x:
                    remove(16 - 2)
                if self.Qw.y < self.box41.y and self.Qw.x > self.box3.x:
                    remove(24 - 3)
                if self.Qw.y < self.box33.y and self.Qw.x > self.box4.x:
                    remove(32 - 4)
                if self.Qw.y < self.box25.y and self.Qw.x > self.box5.x:
                    remove(40 - 5)
                if self.Qw.y < self.box17.y and self.Qw.x > self.box6.x:
                    remove(48 - 6)
                if self.Qw.y < self.box9.y and self.Qw.x > self.box7.x:
                    remove(56 - 7)

                if self.Qw.y > self.box1.y and self.Qw.x < self.box8.x:
                    remove(-8 + 1)
                if self.Qw.y > self.box9.y and self.Qw.x < self.box7.x:
                    remove(-16 + 2)
                if self.Qw.y > self.box17.y and self.Qw.x < self.box6.x:
                    remove(-24 + 3)
                if self.Qw.y > self.box25.y and self.Qw.x < self.box5.x:
                    remove(-32 + 4)
                if self.Qw.y > self.box33.y and self.Qw.x < self.box4.x:
                    remove(-40 + 5)
                if self.Qw.y > self.box41.y and self.Qw.x < self.box3.x:
                    remove(-48 + 6)
                if self.Qw.y > self.box49.y and self.Qw.x < self.box2.x:
                    remove(-56 + 7)

                if self.Qw.y > self.box1.y and self.Qw.x > self.box1.x:
                    remove(-8 - 1)
                if self.Qw.y > self.box9.y and self.Qw.x > self.box2.x:
                    remove(-16 - 2)
                if self.Qw.y > self.box17.y and self.Qw.x > self.box3.x:
                    remove(-24 - 3)
                if self.Qw.y > self.box25.y and self.Qw.x > self.box4.x:
                    remove(-32 - 4)
                if self.Qw.y > self.box33.y and self.Qw.x > self.box5.x:
                    remove(-40 - 5)
                if self.Qw.y > self.box41.y and self.Qw.x > self.box6.x:
                    remove(-48 - 6)
                if self.Qw.y > self.box49.y and self.Qw.x > self.box7.x:
                    remove(-56 - 7)

            if self.Qw.y < self.box57.y and self.Qw.x < self.box8.x:
                move(8 + 1)
            if self.Qw.y < self.box49.y and self.Qw.x < self.box7.x:
                move(16 + 2)
            if self.Qw.y < self.box41.y and self.Qw.x < self.box6.x:
                move(24 + 3)
            if self.Qw.y < self.box33.y and self.Qw.x < self.box5.x:
                move(32 + 4)
            if self.Qw.y < self.box25.y and self.Qw.x < self.box4.x:
                move(40 + 5)
            if self.Qw.y < self.box17.y and self.Qw.x < self.box3.x:
                move(48 + 6)
            if self.Qw.y < self.box9.y and self.Qw.x < self.box2.x:
                move(56 + 7)

            if self.Qw.y < self.box57.y and self.Qw.x > self.box1.x:
                move(8 - 1)
            if self.Qw.y < self.box49.y and self.Qw.x > self.box2.x:
                move(16 - 2)
            if self.Qw.y < self.box41.y and self.Qw.x > self.box3.x:
                move(24 - 3)
            if self.Qw.y < self.box33.y and self.Qw.x > self.box4.x:
                move(32 - 4)
            if self.Qw.y < self.box25.y and self.Qw.x > self.box5.x:
                move(40 - 5)
            if self.Qw.y < self.box17.y and self.Qw.x > self.box6.x:
                move(48 - 6)
            if self.Qw.y < self.box9.y and self.Qw.x > self.box7.x:
                move(56 - 7)

            if self.Qw.y > self.box1.y and self.Qw.x < self.box8.x:
                move(-8 + 1)
            if self.Qw.y > self.box9.y and self.Qw.x < self.box7.x:
                move(-16 + 2)
            if self.Qw.y > self.box17.y and self.Qw.x < self.box6.x:
                move(-24 + 3)
            if self.Qw.y > self.box25.y and self.Qw.x < self.box5.x:
                move(-32 + 4)
            if self.Qw.y > self.box33.y and self.Qw.x < self.box4.x:
                move(-40 + 5)
            if self.Qw.y > self.box41.y and self.Qw.x < self.box3.x:
                move(-48 + 6)
            if self.Qw.y > self.box49.y and self.Qw.x < self.box2.x:
                move(-56 + 7)

            if self.Qw.y > self.box1.y and self.Qw.x > self.box1.x:
                move(-8 - 1)
            if self.Qw.y > self.box9.y and self.Qw.x > self.box2.x:
                move(-16 - 2)
            if self.Qw.y > self.box17.y and self.Qw.x > self.box3.x:
                move(-24 - 3)
            if self.Qw.y > self.box25.y and self.Qw.x > self.box4.x:
                move(-32 - 4)
            if self.Qw.y > self.box33.y and self.Qw.x > self.box5.x:
                move(-40 - 5)
            if self.Qw.y > self.box41.y and self.Qw.x > self.box6.x:
                move(-48 - 6)
            if self.Qw.y > self.box49.y and self.Qw.x > self.box7.x:
                move(-56 - 7)

            # along y-axis(+)
            if self.Qw.y < self.box57.y:
                move(8)
            if self.Qw.y < self.box49.y:
                move(16)
            if self.Qw.y < self.box41.y:
                move(24)
            if self.Qw.y < self.box33.y:
                move(32)
            if self.Qw.y < self.box25.y:
                move(40)
            if self.Qw.y < self.box17.y:
                move(48)
            if self.Qw.y < self.box9.y:
                move(56)

            # along y-axis(-)
            if self.Qw.y > self.box1.y:
                move(-8)
            if self.Qw.y > self.box9.y:
                move(-16)
            if self.Qw.y > self.box17.y:
                move(-24)
            if self.Qw.y > self.box25.y:
                move(-32)
            if self.Qw.y > self.box33.y:
                move(-40)
            if self.Qw.y > self.box41.y:
                move(-48)
            if self.Qw.y > self.box49.y:
                move(-56)

            # along x-axis(+)
            if self.Qw.x < self.box8.x:
                move(1)
            if self.Qw.x < self.box7.x:
                move(2)
            if self.Qw.x < self.box6.x:
                move(3)
            if self.Qw.x < self.box5.x:
                move(4)
            if self.Qw.x < self.box4.x:
                move(5)
            if self.Qw.x < self.box3.x:
                move(6)
            if self.Qw.x < self.box2.x:
                move(7)

            # along x-axis(-)
            if self.Qw.x > self.box1.x:
                move(-1)
            if self.Qw.x > self.box2.x:
                move(-2)
            if self.Qw.x > self.box3.x:
                move(-3)
            if self.Qw.x > self.box4.x:
                move(-4)
            if self.Qw.x > self.box5.x:
                move(-5)
            if self.Qw.x > self.box6.x:
                move(-6)
            if self.Qw.x > self.box7.x:
                move(-7)

    def drawGameWindow(self):
        self.window.fill(self.silver)
        self.drawChessBoard()
        self.drawPlayer()

        self.pawnBMovements()
        self.kingBMovements()
        self.knightB1Movements()
        self.knightB2Movements()
        self.rookB1Movements()
        self.rookB2Movements()
        self.bishopB1Movements()
        self.bishopB2Movements()
        self.queenBMovements()

        self.pawnWMovements()
        self.kingWMovements()
        self.knightW1Movements()
        self.knightW2Movements()
        self.rookW1Movements()
        self.rookW2Movements()
        self.bishopW1Movements()
        self.bishopW2Movements()
        self.queenWMovements()

        if self.KingBlack_isDead == 1:
            self.msg("White Won")
            pygame.display.flip()
            pygame.event.pump()
            time.sleep(5)
            self.run = False
        if self.KingWhite_isDead == 1:
            self.msg("Black Won")
            pygame.display.flip()
            pygame.event.pump()
            time.sleep(5)
            self.run = False

        self.bugFix()
        pygame.draw.rect(self.window, self.charcoalBlue, (0, 0, 8 * self.boxSize, 8 * self.boxSize), width=3, border_radius=2)

    def gameLoop(self):
        while self.run:
            for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    self.run = False
                if event.type == pygame.KEYDOWN and (event.key == K_ESCAPE):
                    self.run = False

            self.drawGameWindow()
            pygame.display.update()
            self.clock.tick(self.fps)
        pygame.quit()


game = MainGame()
game.gameLoop()
